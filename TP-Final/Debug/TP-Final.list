
TP-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008d70  08008d70  00018d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ac  080091ac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080091ac  080091ac  000191ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091b4  080091b4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091b8  080091b8  000191b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080091bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000990  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b64  20000b64  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014bfb  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035b1  00000000  00000000  00034e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001168  00000000  00000000  000383f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d58  00000000  00000000  00039560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029360  00000000  00000000  0003a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001862b  00000000  00000000  00063618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed949  00000000  00000000  0007bc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005884  00000000  00000000  0016958c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0016ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d58 	.word	0x08008d58

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008d58 	.word	0x08008d58

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <MX_ADC1_Init+0xa0>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <MX_ADC1_Init+0xa4>)
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc6:	480e      	ldr	r0, [pc, #56]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fc8:	f001 f9b8 	bl	800233c <HAL_ADC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fd2:	f000 fb7f 	bl	80016d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fe8:	f001 fb8a 	bl	8002700 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ff2:	f000 fb6f 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200001f0 	.word	0x200001f0
 8001004:	40012000 	.word	0x40012000
 8001008:	0f000001 	.word	0x0f000001

0800100c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_ADC_MspInit+0x7c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d127      	bne.n	800107e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_ADC_MspInit+0x80>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001066:	2308      	movs	r3, #8
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_ADC_MspInit+0x84>)
 800107a:	f002 f97d 	bl	8003378 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40012000 	.word	0x40012000
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000

08001094 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_ETH_Init+0x84>)
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <MX_ETH_Init+0x88>)
 800109c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_ETH_Init+0x8c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_ETH_Init+0x8c>)
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_ETH_Init+0x8c>)
 80010ac:	22e1      	movs	r2, #225	; 0xe1
 80010ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_ETH_Init+0x8c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_ETH_Init+0x8c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_ETH_Init+0x8c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_ETH_Init+0x84>)
 80010c4:	4a16      	ldr	r2, [pc, #88]	; (8001120 <MX_ETH_Init+0x8c>)
 80010c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_ETH_Init+0x84>)
 80010ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_ETH_Init+0x84>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <MX_ETH_Init+0x90>)
 80010d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_ETH_Init+0x84>)
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <MX_ETH_Init+0x94>)
 80010da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_ETH_Init+0x84>)
 80010de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_ETH_Init+0x84>)
 80010e6:	f001 fe1f 	bl	8002d28 <HAL_ETH_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010f0:	f000 faf0 	bl	80016d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010f4:	2238      	movs	r2, #56	; 0x38
 80010f6:	2100      	movs	r1, #0
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_ETH_Init+0x98>)
 80010fa:	f005 fd32 	bl	8006b62 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_ETH_Init+0x98>)
 8001100:	2221      	movs	r2, #33	; 0x21
 8001102:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_ETH_Init+0x98>)
 8001106:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800110a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_ETH_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200003b0 	.word	0x200003b0
 800111c:	40028000 	.word	0x40028000
 8001120:	20000460 	.word	0x20000460
 8001124:	200002d8 	.word	0x200002d8
 8001128:	20000238 	.word	0x20000238
 800112c:	20000378 	.word	0x20000378

08001130 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a55      	ldr	r2, [pc, #340]	; (80012a4 <HAL_ETH_MspInit+0x174>)
 800114e:	4293      	cmp	r3, r2
 8001150:	f040 80a4 	bne.w	800129c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	623b      	str	r3, [r7, #32]
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800117a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a44      	ldr	r2, [pc, #272]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a3d      	ldr	r2, [pc, #244]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a36      	ldr	r2, [pc, #216]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001218:	2332      	movs	r3, #50	; 0x32
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001228:	230b      	movs	r3, #11
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	481e      	ldr	r0, [pc, #120]	; (80012ac <HAL_ETH_MspInit+0x17c>)
 8001234:	f002 f8a0 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001238:	2386      	movs	r3, #134	; 0x86
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001248:	230b      	movs	r3, #11
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	4817      	ldr	r0, [pc, #92]	; (80012b0 <HAL_ETH_MspInit+0x180>)
 8001254:	f002 f890 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126a:	230b      	movs	r3, #11
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <HAL_ETH_MspInit+0x184>)
 8001276:	f002 f87f 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800127a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128c:	230b      	movs	r3, #11
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <HAL_ETH_MspInit+0x188>)
 8001298:	f002 f86e 	bl	8003378 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800129c:	bf00      	nop
 800129e:	3738      	adds	r7, #56	; 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40028000 	.word	0x40028000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40021800 	.word	0x40021800

080012bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a4b      	ldr	r2, [pc, #300]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b45      	ldr	r3, [pc, #276]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a44      	ldr	r2, [pc, #272]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b42      	ldr	r3, [pc, #264]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a3d      	ldr	r2, [pc, #244]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <MX_GPIO_Init+0x14c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <MX_GPIO_Init+0x14c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a36      	ldr	r2, [pc, #216]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <MX_GPIO_Init+0x14c>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a28      	ldr	r2, [pc, #160]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001380:	4822      	ldr	r0, [pc, #136]	; (800140c <MX_GPIO_Init+0x150>)
 8001382:	f002 f9a5 	bl	80036d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	4821      	ldr	r0, [pc, #132]	; (8001410 <MX_GPIO_Init+0x154>)
 800138c:	f002 f9a0 	bl	80036d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001396:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	481b      	ldr	r0, [pc, #108]	; (8001414 <MX_GPIO_Init+0x158>)
 80013a8:	f001 ffe6 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_GPIO_Init+0x150>)
 80013c6:	f001 ffd7 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0x154>)
 80013e2:	f001 ffc9 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_GPIO_Init+0x154>)
 80013fa:	f001 ffbd 	bl	8003378 <HAL_GPIO_Init>

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400
 8001410:	40021800 	.word	0x40021800
 8001414:	40020800 	.word	0x40020800

08001418 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_I2C1_Init+0x74>)
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <MX_I2C1_Init+0x78>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_I2C1_Init+0x74>)
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <MX_I2C1_Init+0x7c>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_I2C1_Init+0x74>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_I2C1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_I2C1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_I2C1_Init+0x74>)
 8001456:	f002 f955 	bl	8003704 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 f938 	bl	80016d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001464:	2100      	movs	r1, #0
 8001466:	4809      	ldr	r0, [pc, #36]	; (800148c <MX_I2C1_Init+0x74>)
 8001468:	f003 f8fb 	bl	8004662 <HAL_I2CEx_ConfigAnalogFilter>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001472:	f000 f92f 	bl	80016d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001476:	2100      	movs	r1, #0
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_I2C1_Init+0x74>)
 800147a:	f003 f92e 	bl	80046da <HAL_I2CEx_ConfigDigitalFilter>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001484:	f000 f926 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000468 	.word	0x20000468
 8001490:	40005400 	.word	0x40005400
 8001494:	000186a0 	.word	0x000186a0

08001498 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_I2C_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12c      	bne.n	8001514 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014dc:	2312      	movs	r3, #18
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e8:	2304      	movs	r3, #4
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <HAL_I2C_MspInit+0x8c>)
 80014f4:	f001 ff40 	bl	8003378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_I2C_MspInit+0x88>)
 8001502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_I2C_MspInit+0x88>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40005400 	.word	0x40005400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
//	uint8_t opcion = OPCION_MOSTRAR_FECHA;
//	bool_t en_pant_opciones = true;
//	bool_t en_pant_fecha = false;
//	bool_t en_pant_temp = false;
//	bool_t boton_presionado = false;
	uint8_t btn_pres = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f000 fe6d 	bl	8002210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f863 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153a:	f7ff febf 	bl	80012bc <MX_GPIO_Init>
  MX_ETH_Init();
 800153e:	f7ff fda9 	bl	8001094 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001542:	f000 fb05 	bl	8001b50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001546:	f000 fb75 	bl	8001c34 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800154a:	f7ff ff65 	bl	8001418 <MX_I2C1_Init>
  MX_ADC1_Init();
 800154e:	f7ff fd09 	bl	8000f64 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f000 fece 	bl	80022f4 <HAL_Delay>
    lcd_init();
 8001558:	f000 fc9c 	bl	8001e94 <lcd_init>
    char mensaje[] = "Hola";
 800155c:	4a23      	ldr	r2, [pc, #140]	; (80015ec <main+0xc4>)
 800155e:	463b      	mov	r3, r7
 8001560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001564:	6018      	str	r0, [r3, #0]
 8001566:	3304      	adds	r3, #4
 8001568:	7019      	strb	r1, [r3, #0]
    lcd_enviar_cadena(mensaje);
 800156a:	463b      	mov	r3, r7
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fd2f 	bl	8001fd0 <lcd_enviar_cadena>
    lcd_pos_cursor(1,5);
 8001572:	2105      	movs	r1, #5
 8001574:	2001      	movs	r0, #1
 8001576:	f000 fd40 	bl	8001ffa <lcd_pos_cursor>
    lcd_enviar_cadena("mundo");
 800157a:	481d      	ldr	r0, [pc, #116]	; (80015f0 <main+0xc8>)
 800157c:	f000 fd28 	bl	8001fd0 <lcd_enviar_cadena>
    HAL_Delay(500);
 8001580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001584:	f000 feb6 	bl	80022f4 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  lcd_borrar();
//	  lcd_pos_cursor(0,0);
	  btn_pres = obtener_boton_presionado();
 8001588:	f000 fc24 	bl	8001dd4 <obtener_boton_presionado>
 800158c:	4603      	mov	r3, r0
 800158e:	77fb      	strb	r3, [r7, #31]
	  btn_str =  str_boton(btn_pres);
 8001590:	7ffb      	ldrb	r3, [r7, #31]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fc46 	bl	8001e24 <str_boton>
 8001598:	61b8      	str	r0, [r7, #24]

	  //sprintf(msg, "Valor: %lu\r\n", btn_adc);
	  //HAL_UART_Transmit(&huart3, msg, strlen(msg), 1000);
	  HAL_UART_Transmit(&huart3, btn_str, strlen(btn_str), 1000);
 800159a:	69b8      	ldr	r0, [r7, #24]
 800159c:	f7fe fe78 	bl	8000290 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a8:	69b9      	ldr	r1, [r7, #24]
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <main+0xcc>)
 80015ac:	f003 fed7 	bl	800535e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (char *)"\r\n", strlen("\r\n"), 1000);
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	2202      	movs	r2, #2
 80015b6:	4910      	ldr	r1, [pc, #64]	; (80015f8 <main+0xd0>)
 80015b8:	480e      	ldr	r0, [pc, #56]	; (80015f4 <main+0xcc>)
 80015ba:	f003 fed0 	bl	800535e <HAL_UART_Transmit>

//	  lcd_enviar_cadena(btn_str);
//	  HAL_Delay(500);

	  switch(mostrar_pantalla){
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <main+0xd4>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d00c      	beq.n	80015e0 <main+0xb8>
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	dc0d      	bgt.n	80015e6 <main+0xbe>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <main+0xac>
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d003      	beq.n	80015da <main+0xb2>
	          break;
	      case PAGINA_TEMP:
	    	  pag_temp();
	          break;
	      default:
	          break;
 80015d2:	e008      	b.n	80015e6 <main+0xbe>
	    	  pag_opciones();
 80015d4:	f000 f884 	bl	80016e0 <pag_opciones>
	          break;
 80015d8:	e006      	b.n	80015e8 <main+0xc0>
	    	  pag_fecha();
 80015da:	f000 f90b 	bl	80017f4 <pag_fecha>
	          break;
 80015de:	e003      	b.n	80015e8 <main+0xc0>
	    	  pag_temp();
 80015e0:	f000 f952 	bl	8001888 <pag_temp>
	          break;
 80015e4:	e000      	b.n	80015e8 <main+0xc0>
	          break;
 80015e6:	bf00      	nop
	  btn_pres = obtener_boton_presionado();
 80015e8:	e7ce      	b.n	8001588 <main+0x60>
 80015ea:	bf00      	nop
 80015ec:	08008d7c 	.word	0x08008d7c
 80015f0:	08008d70 	.word	0x08008d70
 80015f4:	200004c4 	.word	0x200004c4
 80015f8:	08008d78 	.word	0x08008d78
 80015fc:	200004bc 	.word	0x200004bc

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b094      	sub	sp, #80	; 0x50
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	2230      	movs	r2, #48	; 0x30
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f005 faa7 	bl	8006b62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <SystemClock_Config+0xcc>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <SystemClock_Config+0xcc>)
 800162e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <SystemClock_Config+0xcc>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <SystemClock_Config+0xd0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <SystemClock_Config+0xd0>)
 800164a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <SystemClock_Config+0xd0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800165c:	2301      	movs	r3, #1
 800165e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001660:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001666:	2302      	movs	r3, #2
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001670:	2304      	movs	r3, #4
 8001672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001674:	23a8      	movs	r3, #168	; 0xa8
 8001676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001678:	2302      	movs	r3, #2
 800167a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800167c:	2307      	movs	r3, #7
 800167e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	4618      	mov	r0, r3
 8001686:	f003 f985 	bl	8004994 <HAL_RCC_OscConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001690:	f000 f820 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001694:	230f      	movs	r3, #15
 8001696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001698:	2302      	movs	r3, #2
 800169a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2105      	movs	r1, #5
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fbe6 	bl	8004e84 <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016be:	f000 f809 	bl	80016d4 <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3750      	adds	r7, #80	; 0x50
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40007000 	.word	0x40007000

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <pag_opciones>:
#include "pantallas.h"

void pag_opciones(void){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
    /*
    |>Mostrar fecha  |
    | Mostrar temp   |
    */
	bool_t opcion_seleccionada = false;
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]
	uint8_t boton = BOT_NINGUNO;
 80016ea:	2300      	movs	r3, #0
 80016ec:	717b      	strb	r3, [r7, #5]
	uint8_t pos_cursor = OPCION_MOSTRAR_FECHA;
 80016ee:	2300      	movs	r3, #0
 80016f0:	71bb      	strb	r3, [r7, #6]

	lcd_borrar();
 80016f2:	f000 fca2 	bl	800203a <lcd_borrar>
	lcd_pos_cursor(0, 1);
 80016f6:	2101      	movs	r1, #1
 80016f8:	2000      	movs	r0, #0
 80016fa:	f000 fc7e 	bl	8001ffa <lcd_pos_cursor>
    lcd_enviar_cadena(MSJ_MOSTRAR_FECHA);
 80016fe:	4826      	ldr	r0, [pc, #152]	; (8001798 <pag_opciones+0xb8>)
 8001700:	f000 fc66 	bl	8001fd0 <lcd_enviar_cadena>
    lcd_pos_cursor(1, 1);
 8001704:	2101      	movs	r1, #1
 8001706:	2001      	movs	r0, #1
 8001708:	f000 fc77 	bl	8001ffa <lcd_pos_cursor>
    lcd_enviar_cadena(MSJ_MOSTRAR_TEMP);
 800170c:	4823      	ldr	r0, [pc, #140]	; (800179c <pag_opciones+0xbc>)
 800170e:	f000 fc5f 	bl	8001fd0 <lcd_enviar_cadena>
	pag_fila_cursor(pos_cursor);
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f845 	bl	80017a4 <pag_fila_cursor>

    while(opcion_seleccionada == false){
 800171a:	e032      	b.n	8001782 <pag_opciones+0xa2>
    	boton = obtener_boton_presionado();
 800171c:	f000 fb5a 	bl	8001dd4 <obtener_boton_presionado>
 8001720:	4603      	mov	r3, r0
 8001722:	717b      	strb	r3, [r7, #5]

    	switch (boton){
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d006      	beq.n	8001738 <pag_opciones+0x58>
 800172a:	2b03      	cmp	r3, #3
 800172c:	dc28      	bgt.n	8001780 <pag_opciones+0xa0>
 800172e:	2b01      	cmp	r3, #1
 8001730:	d016      	beq.n	8001760 <pag_opciones+0x80>
 8001732:	2b02      	cmp	r3, #2
 8001734:	d00a      	beq.n	800174c <pag_opciones+0x6c>
 8001736:	e023      	b.n	8001780 <pag_opciones+0xa0>
    	case BOT_ABAJO :
    		if(pos_cursor == OPCION_MOSTRAR_FECHA){
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d121      	bne.n	8001782 <pag_opciones+0xa2>
    			pos_cursor = OPCION_MOSTRAR_TEMP;
 800173e:	2301      	movs	r3, #1
 8001740:	71bb      	strb	r3, [r7, #6]
    			pag_fila_cursor(pos_cursor);
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f82d 	bl	80017a4 <pag_fila_cursor>
    		}
    		break;
 800174a:	e01a      	b.n	8001782 <pag_opciones+0xa2>
    	case BOT_ARRIBA :
    		if(pos_cursor == OPCION_MOSTRAR_TEMP){
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d117      	bne.n	8001782 <pag_opciones+0xa2>
    			pos_cursor = OPCION_MOSTRAR_FECHA;
 8001752:	2300      	movs	r3, #0
 8001754:	71bb      	strb	r3, [r7, #6]
    			pag_fila_cursor(pos_cursor);
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f823 	bl	80017a4 <pag_fila_cursor>
    		}
    		break;
 800175e:	e010      	b.n	8001782 <pag_opciones+0xa2>
    	case BOT_ADELANTE :
    		if(pos_cursor == OPCION_MOSTRAR_FECHA){
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <pag_opciones+0x8e>
    			mostrar_pantalla = PAGINA_FECHA;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <pag_opciones+0xc0>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e005      	b.n	800177a <pag_opciones+0x9a>
    		}
    		else if(pos_cursor == OPCION_MOSTRAR_TEMP){
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <pag_opciones+0x9a>
    			mostrar_pantalla = PAGINA_TEMP;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <pag_opciones+0xc0>)
 8001776:	2202      	movs	r2, #2
 8001778:	701a      	strb	r2, [r3, #0]
    		}
    		opcion_seleccionada = true;
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
    		break;
 800177e:	e000      	b.n	8001782 <pag_opciones+0xa2>
    	default:
    		break;
 8001780:	bf00      	nop
    while(opcion_seleccionada == false){
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f083 0301 	eor.w	r3, r3, #1
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1c6      	bne.n	800171c <pag_opciones+0x3c>
    	}

    }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	08008d84 	.word	0x08008d84
 800179c:	08008d94 	.word	0x08008d94
 80017a0:	200004bc 	.word	0x200004bc

080017a4 <pag_fila_cursor>:

void pag_fila_cursor(uint8_t opcion){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
    switch (opcion){
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <pag_fila_cursor+0x16>
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d005      	beq.n	80017c4 <pag_fila_cursor+0x20>
 80017b8:	e009      	b.n	80017ce <pag_fila_cursor+0x2a>
        case OPCION_MOSTRAR_FECHA:
        	lcd_pos_cursor(OPCION_MOSTRAR_TEMP, 0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	2001      	movs	r0, #1
 80017be:	f000 fc1c 	bl	8001ffa <lcd_pos_cursor>
            break;
 80017c2:	e004      	b.n	80017ce <pag_fila_cursor+0x2a>
        case OPCION_MOSTRAR_TEMP:
        	lcd_pos_cursor(OPCION_MOSTRAR_FECHA, 0);
 80017c4:	2100      	movs	r1, #0
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 fc17 	bl	8001ffa <lcd_pos_cursor>
            break;
 80017cc:	bf00      	nop
    }
    lcd_enviar_cadena(" ");
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <pag_fila_cursor+0x48>)
 80017d0:	f000 fbfe 	bl	8001fd0 <lcd_enviar_cadena>
    lcd_pos_cursor(opcion, 0);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fc0e 	bl	8001ffa <lcd_pos_cursor>
    lcd_enviar_cadena(CARACTER_CURSOR);
 80017de:	4804      	ldr	r0, [pc, #16]	; (80017f0 <pag_fila_cursor+0x4c>)
 80017e0:	f000 fbf6 	bl	8001fd0 <lcd_enviar_cadena>
    //lcd_enviar_cadena();
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	08008da4 	.word	0x08008da4
 80017f0:	08008da8 	.word	0x08008da8

080017f4 <pag_fecha>:

void pag_fecha(void){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
    /*
    |   dd/mm/aaaa   |
    |     hh:mm      |
    */

	char fecha[LARGO_CADENA_FECHA] = "";
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	711a      	strb	r2, [r3, #4]
	char hora[LARGO_CADENA_HORA] =  "";
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	2300      	movs	r3, #0
 800180e:	813b      	strh	r3, [r7, #8]
	bool_t boton_presionado = false;
 8001810:	2300      	movs	r3, #0
 8001812:	75fb      	strb	r3, [r7, #23]
	uint8_t boton = BOT_NINGUNO;
 8001814:	2300      	movs	r3, #0
 8001816:	75bb      	strb	r3, [r7, #22]

	obtener_fecha(fecha);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fc75 	bl	800210c <obtener_fecha>
	obtener_hora(hora);
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fc8b 	bl	8002140 <obtener_hora>

    lcd_borrar();
 800182a:	f000 fc06 	bl	800203a <lcd_borrar>
    lcd_pos_cursor(0, 4);
 800182e:	2104      	movs	r1, #4
 8001830:	2000      	movs	r0, #0
 8001832:	f000 fbe2 	bl	8001ffa <lcd_pos_cursor>
    lcd_enviar_cadena(fecha);
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fbc8 	bl	8001fd0 <lcd_enviar_cadena>

    lcd_pos_cursor(1, 5);
 8001840:	2105      	movs	r1, #5
 8001842:	2001      	movs	r0, #1
 8001844:	f000 fbd9 	bl	8001ffa <lcd_pos_cursor>
    lcd_enviar_cadena(hora);
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fbc0 	bl	8001fd0 <lcd_enviar_cadena>

    while(boton_presionado == false){
 8001850:	e00d      	b.n	800186e <pag_fecha+0x7a>
    	boton = obtener_boton_presionado();
 8001852:	f000 fabf 	bl	8001dd4 <obtener_boton_presionado>
 8001856:	4603      	mov	r3, r0
 8001858:	75bb      	strb	r3, [r7, #22]

        switch (boton){
 800185a:	7dbb      	ldrb	r3, [r7, #22]
 800185c:	2b04      	cmp	r3, #4
 800185e:	d105      	bne.n	800186c <pag_fecha+0x78>
            case BOT_ATRAS:
            	mostrar_pantalla = PAGINA_OPCIONES;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <pag_fecha+0x90>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
            	boton_presionado = true;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
                break;
 800186a:	e000      	b.n	800186e <pag_fecha+0x7a>
            default:
                break;
 800186c:	bf00      	nop
    while(boton_presionado == false){
 800186e:	7dfb      	ldrb	r3, [r7, #23]
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1eb      	bne.n	8001852 <pag_fecha+0x5e>
        }

    }

}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200004bc 	.word	0x200004bc

08001888 <pag_temp>:

void pag_temp(void){
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
    /*
    |   Temp: tt C   |
    |                |
    */
    char cad_temperatura[LARGO_CADENA_TEMP] = "";
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	f8c3 2007 	str.w	r2, [r3, #7]
	bool_t boton_presionado = false;
 80018a0:	2300      	movs	r3, #0
 80018a2:	75fb      	strb	r3, [r7, #23]
	uint8_t boton = BOT_NINGUNO;
 80018a4:	2300      	movs	r3, #0
 80018a6:	75bb      	strb	r3, [r7, #22]

    obtener_temp(cad_temperatura);
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fc98 	bl	80021e0 <obtener_temp>
    //sprintf(cad_temperatura,"Temp: %d \004C", temperatura_ext); // \004 está definido en caracteres.h para el símbolo de grado

    lcd_borrar();
 80018b0:	f000 fbc3 	bl	800203a <lcd_borrar>
    lcd_pos_cursor(0, 0);
 80018b4:	2100      	movs	r1, #0
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 fb9f 	bl	8001ffa <lcd_pos_cursor>
    lcd_enviar_cadena(cad_temperatura);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fb86 	bl	8001fd0 <lcd_enviar_cadena>

    while(boton_presionado == false){
 80018c4:	e00d      	b.n	80018e2 <pag_temp+0x5a>
    	boton = obtener_boton_presionado();
 80018c6:	f000 fa85 	bl	8001dd4 <obtener_boton_presionado>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75bb      	strb	r3, [r7, #22]

        switch (boton){
 80018ce:	7dbb      	ldrb	r3, [r7, #22]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d105      	bne.n	80018e0 <pag_temp+0x58>
            case BOT_ATRAS:
            	mostrar_pantalla = PAGINA_OPCIONES;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <pag_temp+0x70>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
            	boton_presionado = true;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
                break;
 80018de:	e000      	b.n	80018e2 <pag_temp+0x5a>
            default:
                break;
 80018e0:	bf00      	nop
    while(boton_presionado == false){
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	f083 0301 	eor.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1eb      	bne.n	80018c6 <pag_temp+0x3e>
        }

    }

}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200004bc 	.word	0x200004bc

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_MspInit+0x4c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x4c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 fc8c 	bl	80022b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_kill>:

int _kill(int pid, int sig)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ba:	f005 f925 	bl	8006c08 <__errno>
 80019be:	4603      	mov	r3, r0
 80019c0:	2216      	movs	r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
  return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_exit>:

void _exit (int status)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe7 	bl	80019b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e2:	e7fe      	b.n	80019e2 <_exit+0x12>

080019e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e00a      	b.n	8001a0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019f6:	f3af 8000 	nop.w
 80019fa:	4601      	mov	r1, r0
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	b2ca      	uxtb	r2, r1
 8001a04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf0      	blt.n	80019f6 <_read+0x12>
  }

  return len;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e009      	b.n	8001a44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbf1      	blt.n	8001a30 <_write+0x12>
  }
  return len;
 8001a4c:	687b      	ldr	r3, [r7, #4]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_close>:

int _close(int file)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_isatty>:

int _isatty(int file)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f005 f88a 	bl	8006c08 <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20030000 	.word	0x20030000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	200004c0 	.word	0x200004c0
 8001b28:	20000b68 	.word	0x20000b68

08001b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <MX_USART3_UART_Init+0x50>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART3_UART_Init+0x4c>)
 8001b88:	f003 fb9c 	bl	80052c4 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b92:	f7ff fd9f 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200004c4 	.word	0x200004c4
 8001ba0:	40004800 	.word	0x40004800

08001ba4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_UART_MspInit+0x84>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12c      	bne.n	8001c20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_UART_MspInit+0x88>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_UART_MspInit+0x88>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_UART_MspInit+0x88>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_UART_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_UART_MspInit+0x88>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_UART_MspInit+0x88>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c10:	2307      	movs	r3, #7
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_UART_MspInit+0x8c>)
 8001c1c:	f001 fbac 	bl	8003378 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40004800 	.word	0x40004800
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020c00 	.word	0x40020c00

08001c34 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c42:	2204      	movs	r2, #4
 8001c44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c48:	2202      	movs	r2, #2
 8001c4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c78:	f002 fd6e 	bl	8004758 <HAL_PCD_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c82:	f7ff fd27 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000508 	.word	0x20000508

08001c90 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb0:	d13f      	bne.n	8001d32 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_PCD_MspInit+0xac>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a20      	ldr	r2, [pc, #128]	; (8001d3c <HAL_PCD_MspInit+0xac>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_PCD_MspInit+0xac>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4815      	ldr	r0, [pc, #84]	; (8001d40 <HAL_PCD_MspInit+0xb0>)
 8001cec:	f001 fb44 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	480e      	ldr	r0, [pc, #56]	; (8001d40 <HAL_PCD_MspInit+0xb0>)
 8001d06:	f001 fb37 	bl	8003378 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_PCD_MspInit+0xac>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <HAL_PCD_MspInit+0xac>)
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	6353      	str	r3, [r2, #52]	; 0x34
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_PCD_MspInit+0xac>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_PCD_MspInit+0xac>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_PCD_MspInit+0xac>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	; 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000

08001d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d4a:	490e      	ldr	r1, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d60:	4c0b      	ldr	r4, [pc, #44]	; (8001d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6e:	f7ff fedd 	bl	8001b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d72:	f004 ff4f 	bl	8006c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d76:	f7ff fbd7 	bl	8001528 <main>
  bx  lr    
 8001d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d88:	080091bc 	.word	0x080091bc
  ldr r2, =_sbss
 8001d8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d90:	20000b64 	.word	0x20000b64

08001d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC_IRQHandler>
	...

08001d98 <leer_adc>:
#include "API_adc.h"

uint32_t leer_adc(void){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
	// ADC_HandleTypeDef hadc;
	uint32_t valor = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8001da2:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <leer_adc+0x38>)
 8001da4:	f000 fb0e 	bl	80023c4 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dac:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <leer_adc+0x38>)
 8001dae:	f000 fc0e 	bl	80025ce <HAL_ADC_PollForConversion>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <leer_adc+0x28>
		valor = HAL_ADC_GetValue(&hadc1);
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <leer_adc+0x38>)
 8001dba:	f000 fc93 	bl	80026e4 <HAL_ADC_GetValue>
 8001dbe:	6078      	str	r0, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <leer_adc+0x38>)
 8001dc2:	f000 fbd1 	bl	8002568 <HAL_ADC_Stop>

	return valor;
 8001dc6:	687b      	ldr	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200001f0 	.word	0x200001f0

08001dd4 <obtener_boton_presionado>:
#include "API_keypad.h"

//ADC 10bit
uint8_t obtener_boton_presionado(){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
	uint32_t req = leer_adc();
 8001dda:	f7ff ffdd 	bl	8001d98 <leer_adc>
 8001dde:	6038      	str	r0, [r7, #0]
    uint8_t boton = BOT_NINGUNO;
 8001de0:	2300      	movs	r3, #0
 8001de2:	71fb      	strb	r3, [r7, #7]
    if (req < 50) {
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b31      	cmp	r3, #49	; 0x31
 8001de8:	d802      	bhi.n	8001df0 <obtener_boton_presionado+0x1c>
        boton = BOT_ADELANTE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e013      	b.n	8001e18 <obtener_boton_presionado+0x44>
    } else if (req < 250) {
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2bf9      	cmp	r3, #249	; 0xf9
 8001df4:	d802      	bhi.n	8001dfc <obtener_boton_presionado+0x28>
        boton = BOT_ARRIBA;
 8001df6:	2302      	movs	r3, #2
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	e00d      	b.n	8001e18 <obtener_boton_presionado+0x44>
    } else if (req < 500) {
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e02:	d202      	bcs.n	8001e0a <obtener_boton_presionado+0x36>
        boton = BOT_ABAJO;
 8001e04:	2303      	movs	r3, #3
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	e006      	b.n	8001e18 <obtener_boton_presionado+0x44>
    } else if (req < 790) {
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f240 3215 	movw	r2, #789	; 0x315
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d801      	bhi.n	8001e18 <obtener_boton_presionado+0x44>
        boton = BOT_ATRAS;
 8001e14:	2304      	movs	r3, #4
 8001e16:	71fb      	strb	r3, [r7, #7]
    }
    return boton;
 8001e18:	79fb      	ldrb	r3, [r7, #7]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <str_boton>:

uint8_t * str_boton(uint8_t boton){
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
    uint8_t * string = (uint8_t *)"";
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <str_boton+0x58>)
 8001e30:	60fb      	str	r3, [r7, #12]
    switch(boton){
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d816      	bhi.n	8001e68 <str_boton+0x44>
 8001e3a:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <str_boton+0x1c>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001e51 	.word	0x08001e51
 8001e44:	08001e57 	.word	0x08001e57
 8001e48:	08001e5d 	.word	0x08001e5d
 8001e4c:	08001e63 	.word	0x08001e63
    case BOT_ADELANTE:
        string = STR_ADELANTE;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <str_boton+0x5c>)
 8001e52:	60fb      	str	r3, [r7, #12]
        break;
 8001e54:	e00b      	b.n	8001e6e <str_boton+0x4a>
    case BOT_ARRIBA:
        string = STR_ARRIBA;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <str_boton+0x60>)
 8001e58:	60fb      	str	r3, [r7, #12]
        break;
 8001e5a:	e008      	b.n	8001e6e <str_boton+0x4a>
    case BOT_ABAJO:
        string = STR_ABAJO;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <str_boton+0x64>)
 8001e5e:	60fb      	str	r3, [r7, #12]
        break;
 8001e60:	e005      	b.n	8001e6e <str_boton+0x4a>
    case BOT_ATRAS:
        string = STR_ATRAS;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <str_boton+0x68>)
 8001e64:	60fb      	str	r3, [r7, #12]
        break;
 8001e66:	e002      	b.n	8001e6e <str_boton+0x4a>
    default:
        string = STR_NINGUNO;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <str_boton+0x6c>)
 8001e6a:	60fb      	str	r3, [r7, #12]
        break;
 8001e6c:	bf00      	nop
    }
    return string;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	08008dac 	.word	0x08008dac
 8001e80:	08008db0 	.word	0x08008db0
 8001e84:	08008dc0 	.word	0x08008dc0
 8001e88:	08008dd0 	.word	0x08008dd0
 8001e8c:	08008ddc 	.word	0x08008ddc
 8001e90:	08008de8 	.word	0x08008de8

08001e94 <lcd_init>:
#include <API_lcd.h>

void lcd_init (void){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
    // Inicialización para 4 bit
    HAL_Delay(50);  // Esperar >40ms
 8001e98:	2032      	movs	r0, #50	; 0x32
 8001e9a:	f000 fa2b 	bl	80022f4 <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001e9e:	2030      	movs	r0, #48	; 0x30
 8001ea0:	f000 f836 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(5);  // Esperar >4.1ms
 8001ea4:	2005      	movs	r0, #5
 8001ea6:	f000 fa25 	bl	80022f4 <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001eaa:	2030      	movs	r0, #48	; 0x30
 8001eac:	f000 f830 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(1);  // Esperar >100us
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f000 fa1f 	bl	80022f4 <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001eb6:	2030      	movs	r0, #48	; 0x30
 8001eb8:	f000 f82a 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(10);
 8001ebc:	200a      	movs	r0, #10
 8001ebe:	f000 fa19 	bl	80022f4 <HAL_Delay>
    lcd_enviar_comando (MODO_4BIT);
 8001ec2:	2020      	movs	r0, #32
 8001ec4:	f000 f824 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(10);
 8001ec8:	200a      	movs	r0, #10
 8001eca:	f000 fa13 	bl	80022f4 <HAL_Delay>

  // dislay initialisation
    lcd_enviar_comando (FUNCTION_SET); // FDL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001ece:	2028      	movs	r0, #40	; 0x28
 8001ed0:	f000 f81e 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(1);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f000 fa0d 	bl	80022f4 <HAL_Delay>
    lcd_enviar_comando (LCD_OFF); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001eda:	2008      	movs	r0, #8
 8001edc:	f000 f818 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(1);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f000 fa07 	bl	80022f4 <HAL_Delay>
    lcd_enviar_comando (CLEAR_LCD);  // clear display
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f000 f812 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f000 fa01 	bl	80022f4 <HAL_Delay>
    HAL_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 f9fe 	bl	80022f4 <HAL_Delay>
    lcd_enviar_comando (ENTRY_MODE_SET); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001ef8:	2006      	movs	r0, #6
 8001efa:	f000 f809 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f000 f9f8 	bl	80022f4 <HAL_Delay>
    lcd_enviar_comando (BLINK_CURSOR); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001f04:	200c      	movs	r0, #12
 8001f06:	f000 f803 	bl	8001f10 <lcd_enviar_comando>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <lcd_enviar_comando>:

void lcd_enviar_comando (char cmd){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd&0xf0);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f023 030f 	bic.w	r3, r3, #15
 8001f20:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd<<4)&0xf0);
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	f043 030c 	orr.w	r3, r3, #12
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x08;  //en=0, rs=0
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	f043 030c 	orr.w	r3, r3, #12
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x08;  //en=0, rs=0
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001f50:	f107 0208 	add.w	r2, r7, #8
 8001f54:	2364      	movs	r3, #100	; 0x64
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2304      	movs	r3, #4
 8001f5a:	214e      	movs	r1, #78	; 0x4e
 8001f5c:	4803      	ldr	r0, [pc, #12]	; (8001f6c <lcd_enviar_comando+0x5c>)
 8001f5e:	f001 fd15 	bl	800398c <HAL_I2C_Master_Transmit>
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000468 	.word	0x20000468

08001f70 <lcd_enviar_dato>:


void lcd_enviar_dato (char dato){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (dato&0xf0);
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f023 030f 	bic.w	r3, r3, #15
 8001f80:	73fb      	strb	r3, [r7, #15]
    data_l = ((dato<<4)&0xf0);
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	f043 030d 	orr.w	r3, r3, #13
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x09;  //en=0, rs=1
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	f043 0309 	orr.w	r3, r3, #9
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001f9c:	7bbb      	ldrb	r3, [r7, #14]
 8001f9e:	f043 030d 	orr.w	r3, r3, #13
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x09;  //en=0, rs=1
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	f043 0309 	orr.w	r3, r3, #9
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001fb0:	f107 0208 	add.w	r2, r7, #8
 8001fb4:	2364      	movs	r3, #100	; 0x64
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2304      	movs	r3, #4
 8001fba:	214e      	movs	r1, #78	; 0x4e
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <lcd_enviar_dato+0x5c>)
 8001fbe:	f001 fce5 	bl	800398c <HAL_I2C_Master_Transmit>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000468 	.word	0x20000468

08001fd0 <lcd_enviar_cadena>:
void lcd_enviar_cadena (char *str){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    while (*str) lcd_enviar_dato (*str++);
 8001fd8:	e006      	b.n	8001fe8 <lcd_enviar_cadena+0x18>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ffc4 	bl	8001f70 <lcd_enviar_dato>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f4      	bne.n	8001fda <lcd_enviar_cadena+0xa>
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <lcd_pos_cursor>:

void lcd_pos_cursor(uint8_t fil, uint8_t col){
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	460a      	mov	r2, r1
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	4613      	mov	r3, r2
 8002008:	71bb      	strb	r3, [r7, #6]
    switch (fil){
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <lcd_pos_cursor+0x1c>
 8002010:	2b01      	cmp	r3, #1
 8002012:	d005      	beq.n	8002020 <lcd_pos_cursor+0x26>
 8002014:	e009      	b.n	800202a <lcd_pos_cursor+0x30>
        case 0:
            col |= 0x80;
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800201c:	71bb      	strb	r3, [r7, #6]
            break;
 800201e:	e004      	b.n	800202a <lcd_pos_cursor+0x30>
        case 1:
            col |= 0xC0;
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002026:	71bb      	strb	r3, [r7, #6]
            break;
 8002028:	bf00      	nop
    }
    lcd_enviar_comando(col);
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff6f 	bl	8001f10 <lcd_enviar_comando>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <lcd_borrar>:

void lcd_borrar(void){
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
	lcd_enviar_comando(CLEAR_LCD);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff ff66 	bl	8001f10 <lcd_enviar_comando>
    HAL_Delay(5);
 8002044:	2005      	movs	r0, #5
 8002046:	f000 f955 	bl	80022f4 <HAL_Delay>

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}

0800204e <bcd2dec>:
uint8_t dec2bcd(int val){
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convierte de bcd a decimal
// Multiplica al nibble alto por 10, y le suma el nibble bajo
static uint8_t bcd2dec(uint8_t bcd){
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  int dec = ((bcd & 0xF0) >> 4) * 10 + (bcd & 0x0F);
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	461a      	mov	r2, r3
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	4413      	add	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  return dec;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	b2db      	uxtb	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <leer_fecha_hora>:

dateTime_t leer_fecha_hora(void){
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af04      	add	r7, sp, #16
 800208a:	6078      	str	r0, [r7, #4]
	dateTime_t dato;
	uint8_t dato_leido[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, MEM_REG, 1, dato_leido, CANT_REG_FH, RTC_TIMEOUT);
 800208c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002090:	9302      	str	r3, [sp, #8]
 8002092:	2307      	movs	r3, #7
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	2200      	movs	r2, #0
 80020a0:	21d0      	movs	r1, #208	; 0xd0
 80020a2:	4819      	ldr	r0, [pc, #100]	; (8002108 <leer_fecha_hora+0x84>)
 80020a4:	f001 fd70 	bl	8003b88 <HAL_I2C_Mem_Read>

	dato.seg = bcd2dec(dato_leido[0]);
 80020a8:	7a3b      	ldrb	r3, [r7, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ffcf 	bl	800204e <bcd2dec>
 80020b0:	4603      	mov	r3, r0
 80020b2:	757b      	strb	r3, [r7, #21]
	dato.min = bcd2dec(dato_leido[1]);
 80020b4:	7a7b      	ldrb	r3, [r7, #9]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffc9 	bl	800204e <bcd2dec>
 80020bc:	4603      	mov	r3, r0
 80020be:	753b      	strb	r3, [r7, #20]
	dato.hora = bcd2dec(dato_leido[2]);
 80020c0:	7abb      	ldrb	r3, [r7, #10]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ffc3 	bl	800204e <bcd2dec>
 80020c8:	4603      	mov	r3, r0
 80020ca:	74fb      	strb	r3, [r7, #19]
	//dato_leido[3] corresponde al día de la semana
	dato.dia = bcd2dec(dato_leido[4]);
 80020cc:	7b3b      	ldrb	r3, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ffbd 	bl	800204e <bcd2dec>
 80020d4:	4603      	mov	r3, r0
 80020d6:	74bb      	strb	r3, [r7, #18]
	dato.mes = bcd2dec(dato_leido[5]);
 80020d8:	7b7b      	ldrb	r3, [r7, #13]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ffb7 	bl	800204e <bcd2dec>
 80020e0:	4603      	mov	r3, r0
 80020e2:	747b      	strb	r3, [r7, #17]
	dato.anio = bcd2dec(dato_leido[6]);
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ffb1 	bl	800204e <bcd2dec>
 80020ec:	4603      	mov	r3, r0
 80020ee:	743b      	strb	r3, [r7, #16]

	return dato;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	6010      	str	r0, [r2, #0]
 80020fc:	889b      	ldrh	r3, [r3, #4]
 80020fe:	8093      	strh	r3, [r2, #4]
}
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000468 	.word	0x20000468

0800210c <obtener_fecha>:

void obtener_fecha(char* fecha){
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
 8002112:	6078      	str	r0, [r7, #4]

	dateTime_t fecha_hora = leer_fecha_hora();
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ffb3 	bl	8002084 <leer_fecha_hora>

	sprintf(fecha, FORMATO_FECHA, fecha_hora.dia, fecha_hora.mes, fecha_hora.anio);
 800211e:	7abb      	ldrb	r3, [r7, #10]
 8002120:	461a      	mov	r2, r3
 8002122:	7a7b      	ldrb	r3, [r7, #9]
 8002124:	4619      	mov	r1, r3
 8002126:	7a3b      	ldrb	r3, [r7, #8]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	460b      	mov	r3, r1
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <obtener_fecha+0x30>)
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f004 fcb4 	bl	8006a9c <siprintf>
	return;
 8002134:	bf00      	nop
}
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	08008df8 	.word	0x08008df8

08002140 <obtener_hora>:

void obtener_hora(char* hora){
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	dateTime_t fecha_hora = leer_fecha_hora();
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff99 	bl	8002084 <leer_fecha_hora>

	sprintf(hora, FORMATO_HORA, fecha_hora.hora, fecha_hora.min);
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	461a      	mov	r2, r3
 8002156:	7b3b      	ldrb	r3, [r7, #12]
 8002158:	4903      	ldr	r1, [pc, #12]	; (8002168 <obtener_hora+0x28>)
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f004 fc9e 	bl	8006a9c <siprintf>
	return;
 8002160:	bf00      	nop
}
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	08008e08 	.word	0x08008e08

0800216c <leer_temp>:
}

//Lee la temperatura desde los registros 0x11 y 0x12
//En 0x11 está la parte entera del valor, y en 0x12 la parte decimal
//La resolución es 0.25gC por eso la parte decimal se divide por 4
temp_t leer_temp (void){
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af04      	add	r7, sp, #16
	uint8_t temp[2];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, TEMP_REG, 1, temp, CANT_REG_TEMP, RTC_TIMEOUT);
 8002172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	2302      	movs	r3, #2
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2301      	movs	r3, #1
 8002182:	2211      	movs	r2, #17
 8002184:	21d0      	movs	r1, #208	; 0xd0
 8002186:	4814      	ldr	r0, [pc, #80]	; (80021d8 <leer_temp+0x6c>)
 8002188:	f001 fcfe 	bl	8003b88 <HAL_I2C_Mem_Read>

	return ((temp[0])+(temp[1]>>6)*0.25);
 800218c:	793b      	ldrb	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9d8 	bl	8000544 <__aeabi_i2d>
 8002194:	4604      	mov	r4, r0
 8002196:	460d      	mov	r5, r1
 8002198:	797b      	ldrb	r3, [r7, #5]
 800219a:	099b      	lsrs	r3, r3, #6
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9d0 	bl	8000544 <__aeabi_i2d>
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <leer_temp+0x70>)
 80021aa:	f7fe fa35 	bl	8000618 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f7fe f879 	bl	80002ac <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fd01 	bl	8000bc8 <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	ee07 3a90 	vmov	s15, r3
}
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdb0      	pop	{r4, r5, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000468 	.word	0x20000468
 80021dc:	3fd00000 	.word	0x3fd00000

080021e0 <obtener_temp>:

void obtener_temp(char* temp){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	temp_t temperatura = leer_temp();
 80021e8:	f7ff ffc0 	bl	800216c <leer_temp>
 80021ec:	ed87 0a03 	vstr	s0, [r7, #12]

	sprintf(temp, FORMATO_TEMP, temperatura);
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7fe f9b9 	bl	8000568 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4904      	ldr	r1, [pc, #16]	; (800220c <obtener_temp+0x2c>)
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f004 fc4d 	bl	8006a9c <siprintf>
	return;
 8002202:	bf00      	nop
}
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	08008e14 	.word	0x08008e14

08002210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <HAL_Init+0x40>)
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_Init+0x40>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_Init+0x40>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002238:	2003      	movs	r0, #3
 800223a:	f000 fd41 	bl	8002cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223e:	2000      	movs	r0, #0
 8002240:	f000 f808 	bl	8002254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff fb5a 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023c00 	.word	0x40023c00

08002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x54>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_InitTick+0x58>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226a:	fbb3 f3f1 	udiv	r3, r3, r1
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fd4b 	bl	8002d0e <HAL_SYSTICK_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e00e      	b.n	80022a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d80a      	bhi.n	800229e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002290:	f000 fd21 	bl	8002cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002294:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <HAL_InitTick+0x5c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000008 	.word	0x20000008
 80022b0:	20000004 	.word	0x20000004

080022b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_IncTick+0x20>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_IncTick+0x24>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <HAL_IncTick+0x24>)
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000008 	.word	0x20000008
 80022d8:	20000a14 	.word	0x20000a14

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_GetTick+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000a14 	.word	0x20000a14

080022f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff ffee 	bl	80022dc <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800230c:	d005      	beq.n	800231a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_Delay+0x44>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231a:	bf00      	nop
 800231c:	f7ff ffde 	bl	80022dc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	d8f7      	bhi.n	800231c <HAL_Delay+0x28>
  {
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000008 	.word	0x20000008

0800233c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e033      	b.n	80023ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fe56 	bl	800100c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002382:	f023 0302 	bic.w	r3, r3, #2
 8002386:	f043 0202 	orr.w	r2, r3, #2
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fae8 	bl	8002964 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
 80023aa:	e001      	b.n	80023b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Start+0x1a>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0b2      	b.n	8002544 <HAL_ADC_Start+0x180>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d018      	beq.n	8002426 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <HAL_ADC_Start+0x18c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_ADC_Start+0x190>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9a      	lsrs	r2, r3, #18
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002418:	e002      	b.n	8002420 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3b01      	subs	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d17a      	bne.n	800252a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002472:	d106      	bne.n	8002482 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	f023 0206 	bic.w	r2, r3, #6
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
 8002480:	e002      	b.n	8002488 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_ADC_Start+0x194>)
 8002492:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800249c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d12a      	bne.n	8002500 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2b      	ldr	r2, [pc, #172]	; (800255c <HAL_ADC_Start+0x198>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d015      	beq.n	80024e0 <HAL_ADC_Start+0x11c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_ADC_Start+0x19c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d105      	bne.n	80024ca <HAL_ADC_Start+0x106>
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_ADC_Start+0x194>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a25      	ldr	r2, [pc, #148]	; (8002564 <HAL_ADC_Start+0x1a0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d136      	bne.n	8002542 <HAL_ADC_Start+0x17e>
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_ADC_Start+0x194>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d130      	bne.n	8002542 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d129      	bne.n	8002542 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	e020      	b.n	8002542 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <HAL_ADC_Start+0x198>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11b      	bne.n	8002542 <HAL_ADC_Start+0x17e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d114      	bne.n	8002542 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e00b      	b.n	8002542 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0210 	orr.w	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	20000000 	.word	0x20000000
 8002554:	431bde83 	.word	0x431bde83
 8002558:	40012300 	.word	0x40012300
 800255c:	40012000 	.word	0x40012000
 8002560:	40012100 	.word	0x40012100
 8002564:	40012200 	.word	0x40012200

08002568 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ADC_Stop+0x16>
 800257a:	2302      	movs	r3, #2
 800257c:	e021      	b.n	80025c2 <HAL_ADC_Stop+0x5a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	f043 0201 	orr.w	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	d113      	bne.n	8002614 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fa:	d10b      	bne.n	8002614 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e063      	b.n	80026dc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002614:	f7ff fe62 	bl	80022dc <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800261a:	e021      	b.n	8002660 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002622:	d01d      	beq.n	8002660 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_ADC_PollForConversion+0x6c>
 800262a:	f7ff fe57 	bl	80022dc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d212      	bcs.n	8002660 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b02      	cmp	r3, #2
 8002646:	d00b      	beq.n	8002660 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e03d      	b.n	80026dc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d1d6      	bne.n	800261c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f06f 0212 	mvn.w	r2, #18
 8002676:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d123      	bne.n	80026da <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d11f      	bne.n	80026da <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d111      	bne.n	80026da <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x1c>
 8002718:	2302      	movs	r3, #2
 800271a:	e113      	b.n	8002944 <HAL_ADC_ConfigChannel+0x244>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b09      	cmp	r3, #9
 800272a:	d925      	bls.n	8002778 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68d9      	ldr	r1, [r3, #12]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	3b1e      	subs	r3, #30
 8002742:	2207      	movs	r2, #7
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43da      	mvns	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	400a      	ands	r2, r1
 8002750:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68d9      	ldr	r1, [r3, #12]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	4618      	mov	r0, r3
 8002764:	4603      	mov	r3, r0
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4403      	add	r3, r0
 800276a:	3b1e      	subs	r3, #30
 800276c:	409a      	lsls	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	e022      	b.n	80027be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6919      	ldr	r1, [r3, #16]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	2207      	movs	r2, #7
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	400a      	ands	r2, r1
 800279a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6919      	ldr	r1, [r3, #16]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4403      	add	r3, r0
 80027b4:	409a      	lsls	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d824      	bhi.n	8002810 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3b05      	subs	r3, #5
 80027d8:	221f      	movs	r2, #31
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	400a      	ands	r2, r1
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4618      	mov	r0, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	3b05      	subs	r3, #5
 8002802:	fa00 f203 	lsl.w	r2, r0, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	635a      	str	r2, [r3, #52]	; 0x34
 800280e:	e04c      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d824      	bhi.n	8002862 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	3b23      	subs	r3, #35	; 0x23
 800282a:	221f      	movs	r2, #31
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43da      	mvns	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	400a      	ands	r2, r1
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	4618      	mov	r0, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b23      	subs	r3, #35	; 0x23
 8002854:	fa00 f203 	lsl.w	r2, r0, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
 8002860:	e023      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3b41      	subs	r3, #65	; 0x41
 8002874:	221f      	movs	r2, #31
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43da      	mvns	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	400a      	ands	r2, r1
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	3b41      	subs	r3, #65	; 0x41
 800289e:	fa00 f203 	lsl.w	r2, r0, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_ADC_ConfigChannel+0x250>)
 80028ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a28      	ldr	r2, [pc, #160]	; (8002954 <HAL_ADC_ConfigChannel+0x254>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d10f      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1d8>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b12      	cmp	r3, #18
 80028be:	d10b      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_ADC_ConfigChannel+0x254>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d12b      	bne.n	800293a <HAL_ADC_ConfigChannel+0x23a>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_ADC_ConfigChannel+0x258>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x1f4>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b11      	cmp	r3, #17
 80028f2:	d122      	bne.n	800293a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a11      	ldr	r2, [pc, #68]	; (8002958 <HAL_ADC_ConfigChannel+0x258>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d111      	bne.n	800293a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_ADC_ConfigChannel+0x25c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_ADC_ConfigChannel+0x260>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	0c9a      	lsrs	r2, r3, #18
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800292c:	e002      	b.n	8002934 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3b01      	subs	r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f9      	bne.n	800292e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40012300 	.word	0x40012300
 8002954:	40012000 	.word	0x40012000
 8002958:	10000012 	.word	0x10000012
 800295c:	20000000 	.word	0x20000000
 8002960:	431bde83 	.word	0x431bde83

08002964 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800296c:	4b79      	ldr	r3, [pc, #484]	; (8002b54 <ADC_Init+0x1f0>)
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002998:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <ADC_Init+0x1f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d022      	beq.n	8002a42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6899      	ldr	r1, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6899      	ldr	r1, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	e00f      	b.n	8002a62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0202 	bic.w	r2, r2, #2
 8002a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6899      	ldr	r1, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e1b      	ldrb	r3, [r3, #24]
 8002a7c:	005a      	lsls	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	3b01      	subs	r3, #1
 8002abc:	035a      	lsls	r2, r3, #13
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	e007      	b.n	8002ad8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	051a      	lsls	r2, r3, #20
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6899      	ldr	r1, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b1a:	025a      	lsls	r2, r3, #9
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6899      	ldr	r1, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	029a      	lsls	r2, r3, #10
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40012300 	.word	0x40012300
 8002b58:	0f000001 	.word	0x0f000001

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c8c:	d301      	bcc.n	8002c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00f      	b.n	8002cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <SysTick_Config+0x40>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca0:	f7ff ff8e 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <SysTick_Config+0x40>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <SysTick_Config+0x40>)
 8002cac:	2207      	movs	r2, #7
 8002cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	e000e010 	.word	0xe000e010

08002cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff47 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce8:	f7ff ff5c 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff ff8e 	bl	8002c14 <NVIC_EncodePriority>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff5d 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffb0 	bl	8002c7c <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06c      	b.n	8002e14 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2223      	movs	r2, #35	; 0x23
 8002d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7fe f9ef 	bl	8001130 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <HAL_ETH_Init+0xf4>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a30      	ldr	r2, [pc, #192]	; (8002e1c <HAL_ETH_Init+0xf4>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <HAL_ETH_Init+0xf4>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <HAL_ETH_Init+0xf8>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <HAL_ETH_Init+0xf8>)
 8002d74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d78:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d7a:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_ETH_Init+0xf8>)
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4927      	ldr	r1, [pc, #156]	; (8002e20 <HAL_ETH_Init+0xf8>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_ETH_Init+0xf8>)
 8002d8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002da2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002da4:	f7ff fa9a 	bl	80022dc <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002daa:	e011      	b.n	8002dd0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002dac:	f7ff fa96 	bl	80022dc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dba:	d909      	bls.n	8002dd0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	22e0      	movs	r2, #224	; 0xe0
 8002dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e021      	b.n	8002e14 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e4      	bne.n	8002dac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f958 	bl	8003098 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f9ff 	bl	80031ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa55 	bl	800329e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f9bd 	bl	800317c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40013800 	.word	0x40013800

08002e24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <ETH_SetMACConfig+0x15c>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	7c1b      	ldrb	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <ETH_SetMACConfig+0x28>
 8002e46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e4a:	e000      	b.n	8002e4e <ETH_SetMACConfig+0x2a>
 8002e4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	7c5b      	ldrb	r3, [r3, #17]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <ETH_SetMACConfig+0x38>
 8002e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e5a:	e000      	b.n	8002e5e <ETH_SetMACConfig+0x3a>
 8002e5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7fdb      	ldrb	r3, [r3, #31]
 8002e6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	7f92      	ldrb	r2, [r2, #30]
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	d102      	bne.n	8002e82 <ETH_SetMACConfig+0x5e>
 8002e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e80:	e000      	b.n	8002e84 <ETH_SetMACConfig+0x60>
 8002e82:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	7f1b      	ldrb	r3, [r3, #28]
 8002e8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	791b      	ldrb	r3, [r3, #4]
 8002e98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ea2:	2a00      	cmp	r2, #0
 8002ea4:	d102      	bne.n	8002eac <ETH_SetMACConfig+0x88>
 8002ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eaa:	e000      	b.n	8002eae <ETH_SetMACConfig+0x8a>
 8002eac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002eae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7bdb      	ldrb	r3, [r3, #15]
 8002eb4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002eb6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ebc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ec4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7ff fa08 	bl	80022f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f0a:	2a00      	cmp	r2, #0
 8002f0c:	d101      	bne.n	8002f12 <ETH_SetMACConfig+0xee>
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	e000      	b.n	8002f14 <ETH_SetMACConfig+0xf0>
 8002f12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002f22:	2a01      	cmp	r2, #1
 8002f24:	d101      	bne.n	8002f2a <ETH_SetMACConfig+0x106>
 8002f26:	2208      	movs	r2, #8
 8002f28:	e000      	b.n	8002f2c <ETH_SetMACConfig+0x108>
 8002f2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002f34:	2a01      	cmp	r2, #1
 8002f36:	d101      	bne.n	8002f3c <ETH_SetMACConfig+0x118>
 8002f38:	2204      	movs	r2, #4
 8002f3a:	e000      	b.n	8002f3e <ETH_SetMACConfig+0x11a>
 8002f3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002f46:	2a01      	cmp	r2, #1
 8002f48:	d101      	bne.n	8002f4e <ETH_SetMACConfig+0x12a>
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	e000      	b.n	8002f50 <ETH_SetMACConfig+0x12c>
 8002f4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f50:	4313      	orrs	r3, r2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f7ff f9c3 	bl	80022f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	ff20810f 	.word	0xff20810f

08002f84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <ETH_SetDMAConfig+0x110>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	7b1b      	ldrb	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <ETH_SetDMAConfig+0x2c>
 8002faa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fae:	e000      	b.n	8002fb2 <ETH_SetDMAConfig+0x2e>
 8002fb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	7b5b      	ldrb	r3, [r3, #13]
 8002fb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	7f52      	ldrb	r2, [r2, #29]
 8002fbe:	2a00      	cmp	r2, #0
 8002fc0:	d102      	bne.n	8002fc8 <ETH_SetDMAConfig+0x44>
 8002fc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fc6:	e000      	b.n	8002fca <ETH_SetDMAConfig+0x46>
 8002fc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	7b9b      	ldrb	r3, [r3, #14]
 8002fd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	7f1b      	ldrb	r3, [r3, #28]
 8002fde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002fe0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7f9b      	ldrb	r3, [r3, #30]
 8002fe6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fe8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ff6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003008:	461a      	mov	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800301a:	2001      	movs	r0, #1
 800301c:	f7ff f96a 	bl	80022f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003028:	461a      	mov	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	791b      	ldrb	r3, [r3, #4]
 8003032:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003038:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800303e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003044:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800304c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800304e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003056:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800305c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003066:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800306a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003078:	2001      	movs	r0, #1
 800307a:	f7ff f93b 	bl	80022f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	f8de3f23 	.word	0xf8de3f23

08003098 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b0a6      	sub	sp, #152	; 0x98
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030ac:	2300      	movs	r3, #0
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030d4:	2300      	movs	r3, #0
 80030d6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003104:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800310c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff fe86 	bl	8002e24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003118:	2301      	movs	r3, #1
 800311a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800311c:	2301      	movs	r3, #1
 800311e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003126:	2301      	movs	r3, #1
 8003128:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003144:	2301      	movs	r3, #1
 8003146:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800314c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800314e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003152:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003158:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003160:	2300      	movs	r3, #0
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff08 	bl	8002f84 <ETH_SetDMAConfig>
}
 8003174:	bf00      	nop
 8003176:	3798      	adds	r7, #152	; 0x98
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3305      	adds	r3, #5
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	3204      	adds	r2, #4
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <ETH_MACAddressConfig+0x68>)
 800319e:	4413      	add	r3, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3303      	adds	r3, #3
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	061a      	lsls	r2, r3, #24
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3302      	adds	r3, #2
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3301      	adds	r3, #1
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	4313      	orrs	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <ETH_MACAddressConfig+0x6c>)
 80031ce:	4413      	add	r3, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	6013      	str	r3, [r2, #0]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40028040 	.word	0x40028040
 80031e8:	40028044 	.word	0x40028044

080031ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e03e      	b.n	8003278 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68d9      	ldr	r1, [r3, #12]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	440b      	add	r3, r1
 800320a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2200      	movs	r2, #0
 8003216:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	3206      	adds	r2, #6
 800322c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d80c      	bhi.n	800325c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68d9      	ldr	r1, [r3, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	e004      	b.n	8003266 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3301      	adds	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d9bd      	bls.n	80031fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003290:	611a      	str	r2, [r3, #16]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e046      	b.n	800333a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6919      	ldr	r1, [r3, #16]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2200      	movs	r2, #0
 80032da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80032f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	3212      	adds	r2, #18
 8003306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d80c      	bhi.n	800332a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6919      	ldr	r1, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	e004      	b.n	8003334 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3301      	adds	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d9b5      	bls.n	80032ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336a:	60da      	str	r2, [r3, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	e177      	b.n	8003684 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f040 8166 	bne.w	800367e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d005      	beq.n	80033ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d130      	bne.n	800342c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003400:	2201      	movs	r2, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 0201 	and.w	r2, r3, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b03      	cmp	r3, #3
 8003436:	d017      	beq.n	8003468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d123      	bne.n	80034bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80c0 	beq.w	800367e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_GPIO_Init+0x324>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a65      	ldr	r2, [pc, #404]	; (800369c <HAL_GPIO_Init+0x324>)
 8003508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_GPIO_Init+0x324>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351a:	4a61      	ldr	r2, [pc, #388]	; (80036a0 <HAL_GPIO_Init+0x328>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a58      	ldr	r2, [pc, #352]	; (80036a4 <HAL_GPIO_Init+0x32c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d037      	beq.n	80035b6 <HAL_GPIO_Init+0x23e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a57      	ldr	r2, [pc, #348]	; (80036a8 <HAL_GPIO_Init+0x330>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d031      	beq.n	80035b2 <HAL_GPIO_Init+0x23a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a56      	ldr	r2, [pc, #344]	; (80036ac <HAL_GPIO_Init+0x334>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <HAL_GPIO_Init+0x236>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a55      	ldr	r2, [pc, #340]	; (80036b0 <HAL_GPIO_Init+0x338>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d025      	beq.n	80035aa <HAL_GPIO_Init+0x232>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a54      	ldr	r2, [pc, #336]	; (80036b4 <HAL_GPIO_Init+0x33c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <HAL_GPIO_Init+0x22e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a53      	ldr	r2, [pc, #332]	; (80036b8 <HAL_GPIO_Init+0x340>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d019      	beq.n	80035a2 <HAL_GPIO_Init+0x22a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <HAL_GPIO_Init+0x344>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_Init+0x226>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a51      	ldr	r2, [pc, #324]	; (80036c0 <HAL_GPIO_Init+0x348>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_GPIO_Init+0x222>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a50      	ldr	r2, [pc, #320]	; (80036c4 <HAL_GPIO_Init+0x34c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_Init+0x21e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4f      	ldr	r2, [pc, #316]	; (80036c8 <HAL_GPIO_Init+0x350>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_GPIO_Init+0x21a>
 800358e:	2309      	movs	r3, #9
 8003590:	e012      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 8003592:	230a      	movs	r3, #10
 8003594:	e010      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 8003596:	2308      	movs	r3, #8
 8003598:	e00e      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 800359a:	2307      	movs	r3, #7
 800359c:	e00c      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 800359e:	2306      	movs	r3, #6
 80035a0:	e00a      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x240>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c8:	4935      	ldr	r1, [pc, #212]	; (80036a0 <HAL_GPIO_Init+0x328>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_GPIO_Init+0x354>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fa:	4a34      	ldr	r2, [pc, #208]	; (80036cc <HAL_GPIO_Init+0x354>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_GPIO_Init+0x354>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003624:	4a29      	ldr	r2, [pc, #164]	; (80036cc <HAL_GPIO_Init+0x354>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <HAL_GPIO_Init+0x354>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_GPIO_Init+0x354>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_GPIO_Init+0x354>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <HAL_GPIO_Init+0x354>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f ae84 	bls.w	8003394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021800 	.word	0x40021800
 80036c0:	40021c00 	.word	0x40021c00
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40022400 	.word	0x40022400
 80036cc:	40013c00 	.word	0x40013c00

080036d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
 80036dc:	4613      	mov	r3, r2
 80036de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e0:	787b      	ldrb	r3, [r7, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036ec:	e003      	b.n	80036f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ee:	887b      	ldrh	r3, [r7, #2]
 80036f0:	041a      	lsls	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	619a      	str	r2, [r3, #24]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e12b      	b.n	800396e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd feb4 	bl	8001498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	; 0x24
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003756:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003766:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003768:	f001 fd84 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 800376c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a81      	ldr	r2, [pc, #516]	; (8003978 <HAL_I2C_Init+0x274>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d807      	bhi.n	8003788 <HAL_I2C_Init+0x84>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a80      	ldr	r2, [pc, #512]	; (800397c <HAL_I2C_Init+0x278>)
 800377c:	4293      	cmp	r3, r2
 800377e:	bf94      	ite	ls
 8003780:	2301      	movls	r3, #1
 8003782:	2300      	movhi	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e006      	b.n	8003796 <HAL_I2C_Init+0x92>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a7d      	ldr	r2, [pc, #500]	; (8003980 <HAL_I2C_Init+0x27c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	bf94      	ite	ls
 8003790:	2301      	movls	r3, #1
 8003792:	2300      	movhi	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0e7      	b.n	800396e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a78      	ldr	r2, [pc, #480]	; (8003984 <HAL_I2C_Init+0x280>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0c9b      	lsrs	r3, r3, #18
 80037a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a6a      	ldr	r2, [pc, #424]	; (8003978 <HAL_I2C_Init+0x274>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d802      	bhi.n	80037d8 <HAL_I2C_Init+0xd4>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3301      	adds	r3, #1
 80037d6:	e009      	b.n	80037ec <HAL_I2C_Init+0xe8>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	4a69      	ldr	r2, [pc, #420]	; (8003988 <HAL_I2C_Init+0x284>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	3301      	adds	r3, #1
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	495c      	ldr	r1, [pc, #368]	; (8003978 <HAL_I2C_Init+0x274>)
 8003808:	428b      	cmp	r3, r1
 800380a:	d819      	bhi.n	8003840 <HAL_I2C_Init+0x13c>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e59      	subs	r1, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fbb1 f3f3 	udiv	r3, r1, r3
 800381a:	1c59      	adds	r1, r3, #1
 800381c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003820:	400b      	ands	r3, r1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_I2C_Init+0x138>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1e59      	subs	r1, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fbb1 f3f3 	udiv	r3, r1, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383a:	e051      	b.n	80038e0 <HAL_I2C_Init+0x1dc>
 800383c:	2304      	movs	r3, #4
 800383e:	e04f      	b.n	80038e0 <HAL_I2C_Init+0x1dc>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d111      	bne.n	800386c <HAL_I2C_Init+0x168>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e58      	subs	r0, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	440b      	add	r3, r1
 8003856:	fbb0 f3f3 	udiv	r3, r0, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e012      	b.n	8003892 <HAL_I2C_Init+0x18e>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1e58      	subs	r0, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6859      	ldr	r1, [r3, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	0099      	lsls	r1, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003882:	3301      	adds	r3, #1
 8003884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Init+0x196>
 8003896:	2301      	movs	r3, #1
 8003898:	e022      	b.n	80038e0 <HAL_I2C_Init+0x1dc>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10e      	bne.n	80038c0 <HAL_I2C_Init+0x1bc>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1e58      	subs	r0, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	440b      	add	r3, r1
 80038b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038be:	e00f      	b.n	80038e0 <HAL_I2C_Init+0x1dc>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1e58      	subs	r0, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	0099      	lsls	r1, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	6809      	ldr	r1, [r1, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800390e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6911      	ldr	r1, [r2, #16]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68d2      	ldr	r2, [r2, #12]
 800391a:	4311      	orrs	r1, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	430b      	orrs	r3, r1
 8003922:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	000186a0 	.word	0x000186a0
 800397c:	001e847f 	.word	0x001e847f
 8003980:	003d08ff 	.word	0x003d08ff
 8003984:	431bde83 	.word	0x431bde83
 8003988:	10624dd3 	.word	0x10624dd3

0800398c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	461a      	mov	r2, r3
 8003998:	460b      	mov	r3, r1
 800399a:	817b      	strh	r3, [r7, #10]
 800399c:	4613      	mov	r3, r2
 800399e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039a0:	f7fe fc9c 	bl	80022dc <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	f040 80e0 	bne.w	8003b74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2319      	movs	r3, #25
 80039ba:	2201      	movs	r2, #1
 80039bc:	4970      	ldr	r1, [pc, #448]	; (8003b80 <HAL_I2C_Master_Transmit+0x1f4>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fc72 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
 80039cc:	e0d3      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_I2C_Master_Transmit+0x50>
 80039d8:	2302      	movs	r3, #2
 80039da:	e0cc      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x1ea>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d007      	beq.n	8003a02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0201 	orr.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2221      	movs	r2, #33	; 0x21
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	893a      	ldrh	r2, [r7, #8]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a50      	ldr	r2, [pc, #320]	; (8003b84 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a44:	8979      	ldrh	r1, [r7, #10]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fac2 	bl	8003fd4 <I2C_MasterRequestWrite>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e08d      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a70:	e066      	b.n	8003b40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	6a39      	ldr	r1, [r7, #32]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fcec 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d107      	bne.n	8003a9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e06b      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	781a      	ldrb	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d11b      	bne.n	8003b14 <HAL_I2C_Master_Transmit+0x188>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	6a39      	ldr	r1, [r7, #32]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fcdc 	bl	80044d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d107      	bne.n	8003b3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e01a      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d194      	bne.n	8003a72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	00100002 	.word	0x00100002
 8003b84:	ffff0000 	.word	0xffff0000

08003b88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08c      	sub	sp, #48	; 0x30
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	813b      	strh	r3, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ba2:	f7fe fb9b 	bl	80022dc <HAL_GetTick>
 8003ba6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	f040 8208 	bne.w	8003fc6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2319      	movs	r3, #25
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	497b      	ldr	r1, [pc, #492]	; (8003dac <HAL_I2C_Mem_Read+0x224>)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fb71 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e1fb      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_I2C_Mem_Read+0x56>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e1f4      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d007      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2222      	movs	r2, #34	; 0x22
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a5b      	ldr	r2, [pc, #364]	; (8003db0 <HAL_I2C_Mem_Read+0x228>)
 8003c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c46:	88f8      	ldrh	r0, [r7, #6]
 8003c48:	893a      	ldrh	r2, [r7, #8]
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4603      	mov	r3, r0
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa3e 	bl	80040d8 <I2C_RequestMemoryRead>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e1b0      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d113      	bne.n	8003c96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	623b      	str	r3, [r7, #32]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e184      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d11b      	bne.n	8003cd6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e164      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d11b      	bne.n	8003d16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	e144      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d2c:	e138      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	f200 80f1 	bhi.w	8003f1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d123      	bne.n	8003d88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fc07 	bl	8004558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e139      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d86:	e10b      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d14e      	bne.n	8003e2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	2200      	movs	r2, #0
 8003d98:	4906      	ldr	r1, [pc, #24]	; (8003db4 <HAL_I2C_Mem_Read+0x22c>)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fa84 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e10e      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
 8003daa:	bf00      	nop
 8003dac:	00100002 	.word	0x00100002
 8003db0:	ffff0000 	.word	0xffff0000
 8003db4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e2c:	e0b8      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	2200      	movs	r2, #0
 8003e36:	4966      	ldr	r1, [pc, #408]	; (8003fd0 <HAL_I2C_Mem_Read+0x448>)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fa35 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0bf      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2200      	movs	r2, #0
 8003e92:	494f      	ldr	r1, [pc, #316]	; (8003fd0 <HAL_I2C_Mem_Read+0x448>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa07 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e091      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f18:	e042      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fb1a 	bl	8004558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e04c      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d118      	bne.n	8003fa0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f47f aec2 	bne.w	8003d2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3728      	adds	r7, #40	; 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	00010004 	.word	0x00010004

08003fd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d006      	beq.n	8003ffe <I2C_MasterRequestWrite+0x2a>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d003      	beq.n	8003ffe <I2C_MasterRequestWrite+0x2a>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ffc:	d108      	bne.n	8004010 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e00b      	b.n	8004028 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2b12      	cmp	r3, #18
 8004016:	d107      	bne.n	8004028 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004026:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f937 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404e:	d103      	bne.n	8004058 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e035      	b.n	80040c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004064:	d108      	bne.n	8004078 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004066:	897b      	ldrh	r3, [r7, #10]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004074:	611a      	str	r2, [r3, #16]
 8004076:	e01b      	b.n	80040b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004078:	897b      	ldrh	r3, [r7, #10]
 800407a:	11db      	asrs	r3, r3, #7
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f003 0306 	and.w	r3, r3, #6
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f063 030f 	orn	r3, r3, #15
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	490e      	ldr	r1, [pc, #56]	; (80040d0 <I2C_MasterRequestWrite+0xfc>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f95d 	bl	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e010      	b.n	80040c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4907      	ldr	r1, [pc, #28]	; (80040d4 <I2C_MasterRequestWrite+0x100>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f94d 	bl	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	00010008 	.word	0x00010008
 80040d4:	00010002 	.word	0x00010002

080040d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	460b      	mov	r3, r1
 80040ec:	813b      	strh	r3, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004100:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004110:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	2200      	movs	r2, #0
 800411a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f8c2 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004138:	d103      	bne.n	8004142 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0aa      	b.n	800429c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004146:	897b      	ldrh	r3, [r7, #10]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	4952      	ldr	r1, [pc, #328]	; (80042a4 <I2C_RequestMemoryRead+0x1cc>)
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f8fa 	bl	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e097      	b.n	800429c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	6a39      	ldr	r1, [r7, #32]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f964 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b04      	cmp	r3, #4
 8004198:	d107      	bne.n	80041aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e076      	b.n	800429c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b4:	893b      	ldrh	r3, [r7, #8]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]
 80041be:	e021      	b.n	8004204 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041c0:	893b      	ldrh	r3, [r7, #8]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d0:	6a39      	ldr	r1, [r7, #32]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f93e 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d107      	bne.n	80041f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e050      	b.n	800429c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041fa:	893b      	ldrh	r3, [r7, #8]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	6a39      	ldr	r1, [r7, #32]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f923 	bl	8004454 <I2C_WaitOnTXEFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b04      	cmp	r3, #4
 800421a:	d107      	bne.n	800422c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e035      	b.n	800429c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	2200      	movs	r2, #0
 8004248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f82b 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00d      	beq.n	8004274 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004266:	d103      	bne.n	8004270 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e013      	b.n	800429c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004274:	897b      	ldrh	r3, [r7, #10]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	6a3a      	ldr	r2, [r7, #32]
 8004288:	4906      	ldr	r1, [pc, #24]	; (80042a4 <I2C_RequestMemoryRead+0x1cc>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f863 	bl	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	00010002 	.word	0x00010002

080042a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b8:	e025      	b.n	8004306 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c0:	d021      	beq.n	8004306 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fe f80b 	bl	80022dc <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d116      	bne.n	8004306 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e023      	b.n	800434e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10d      	bne.n	800432c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	43da      	mvns	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4013      	ands	r3, r2
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	e00c      	b.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	43da      	mvns	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4013      	ands	r3, r2
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	429a      	cmp	r2, r3
 800434a:	d0b6      	beq.n	80042ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004364:	e051      	b.n	800440a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004374:	d123      	bne.n	80043be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004384:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800438e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0204 	orr.w	r2, r3, #4
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e046      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c4:	d021      	beq.n	800440a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fd ff89 	bl	80022dc <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e020      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d10c      	bne.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf14      	ite	ne
 8004426:	2301      	movne	r3, #1
 8004428:	2300      	moveq	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	e00b      	b.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	43da      	mvns	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d18d      	bne.n	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004460:	e02d      	b.n	80044be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f8ce 	bl	8004604 <I2C_IsAcknowledgeFailed>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e02d      	b.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004478:	d021      	beq.n	80044be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fd ff2f 	bl	80022dc <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d116      	bne.n	80044be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e007      	b.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d1ca      	bne.n	8004462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044e2:	e02d      	b.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f88d 	bl	8004604 <I2C_IsAcknowledgeFailed>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e02d      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044fa:	d021      	beq.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fc:	f7fd feee 	bl	80022dc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d116      	bne.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d1ca      	bne.n	80044e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004564:	e042      	b.n	80045ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d119      	bne.n	80045a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0210 	mvn.w	r2, #16
 800457c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e029      	b.n	80045fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a8:	f7fd fe98 	bl	80022dc <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d302      	bcc.n	80045be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d116      	bne.n	80045ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f043 0220 	orr.w	r2, r3, #32
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e007      	b.n	80045fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d1b5      	bne.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461a:	d11b      	bne.n	8004654 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004624:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f043 0204 	orr.w	r2, r3, #4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b20      	cmp	r3, #32
 8004676:	d129      	bne.n	80046cc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	; 0x24
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0210 	bic.w	r2, r2, #16
 800469e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d12a      	bne.n	800474a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004714:	89fb      	ldrh	r3, [r7, #14]
 8004716:	f023 030f 	bic.w	r3, r3, #15
 800471a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b29a      	uxth	r2, r3
 8004720:	89fb      	ldrh	r3, [r7, #14]
 8004722:	4313      	orrs	r3, r2
 8004724:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	89fa      	ldrh	r2, [r7, #14]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475a:	b08f      	sub	sp, #60	; 0x3c
 800475c:	af0a      	add	r7, sp, #40	; 0x28
 800475e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e10f      	b.n	800498a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fd fa83 	bl	8001c90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2203      	movs	r2, #3
 800478e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f9ae 	bl	8005b0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	687e      	ldr	r6, [r7, #4]
 80047b6:	466d      	mov	r5, sp
 80047b8:	f106 0410 	add.w	r4, r6, #16
 80047bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80047cc:	1d33      	adds	r3, r6, #4
 80047ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d0:	6838      	ldr	r0, [r7, #0]
 80047d2:	f001 f939 	bl	8005a48 <USB_CoreInit>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0d0      	b.n	800498a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 f99c 	bl	8005b2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e04a      	b.n	8004890 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	333d      	adds	r3, #61	; 0x3d
 800480a:	2201      	movs	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	333c      	adds	r3, #60	; 0x3c
 800481e:	7bfa      	ldrb	r2, [r7, #15]
 8004820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	b298      	uxth	r0, r3
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3344      	adds	r3, #68	; 0x44
 8004836:	4602      	mov	r2, r0
 8004838:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800483a:	7bfa      	ldrb	r2, [r7, #15]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3340      	adds	r3, #64	; 0x40
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800484e:	7bfa      	ldrb	r2, [r7, #15]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3348      	adds	r3, #72	; 0x48
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	334c      	adds	r3, #76	; 0x4c
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	3354      	adds	r3, #84	; 0x54
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	3301      	adds	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d3af      	bcc.n	80047fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489a:	2300      	movs	r3, #0
 800489c:	73fb      	strb	r3, [r7, #15]
 800489e:	e044      	b.n	800492a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048a0:	7bfa      	ldrb	r2, [r7, #15]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	3301      	adds	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d3b5      	bcc.n	80048a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	687e      	ldr	r6, [r7, #4]
 800493c:	466d      	mov	r5, sp
 800493e:	f106 0410 	add.w	r4, r6, #16
 8004942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800494a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800494e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004952:	1d33      	adds	r3, r6, #4
 8004954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004956:	6838      	ldr	r0, [r7, #0]
 8004958:	f001 f934 	bl	8005bc4 <USB_DevInit>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e00d      	b.n	800498a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f001 faff 	bl	8005f86 <USB_DevDisconnect>

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e267      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d075      	beq.n	8004a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049b2:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d00c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049be:	4b85      	ldr	r3, [pc, #532]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d112      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ca:	4b82      	ldr	r3, [pc, #520]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d6:	d10b      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	4b7e      	ldr	r3, [pc, #504]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05b      	beq.n	8004a9c <HAL_RCC_OscConfig+0x108>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d157      	bne.n	8004a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e242      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f8:	d106      	bne.n	8004a08 <HAL_RCC_OscConfig+0x74>
 80049fa:	4b76      	ldr	r3, [pc, #472]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a75      	ldr	r2, [pc, #468]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e01d      	b.n	8004a44 <HAL_RCC_OscConfig+0xb0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCC_OscConfig+0x98>
 8004a12:	4b70      	ldr	r3, [pc, #448]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6f      	ldr	r2, [pc, #444]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b6d      	ldr	r3, [pc, #436]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a6c      	ldr	r2, [pc, #432]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e00b      	b.n	8004a44 <HAL_RCC_OscConfig+0xb0>
 8004a2c:	4b69      	ldr	r3, [pc, #420]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a68      	ldr	r2, [pc, #416]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a65      	ldr	r2, [pc, #404]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d013      	beq.n	8004a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fd fc46 	bl	80022dc <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fd fc42 	bl	80022dc <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e207      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0xc0>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd fc32 	bl	80022dc <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fd fc2e 	bl	80022dc <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e1f3      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8e:	4b51      	ldr	r3, [pc, #324]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0xe8>
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d063      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aaa:	4b4a      	ldr	r3, [pc, #296]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d11c      	bne.n	8004afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ac2:	4b44      	ldr	r3, [pc, #272]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d116      	bne.n	8004afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ace:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x152>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d001      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e1c7      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4937      	ldr	r1, [pc, #220]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afa:	e03a      	b.n	8004b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d020      	beq.n	8004b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b04:	4b34      	ldr	r3, [pc, #208]	; (8004bd8 <HAL_RCC_OscConfig+0x244>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fd fbe7 	bl	80022dc <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b12:	f7fd fbe3 	bl	80022dc <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e1a8      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b24:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4925      	ldr	r1, [pc, #148]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]
 8004b44:	e015      	b.n	8004b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <HAL_RCC_OscConfig+0x244>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fd fbc6 	bl	80022dc <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b54:	f7fd fbc2 	bl	80022dc <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e187      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b66:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d036      	beq.n	8004bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_RCC_OscConfig+0x248>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fd fba6 	bl	80022dc <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b94:	f7fd fba2 	bl	80022dc <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e167      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x200>
 8004bb2:	e01b      	b.n	8004bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb4:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <HAL_RCC_OscConfig+0x248>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bba:	f7fd fb8f 	bl	80022dc <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	e00e      	b.n	8004be0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc2:	f7fd fb8b 	bl	80022dc <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d907      	bls.n	8004be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e150      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	42470000 	.word	0x42470000
 8004bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be0:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1ea      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8097 	beq.w	8004d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfe:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10f      	bne.n	8004c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	4b7d      	ldr	r3, [pc, #500]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	4a7c      	ldr	r2, [pc, #496]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1a:	4b7a      	ldr	r3, [pc, #488]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2a:	4b77      	ldr	r3, [pc, #476]	; (8004e08 <HAL_RCC_OscConfig+0x474>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d118      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c36:	4b74      	ldr	r3, [pc, #464]	; (8004e08 <HAL_RCC_OscConfig+0x474>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a73      	ldr	r2, [pc, #460]	; (8004e08 <HAL_RCC_OscConfig+0x474>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c42:	f7fd fb4b 	bl	80022dc <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4a:	f7fd fb47 	bl	80022dc <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e10c      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5c:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCC_OscConfig+0x474>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d106      	bne.n	8004c7e <HAL_RCC_OscConfig+0x2ea>
 8004c70:	4b64      	ldr	r3, [pc, #400]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4a63      	ldr	r2, [pc, #396]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7c:	e01c      	b.n	8004cb8 <HAL_RCC_OscConfig+0x324>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x30c>
 8004c86:	4b5f      	ldr	r3, [pc, #380]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	4a5e      	ldr	r2, [pc, #376]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	6713      	str	r3, [r2, #112]	; 0x70
 8004c92:	4b5c      	ldr	r3, [pc, #368]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a5b      	ldr	r2, [pc, #364]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0x324>
 8004ca0:	4b58      	ldr	r3, [pc, #352]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a57      	ldr	r2, [pc, #348]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cac:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	4a54      	ldr	r2, [pc, #336]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	f023 0304 	bic.w	r3, r3, #4
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d015      	beq.n	8004cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fd fb0c 	bl	80022dc <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fb08 	bl	80022dc <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e0cb      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cde:	4b49      	ldr	r3, [pc, #292]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ee      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x334>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cec:	f7fd faf6 	bl	80022dc <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf2:	e00a      	b.n	8004d0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fd faf2 	bl	80022dc <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e0b5      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0a:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ee      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1c:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80a1 	beq.w	8004e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d32:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d05c      	beq.n	8004df8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d141      	bne.n	8004dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d46:	4b31      	ldr	r3, [pc, #196]	; (8004e0c <HAL_RCC_OscConfig+0x478>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fd fac6 	bl	80022dc <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fd fac2 	bl	80022dc <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e087      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	019b      	lsls	r3, r3, #6
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	491b      	ldr	r1, [pc, #108]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_RCC_OscConfig+0x478>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da2:	f7fd fa9b 	bl	80022dc <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004daa:	f7fd fa97 	bl	80022dc <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e05c      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbc:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x416>
 8004dc8:	e054      	b.n	8004e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_RCC_OscConfig+0x478>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd0:	f7fd fa84 	bl	80022dc <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fd fa80 	bl	80022dc <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e045      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCC_OscConfig+0x470>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x444>
 8004df6:	e03d      	b.n	8004e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e038      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40007000 	.word	0x40007000
 8004e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <HAL_RCC_OscConfig+0x4ec>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d028      	beq.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d121      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d11a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d111      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800

08004e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0cc      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e98:	4b68      	ldr	r3, [pc, #416]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d90c      	bls.n	8004ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b65      	ldr	r3, [pc, #404]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b63      	ldr	r3, [pc, #396]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0b8      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4a58      	ldr	r2, [pc, #352]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef0:	4b53      	ldr	r3, [pc, #332]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a52      	ldr	r2, [pc, #328]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efc:	4b50      	ldr	r3, [pc, #320]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	494d      	ldr	r1, [pc, #308]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d044      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	4b47      	ldr	r3, [pc, #284]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d119      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d003      	beq.n	8004f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f42:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e06f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f52:	4b3b      	ldr	r3, [pc, #236]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e067      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 0203 	bic.w	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4934      	ldr	r1, [pc, #208]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f74:	f7fd f9b2 	bl	80022dc <HAL_GetTick>
 8004f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7c:	f7fd f9ae 	bl	80022dc <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e04f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	4b2b      	ldr	r3, [pc, #172]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 020c 	and.w	r2, r3, #12
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d1eb      	bne.n	8004f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d20c      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb2:	4b22      	ldr	r3, [pc, #136]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_RCC_ClockConfig+0x1b8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e032      	b.n	8005032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4916      	ldr	r1, [pc, #88]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800500a:	f000 f821 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 800500e:	4602      	mov	r2, r0
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	490a      	ldr	r1, [pc, #40]	; (8005044 <HAL_RCC_ClockConfig+0x1c0>)
 800501c:	5ccb      	ldrb	r3, [r1, r3]
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCC_ClockConfig+0x1c8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fd f912 	bl	8002254 <HAL_InitTick>

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40023c00 	.word	0x40023c00
 8005040:	40023800 	.word	0x40023800
 8005044:	08008e24 	.word	0x08008e24
 8005048:	20000000 	.word	0x20000000
 800504c:	20000004 	.word	0x20000004

08005050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b094      	sub	sp, #80	; 0x50
 8005056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
 800505c:	2300      	movs	r3, #0
 800505e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005060:	2300      	movs	r3, #0
 8005062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005068:	4b79      	ldr	r3, [pc, #484]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 030c 	and.w	r3, r3, #12
 8005070:	2b08      	cmp	r3, #8
 8005072:	d00d      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x40>
 8005074:	2b08      	cmp	r3, #8
 8005076:	f200 80e1 	bhi.w	800523c <HAL_RCC_GetSysClockFreq+0x1ec>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0x34>
 800507e:	2b04      	cmp	r3, #4
 8005080:	d003      	beq.n	800508a <HAL_RCC_GetSysClockFreq+0x3a>
 8005082:	e0db      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005084:	4b73      	ldr	r3, [pc, #460]	; (8005254 <HAL_RCC_GetSysClockFreq+0x204>)
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005088:	e0db      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800508a:	4b73      	ldr	r3, [pc, #460]	; (8005258 <HAL_RCC_GetSysClockFreq+0x208>)
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800508e:	e0d8      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005090:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800509a:	4b6d      	ldr	r3, [pc, #436]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d063      	beq.n	800516e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a6:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	099b      	lsrs	r3, r3, #6
 80050ac:	2200      	movs	r2, #0
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ba:	2300      	movs	r3, #0
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	f04f 0000 	mov.w	r0, #0
 80050ca:	f04f 0100 	mov.w	r1, #0
 80050ce:	0159      	lsls	r1, r3, #5
 80050d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d4:	0150      	lsls	r0, r2, #5
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4621      	mov	r1, r4
 80050dc:	1a51      	subs	r1, r2, r1
 80050de:	6139      	str	r1, [r7, #16]
 80050e0:	4629      	mov	r1, r5
 80050e2:	eb63 0301 	sbc.w	r3, r3, r1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f4:	4659      	mov	r1, fp
 80050f6:	018b      	lsls	r3, r1, #6
 80050f8:	4651      	mov	r1, sl
 80050fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050fe:	4651      	mov	r1, sl
 8005100:	018a      	lsls	r2, r1, #6
 8005102:	4651      	mov	r1, sl
 8005104:	ebb2 0801 	subs.w	r8, r2, r1
 8005108:	4659      	mov	r1, fp
 800510a:	eb63 0901 	sbc.w	r9, r3, r1
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005122:	4690      	mov	r8, r2
 8005124:	4699      	mov	r9, r3
 8005126:	4623      	mov	r3, r4
 8005128:	eb18 0303 	adds.w	r3, r8, r3
 800512c:	60bb      	str	r3, [r7, #8]
 800512e:	462b      	mov	r3, r5
 8005130:	eb49 0303 	adc.w	r3, r9, r3
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005142:	4629      	mov	r1, r5
 8005144:	024b      	lsls	r3, r1, #9
 8005146:	4621      	mov	r1, r4
 8005148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800514c:	4621      	mov	r1, r4
 800514e:	024a      	lsls	r2, r1, #9
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	2200      	movs	r2, #0
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
 800515a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005160:	f7fb fd82 	bl	8000c68 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516c:	e058      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516e:	4b38      	ldr	r3, [pc, #224]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	2200      	movs	r2, #0
 8005176:	4618      	mov	r0, r3
 8005178:	4611      	mov	r1, r2
 800517a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	2300      	movs	r3, #0
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	0159      	lsls	r1, r3, #5
 8005196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519a:	0150      	lsls	r0, r2, #5
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4641      	mov	r1, r8
 80051a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051c0:	ebb2 040a 	subs.w	r4, r2, sl
 80051c4:	eb63 050b 	sbc.w	r5, r3, fp
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	00eb      	lsls	r3, r5, #3
 80051d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d6:	00e2      	lsls	r2, r4, #3
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	4643      	mov	r3, r8
 80051de:	18e3      	adds	r3, r4, r3
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	464b      	mov	r3, r9
 80051e4:	eb45 0303 	adc.w	r3, r5, r3
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f6:	4629      	mov	r1, r5
 80051f8:	028b      	lsls	r3, r1, #10
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005200:	4621      	mov	r1, r4
 8005202:	028a      	lsls	r2, r1, #10
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520a:	2200      	movs	r2, #0
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	61fa      	str	r2, [r7, #28]
 8005210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005214:	f7fb fd28 	bl	8000c68 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_GetSysClockFreq+0x200>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	3301      	adds	r3, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523a:	e002      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetSysClockFreq+0x204>)
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005244:	4618      	mov	r0, r3
 8005246:	3750      	adds	r7, #80	; 0x50
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00f42400 	.word	0x00f42400
 8005258:	007a1200 	.word	0x007a1200

0800525c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <HAL_RCC_GetHCLKFreq+0x14>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000000 	.word	0x20000000

08005274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005278:	f7ff fff0 	bl	800525c <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	08008e34 	.word	0x08008e34

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052a0:	f7ff ffdc 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0b5b      	lsrs	r3, r3, #13
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	08008e34 	.word	0x08008e34

080052c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e03f      	b.n	8005356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc fc5a 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	; 0x24
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f929 	bl	8005560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800531c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800532c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800533c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b08a      	sub	sp, #40	; 0x28
 8005362:	af02      	add	r7, sp, #8
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b20      	cmp	r3, #32
 800537c:	d17c      	bne.n	8005478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_UART_Transmit+0x2c>
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e075      	b.n	800547a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_UART_Transmit+0x3e>
 8005398:	2302      	movs	r3, #2
 800539a:	e06e      	b.n	800547a <HAL_UART_Transmit+0x11c>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2221      	movs	r2, #33	; 0x21
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053b2:	f7fc ff93 	bl	80022dc <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053cc:	d108      	bne.n	80053e0 <HAL_UART_Transmit+0x82>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e003      	b.n	80053e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053f0:	e02a      	b.n	8005448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	2180      	movs	r1, #128	; 0x80
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f840 	bl	8005482 <UART_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e036      	b.n	800547a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	3302      	adds	r3, #2
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e007      	b.n	800543a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3301      	adds	r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1cf      	bne.n	80053f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	2140      	movs	r1, #64	; 0x40
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f810 	bl	8005482 <UART_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e006      	b.n	800547a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b090      	sub	sp, #64	; 0x40
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	4613      	mov	r3, r2
 8005490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005492:	e050      	b.n	8005536 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549a:	d04c      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800549c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80054a2:	f7fc ff1b 	bl	80022dc <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d241      	bcs.n	8005536 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054d2:	637a      	str	r2, [r7, #52]	; 0x34
 80054d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e5      	bne.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3314      	adds	r3, #20
 8005504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005506:	623a      	str	r2, [r7, #32]
 8005508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69f9      	ldr	r1, [r7, #28]
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	61bb      	str	r3, [r7, #24]
   return(result);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e00f      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	429a      	cmp	r2, r3
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	429a      	cmp	r2, r3
 8005552:	d09f      	beq.n	8005494 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3740      	adds	r7, #64	; 0x40
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005564:	b0c0      	sub	sp, #256	; 0x100
 8005566:	af00      	add	r7, sp, #0
 8005568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	68d9      	ldr	r1, [r3, #12]
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	ea40 0301 	orr.w	r3, r0, r1
 8005588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	431a      	orrs	r2, r3
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055b8:	f021 010c 	bic.w	r1, r1, #12
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055c6:	430b      	orrs	r3, r1
 80055c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	6999      	ldr	r1, [r3, #24]
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	ea40 0301 	orr.w	r3, r0, r1
 80055e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8f      	ldr	r3, [pc, #572]	; (800582c <UART_SetConfig+0x2cc>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d005      	beq.n	8005600 <UART_SetConfig+0xa0>
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b8d      	ldr	r3, [pc, #564]	; (8005830 <UART_SetConfig+0x2d0>)
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d104      	bne.n	800560a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005600:	f7ff fe4c 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8005604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005608:	e003      	b.n	8005612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800560a:	f7ff fe33 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 800560e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800561c:	f040 810c 	bne.w	8005838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005624:	2200      	movs	r2, #0
 8005626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800562a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800562e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005632:	4622      	mov	r2, r4
 8005634:	462b      	mov	r3, r5
 8005636:	1891      	adds	r1, r2, r2
 8005638:	65b9      	str	r1, [r7, #88]	; 0x58
 800563a:	415b      	adcs	r3, r3
 800563c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800563e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005642:	4621      	mov	r1, r4
 8005644:	eb12 0801 	adds.w	r8, r2, r1
 8005648:	4629      	mov	r1, r5
 800564a:	eb43 0901 	adc.w	r9, r3, r1
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800565e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005662:	4690      	mov	r8, r2
 8005664:	4699      	mov	r9, r3
 8005666:	4623      	mov	r3, r4
 8005668:	eb18 0303 	adds.w	r3, r8, r3
 800566c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005670:	462b      	mov	r3, r5
 8005672:	eb49 0303 	adc.w	r3, r9, r3
 8005676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800568a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800568e:	460b      	mov	r3, r1
 8005690:	18db      	adds	r3, r3, r3
 8005692:	653b      	str	r3, [r7, #80]	; 0x50
 8005694:	4613      	mov	r3, r2
 8005696:	eb42 0303 	adc.w	r3, r2, r3
 800569a:	657b      	str	r3, [r7, #84]	; 0x54
 800569c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056a4:	f7fb fae0 	bl	8000c68 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4b61      	ldr	r3, [pc, #388]	; (8005834 <UART_SetConfig+0x2d4>)
 80056ae:	fba3 2302 	umull	r2, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	011c      	lsls	r4, r3, #4
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80056d0:	415b      	adcs	r3, r3
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056d8:	4641      	mov	r1, r8
 80056da:	eb12 0a01 	adds.w	sl, r2, r1
 80056de:	4649      	mov	r1, r9
 80056e0:	eb43 0b01 	adc.w	fp, r3, r1
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f8:	4692      	mov	sl, r2
 80056fa:	469b      	mov	fp, r3
 80056fc:	4643      	mov	r3, r8
 80056fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005706:	464b      	mov	r3, r9
 8005708:	eb4b 0303 	adc.w	r3, fp, r3
 800570c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800571c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005724:	460b      	mov	r3, r1
 8005726:	18db      	adds	r3, r3, r3
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
 800572a:	4613      	mov	r3, r2
 800572c:	eb42 0303 	adc.w	r3, r2, r3
 8005730:	647b      	str	r3, [r7, #68]	; 0x44
 8005732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800573a:	f7fb fa95 	bl	8000c68 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4611      	mov	r1, r2
 8005744:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <UART_SetConfig+0x2d4>)
 8005746:	fba3 2301 	umull	r2, r3, r3, r1
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	2264      	movs	r2, #100	; 0x64
 800574e:	fb02 f303 	mul.w	r3, r2, r3
 8005752:	1acb      	subs	r3, r1, r3
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800575a:	4b36      	ldr	r3, [pc, #216]	; (8005834 <UART_SetConfig+0x2d4>)
 800575c:	fba3 2302 	umull	r2, r3, r3, r2
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005768:	441c      	add	r4, r3
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	1891      	adds	r1, r2, r2
 8005782:	63b9      	str	r1, [r7, #56]	; 0x38
 8005784:	415b      	adcs	r3, r3
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800578c:	4641      	mov	r1, r8
 800578e:	1851      	adds	r1, r2, r1
 8005790:	6339      	str	r1, [r7, #48]	; 0x30
 8005792:	4649      	mov	r1, r9
 8005794:	414b      	adcs	r3, r1
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057a4:	4659      	mov	r1, fp
 80057a6:	00cb      	lsls	r3, r1, #3
 80057a8:	4651      	mov	r1, sl
 80057aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ae:	4651      	mov	r1, sl
 80057b0:	00ca      	lsls	r2, r1, #3
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	4642      	mov	r2, r8
 80057ba:	189b      	adds	r3, r3, r2
 80057bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c0:	464b      	mov	r3, r9
 80057c2:	460a      	mov	r2, r1
 80057c4:	eb42 0303 	adc.w	r3, r2, r3
 80057c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057e0:	460b      	mov	r3, r1
 80057e2:	18db      	adds	r3, r3, r3
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e6:	4613      	mov	r3, r2
 80057e8:	eb42 0303 	adc.w	r3, r2, r3
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057f6:	f7fb fa37 	bl	8000c68 <__aeabi_uldivmod>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <UART_SetConfig+0x2d4>)
 8005800:	fba3 1302 	umull	r1, r3, r3, r2
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	2164      	movs	r1, #100	; 0x64
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	3332      	adds	r3, #50	; 0x32
 8005812:	4a08      	ldr	r2, [pc, #32]	; (8005834 <UART_SetConfig+0x2d4>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	f003 0207 	and.w	r2, r3, #7
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4422      	add	r2, r4
 8005826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005828:	e106      	b.n	8005a38 <UART_SetConfig+0x4d8>
 800582a:	bf00      	nop
 800582c:	40011000 	.word	0x40011000
 8005830:	40011400 	.word	0x40011400
 8005834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800583c:	2200      	movs	r2, #0
 800583e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800584a:	4642      	mov	r2, r8
 800584c:	464b      	mov	r3, r9
 800584e:	1891      	adds	r1, r2, r2
 8005850:	6239      	str	r1, [r7, #32]
 8005852:	415b      	adcs	r3, r3
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800585a:	4641      	mov	r1, r8
 800585c:	1854      	adds	r4, r2, r1
 800585e:	4649      	mov	r1, r9
 8005860:	eb43 0501 	adc.w	r5, r3, r1
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	00eb      	lsls	r3, r5, #3
 800586e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005872:	00e2      	lsls	r2, r4, #3
 8005874:	4614      	mov	r4, r2
 8005876:	461d      	mov	r5, r3
 8005878:	4643      	mov	r3, r8
 800587a:	18e3      	adds	r3, r4, r3
 800587c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005880:	464b      	mov	r3, r9
 8005882:	eb45 0303 	adc.w	r3, r5, r3
 8005886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058a6:	4629      	mov	r1, r5
 80058a8:	008b      	lsls	r3, r1, #2
 80058aa:	4621      	mov	r1, r4
 80058ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b0:	4621      	mov	r1, r4
 80058b2:	008a      	lsls	r2, r1, #2
 80058b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058b8:	f7fb f9d6 	bl	8000c68 <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4b60      	ldr	r3, [pc, #384]	; (8005a44 <UART_SetConfig+0x4e4>)
 80058c2:	fba3 2302 	umull	r2, r3, r3, r2
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	011c      	lsls	r4, r3, #4
 80058ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	1891      	adds	r1, r2, r2
 80058e2:	61b9      	str	r1, [r7, #24]
 80058e4:	415b      	adcs	r3, r3
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ec:	4641      	mov	r1, r8
 80058ee:	1851      	adds	r1, r2, r1
 80058f0:	6139      	str	r1, [r7, #16]
 80058f2:	4649      	mov	r1, r9
 80058f4:	414b      	adcs	r3, r1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005904:	4659      	mov	r1, fp
 8005906:	00cb      	lsls	r3, r1, #3
 8005908:	4651      	mov	r1, sl
 800590a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800590e:	4651      	mov	r1, sl
 8005910:	00ca      	lsls	r2, r1, #3
 8005912:	4610      	mov	r0, r2
 8005914:	4619      	mov	r1, r3
 8005916:	4603      	mov	r3, r0
 8005918:	4642      	mov	r2, r8
 800591a:	189b      	adds	r3, r3, r2
 800591c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005920:	464b      	mov	r3, r9
 8005922:	460a      	mov	r2, r1
 8005924:	eb42 0303 	adc.w	r3, r2, r3
 8005928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	67bb      	str	r3, [r7, #120]	; 0x78
 8005936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005944:	4649      	mov	r1, r9
 8005946:	008b      	lsls	r3, r1, #2
 8005948:	4641      	mov	r1, r8
 800594a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800594e:	4641      	mov	r1, r8
 8005950:	008a      	lsls	r2, r1, #2
 8005952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005956:	f7fb f987 	bl	8000c68 <__aeabi_uldivmod>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4611      	mov	r1, r2
 8005960:	4b38      	ldr	r3, [pc, #224]	; (8005a44 <UART_SetConfig+0x4e4>)
 8005962:	fba3 2301 	umull	r2, r3, r3, r1
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	2264      	movs	r2, #100	; 0x64
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	1acb      	subs	r3, r1, r3
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	3332      	adds	r3, #50	; 0x32
 8005974:	4a33      	ldr	r2, [pc, #204]	; (8005a44 <UART_SetConfig+0x4e4>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005980:	441c      	add	r4, r3
 8005982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005986:	2200      	movs	r2, #0
 8005988:	673b      	str	r3, [r7, #112]	; 0x70
 800598a:	677a      	str	r2, [r7, #116]	; 0x74
 800598c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	1891      	adds	r1, r2, r2
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	415b      	adcs	r3, r3
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a0:	4641      	mov	r1, r8
 80059a2:	1851      	adds	r1, r2, r1
 80059a4:	6039      	str	r1, [r7, #0]
 80059a6:	4649      	mov	r1, r9
 80059a8:	414b      	adcs	r3, r1
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059b8:	4659      	mov	r1, fp
 80059ba:	00cb      	lsls	r3, r1, #3
 80059bc:	4651      	mov	r1, sl
 80059be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c2:	4651      	mov	r1, sl
 80059c4:	00ca      	lsls	r2, r1, #3
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	4642      	mov	r2, r8
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d2:	464b      	mov	r3, r9
 80059d4:	460a      	mov	r2, r1
 80059d6:	eb42 0303 	adc.w	r3, r2, r3
 80059da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	663b      	str	r3, [r7, #96]	; 0x60
 80059e6:	667a      	str	r2, [r7, #100]	; 0x64
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059f4:	4649      	mov	r1, r9
 80059f6:	008b      	lsls	r3, r1, #2
 80059f8:	4641      	mov	r1, r8
 80059fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059fe:	4641      	mov	r1, r8
 8005a00:	008a      	lsls	r2, r1, #2
 8005a02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a06:	f7fb f92f 	bl	8000c68 <__aeabi_uldivmod>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <UART_SetConfig+0x4e4>)
 8005a10:	fba3 1302 	umull	r1, r3, r3, r2
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	2164      	movs	r1, #100	; 0x64
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	3332      	adds	r3, #50	; 0x32
 8005a22:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <UART_SetConfig+0x4e4>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	f003 020f 	and.w	r2, r3, #15
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4422      	add	r2, r4
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a44:	51eb851f 	.word	0x51eb851f

08005a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a48:	b084      	sub	sp, #16
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	f107 001c 	add.w	r0, r7, #28
 8005a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d122      	bne.n	8005aa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d105      	bne.n	8005a9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 faa2 	bl	8005fe4 <USB_CoreReset>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]
 8005aa4:	e01a      	b.n	8005adc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa96 	bl	8005fe4 <USB_CoreReset>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
 8005ace:	e005      	b.n	8005adc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d10b      	bne.n	8005afa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f043 0206 	orr.w	r2, r3, #6
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b06:	b004      	add	sp, #16
 8005b08:	4770      	bx	lr

08005b0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f023 0201 	bic.w	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d115      	bne.n	8005b7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	f7fc fbca 	bl	80022f4 <HAL_Delay>
      ms++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa2e 	bl	8005fc8 <USB_GetMode>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d01e      	beq.n	8005bb0 <USB_SetCurrentMode+0x84>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b31      	cmp	r3, #49	; 0x31
 8005b76:	d9f0      	bls.n	8005b5a <USB_SetCurrentMode+0x2e>
 8005b78:	e01a      	b.n	8005bb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d115      	bne.n	8005bac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7fc fbb1 	bl	80022f4 <HAL_Delay>
      ms++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3301      	adds	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fa15 	bl	8005fc8 <USB_GetMode>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <USB_SetCurrentMode+0x84>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b31      	cmp	r3, #49	; 0x31
 8005ba8:	d9f0      	bls.n	8005b8c <USB_SetCurrentMode+0x60>
 8005baa:	e001      	b.n	8005bb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e005      	b.n	8005bbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b32      	cmp	r3, #50	; 0x32
 8005bb4:	d101      	bne.n	8005bba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e009      	b.n	8005bf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	3340      	adds	r3, #64	; 0x40
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	2200      	movs	r2, #0
 8005bf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b0e      	cmp	r3, #14
 8005bfc:	d9f2      	bls.n	8005be4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11c      	bne.n	8005c3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c12:	f043 0302 	orr.w	r3, r3, #2
 8005c16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c3c:	e00b      	b.n	8005c56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c68:	4619      	mov	r1, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	461a      	mov	r2, r3
 8005c72:	680b      	ldr	r3, [r1, #0]
 8005c74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d10c      	bne.n	8005c96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c82:	2100      	movs	r1, #0
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f965 	bl	8005f54 <USB_SetDevSpeed>
 8005c8a:	e008      	b.n	8005c9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f960 	bl	8005f54 <USB_SetDevSpeed>
 8005c94:	e003      	b.n	8005c9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c96:	2103      	movs	r1, #3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f95b 	bl	8005f54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c9e:	2110      	movs	r1, #16
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f8f3 	bl	8005e8c <USB_FlushTxFifo>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f91f 	bl	8005ef4 <USB_FlushRxFifo>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e043      	b.n	8005d72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d00:	d118      	bne.n	8005d34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	461a      	mov	r2, r3
 8005d16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e013      	b.n	8005d46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e008      	b.n	8005d46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d40:	461a      	mov	r2, r3
 8005d42:	2300      	movs	r3, #0
 8005d44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	461a      	mov	r2, r3
 8005d54:	2300      	movs	r3, #0
 8005d56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d64:	461a      	mov	r2, r3
 8005d66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d3b7      	bcc.n	8005cea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	e043      	b.n	8005e08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d96:	d118      	bne.n	8005dca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	461a      	mov	r2, r3
 8005dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e013      	b.n	8005ddc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	e008      	b.n	8005ddc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	2300      	movs	r3, #0
 8005dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3301      	adds	r3, #1
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d3b7      	bcc.n	8005d80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f043 0210 	orr.w	r2, r3, #16
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <USB_DevInit+0x2c4>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f043 0208 	orr.w	r2, r3, #8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d107      	bne.n	8005e78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e70:	f043 0304 	orr.w	r3, r3, #4
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e84:	b004      	add	sp, #16
 8005e86:	4770      	bx	lr
 8005e88:	803c3800 	.word	0x803c3800

08005e8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <USB_FlushTxFifo+0x64>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d901      	bls.n	8005eac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e01b      	b.n	8005ee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	daf2      	bge.n	8005e9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	019b      	lsls	r3, r3, #6
 8005ebc:	f043 0220 	orr.w	r2, r3, #32
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <USB_FlushTxFifo+0x64>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d901      	bls.n	8005ed6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e006      	b.n	8005ee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d0f0      	beq.n	8005ec4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	00030d40 	.word	0x00030d40

08005ef4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <USB_FlushRxFifo+0x5c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e018      	b.n	8005f44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	daf2      	bge.n	8005f00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2210      	movs	r2, #16
 8005f22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <USB_FlushRxFifo+0x5c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e006      	b.n	8005f44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d0f0      	beq.n	8005f24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	00030d40 	.word	0x00030d40

08005f54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f74:	4313      	orrs	r3, r2
 8005f76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fa0:	f023 0303 	bic.w	r3, r3, #3
 8005fa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a13      	ldr	r2, [pc, #76]	; (8006048 <USB_CoreReset+0x64>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e01b      	b.n	800603a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	daf2      	bge.n	8005ff0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f043 0201 	orr.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a09      	ldr	r2, [pc, #36]	; (8006048 <USB_CoreReset+0x64>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d901      	bls.n	800602c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e006      	b.n	800603a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b01      	cmp	r3, #1
 8006036:	d0f0      	beq.n	800601a <USB_CoreReset+0x36>

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	00030d40 	.word	0x00030d40

0800604c <__cvt>:
 800604c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006050:	ec55 4b10 	vmov	r4, r5, d0
 8006054:	2d00      	cmp	r5, #0
 8006056:	460e      	mov	r6, r1
 8006058:	4619      	mov	r1, r3
 800605a:	462b      	mov	r3, r5
 800605c:	bfbb      	ittet	lt
 800605e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006062:	461d      	movlt	r5, r3
 8006064:	2300      	movge	r3, #0
 8006066:	232d      	movlt	r3, #45	; 0x2d
 8006068:	700b      	strb	r3, [r1, #0]
 800606a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800606c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006070:	4691      	mov	r9, r2
 8006072:	f023 0820 	bic.w	r8, r3, #32
 8006076:	bfbc      	itt	lt
 8006078:	4622      	movlt	r2, r4
 800607a:	4614      	movlt	r4, r2
 800607c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006080:	d005      	beq.n	800608e <__cvt+0x42>
 8006082:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006086:	d100      	bne.n	800608a <__cvt+0x3e>
 8006088:	3601      	adds	r6, #1
 800608a:	2102      	movs	r1, #2
 800608c:	e000      	b.n	8006090 <__cvt+0x44>
 800608e:	2103      	movs	r1, #3
 8006090:	ab03      	add	r3, sp, #12
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	ab02      	add	r3, sp, #8
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	ec45 4b10 	vmov	d0, r4, r5
 800609c:	4653      	mov	r3, sl
 800609e:	4632      	mov	r2, r6
 80060a0:	f000 fe6a 	bl	8006d78 <_dtoa_r>
 80060a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060a8:	4607      	mov	r7, r0
 80060aa:	d102      	bne.n	80060b2 <__cvt+0x66>
 80060ac:	f019 0f01 	tst.w	r9, #1
 80060b0:	d022      	beq.n	80060f8 <__cvt+0xac>
 80060b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060b6:	eb07 0906 	add.w	r9, r7, r6
 80060ba:	d110      	bne.n	80060de <__cvt+0x92>
 80060bc:	783b      	ldrb	r3, [r7, #0]
 80060be:	2b30      	cmp	r3, #48	; 0x30
 80060c0:	d10a      	bne.n	80060d8 <__cvt+0x8c>
 80060c2:	2200      	movs	r2, #0
 80060c4:	2300      	movs	r3, #0
 80060c6:	4620      	mov	r0, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	f7fa fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 80060ce:	b918      	cbnz	r0, 80060d8 <__cvt+0x8c>
 80060d0:	f1c6 0601 	rsb	r6, r6, #1
 80060d4:	f8ca 6000 	str.w	r6, [sl]
 80060d8:	f8da 3000 	ldr.w	r3, [sl]
 80060dc:	4499      	add	r9, r3
 80060de:	2200      	movs	r2, #0
 80060e0:	2300      	movs	r3, #0
 80060e2:	4620      	mov	r0, r4
 80060e4:	4629      	mov	r1, r5
 80060e6:	f7fa fcff 	bl	8000ae8 <__aeabi_dcmpeq>
 80060ea:	b108      	cbz	r0, 80060f0 <__cvt+0xa4>
 80060ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80060f0:	2230      	movs	r2, #48	; 0x30
 80060f2:	9b03      	ldr	r3, [sp, #12]
 80060f4:	454b      	cmp	r3, r9
 80060f6:	d307      	bcc.n	8006108 <__cvt+0xbc>
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060fc:	1bdb      	subs	r3, r3, r7
 80060fe:	4638      	mov	r0, r7
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	b004      	add	sp, #16
 8006104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006108:	1c59      	adds	r1, r3, #1
 800610a:	9103      	str	r1, [sp, #12]
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	e7f0      	b.n	80060f2 <__cvt+0xa6>

08006110 <__exponent>:
 8006110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006112:	4603      	mov	r3, r0
 8006114:	2900      	cmp	r1, #0
 8006116:	bfb8      	it	lt
 8006118:	4249      	neglt	r1, r1
 800611a:	f803 2b02 	strb.w	r2, [r3], #2
 800611e:	bfb4      	ite	lt
 8006120:	222d      	movlt	r2, #45	; 0x2d
 8006122:	222b      	movge	r2, #43	; 0x2b
 8006124:	2909      	cmp	r1, #9
 8006126:	7042      	strb	r2, [r0, #1]
 8006128:	dd2a      	ble.n	8006180 <__exponent+0x70>
 800612a:	f10d 0207 	add.w	r2, sp, #7
 800612e:	4617      	mov	r7, r2
 8006130:	260a      	movs	r6, #10
 8006132:	4694      	mov	ip, r2
 8006134:	fb91 f5f6 	sdiv	r5, r1, r6
 8006138:	fb06 1415 	mls	r4, r6, r5, r1
 800613c:	3430      	adds	r4, #48	; 0x30
 800613e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006142:	460c      	mov	r4, r1
 8006144:	2c63      	cmp	r4, #99	; 0x63
 8006146:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800614a:	4629      	mov	r1, r5
 800614c:	dcf1      	bgt.n	8006132 <__exponent+0x22>
 800614e:	3130      	adds	r1, #48	; 0x30
 8006150:	f1ac 0402 	sub.w	r4, ip, #2
 8006154:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006158:	1c41      	adds	r1, r0, #1
 800615a:	4622      	mov	r2, r4
 800615c:	42ba      	cmp	r2, r7
 800615e:	d30a      	bcc.n	8006176 <__exponent+0x66>
 8006160:	f10d 0209 	add.w	r2, sp, #9
 8006164:	eba2 020c 	sub.w	r2, r2, ip
 8006168:	42bc      	cmp	r4, r7
 800616a:	bf88      	it	hi
 800616c:	2200      	movhi	r2, #0
 800616e:	4413      	add	r3, r2
 8006170:	1a18      	subs	r0, r3, r0
 8006172:	b003      	add	sp, #12
 8006174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006176:	f812 5b01 	ldrb.w	r5, [r2], #1
 800617a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800617e:	e7ed      	b.n	800615c <__exponent+0x4c>
 8006180:	2330      	movs	r3, #48	; 0x30
 8006182:	3130      	adds	r1, #48	; 0x30
 8006184:	7083      	strb	r3, [r0, #2]
 8006186:	70c1      	strb	r1, [r0, #3]
 8006188:	1d03      	adds	r3, r0, #4
 800618a:	e7f1      	b.n	8006170 <__exponent+0x60>

0800618c <_printf_float>:
 800618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006190:	ed2d 8b02 	vpush	{d8}
 8006194:	b08d      	sub	sp, #52	; 0x34
 8006196:	460c      	mov	r4, r1
 8006198:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800619c:	4616      	mov	r6, r2
 800619e:	461f      	mov	r7, r3
 80061a0:	4605      	mov	r5, r0
 80061a2:	f000 fce7 	bl	8006b74 <_localeconv_r>
 80061a6:	f8d0 a000 	ldr.w	sl, [r0]
 80061aa:	4650      	mov	r0, sl
 80061ac:	f7fa f870 	bl	8000290 <strlen>
 80061b0:	2300      	movs	r3, #0
 80061b2:	930a      	str	r3, [sp, #40]	; 0x28
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	9305      	str	r3, [sp, #20]
 80061b8:	f8d8 3000 	ldr.w	r3, [r8]
 80061bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80061c0:	3307      	adds	r3, #7
 80061c2:	f023 0307 	bic.w	r3, r3, #7
 80061c6:	f103 0208 	add.w	r2, r3, #8
 80061ca:	f8c8 2000 	str.w	r2, [r8]
 80061ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061d6:	9307      	str	r3, [sp, #28]
 80061d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80061dc:	ee08 0a10 	vmov	s16, r0
 80061e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80061e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061e8:	4b9e      	ldr	r3, [pc, #632]	; (8006464 <_printf_float+0x2d8>)
 80061ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ee:	f7fa fcad 	bl	8000b4c <__aeabi_dcmpun>
 80061f2:	bb88      	cbnz	r0, 8006258 <_printf_float+0xcc>
 80061f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061f8:	4b9a      	ldr	r3, [pc, #616]	; (8006464 <_printf_float+0x2d8>)
 80061fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061fe:	f7fa fc87 	bl	8000b10 <__aeabi_dcmple>
 8006202:	bb48      	cbnz	r0, 8006258 <_printf_float+0xcc>
 8006204:	2200      	movs	r2, #0
 8006206:	2300      	movs	r3, #0
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	f7fa fc76 	bl	8000afc <__aeabi_dcmplt>
 8006210:	b110      	cbz	r0, 8006218 <_printf_float+0x8c>
 8006212:	232d      	movs	r3, #45	; 0x2d
 8006214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006218:	4a93      	ldr	r2, [pc, #588]	; (8006468 <_printf_float+0x2dc>)
 800621a:	4b94      	ldr	r3, [pc, #592]	; (800646c <_printf_float+0x2e0>)
 800621c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006220:	bf94      	ite	ls
 8006222:	4690      	movls	r8, r2
 8006224:	4698      	movhi	r8, r3
 8006226:	2303      	movs	r3, #3
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	9b05      	ldr	r3, [sp, #20]
 800622c:	f023 0304 	bic.w	r3, r3, #4
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	f04f 0900 	mov.w	r9, #0
 8006236:	9700      	str	r7, [sp, #0]
 8006238:	4633      	mov	r3, r6
 800623a:	aa0b      	add	r2, sp, #44	; 0x2c
 800623c:	4621      	mov	r1, r4
 800623e:	4628      	mov	r0, r5
 8006240:	f000 f9da 	bl	80065f8 <_printf_common>
 8006244:	3001      	adds	r0, #1
 8006246:	f040 8090 	bne.w	800636a <_printf_float+0x1de>
 800624a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800624e:	b00d      	add	sp, #52	; 0x34
 8006250:	ecbd 8b02 	vpop	{d8}
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	4642      	mov	r2, r8
 800625a:	464b      	mov	r3, r9
 800625c:	4640      	mov	r0, r8
 800625e:	4649      	mov	r1, r9
 8006260:	f7fa fc74 	bl	8000b4c <__aeabi_dcmpun>
 8006264:	b140      	cbz	r0, 8006278 <_printf_float+0xec>
 8006266:	464b      	mov	r3, r9
 8006268:	2b00      	cmp	r3, #0
 800626a:	bfbc      	itt	lt
 800626c:	232d      	movlt	r3, #45	; 0x2d
 800626e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006272:	4a7f      	ldr	r2, [pc, #508]	; (8006470 <_printf_float+0x2e4>)
 8006274:	4b7f      	ldr	r3, [pc, #508]	; (8006474 <_printf_float+0x2e8>)
 8006276:	e7d1      	b.n	800621c <_printf_float+0x90>
 8006278:	6863      	ldr	r3, [r4, #4]
 800627a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800627e:	9206      	str	r2, [sp, #24]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	d13f      	bne.n	8006304 <_printf_float+0x178>
 8006284:	2306      	movs	r3, #6
 8006286:	6063      	str	r3, [r4, #4]
 8006288:	9b05      	ldr	r3, [sp, #20]
 800628a:	6861      	ldr	r1, [r4, #4]
 800628c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006290:	2300      	movs	r3, #0
 8006292:	9303      	str	r3, [sp, #12]
 8006294:	ab0a      	add	r3, sp, #40	; 0x28
 8006296:	e9cd b301 	strd	fp, r3, [sp, #4]
 800629a:	ab09      	add	r3, sp, #36	; 0x24
 800629c:	ec49 8b10 	vmov	d0, r8, r9
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6022      	str	r2, [r4, #0]
 80062a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062a8:	4628      	mov	r0, r5
 80062aa:	f7ff fecf 	bl	800604c <__cvt>
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062b2:	2b47      	cmp	r3, #71	; 0x47
 80062b4:	4680      	mov	r8, r0
 80062b6:	d108      	bne.n	80062ca <_printf_float+0x13e>
 80062b8:	1cc8      	adds	r0, r1, #3
 80062ba:	db02      	blt.n	80062c2 <_printf_float+0x136>
 80062bc:	6863      	ldr	r3, [r4, #4]
 80062be:	4299      	cmp	r1, r3
 80062c0:	dd41      	ble.n	8006346 <_printf_float+0x1ba>
 80062c2:	f1ab 0302 	sub.w	r3, fp, #2
 80062c6:	fa5f fb83 	uxtb.w	fp, r3
 80062ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062ce:	d820      	bhi.n	8006312 <_printf_float+0x186>
 80062d0:	3901      	subs	r1, #1
 80062d2:	465a      	mov	r2, fp
 80062d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062d8:	9109      	str	r1, [sp, #36]	; 0x24
 80062da:	f7ff ff19 	bl	8006110 <__exponent>
 80062de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062e0:	1813      	adds	r3, r2, r0
 80062e2:	2a01      	cmp	r2, #1
 80062e4:	4681      	mov	r9, r0
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	dc02      	bgt.n	80062f0 <_printf_float+0x164>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	07d2      	lsls	r2, r2, #31
 80062ee:	d501      	bpl.n	80062f4 <_printf_float+0x168>
 80062f0:	3301      	adds	r3, #1
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d09c      	beq.n	8006236 <_printf_float+0xaa>
 80062fc:	232d      	movs	r3, #45	; 0x2d
 80062fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006302:	e798      	b.n	8006236 <_printf_float+0xaa>
 8006304:	9a06      	ldr	r2, [sp, #24]
 8006306:	2a47      	cmp	r2, #71	; 0x47
 8006308:	d1be      	bne.n	8006288 <_printf_float+0xfc>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1bc      	bne.n	8006288 <_printf_float+0xfc>
 800630e:	2301      	movs	r3, #1
 8006310:	e7b9      	b.n	8006286 <_printf_float+0xfa>
 8006312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006316:	d118      	bne.n	800634a <_printf_float+0x1be>
 8006318:	2900      	cmp	r1, #0
 800631a:	6863      	ldr	r3, [r4, #4]
 800631c:	dd0b      	ble.n	8006336 <_printf_float+0x1aa>
 800631e:	6121      	str	r1, [r4, #16]
 8006320:	b913      	cbnz	r3, 8006328 <_printf_float+0x19c>
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	07d0      	lsls	r0, r2, #31
 8006326:	d502      	bpl.n	800632e <_printf_float+0x1a2>
 8006328:	3301      	adds	r3, #1
 800632a:	440b      	add	r3, r1
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006330:	f04f 0900 	mov.w	r9, #0
 8006334:	e7de      	b.n	80062f4 <_printf_float+0x168>
 8006336:	b913      	cbnz	r3, 800633e <_printf_float+0x1b2>
 8006338:	6822      	ldr	r2, [r4, #0]
 800633a:	07d2      	lsls	r2, r2, #31
 800633c:	d501      	bpl.n	8006342 <_printf_float+0x1b6>
 800633e:	3302      	adds	r3, #2
 8006340:	e7f4      	b.n	800632c <_printf_float+0x1a0>
 8006342:	2301      	movs	r3, #1
 8006344:	e7f2      	b.n	800632c <_printf_float+0x1a0>
 8006346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800634a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800634c:	4299      	cmp	r1, r3
 800634e:	db05      	blt.n	800635c <_printf_float+0x1d0>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	6121      	str	r1, [r4, #16]
 8006354:	07d8      	lsls	r0, r3, #31
 8006356:	d5ea      	bpl.n	800632e <_printf_float+0x1a2>
 8006358:	1c4b      	adds	r3, r1, #1
 800635a:	e7e7      	b.n	800632c <_printf_float+0x1a0>
 800635c:	2900      	cmp	r1, #0
 800635e:	bfd4      	ite	le
 8006360:	f1c1 0202 	rsble	r2, r1, #2
 8006364:	2201      	movgt	r2, #1
 8006366:	4413      	add	r3, r2
 8006368:	e7e0      	b.n	800632c <_printf_float+0x1a0>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	055a      	lsls	r2, r3, #21
 800636e:	d407      	bmi.n	8006380 <_printf_float+0x1f4>
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	4642      	mov	r2, r8
 8006374:	4631      	mov	r1, r6
 8006376:	4628      	mov	r0, r5
 8006378:	47b8      	blx	r7
 800637a:	3001      	adds	r0, #1
 800637c:	d12c      	bne.n	80063d8 <_printf_float+0x24c>
 800637e:	e764      	b.n	800624a <_printf_float+0xbe>
 8006380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006384:	f240 80e0 	bls.w	8006548 <_printf_float+0x3bc>
 8006388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800638c:	2200      	movs	r2, #0
 800638e:	2300      	movs	r3, #0
 8006390:	f7fa fbaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8006394:	2800      	cmp	r0, #0
 8006396:	d034      	beq.n	8006402 <_printf_float+0x276>
 8006398:	4a37      	ldr	r2, [pc, #220]	; (8006478 <_printf_float+0x2ec>)
 800639a:	2301      	movs	r3, #1
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	f43f af51 	beq.w	800624a <_printf_float+0xbe>
 80063a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063ac:	429a      	cmp	r2, r3
 80063ae:	db02      	blt.n	80063b6 <_printf_float+0x22a>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	07d8      	lsls	r0, r3, #31
 80063b4:	d510      	bpl.n	80063d8 <_printf_float+0x24c>
 80063b6:	ee18 3a10 	vmov	r3, s16
 80063ba:	4652      	mov	r2, sl
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f af41 	beq.w	800624a <_printf_float+0xbe>
 80063c8:	f04f 0800 	mov.w	r8, #0
 80063cc:	f104 091a 	add.w	r9, r4, #26
 80063d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d2:	3b01      	subs	r3, #1
 80063d4:	4543      	cmp	r3, r8
 80063d6:	dc09      	bgt.n	80063ec <_printf_float+0x260>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	079b      	lsls	r3, r3, #30
 80063dc:	f100 8107 	bmi.w	80065ee <_printf_float+0x462>
 80063e0:	68e0      	ldr	r0, [r4, #12]
 80063e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e4:	4298      	cmp	r0, r3
 80063e6:	bfb8      	it	lt
 80063e8:	4618      	movlt	r0, r3
 80063ea:	e730      	b.n	800624e <_printf_float+0xc2>
 80063ec:	2301      	movs	r3, #1
 80063ee:	464a      	mov	r2, r9
 80063f0:	4631      	mov	r1, r6
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b8      	blx	r7
 80063f6:	3001      	adds	r0, #1
 80063f8:	f43f af27 	beq.w	800624a <_printf_float+0xbe>
 80063fc:	f108 0801 	add.w	r8, r8, #1
 8006400:	e7e6      	b.n	80063d0 <_printf_float+0x244>
 8006402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	dc39      	bgt.n	800647c <_printf_float+0x2f0>
 8006408:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <_printf_float+0x2ec>)
 800640a:	2301      	movs	r3, #1
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	f43f af19 	beq.w	800624a <_printf_float+0xbe>
 8006418:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800641c:	4313      	orrs	r3, r2
 800641e:	d102      	bne.n	8006426 <_printf_float+0x29a>
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	07d9      	lsls	r1, r3, #31
 8006424:	d5d8      	bpl.n	80063d8 <_printf_float+0x24c>
 8006426:	ee18 3a10 	vmov	r3, s16
 800642a:	4652      	mov	r2, sl
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	47b8      	blx	r7
 8006432:	3001      	adds	r0, #1
 8006434:	f43f af09 	beq.w	800624a <_printf_float+0xbe>
 8006438:	f04f 0900 	mov.w	r9, #0
 800643c:	f104 0a1a 	add.w	sl, r4, #26
 8006440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006442:	425b      	negs	r3, r3
 8006444:	454b      	cmp	r3, r9
 8006446:	dc01      	bgt.n	800644c <_printf_float+0x2c0>
 8006448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800644a:	e792      	b.n	8006372 <_printf_float+0x1e6>
 800644c:	2301      	movs	r3, #1
 800644e:	4652      	mov	r2, sl
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	47b8      	blx	r7
 8006456:	3001      	adds	r0, #1
 8006458:	f43f aef7 	beq.w	800624a <_printf_float+0xbe>
 800645c:	f109 0901 	add.w	r9, r9, #1
 8006460:	e7ee      	b.n	8006440 <_printf_float+0x2b4>
 8006462:	bf00      	nop
 8006464:	7fefffff 	.word	0x7fefffff
 8006468:	08008e3c 	.word	0x08008e3c
 800646c:	08008e40 	.word	0x08008e40
 8006470:	08008e44 	.word	0x08008e44
 8006474:	08008e48 	.word	0x08008e48
 8006478:	08008e4c 	.word	0x08008e4c
 800647c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800647e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006480:	429a      	cmp	r2, r3
 8006482:	bfa8      	it	ge
 8006484:	461a      	movge	r2, r3
 8006486:	2a00      	cmp	r2, #0
 8006488:	4691      	mov	r9, r2
 800648a:	dc37      	bgt.n	80064fc <_printf_float+0x370>
 800648c:	f04f 0b00 	mov.w	fp, #0
 8006490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006494:	f104 021a 	add.w	r2, r4, #26
 8006498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800649a:	9305      	str	r3, [sp, #20]
 800649c:	eba3 0309 	sub.w	r3, r3, r9
 80064a0:	455b      	cmp	r3, fp
 80064a2:	dc33      	bgt.n	800650c <_printf_float+0x380>
 80064a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a8:	429a      	cmp	r2, r3
 80064aa:	db3b      	blt.n	8006524 <_printf_float+0x398>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	07da      	lsls	r2, r3, #31
 80064b0:	d438      	bmi.n	8006524 <_printf_float+0x398>
 80064b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80064b6:	eba2 0903 	sub.w	r9, r2, r3
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	1ad2      	subs	r2, r2, r3
 80064be:	4591      	cmp	r9, r2
 80064c0:	bfa8      	it	ge
 80064c2:	4691      	movge	r9, r2
 80064c4:	f1b9 0f00 	cmp.w	r9, #0
 80064c8:	dc35      	bgt.n	8006536 <_printf_float+0x3aa>
 80064ca:	f04f 0800 	mov.w	r8, #0
 80064ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064d2:	f104 0a1a 	add.w	sl, r4, #26
 80064d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	eba3 0309 	sub.w	r3, r3, r9
 80064e0:	4543      	cmp	r3, r8
 80064e2:	f77f af79 	ble.w	80063d8 <_printf_float+0x24c>
 80064e6:	2301      	movs	r3, #1
 80064e8:	4652      	mov	r2, sl
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	f43f aeaa 	beq.w	800624a <_printf_float+0xbe>
 80064f6:	f108 0801 	add.w	r8, r8, #1
 80064fa:	e7ec      	b.n	80064d6 <_printf_float+0x34a>
 80064fc:	4613      	mov	r3, r2
 80064fe:	4631      	mov	r1, r6
 8006500:	4642      	mov	r2, r8
 8006502:	4628      	mov	r0, r5
 8006504:	47b8      	blx	r7
 8006506:	3001      	adds	r0, #1
 8006508:	d1c0      	bne.n	800648c <_printf_float+0x300>
 800650a:	e69e      	b.n	800624a <_printf_float+0xbe>
 800650c:	2301      	movs	r3, #1
 800650e:	4631      	mov	r1, r6
 8006510:	4628      	mov	r0, r5
 8006512:	9205      	str	r2, [sp, #20]
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f ae97 	beq.w	800624a <_printf_float+0xbe>
 800651c:	9a05      	ldr	r2, [sp, #20]
 800651e:	f10b 0b01 	add.w	fp, fp, #1
 8006522:	e7b9      	b.n	8006498 <_printf_float+0x30c>
 8006524:	ee18 3a10 	vmov	r3, s16
 8006528:	4652      	mov	r2, sl
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	d1be      	bne.n	80064b2 <_printf_float+0x326>
 8006534:	e689      	b.n	800624a <_printf_float+0xbe>
 8006536:	9a05      	ldr	r2, [sp, #20]
 8006538:	464b      	mov	r3, r9
 800653a:	4442      	add	r2, r8
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	d1c1      	bne.n	80064ca <_printf_float+0x33e>
 8006546:	e680      	b.n	800624a <_printf_float+0xbe>
 8006548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800654a:	2a01      	cmp	r2, #1
 800654c:	dc01      	bgt.n	8006552 <_printf_float+0x3c6>
 800654e:	07db      	lsls	r3, r3, #31
 8006550:	d53a      	bpl.n	80065c8 <_printf_float+0x43c>
 8006552:	2301      	movs	r3, #1
 8006554:	4642      	mov	r2, r8
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	f43f ae74 	beq.w	800624a <_printf_float+0xbe>
 8006562:	ee18 3a10 	vmov	r3, s16
 8006566:	4652      	mov	r2, sl
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f ae6b 	beq.w	800624a <_printf_float+0xbe>
 8006574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006578:	2200      	movs	r2, #0
 800657a:	2300      	movs	r3, #0
 800657c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006580:	f7fa fab2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006584:	b9d8      	cbnz	r0, 80065be <_printf_float+0x432>
 8006586:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800658a:	f108 0201 	add.w	r2, r8, #1
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	d10e      	bne.n	80065b6 <_printf_float+0x42a>
 8006598:	e657      	b.n	800624a <_printf_float+0xbe>
 800659a:	2301      	movs	r3, #1
 800659c:	4652      	mov	r2, sl
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b8      	blx	r7
 80065a4:	3001      	adds	r0, #1
 80065a6:	f43f ae50 	beq.w	800624a <_printf_float+0xbe>
 80065aa:	f108 0801 	add.w	r8, r8, #1
 80065ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b0:	3b01      	subs	r3, #1
 80065b2:	4543      	cmp	r3, r8
 80065b4:	dcf1      	bgt.n	800659a <_printf_float+0x40e>
 80065b6:	464b      	mov	r3, r9
 80065b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065bc:	e6da      	b.n	8006374 <_printf_float+0x1e8>
 80065be:	f04f 0800 	mov.w	r8, #0
 80065c2:	f104 0a1a 	add.w	sl, r4, #26
 80065c6:	e7f2      	b.n	80065ae <_printf_float+0x422>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4642      	mov	r2, r8
 80065cc:	e7df      	b.n	800658e <_printf_float+0x402>
 80065ce:	2301      	movs	r3, #1
 80065d0:	464a      	mov	r2, r9
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f ae36 	beq.w	800624a <_printf_float+0xbe>
 80065de:	f108 0801 	add.w	r8, r8, #1
 80065e2:	68e3      	ldr	r3, [r4, #12]
 80065e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065e6:	1a5b      	subs	r3, r3, r1
 80065e8:	4543      	cmp	r3, r8
 80065ea:	dcf0      	bgt.n	80065ce <_printf_float+0x442>
 80065ec:	e6f8      	b.n	80063e0 <_printf_float+0x254>
 80065ee:	f04f 0800 	mov.w	r8, #0
 80065f2:	f104 0919 	add.w	r9, r4, #25
 80065f6:	e7f4      	b.n	80065e2 <_printf_float+0x456>

080065f8 <_printf_common>:
 80065f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065fc:	4616      	mov	r6, r2
 80065fe:	4699      	mov	r9, r3
 8006600:	688a      	ldr	r2, [r1, #8]
 8006602:	690b      	ldr	r3, [r1, #16]
 8006604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006608:	4293      	cmp	r3, r2
 800660a:	bfb8      	it	lt
 800660c:	4613      	movlt	r3, r2
 800660e:	6033      	str	r3, [r6, #0]
 8006610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006614:	4607      	mov	r7, r0
 8006616:	460c      	mov	r4, r1
 8006618:	b10a      	cbz	r2, 800661e <_printf_common+0x26>
 800661a:	3301      	adds	r3, #1
 800661c:	6033      	str	r3, [r6, #0]
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	0699      	lsls	r1, r3, #26
 8006622:	bf42      	ittt	mi
 8006624:	6833      	ldrmi	r3, [r6, #0]
 8006626:	3302      	addmi	r3, #2
 8006628:	6033      	strmi	r3, [r6, #0]
 800662a:	6825      	ldr	r5, [r4, #0]
 800662c:	f015 0506 	ands.w	r5, r5, #6
 8006630:	d106      	bne.n	8006640 <_printf_common+0x48>
 8006632:	f104 0a19 	add.w	sl, r4, #25
 8006636:	68e3      	ldr	r3, [r4, #12]
 8006638:	6832      	ldr	r2, [r6, #0]
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	42ab      	cmp	r3, r5
 800663e:	dc26      	bgt.n	800668e <_printf_common+0x96>
 8006640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006644:	1e13      	subs	r3, r2, #0
 8006646:	6822      	ldr	r2, [r4, #0]
 8006648:	bf18      	it	ne
 800664a:	2301      	movne	r3, #1
 800664c:	0692      	lsls	r2, r2, #26
 800664e:	d42b      	bmi.n	80066a8 <_printf_common+0xb0>
 8006650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006654:	4649      	mov	r1, r9
 8006656:	4638      	mov	r0, r7
 8006658:	47c0      	blx	r8
 800665a:	3001      	adds	r0, #1
 800665c:	d01e      	beq.n	800669c <_printf_common+0xa4>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	6922      	ldr	r2, [r4, #16]
 8006662:	f003 0306 	and.w	r3, r3, #6
 8006666:	2b04      	cmp	r3, #4
 8006668:	bf02      	ittt	eq
 800666a:	68e5      	ldreq	r5, [r4, #12]
 800666c:	6833      	ldreq	r3, [r6, #0]
 800666e:	1aed      	subeq	r5, r5, r3
 8006670:	68a3      	ldr	r3, [r4, #8]
 8006672:	bf0c      	ite	eq
 8006674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006678:	2500      	movne	r5, #0
 800667a:	4293      	cmp	r3, r2
 800667c:	bfc4      	itt	gt
 800667e:	1a9b      	subgt	r3, r3, r2
 8006680:	18ed      	addgt	r5, r5, r3
 8006682:	2600      	movs	r6, #0
 8006684:	341a      	adds	r4, #26
 8006686:	42b5      	cmp	r5, r6
 8006688:	d11a      	bne.n	80066c0 <_printf_common+0xc8>
 800668a:	2000      	movs	r0, #0
 800668c:	e008      	b.n	80066a0 <_printf_common+0xa8>
 800668e:	2301      	movs	r3, #1
 8006690:	4652      	mov	r2, sl
 8006692:	4649      	mov	r1, r9
 8006694:	4638      	mov	r0, r7
 8006696:	47c0      	blx	r8
 8006698:	3001      	adds	r0, #1
 800669a:	d103      	bne.n	80066a4 <_printf_common+0xac>
 800669c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a4:	3501      	adds	r5, #1
 80066a6:	e7c6      	b.n	8006636 <_printf_common+0x3e>
 80066a8:	18e1      	adds	r1, r4, r3
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	2030      	movs	r0, #48	; 0x30
 80066ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066b2:	4422      	add	r2, r4
 80066b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066bc:	3302      	adds	r3, #2
 80066be:	e7c7      	b.n	8006650 <_printf_common+0x58>
 80066c0:	2301      	movs	r3, #1
 80066c2:	4622      	mov	r2, r4
 80066c4:	4649      	mov	r1, r9
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c0      	blx	r8
 80066ca:	3001      	adds	r0, #1
 80066cc:	d0e6      	beq.n	800669c <_printf_common+0xa4>
 80066ce:	3601      	adds	r6, #1
 80066d0:	e7d9      	b.n	8006686 <_printf_common+0x8e>
	...

080066d4 <_printf_i>:
 80066d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	7e0f      	ldrb	r7, [r1, #24]
 80066da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066dc:	2f78      	cmp	r7, #120	; 0x78
 80066de:	4691      	mov	r9, r2
 80066e0:	4680      	mov	r8, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	469a      	mov	sl, r3
 80066e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066ea:	d807      	bhi.n	80066fc <_printf_i+0x28>
 80066ec:	2f62      	cmp	r7, #98	; 0x62
 80066ee:	d80a      	bhi.n	8006706 <_printf_i+0x32>
 80066f0:	2f00      	cmp	r7, #0
 80066f2:	f000 80d4 	beq.w	800689e <_printf_i+0x1ca>
 80066f6:	2f58      	cmp	r7, #88	; 0x58
 80066f8:	f000 80c0 	beq.w	800687c <_printf_i+0x1a8>
 80066fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006704:	e03a      	b.n	800677c <_printf_i+0xa8>
 8006706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800670a:	2b15      	cmp	r3, #21
 800670c:	d8f6      	bhi.n	80066fc <_printf_i+0x28>
 800670e:	a101      	add	r1, pc, #4	; (adr r1, 8006714 <_printf_i+0x40>)
 8006710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006714:	0800676d 	.word	0x0800676d
 8006718:	08006781 	.word	0x08006781
 800671c:	080066fd 	.word	0x080066fd
 8006720:	080066fd 	.word	0x080066fd
 8006724:	080066fd 	.word	0x080066fd
 8006728:	080066fd 	.word	0x080066fd
 800672c:	08006781 	.word	0x08006781
 8006730:	080066fd 	.word	0x080066fd
 8006734:	080066fd 	.word	0x080066fd
 8006738:	080066fd 	.word	0x080066fd
 800673c:	080066fd 	.word	0x080066fd
 8006740:	08006885 	.word	0x08006885
 8006744:	080067ad 	.word	0x080067ad
 8006748:	0800683f 	.word	0x0800683f
 800674c:	080066fd 	.word	0x080066fd
 8006750:	080066fd 	.word	0x080066fd
 8006754:	080068a7 	.word	0x080068a7
 8006758:	080066fd 	.word	0x080066fd
 800675c:	080067ad 	.word	0x080067ad
 8006760:	080066fd 	.word	0x080066fd
 8006764:	080066fd 	.word	0x080066fd
 8006768:	08006847 	.word	0x08006847
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	1d1a      	adds	r2, r3, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	602a      	str	r2, [r5, #0]
 8006774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800677c:	2301      	movs	r3, #1
 800677e:	e09f      	b.n	80068c0 <_printf_i+0x1ec>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	682b      	ldr	r3, [r5, #0]
 8006784:	0607      	lsls	r7, r0, #24
 8006786:	f103 0104 	add.w	r1, r3, #4
 800678a:	6029      	str	r1, [r5, #0]
 800678c:	d501      	bpl.n	8006792 <_printf_i+0xbe>
 800678e:	681e      	ldr	r6, [r3, #0]
 8006790:	e003      	b.n	800679a <_printf_i+0xc6>
 8006792:	0646      	lsls	r6, r0, #25
 8006794:	d5fb      	bpl.n	800678e <_printf_i+0xba>
 8006796:	f9b3 6000 	ldrsh.w	r6, [r3]
 800679a:	2e00      	cmp	r6, #0
 800679c:	da03      	bge.n	80067a6 <_printf_i+0xd2>
 800679e:	232d      	movs	r3, #45	; 0x2d
 80067a0:	4276      	negs	r6, r6
 80067a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a6:	485a      	ldr	r0, [pc, #360]	; (8006910 <_printf_i+0x23c>)
 80067a8:	230a      	movs	r3, #10
 80067aa:	e012      	b.n	80067d2 <_printf_i+0xfe>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	6820      	ldr	r0, [r4, #0]
 80067b0:	1d19      	adds	r1, r3, #4
 80067b2:	6029      	str	r1, [r5, #0]
 80067b4:	0605      	lsls	r5, r0, #24
 80067b6:	d501      	bpl.n	80067bc <_printf_i+0xe8>
 80067b8:	681e      	ldr	r6, [r3, #0]
 80067ba:	e002      	b.n	80067c2 <_printf_i+0xee>
 80067bc:	0641      	lsls	r1, r0, #25
 80067be:	d5fb      	bpl.n	80067b8 <_printf_i+0xe4>
 80067c0:	881e      	ldrh	r6, [r3, #0]
 80067c2:	4853      	ldr	r0, [pc, #332]	; (8006910 <_printf_i+0x23c>)
 80067c4:	2f6f      	cmp	r7, #111	; 0x6f
 80067c6:	bf0c      	ite	eq
 80067c8:	2308      	moveq	r3, #8
 80067ca:	230a      	movne	r3, #10
 80067cc:	2100      	movs	r1, #0
 80067ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067d2:	6865      	ldr	r5, [r4, #4]
 80067d4:	60a5      	str	r5, [r4, #8]
 80067d6:	2d00      	cmp	r5, #0
 80067d8:	bfa2      	ittt	ge
 80067da:	6821      	ldrge	r1, [r4, #0]
 80067dc:	f021 0104 	bicge.w	r1, r1, #4
 80067e0:	6021      	strge	r1, [r4, #0]
 80067e2:	b90e      	cbnz	r6, 80067e8 <_printf_i+0x114>
 80067e4:	2d00      	cmp	r5, #0
 80067e6:	d04b      	beq.n	8006880 <_printf_i+0x1ac>
 80067e8:	4615      	mov	r5, r2
 80067ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80067ee:	fb03 6711 	mls	r7, r3, r1, r6
 80067f2:	5dc7      	ldrb	r7, [r0, r7]
 80067f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067f8:	4637      	mov	r7, r6
 80067fa:	42bb      	cmp	r3, r7
 80067fc:	460e      	mov	r6, r1
 80067fe:	d9f4      	bls.n	80067ea <_printf_i+0x116>
 8006800:	2b08      	cmp	r3, #8
 8006802:	d10b      	bne.n	800681c <_printf_i+0x148>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	07de      	lsls	r6, r3, #31
 8006808:	d508      	bpl.n	800681c <_printf_i+0x148>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	6861      	ldr	r1, [r4, #4]
 800680e:	4299      	cmp	r1, r3
 8006810:	bfde      	ittt	le
 8006812:	2330      	movle	r3, #48	; 0x30
 8006814:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006818:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800681c:	1b52      	subs	r2, r2, r5
 800681e:	6122      	str	r2, [r4, #16]
 8006820:	f8cd a000 	str.w	sl, [sp]
 8006824:	464b      	mov	r3, r9
 8006826:	aa03      	add	r2, sp, #12
 8006828:	4621      	mov	r1, r4
 800682a:	4640      	mov	r0, r8
 800682c:	f7ff fee4 	bl	80065f8 <_printf_common>
 8006830:	3001      	adds	r0, #1
 8006832:	d14a      	bne.n	80068ca <_printf_i+0x1f6>
 8006834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006838:	b004      	add	sp, #16
 800683a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f043 0320 	orr.w	r3, r3, #32
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	4833      	ldr	r0, [pc, #204]	; (8006914 <_printf_i+0x240>)
 8006848:	2778      	movs	r7, #120	; 0x78
 800684a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	6829      	ldr	r1, [r5, #0]
 8006852:	061f      	lsls	r7, r3, #24
 8006854:	f851 6b04 	ldr.w	r6, [r1], #4
 8006858:	d402      	bmi.n	8006860 <_printf_i+0x18c>
 800685a:	065f      	lsls	r7, r3, #25
 800685c:	bf48      	it	mi
 800685e:	b2b6      	uxthmi	r6, r6
 8006860:	07df      	lsls	r7, r3, #31
 8006862:	bf48      	it	mi
 8006864:	f043 0320 	orrmi.w	r3, r3, #32
 8006868:	6029      	str	r1, [r5, #0]
 800686a:	bf48      	it	mi
 800686c:	6023      	strmi	r3, [r4, #0]
 800686e:	b91e      	cbnz	r6, 8006878 <_printf_i+0x1a4>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	f023 0320 	bic.w	r3, r3, #32
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	2310      	movs	r3, #16
 800687a:	e7a7      	b.n	80067cc <_printf_i+0xf8>
 800687c:	4824      	ldr	r0, [pc, #144]	; (8006910 <_printf_i+0x23c>)
 800687e:	e7e4      	b.n	800684a <_printf_i+0x176>
 8006880:	4615      	mov	r5, r2
 8006882:	e7bd      	b.n	8006800 <_printf_i+0x12c>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	6826      	ldr	r6, [r4, #0]
 8006888:	6961      	ldr	r1, [r4, #20]
 800688a:	1d18      	adds	r0, r3, #4
 800688c:	6028      	str	r0, [r5, #0]
 800688e:	0635      	lsls	r5, r6, #24
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	d501      	bpl.n	8006898 <_printf_i+0x1c4>
 8006894:	6019      	str	r1, [r3, #0]
 8006896:	e002      	b.n	800689e <_printf_i+0x1ca>
 8006898:	0670      	lsls	r0, r6, #25
 800689a:	d5fb      	bpl.n	8006894 <_printf_i+0x1c0>
 800689c:	8019      	strh	r1, [r3, #0]
 800689e:	2300      	movs	r3, #0
 80068a0:	6123      	str	r3, [r4, #16]
 80068a2:	4615      	mov	r5, r2
 80068a4:	e7bc      	b.n	8006820 <_printf_i+0x14c>
 80068a6:	682b      	ldr	r3, [r5, #0]
 80068a8:	1d1a      	adds	r2, r3, #4
 80068aa:	602a      	str	r2, [r5, #0]
 80068ac:	681d      	ldr	r5, [r3, #0]
 80068ae:	6862      	ldr	r2, [r4, #4]
 80068b0:	2100      	movs	r1, #0
 80068b2:	4628      	mov	r0, r5
 80068b4:	f7f9 fc9c 	bl	80001f0 <memchr>
 80068b8:	b108      	cbz	r0, 80068be <_printf_i+0x1ea>
 80068ba:	1b40      	subs	r0, r0, r5
 80068bc:	6060      	str	r0, [r4, #4]
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	2300      	movs	r3, #0
 80068c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c8:	e7aa      	b.n	8006820 <_printf_i+0x14c>
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	462a      	mov	r2, r5
 80068ce:	4649      	mov	r1, r9
 80068d0:	4640      	mov	r0, r8
 80068d2:	47d0      	blx	sl
 80068d4:	3001      	adds	r0, #1
 80068d6:	d0ad      	beq.n	8006834 <_printf_i+0x160>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	079b      	lsls	r3, r3, #30
 80068dc:	d413      	bmi.n	8006906 <_printf_i+0x232>
 80068de:	68e0      	ldr	r0, [r4, #12]
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	4298      	cmp	r0, r3
 80068e4:	bfb8      	it	lt
 80068e6:	4618      	movlt	r0, r3
 80068e8:	e7a6      	b.n	8006838 <_printf_i+0x164>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4632      	mov	r2, r6
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	47d0      	blx	sl
 80068f4:	3001      	adds	r0, #1
 80068f6:	d09d      	beq.n	8006834 <_printf_i+0x160>
 80068f8:	3501      	adds	r5, #1
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	9903      	ldr	r1, [sp, #12]
 80068fe:	1a5b      	subs	r3, r3, r1
 8006900:	42ab      	cmp	r3, r5
 8006902:	dcf2      	bgt.n	80068ea <_printf_i+0x216>
 8006904:	e7eb      	b.n	80068de <_printf_i+0x20a>
 8006906:	2500      	movs	r5, #0
 8006908:	f104 0619 	add.w	r6, r4, #25
 800690c:	e7f5      	b.n	80068fa <_printf_i+0x226>
 800690e:	bf00      	nop
 8006910:	08008e4e 	.word	0x08008e4e
 8006914:	08008e5f 	.word	0x08008e5f

08006918 <std>:
 8006918:	2300      	movs	r3, #0
 800691a:	b510      	push	{r4, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	e9c0 3300 	strd	r3, r3, [r0]
 8006922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006926:	6083      	str	r3, [r0, #8]
 8006928:	8181      	strh	r1, [r0, #12]
 800692a:	6643      	str	r3, [r0, #100]	; 0x64
 800692c:	81c2      	strh	r2, [r0, #14]
 800692e:	6183      	str	r3, [r0, #24]
 8006930:	4619      	mov	r1, r3
 8006932:	2208      	movs	r2, #8
 8006934:	305c      	adds	r0, #92	; 0x5c
 8006936:	f000 f914 	bl	8006b62 <memset>
 800693a:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <std+0x58>)
 800693c:	6263      	str	r3, [r4, #36]	; 0x24
 800693e:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <std+0x5c>)
 8006940:	62a3      	str	r3, [r4, #40]	; 0x28
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <std+0x60>)
 8006944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006946:	4b0d      	ldr	r3, [pc, #52]	; (800697c <std+0x64>)
 8006948:	6323      	str	r3, [r4, #48]	; 0x30
 800694a:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <std+0x68>)
 800694c:	6224      	str	r4, [r4, #32]
 800694e:	429c      	cmp	r4, r3
 8006950:	d006      	beq.n	8006960 <std+0x48>
 8006952:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006956:	4294      	cmp	r4, r2
 8006958:	d002      	beq.n	8006960 <std+0x48>
 800695a:	33d0      	adds	r3, #208	; 0xd0
 800695c:	429c      	cmp	r4, r3
 800695e:	d105      	bne.n	800696c <std+0x54>
 8006960:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f000 b978 	b.w	8006c5c <__retarget_lock_init_recursive>
 800696c:	bd10      	pop	{r4, pc}
 800696e:	bf00      	nop
 8006970:	08006add 	.word	0x08006add
 8006974:	08006aff 	.word	0x08006aff
 8006978:	08006b37 	.word	0x08006b37
 800697c:	08006b5b 	.word	0x08006b5b
 8006980:	20000a18 	.word	0x20000a18

08006984 <stdio_exit_handler>:
 8006984:	4a02      	ldr	r2, [pc, #8]	; (8006990 <stdio_exit_handler+0xc>)
 8006986:	4903      	ldr	r1, [pc, #12]	; (8006994 <stdio_exit_handler+0x10>)
 8006988:	4803      	ldr	r0, [pc, #12]	; (8006998 <stdio_exit_handler+0x14>)
 800698a:	f000 b869 	b.w	8006a60 <_fwalk_sglue>
 800698e:	bf00      	nop
 8006990:	2000000c 	.word	0x2000000c
 8006994:	08008611 	.word	0x08008611
 8006998:	20000018 	.word	0x20000018

0800699c <cleanup_stdio>:
 800699c:	6841      	ldr	r1, [r0, #4]
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <cleanup_stdio+0x34>)
 80069a0:	4299      	cmp	r1, r3
 80069a2:	b510      	push	{r4, lr}
 80069a4:	4604      	mov	r4, r0
 80069a6:	d001      	beq.n	80069ac <cleanup_stdio+0x10>
 80069a8:	f001 fe32 	bl	8008610 <_fflush_r>
 80069ac:	68a1      	ldr	r1, [r4, #8]
 80069ae:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <cleanup_stdio+0x38>)
 80069b0:	4299      	cmp	r1, r3
 80069b2:	d002      	beq.n	80069ba <cleanup_stdio+0x1e>
 80069b4:	4620      	mov	r0, r4
 80069b6:	f001 fe2b 	bl	8008610 <_fflush_r>
 80069ba:	68e1      	ldr	r1, [r4, #12]
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <cleanup_stdio+0x3c>)
 80069be:	4299      	cmp	r1, r3
 80069c0:	d004      	beq.n	80069cc <cleanup_stdio+0x30>
 80069c2:	4620      	mov	r0, r4
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f001 be22 	b.w	8008610 <_fflush_r>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	bf00      	nop
 80069d0:	20000a18 	.word	0x20000a18
 80069d4:	20000a80 	.word	0x20000a80
 80069d8:	20000ae8 	.word	0x20000ae8

080069dc <global_stdio_init.part.0>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <global_stdio_init.part.0+0x30>)
 80069e0:	4c0b      	ldr	r4, [pc, #44]	; (8006a10 <global_stdio_init.part.0+0x34>)
 80069e2:	4a0c      	ldr	r2, [pc, #48]	; (8006a14 <global_stdio_init.part.0+0x38>)
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	4620      	mov	r0, r4
 80069e8:	2200      	movs	r2, #0
 80069ea:	2104      	movs	r1, #4
 80069ec:	f7ff ff94 	bl	8006918 <std>
 80069f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80069f4:	2201      	movs	r2, #1
 80069f6:	2109      	movs	r1, #9
 80069f8:	f7ff ff8e 	bl	8006918 <std>
 80069fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a00:	2202      	movs	r2, #2
 8006a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a06:	2112      	movs	r1, #18
 8006a08:	f7ff bf86 	b.w	8006918 <std>
 8006a0c:	20000b50 	.word	0x20000b50
 8006a10:	20000a18 	.word	0x20000a18
 8006a14:	08006985 	.word	0x08006985

08006a18 <__sfp_lock_acquire>:
 8006a18:	4801      	ldr	r0, [pc, #4]	; (8006a20 <__sfp_lock_acquire+0x8>)
 8006a1a:	f000 b920 	b.w	8006c5e <__retarget_lock_acquire_recursive>
 8006a1e:	bf00      	nop
 8006a20:	20000b59 	.word	0x20000b59

08006a24 <__sfp_lock_release>:
 8006a24:	4801      	ldr	r0, [pc, #4]	; (8006a2c <__sfp_lock_release+0x8>)
 8006a26:	f000 b91b 	b.w	8006c60 <__retarget_lock_release_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	20000b59 	.word	0x20000b59

08006a30 <__sinit>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	4604      	mov	r4, r0
 8006a34:	f7ff fff0 	bl	8006a18 <__sfp_lock_acquire>
 8006a38:	6a23      	ldr	r3, [r4, #32]
 8006a3a:	b11b      	cbz	r3, 8006a44 <__sinit+0x14>
 8006a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a40:	f7ff bff0 	b.w	8006a24 <__sfp_lock_release>
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <__sinit+0x28>)
 8006a46:	6223      	str	r3, [r4, #32]
 8006a48:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <__sinit+0x2c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f5      	bne.n	8006a3c <__sinit+0xc>
 8006a50:	f7ff ffc4 	bl	80069dc <global_stdio_init.part.0>
 8006a54:	e7f2      	b.n	8006a3c <__sinit+0xc>
 8006a56:	bf00      	nop
 8006a58:	0800699d 	.word	0x0800699d
 8006a5c:	20000b50 	.word	0x20000b50

08006a60 <_fwalk_sglue>:
 8006a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a64:	4607      	mov	r7, r0
 8006a66:	4688      	mov	r8, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a70:	f1b9 0901 	subs.w	r9, r9, #1
 8006a74:	d505      	bpl.n	8006a82 <_fwalk_sglue+0x22>
 8006a76:	6824      	ldr	r4, [r4, #0]
 8006a78:	2c00      	cmp	r4, #0
 8006a7a:	d1f7      	bne.n	8006a6c <_fwalk_sglue+0xc>
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d907      	bls.n	8006a98 <_fwalk_sglue+0x38>
 8006a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	d003      	beq.n	8006a98 <_fwalk_sglue+0x38>
 8006a90:	4629      	mov	r1, r5
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	4306      	orrs	r6, r0
 8006a98:	3568      	adds	r5, #104	; 0x68
 8006a9a:	e7e9      	b.n	8006a70 <_fwalk_sglue+0x10>

08006a9c <siprintf>:
 8006a9c:	b40e      	push	{r1, r2, r3}
 8006a9e:	b500      	push	{lr}
 8006aa0:	b09c      	sub	sp, #112	; 0x70
 8006aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8006aa4:	9002      	str	r0, [sp, #8]
 8006aa6:	9006      	str	r0, [sp, #24]
 8006aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006aac:	4809      	ldr	r0, [pc, #36]	; (8006ad4 <siprintf+0x38>)
 8006aae:	9107      	str	r1, [sp, #28]
 8006ab0:	9104      	str	r1, [sp, #16]
 8006ab2:	4909      	ldr	r1, [pc, #36]	; (8006ad8 <siprintf+0x3c>)
 8006ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ab8:	9105      	str	r1, [sp, #20]
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	a902      	add	r1, sp, #8
 8006ac0:	f001 fc22 	bl	8008308 <_svfiprintf_r>
 8006ac4:	9b02      	ldr	r3, [sp, #8]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	b01c      	add	sp, #112	; 0x70
 8006acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad0:	b003      	add	sp, #12
 8006ad2:	4770      	bx	lr
 8006ad4:	20000064 	.word	0x20000064
 8006ad8:	ffff0208 	.word	0xffff0208

08006adc <__sread>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae4:	f000 f86c 	bl	8006bc0 <_read_r>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	bfab      	itete	ge
 8006aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aee:	89a3      	ldrhlt	r3, [r4, #12]
 8006af0:	181b      	addge	r3, r3, r0
 8006af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006af6:	bfac      	ite	ge
 8006af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006afa:	81a3      	strhlt	r3, [r4, #12]
 8006afc:	bd10      	pop	{r4, pc}

08006afe <__swrite>:
 8006afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b02:	461f      	mov	r7, r3
 8006b04:	898b      	ldrh	r3, [r1, #12]
 8006b06:	05db      	lsls	r3, r3, #23
 8006b08:	4605      	mov	r5, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	d505      	bpl.n	8006b1c <__swrite+0x1e>
 8006b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b14:	2302      	movs	r3, #2
 8006b16:	2200      	movs	r2, #0
 8006b18:	f000 f840 	bl	8006b9c <_lseek_r>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	4632      	mov	r2, r6
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b32:	f000 b857 	b.w	8006be4 <_write_r>

08006b36 <__sseek>:
 8006b36:	b510      	push	{r4, lr}
 8006b38:	460c      	mov	r4, r1
 8006b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3e:	f000 f82d 	bl	8006b9c <_lseek_r>
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	bf15      	itete	ne
 8006b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b52:	81a3      	strheq	r3, [r4, #12]
 8006b54:	bf18      	it	ne
 8006b56:	81a3      	strhne	r3, [r4, #12]
 8006b58:	bd10      	pop	{r4, pc}

08006b5a <__sclose>:
 8006b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5e:	f000 b80d 	b.w	8006b7c <_close_r>

08006b62 <memset>:
 8006b62:	4402      	add	r2, r0
 8006b64:	4603      	mov	r3, r0
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d100      	bne.n	8006b6c <memset+0xa>
 8006b6a:	4770      	bx	lr
 8006b6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006b70:	e7f9      	b.n	8006b66 <memset+0x4>
	...

08006b74 <_localeconv_r>:
 8006b74:	4800      	ldr	r0, [pc, #0]	; (8006b78 <_localeconv_r+0x4>)
 8006b76:	4770      	bx	lr
 8006b78:	20000158 	.word	0x20000158

08006b7c <_close_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d06      	ldr	r5, [pc, #24]	; (8006b98 <_close_r+0x1c>)
 8006b80:	2300      	movs	r3, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	f7fa ff65 	bl	8001a56 <_close>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_close_r+0x1a>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_close_r+0x1a>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	20000b54 	.word	0x20000b54

08006b9c <_lseek_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d07      	ldr	r5, [pc, #28]	; (8006bbc <_lseek_r+0x20>)
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	4608      	mov	r0, r1
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	602a      	str	r2, [r5, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f7fa ff7a 	bl	8001aa4 <_lseek>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_lseek_r+0x1e>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_lseek_r+0x1e>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	20000b54 	.word	0x20000b54

08006bc0 <_read_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d07      	ldr	r5, [pc, #28]	; (8006be0 <_read_r+0x20>)
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	4608      	mov	r0, r1
 8006bc8:	4611      	mov	r1, r2
 8006bca:	2200      	movs	r2, #0
 8006bcc:	602a      	str	r2, [r5, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f7fa ff08 	bl	80019e4 <_read>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_read_r+0x1e>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_read_r+0x1e>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	20000b54 	.word	0x20000b54

08006be4 <_write_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d07      	ldr	r5, [pc, #28]	; (8006c04 <_write_r+0x20>)
 8006be8:	4604      	mov	r4, r0
 8006bea:	4608      	mov	r0, r1
 8006bec:	4611      	mov	r1, r2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	602a      	str	r2, [r5, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f7fa ff13 	bl	8001a1e <_write>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_write_r+0x1e>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_write_r+0x1e>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	20000b54 	.word	0x20000b54

08006c08 <__errno>:
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <__errno+0x8>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20000064 	.word	0x20000064

08006c14 <__libc_init_array>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	4d0d      	ldr	r5, [pc, #52]	; (8006c4c <__libc_init_array+0x38>)
 8006c18:	4c0d      	ldr	r4, [pc, #52]	; (8006c50 <__libc_init_array+0x3c>)
 8006c1a:	1b64      	subs	r4, r4, r5
 8006c1c:	10a4      	asrs	r4, r4, #2
 8006c1e:	2600      	movs	r6, #0
 8006c20:	42a6      	cmp	r6, r4
 8006c22:	d109      	bne.n	8006c38 <__libc_init_array+0x24>
 8006c24:	4d0b      	ldr	r5, [pc, #44]	; (8006c54 <__libc_init_array+0x40>)
 8006c26:	4c0c      	ldr	r4, [pc, #48]	; (8006c58 <__libc_init_array+0x44>)
 8006c28:	f002 f896 	bl	8008d58 <_init>
 8006c2c:	1b64      	subs	r4, r4, r5
 8006c2e:	10a4      	asrs	r4, r4, #2
 8006c30:	2600      	movs	r6, #0
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	d105      	bne.n	8006c42 <__libc_init_array+0x2e>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3c:	4798      	blx	r3
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7ee      	b.n	8006c20 <__libc_init_array+0xc>
 8006c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c46:	4798      	blx	r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	e7f2      	b.n	8006c32 <__libc_init_array+0x1e>
 8006c4c:	080091b4 	.word	0x080091b4
 8006c50:	080091b4 	.word	0x080091b4
 8006c54:	080091b4 	.word	0x080091b4
 8006c58:	080091b8 	.word	0x080091b8

08006c5c <__retarget_lock_init_recursive>:
 8006c5c:	4770      	bx	lr

08006c5e <__retarget_lock_acquire_recursive>:
 8006c5e:	4770      	bx	lr

08006c60 <__retarget_lock_release_recursive>:
 8006c60:	4770      	bx	lr

08006c62 <quorem>:
 8006c62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c66:	6903      	ldr	r3, [r0, #16]
 8006c68:	690c      	ldr	r4, [r1, #16]
 8006c6a:	42a3      	cmp	r3, r4
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	db7e      	blt.n	8006d6e <quorem+0x10c>
 8006c70:	3c01      	subs	r4, #1
 8006c72:	f101 0814 	add.w	r8, r1, #20
 8006c76:	f100 0514 	add.w	r5, r0, #20
 8006c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c94:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c98:	d331      	bcc.n	8006cfe <quorem+0x9c>
 8006c9a:	f04f 0e00 	mov.w	lr, #0
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	46ac      	mov	ip, r5
 8006ca2:	46f2      	mov	sl, lr
 8006ca4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ca8:	b293      	uxth	r3, r2
 8006caa:	fb06 e303 	mla	r3, r6, r3, lr
 8006cae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cb2:	0c1a      	lsrs	r2, r3, #16
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	ebaa 0303 	sub.w	r3, sl, r3
 8006cba:	f8dc a000 	ldr.w	sl, [ip]
 8006cbe:	fa13 f38a 	uxtah	r3, r3, sl
 8006cc2:	fb06 220e 	mla	r2, r6, lr, r2
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	9b00      	ldr	r3, [sp, #0]
 8006cca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cce:	b292      	uxth	r2, r2
 8006cd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006cdc:	4581      	cmp	r9, r0
 8006cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce2:	f84c 3b04 	str.w	r3, [ip], #4
 8006ce6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006cea:	d2db      	bcs.n	8006ca4 <quorem+0x42>
 8006cec:	f855 300b 	ldr.w	r3, [r5, fp]
 8006cf0:	b92b      	cbnz	r3, 8006cfe <quorem+0x9c>
 8006cf2:	9b01      	ldr	r3, [sp, #4]
 8006cf4:	3b04      	subs	r3, #4
 8006cf6:	429d      	cmp	r5, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	d32c      	bcc.n	8006d56 <quorem+0xf4>
 8006cfc:	613c      	str	r4, [r7, #16]
 8006cfe:	4638      	mov	r0, r7
 8006d00:	f001 f9a8 	bl	8008054 <__mcmp>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	db22      	blt.n	8006d4e <quorem+0xec>
 8006d08:	3601      	adds	r6, #1
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d12:	f8d1 c000 	ldr.w	ip, [r1]
 8006d16:	b293      	uxth	r3, r2
 8006d18:	1ac3      	subs	r3, r0, r3
 8006d1a:	0c12      	lsrs	r2, r2, #16
 8006d1c:	fa13 f38c 	uxtah	r3, r3, ip
 8006d20:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d2e:	45c1      	cmp	r9, r8
 8006d30:	f841 3b04 	str.w	r3, [r1], #4
 8006d34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d38:	d2e9      	bcs.n	8006d0e <quorem+0xac>
 8006d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d42:	b922      	cbnz	r2, 8006d4e <quorem+0xec>
 8006d44:	3b04      	subs	r3, #4
 8006d46:	429d      	cmp	r5, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	d30a      	bcc.n	8006d62 <quorem+0x100>
 8006d4c:	613c      	str	r4, [r7, #16]
 8006d4e:	4630      	mov	r0, r6
 8006d50:	b003      	add	sp, #12
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	3b04      	subs	r3, #4
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	d1ce      	bne.n	8006cfc <quorem+0x9a>
 8006d5e:	3c01      	subs	r4, #1
 8006d60:	e7c9      	b.n	8006cf6 <quorem+0x94>
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	3b04      	subs	r3, #4
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	d1f0      	bne.n	8006d4c <quorem+0xea>
 8006d6a:	3c01      	subs	r4, #1
 8006d6c:	e7eb      	b.n	8006d46 <quorem+0xe4>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e7ee      	b.n	8006d50 <quorem+0xee>
 8006d72:	0000      	movs	r0, r0
 8006d74:	0000      	movs	r0, r0
	...

08006d78 <_dtoa_r>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	ed2d 8b04 	vpush	{d8-d9}
 8006d80:	69c5      	ldr	r5, [r0, #28]
 8006d82:	b093      	sub	sp, #76	; 0x4c
 8006d84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d88:	ec57 6b10 	vmov	r6, r7, d0
 8006d8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d90:	9107      	str	r1, [sp, #28]
 8006d92:	4604      	mov	r4, r0
 8006d94:	920a      	str	r2, [sp, #40]	; 0x28
 8006d96:	930d      	str	r3, [sp, #52]	; 0x34
 8006d98:	b975      	cbnz	r5, 8006db8 <_dtoa_r+0x40>
 8006d9a:	2010      	movs	r0, #16
 8006d9c:	f000 fe2a 	bl	80079f4 <malloc>
 8006da0:	4602      	mov	r2, r0
 8006da2:	61e0      	str	r0, [r4, #28]
 8006da4:	b920      	cbnz	r0, 8006db0 <_dtoa_r+0x38>
 8006da6:	4bae      	ldr	r3, [pc, #696]	; (8007060 <_dtoa_r+0x2e8>)
 8006da8:	21ef      	movs	r1, #239	; 0xef
 8006daa:	48ae      	ldr	r0, [pc, #696]	; (8007064 <_dtoa_r+0x2ec>)
 8006dac:	f001 fc90 	bl	80086d0 <__assert_func>
 8006db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006db4:	6005      	str	r5, [r0, #0]
 8006db6:	60c5      	str	r5, [r0, #12]
 8006db8:	69e3      	ldr	r3, [r4, #28]
 8006dba:	6819      	ldr	r1, [r3, #0]
 8006dbc:	b151      	cbz	r1, 8006dd4 <_dtoa_r+0x5c>
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	604a      	str	r2, [r1, #4]
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4093      	lsls	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 ff07 	bl	8007bdc <_Bfree>
 8006dce:	69e3      	ldr	r3, [r4, #28]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	1e3b      	subs	r3, r7, #0
 8006dd6:	bfbb      	ittet	lt
 8006dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	9303      	strlt	r3, [sp, #12]
 8006dde:	2300      	movge	r3, #0
 8006de0:	2201      	movlt	r2, #1
 8006de2:	bfac      	ite	ge
 8006de4:	f8c8 3000 	strge.w	r3, [r8]
 8006de8:	f8c8 2000 	strlt.w	r2, [r8]
 8006dec:	4b9e      	ldr	r3, [pc, #632]	; (8007068 <_dtoa_r+0x2f0>)
 8006dee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006df2:	ea33 0308 	bics.w	r3, r3, r8
 8006df6:	d11b      	bne.n	8006e30 <_dtoa_r+0xb8>
 8006df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006e04:	4333      	orrs	r3, r6
 8006e06:	f000 8593 	beq.w	8007930 <_dtoa_r+0xbb8>
 8006e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e0c:	b963      	cbnz	r3, 8006e28 <_dtoa_r+0xb0>
 8006e0e:	4b97      	ldr	r3, [pc, #604]	; (800706c <_dtoa_r+0x2f4>)
 8006e10:	e027      	b.n	8006e62 <_dtoa_r+0xea>
 8006e12:	4b97      	ldr	r3, [pc, #604]	; (8007070 <_dtoa_r+0x2f8>)
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	9800      	ldr	r0, [sp, #0]
 8006e1e:	b013      	add	sp, #76	; 0x4c
 8006e20:	ecbd 8b04 	vpop	{d8-d9}
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	4b90      	ldr	r3, [pc, #576]	; (800706c <_dtoa_r+0x2f4>)
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	3303      	adds	r3, #3
 8006e2e:	e7f3      	b.n	8006e18 <_dtoa_r+0xa0>
 8006e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	ec51 0b17 	vmov	r0, r1, d7
 8006e3a:	eeb0 8a47 	vmov.f32	s16, s14
 8006e3e:	eef0 8a67 	vmov.f32	s17, s15
 8006e42:	2300      	movs	r3, #0
 8006e44:	f7f9 fe50 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e48:	4681      	mov	r9, r0
 8006e4a:	b160      	cbz	r0, 8006e66 <_dtoa_r+0xee>
 8006e4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e4e:	2301      	movs	r3, #1
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8568 	beq.w	800792a <_dtoa_r+0xbb2>
 8006e5a:	4b86      	ldr	r3, [pc, #536]	; (8007074 <_dtoa_r+0x2fc>)
 8006e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	e7da      	b.n	8006e1c <_dtoa_r+0xa4>
 8006e66:	aa10      	add	r2, sp, #64	; 0x40
 8006e68:	a911      	add	r1, sp, #68	; 0x44
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8006e70:	eef0 0a68 	vmov.f32	s1, s17
 8006e74:	f001 f994 	bl	80081a0 <__d2b>
 8006e78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006e7c:	4682      	mov	sl, r0
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	d07f      	beq.n	8006f82 <_dtoa_r+0x20a>
 8006e82:	ee18 3a90 	vmov	r3, s17
 8006e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006e8e:	ec51 0b18 	vmov	r0, r1, d8
 8006e92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4b75      	ldr	r3, [pc, #468]	; (8007078 <_dtoa_r+0x300>)
 8006ea4:	f7f9 fa00 	bl	80002a8 <__aeabi_dsub>
 8006ea8:	a367      	add	r3, pc, #412	; (adr r3, 8007048 <_dtoa_r+0x2d0>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 fbb3 	bl	8000618 <__aeabi_dmul>
 8006eb2:	a367      	add	r3, pc, #412	; (adr r3, 8007050 <_dtoa_r+0x2d8>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 f9f8 	bl	80002ac <__adddf3>
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	460f      	mov	r7, r1
 8006ec2:	f7f9 fb3f 	bl	8000544 <__aeabi_i2d>
 8006ec6:	a364      	add	r3, pc, #400	; (adr r3, 8007058 <_dtoa_r+0x2e0>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 fba4 	bl	8000618 <__aeabi_dmul>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	f7f9 f9e8 	bl	80002ac <__adddf3>
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
 8006ee0:	f7f9 fe4a 	bl	8000b78 <__aeabi_d2iz>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4683      	mov	fp, r0
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4630      	mov	r0, r6
 8006eec:	4639      	mov	r1, r7
 8006eee:	f7f9 fe05 	bl	8000afc <__aeabi_dcmplt>
 8006ef2:	b148      	cbz	r0, 8006f08 <_dtoa_r+0x190>
 8006ef4:	4658      	mov	r0, fp
 8006ef6:	f7f9 fb25 	bl	8000544 <__aeabi_i2d>
 8006efa:	4632      	mov	r2, r6
 8006efc:	463b      	mov	r3, r7
 8006efe:	f7f9 fdf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f02:	b908      	cbnz	r0, 8006f08 <_dtoa_r+0x190>
 8006f04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006f08:	f1bb 0f16 	cmp.w	fp, #22
 8006f0c:	d857      	bhi.n	8006fbe <_dtoa_r+0x246>
 8006f0e:	4b5b      	ldr	r3, [pc, #364]	; (800707c <_dtoa_r+0x304>)
 8006f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	ec51 0b18 	vmov	r0, r1, d8
 8006f1c:	f7f9 fdee 	bl	8000afc <__aeabi_dcmplt>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d04e      	beq.n	8006fc2 <_dtoa_r+0x24a>
 8006f24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006f28:	2300      	movs	r3, #0
 8006f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f2e:	1b5b      	subs	r3, r3, r5
 8006f30:	1e5a      	subs	r2, r3, #1
 8006f32:	bf45      	ittet	mi
 8006f34:	f1c3 0301 	rsbmi	r3, r3, #1
 8006f38:	9305      	strmi	r3, [sp, #20]
 8006f3a:	2300      	movpl	r3, #0
 8006f3c:	2300      	movmi	r3, #0
 8006f3e:	9206      	str	r2, [sp, #24]
 8006f40:	bf54      	ite	pl
 8006f42:	9305      	strpl	r3, [sp, #20]
 8006f44:	9306      	strmi	r3, [sp, #24]
 8006f46:	f1bb 0f00 	cmp.w	fp, #0
 8006f4a:	db3c      	blt.n	8006fc6 <_dtoa_r+0x24e>
 8006f4c:	9b06      	ldr	r3, [sp, #24]
 8006f4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006f52:	445b      	add	r3, fp
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	2300      	movs	r3, #0
 8006f58:	9308      	str	r3, [sp, #32]
 8006f5a:	9b07      	ldr	r3, [sp, #28]
 8006f5c:	2b09      	cmp	r3, #9
 8006f5e:	d868      	bhi.n	8007032 <_dtoa_r+0x2ba>
 8006f60:	2b05      	cmp	r3, #5
 8006f62:	bfc4      	itt	gt
 8006f64:	3b04      	subgt	r3, #4
 8006f66:	9307      	strgt	r3, [sp, #28]
 8006f68:	9b07      	ldr	r3, [sp, #28]
 8006f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8006f6e:	bfcc      	ite	gt
 8006f70:	2500      	movgt	r5, #0
 8006f72:	2501      	movle	r5, #1
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	f200 8085 	bhi.w	8007084 <_dtoa_r+0x30c>
 8006f7a:	e8df f003 	tbb	[pc, r3]
 8006f7e:	3b2e      	.short	0x3b2e
 8006f80:	5839      	.short	0x5839
 8006f82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f86:	441d      	add	r5, r3
 8006f88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	bfc1      	itttt	gt
 8006f90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f94:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006f9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006fa0:	bfd6      	itet	le
 8006fa2:	f1c3 0320 	rsble	r3, r3, #32
 8006fa6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006faa:	fa06 f003 	lslle.w	r0, r6, r3
 8006fae:	f7f9 fab9 	bl	8000524 <__aeabi_ui2d>
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006fb8:	3d01      	subs	r5, #1
 8006fba:	920e      	str	r2, [sp, #56]	; 0x38
 8006fbc:	e76f      	b.n	8006e9e <_dtoa_r+0x126>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e7b3      	b.n	8006f2a <_dtoa_r+0x1b2>
 8006fc2:	900c      	str	r0, [sp, #48]	; 0x30
 8006fc4:	e7b2      	b.n	8006f2c <_dtoa_r+0x1b4>
 8006fc6:	9b05      	ldr	r3, [sp, #20]
 8006fc8:	eba3 030b 	sub.w	r3, r3, fp
 8006fcc:	9305      	str	r3, [sp, #20]
 8006fce:	f1cb 0300 	rsb	r3, fp, #0
 8006fd2:	9308      	str	r3, [sp, #32]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fd8:	e7bf      	b.n	8006f5a <_dtoa_r+0x1e2>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	dc52      	bgt.n	800708a <_dtoa_r+0x312>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	461a      	mov	r2, r3
 8006fec:	920a      	str	r2, [sp, #40]	; 0x28
 8006fee:	e00b      	b.n	8007008 <_dtoa_r+0x290>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e7f3      	b.n	8006fdc <_dtoa_r+0x264>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffa:	445b      	add	r3, fp
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	3301      	adds	r3, #1
 8007000:	2b01      	cmp	r3, #1
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	bfb8      	it	lt
 8007006:	2301      	movlt	r3, #1
 8007008:	69e0      	ldr	r0, [r4, #28]
 800700a:	2100      	movs	r1, #0
 800700c:	2204      	movs	r2, #4
 800700e:	f102 0614 	add.w	r6, r2, #20
 8007012:	429e      	cmp	r6, r3
 8007014:	d93d      	bls.n	8007092 <_dtoa_r+0x31a>
 8007016:	6041      	str	r1, [r0, #4]
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fd9f 	bl	8007b5c <_Balloc>
 800701e:	9000      	str	r0, [sp, #0]
 8007020:	2800      	cmp	r0, #0
 8007022:	d139      	bne.n	8007098 <_dtoa_r+0x320>
 8007024:	4b16      	ldr	r3, [pc, #88]	; (8007080 <_dtoa_r+0x308>)
 8007026:	4602      	mov	r2, r0
 8007028:	f240 11af 	movw	r1, #431	; 0x1af
 800702c:	e6bd      	b.n	8006daa <_dtoa_r+0x32>
 800702e:	2301      	movs	r3, #1
 8007030:	e7e1      	b.n	8006ff6 <_dtoa_r+0x27e>
 8007032:	2501      	movs	r5, #1
 8007034:	2300      	movs	r3, #0
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	9509      	str	r5, [sp, #36]	; 0x24
 800703a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	2200      	movs	r2, #0
 8007044:	2312      	movs	r3, #18
 8007046:	e7d1      	b.n	8006fec <_dtoa_r+0x274>
 8007048:	636f4361 	.word	0x636f4361
 800704c:	3fd287a7 	.word	0x3fd287a7
 8007050:	8b60c8b3 	.word	0x8b60c8b3
 8007054:	3fc68a28 	.word	0x3fc68a28
 8007058:	509f79fb 	.word	0x509f79fb
 800705c:	3fd34413 	.word	0x3fd34413
 8007060:	08008e7d 	.word	0x08008e7d
 8007064:	08008e94 	.word	0x08008e94
 8007068:	7ff00000 	.word	0x7ff00000
 800706c:	08008e79 	.word	0x08008e79
 8007070:	08008e70 	.word	0x08008e70
 8007074:	08008e4d 	.word	0x08008e4d
 8007078:	3ff80000 	.word	0x3ff80000
 800707c:	08008f80 	.word	0x08008f80
 8007080:	08008eec 	.word	0x08008eec
 8007084:	2301      	movs	r3, #1
 8007086:	9309      	str	r3, [sp, #36]	; 0x24
 8007088:	e7d7      	b.n	800703a <_dtoa_r+0x2c2>
 800708a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	e7ba      	b.n	8007008 <_dtoa_r+0x290>
 8007092:	3101      	adds	r1, #1
 8007094:	0052      	lsls	r2, r2, #1
 8007096:	e7ba      	b.n	800700e <_dtoa_r+0x296>
 8007098:	69e3      	ldr	r3, [r4, #28]
 800709a:	9a00      	ldr	r2, [sp, #0]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	9b04      	ldr	r3, [sp, #16]
 80070a0:	2b0e      	cmp	r3, #14
 80070a2:	f200 80a8 	bhi.w	80071f6 <_dtoa_r+0x47e>
 80070a6:	2d00      	cmp	r5, #0
 80070a8:	f000 80a5 	beq.w	80071f6 <_dtoa_r+0x47e>
 80070ac:	f1bb 0f00 	cmp.w	fp, #0
 80070b0:	dd38      	ble.n	8007124 <_dtoa_r+0x3ac>
 80070b2:	4bc0      	ldr	r3, [pc, #768]	; (80073b4 <_dtoa_r+0x63c>)
 80070b4:	f00b 020f 	and.w	r2, fp, #15
 80070b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80070c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80070c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80070c8:	d019      	beq.n	80070fe <_dtoa_r+0x386>
 80070ca:	4bbb      	ldr	r3, [pc, #748]	; (80073b8 <_dtoa_r+0x640>)
 80070cc:	ec51 0b18 	vmov	r0, r1, d8
 80070d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070d4:	f7f9 fbca 	bl	800086c <__aeabi_ddiv>
 80070d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070dc:	f008 080f 	and.w	r8, r8, #15
 80070e0:	2503      	movs	r5, #3
 80070e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80073b8 <_dtoa_r+0x640>
 80070e6:	f1b8 0f00 	cmp.w	r8, #0
 80070ea:	d10a      	bne.n	8007102 <_dtoa_r+0x38a>
 80070ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f0:	4632      	mov	r2, r6
 80070f2:	463b      	mov	r3, r7
 80070f4:	f7f9 fbba 	bl	800086c <__aeabi_ddiv>
 80070f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070fc:	e02b      	b.n	8007156 <_dtoa_r+0x3de>
 80070fe:	2502      	movs	r5, #2
 8007100:	e7ef      	b.n	80070e2 <_dtoa_r+0x36a>
 8007102:	f018 0f01 	tst.w	r8, #1
 8007106:	d008      	beq.n	800711a <_dtoa_r+0x3a2>
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007110:	f7f9 fa82 	bl	8000618 <__aeabi_dmul>
 8007114:	3501      	adds	r5, #1
 8007116:	4606      	mov	r6, r0
 8007118:	460f      	mov	r7, r1
 800711a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800711e:	f109 0908 	add.w	r9, r9, #8
 8007122:	e7e0      	b.n	80070e6 <_dtoa_r+0x36e>
 8007124:	f000 809f 	beq.w	8007266 <_dtoa_r+0x4ee>
 8007128:	f1cb 0600 	rsb	r6, fp, #0
 800712c:	4ba1      	ldr	r3, [pc, #644]	; (80073b4 <_dtoa_r+0x63c>)
 800712e:	4fa2      	ldr	r7, [pc, #648]	; (80073b8 <_dtoa_r+0x640>)
 8007130:	f006 020f 	and.w	r2, r6, #15
 8007134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	ec51 0b18 	vmov	r0, r1, d8
 8007140:	f7f9 fa6a 	bl	8000618 <__aeabi_dmul>
 8007144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007148:	1136      	asrs	r6, r6, #4
 800714a:	2300      	movs	r3, #0
 800714c:	2502      	movs	r5, #2
 800714e:	2e00      	cmp	r6, #0
 8007150:	d17e      	bne.n	8007250 <_dtoa_r+0x4d8>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1d0      	bne.n	80070f8 <_dtoa_r+0x380>
 8007156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007158:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8084 	beq.w	800726a <_dtoa_r+0x4f2>
 8007162:	4b96      	ldr	r3, [pc, #600]	; (80073bc <_dtoa_r+0x644>)
 8007164:	2200      	movs	r2, #0
 8007166:	4640      	mov	r0, r8
 8007168:	4649      	mov	r1, r9
 800716a:	f7f9 fcc7 	bl	8000afc <__aeabi_dcmplt>
 800716e:	2800      	cmp	r0, #0
 8007170:	d07b      	beq.n	800726a <_dtoa_r+0x4f2>
 8007172:	9b04      	ldr	r3, [sp, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d078      	beq.n	800726a <_dtoa_r+0x4f2>
 8007178:	9b01      	ldr	r3, [sp, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	dd39      	ble.n	80071f2 <_dtoa_r+0x47a>
 800717e:	4b90      	ldr	r3, [pc, #576]	; (80073c0 <_dtoa_r+0x648>)
 8007180:	2200      	movs	r2, #0
 8007182:	4640      	mov	r0, r8
 8007184:	4649      	mov	r1, r9
 8007186:	f7f9 fa47 	bl	8000618 <__aeabi_dmul>
 800718a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800718e:	9e01      	ldr	r6, [sp, #4]
 8007190:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007194:	3501      	adds	r5, #1
 8007196:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800719a:	4628      	mov	r0, r5
 800719c:	f7f9 f9d2 	bl	8000544 <__aeabi_i2d>
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	f7f9 fa38 	bl	8000618 <__aeabi_dmul>
 80071a8:	4b86      	ldr	r3, [pc, #536]	; (80073c4 <_dtoa_r+0x64c>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	f7f9 f87e 	bl	80002ac <__adddf3>
 80071b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80071b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	2e00      	cmp	r6, #0
 80071bc:	d158      	bne.n	8007270 <_dtoa_r+0x4f8>
 80071be:	4b82      	ldr	r3, [pc, #520]	; (80073c8 <_dtoa_r+0x650>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	4640      	mov	r0, r8
 80071c4:	4649      	mov	r1, r9
 80071c6:	f7f9 f86f 	bl	80002a8 <__aeabi_dsub>
 80071ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ce:	4680      	mov	r8, r0
 80071d0:	4689      	mov	r9, r1
 80071d2:	f7f9 fcb1 	bl	8000b38 <__aeabi_dcmpgt>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f040 8296 	bne.w	8007708 <_dtoa_r+0x990>
 80071dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80071e0:	4640      	mov	r0, r8
 80071e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071e6:	4649      	mov	r1, r9
 80071e8:	f7f9 fc88 	bl	8000afc <__aeabi_dcmplt>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f040 8289 	bne.w	8007704 <_dtoa_r+0x98c>
 80071f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80071f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f2c0 814e 	blt.w	800749a <_dtoa_r+0x722>
 80071fe:	f1bb 0f0e 	cmp.w	fp, #14
 8007202:	f300 814a 	bgt.w	800749a <_dtoa_r+0x722>
 8007206:	4b6b      	ldr	r3, [pc, #428]	; (80073b4 <_dtoa_r+0x63c>)
 8007208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800720c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	f280 80dc 	bge.w	80073d0 <_dtoa_r+0x658>
 8007218:	9b04      	ldr	r3, [sp, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f300 80d8 	bgt.w	80073d0 <_dtoa_r+0x658>
 8007220:	f040 826f 	bne.w	8007702 <_dtoa_r+0x98a>
 8007224:	4b68      	ldr	r3, [pc, #416]	; (80073c8 <_dtoa_r+0x650>)
 8007226:	2200      	movs	r2, #0
 8007228:	4640      	mov	r0, r8
 800722a:	4649      	mov	r1, r9
 800722c:	f7f9 f9f4 	bl	8000618 <__aeabi_dmul>
 8007230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007234:	f7f9 fc76 	bl	8000b24 <__aeabi_dcmpge>
 8007238:	9e04      	ldr	r6, [sp, #16]
 800723a:	4637      	mov	r7, r6
 800723c:	2800      	cmp	r0, #0
 800723e:	f040 8245 	bne.w	80076cc <_dtoa_r+0x954>
 8007242:	9d00      	ldr	r5, [sp, #0]
 8007244:	2331      	movs	r3, #49	; 0x31
 8007246:	f805 3b01 	strb.w	r3, [r5], #1
 800724a:	f10b 0b01 	add.w	fp, fp, #1
 800724e:	e241      	b.n	80076d4 <_dtoa_r+0x95c>
 8007250:	07f2      	lsls	r2, r6, #31
 8007252:	d505      	bpl.n	8007260 <_dtoa_r+0x4e8>
 8007254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007258:	f7f9 f9de 	bl	8000618 <__aeabi_dmul>
 800725c:	3501      	adds	r5, #1
 800725e:	2301      	movs	r3, #1
 8007260:	1076      	asrs	r6, r6, #1
 8007262:	3708      	adds	r7, #8
 8007264:	e773      	b.n	800714e <_dtoa_r+0x3d6>
 8007266:	2502      	movs	r5, #2
 8007268:	e775      	b.n	8007156 <_dtoa_r+0x3de>
 800726a:	9e04      	ldr	r6, [sp, #16]
 800726c:	465f      	mov	r7, fp
 800726e:	e792      	b.n	8007196 <_dtoa_r+0x41e>
 8007270:	9900      	ldr	r1, [sp, #0]
 8007272:	4b50      	ldr	r3, [pc, #320]	; (80073b4 <_dtoa_r+0x63c>)
 8007274:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007278:	4431      	add	r1, r6
 800727a:	9102      	str	r1, [sp, #8]
 800727c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800727e:	eeb0 9a47 	vmov.f32	s18, s14
 8007282:	eef0 9a67 	vmov.f32	s19, s15
 8007286:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800728a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800728e:	2900      	cmp	r1, #0
 8007290:	d044      	beq.n	800731c <_dtoa_r+0x5a4>
 8007292:	494e      	ldr	r1, [pc, #312]	; (80073cc <_dtoa_r+0x654>)
 8007294:	2000      	movs	r0, #0
 8007296:	f7f9 fae9 	bl	800086c <__aeabi_ddiv>
 800729a:	ec53 2b19 	vmov	r2, r3, d9
 800729e:	f7f9 f803 	bl	80002a8 <__aeabi_dsub>
 80072a2:	9d00      	ldr	r5, [sp, #0]
 80072a4:	ec41 0b19 	vmov	d9, r0, r1
 80072a8:	4649      	mov	r1, r9
 80072aa:	4640      	mov	r0, r8
 80072ac:	f7f9 fc64 	bl	8000b78 <__aeabi_d2iz>
 80072b0:	4606      	mov	r6, r0
 80072b2:	f7f9 f947 	bl	8000544 <__aeabi_i2d>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	f7f8 fff3 	bl	80002a8 <__aeabi_dsub>
 80072c2:	3630      	adds	r6, #48	; 0x30
 80072c4:	f805 6b01 	strb.w	r6, [r5], #1
 80072c8:	ec53 2b19 	vmov	r2, r3, d9
 80072cc:	4680      	mov	r8, r0
 80072ce:	4689      	mov	r9, r1
 80072d0:	f7f9 fc14 	bl	8000afc <__aeabi_dcmplt>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d164      	bne.n	80073a2 <_dtoa_r+0x62a>
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	4937      	ldr	r1, [pc, #220]	; (80073bc <_dtoa_r+0x644>)
 80072de:	2000      	movs	r0, #0
 80072e0:	f7f8 ffe2 	bl	80002a8 <__aeabi_dsub>
 80072e4:	ec53 2b19 	vmov	r2, r3, d9
 80072e8:	f7f9 fc08 	bl	8000afc <__aeabi_dcmplt>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	f040 80b6 	bne.w	800745e <_dtoa_r+0x6e6>
 80072f2:	9b02      	ldr	r3, [sp, #8]
 80072f4:	429d      	cmp	r5, r3
 80072f6:	f43f af7c 	beq.w	80071f2 <_dtoa_r+0x47a>
 80072fa:	4b31      	ldr	r3, [pc, #196]	; (80073c0 <_dtoa_r+0x648>)
 80072fc:	ec51 0b19 	vmov	r0, r1, d9
 8007300:	2200      	movs	r2, #0
 8007302:	f7f9 f989 	bl	8000618 <__aeabi_dmul>
 8007306:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <_dtoa_r+0x648>)
 8007308:	ec41 0b19 	vmov	d9, r0, r1
 800730c:	2200      	movs	r2, #0
 800730e:	4640      	mov	r0, r8
 8007310:	4649      	mov	r1, r9
 8007312:	f7f9 f981 	bl	8000618 <__aeabi_dmul>
 8007316:	4680      	mov	r8, r0
 8007318:	4689      	mov	r9, r1
 800731a:	e7c5      	b.n	80072a8 <_dtoa_r+0x530>
 800731c:	ec51 0b17 	vmov	r0, r1, d7
 8007320:	f7f9 f97a 	bl	8000618 <__aeabi_dmul>
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	9d00      	ldr	r5, [sp, #0]
 8007328:	930f      	str	r3, [sp, #60]	; 0x3c
 800732a:	ec41 0b19 	vmov	d9, r0, r1
 800732e:	4649      	mov	r1, r9
 8007330:	4640      	mov	r0, r8
 8007332:	f7f9 fc21 	bl	8000b78 <__aeabi_d2iz>
 8007336:	4606      	mov	r6, r0
 8007338:	f7f9 f904 	bl	8000544 <__aeabi_i2d>
 800733c:	3630      	adds	r6, #48	; 0x30
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4640      	mov	r0, r8
 8007344:	4649      	mov	r1, r9
 8007346:	f7f8 ffaf 	bl	80002a8 <__aeabi_dsub>
 800734a:	f805 6b01 	strb.w	r6, [r5], #1
 800734e:	9b02      	ldr	r3, [sp, #8]
 8007350:	429d      	cmp	r5, r3
 8007352:	4680      	mov	r8, r0
 8007354:	4689      	mov	r9, r1
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	d124      	bne.n	80073a6 <_dtoa_r+0x62e>
 800735c:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <_dtoa_r+0x654>)
 800735e:	ec51 0b19 	vmov	r0, r1, d9
 8007362:	f7f8 ffa3 	bl	80002ac <__adddf3>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4640      	mov	r0, r8
 800736c:	4649      	mov	r1, r9
 800736e:	f7f9 fbe3 	bl	8000b38 <__aeabi_dcmpgt>
 8007372:	2800      	cmp	r0, #0
 8007374:	d173      	bne.n	800745e <_dtoa_r+0x6e6>
 8007376:	ec53 2b19 	vmov	r2, r3, d9
 800737a:	4914      	ldr	r1, [pc, #80]	; (80073cc <_dtoa_r+0x654>)
 800737c:	2000      	movs	r0, #0
 800737e:	f7f8 ff93 	bl	80002a8 <__aeabi_dsub>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4640      	mov	r0, r8
 8007388:	4649      	mov	r1, r9
 800738a:	f7f9 fbb7 	bl	8000afc <__aeabi_dcmplt>
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f af2f 	beq.w	80071f2 <_dtoa_r+0x47a>
 8007394:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007396:	1e6b      	subs	r3, r5, #1
 8007398:	930f      	str	r3, [sp, #60]	; 0x3c
 800739a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800739e:	2b30      	cmp	r3, #48	; 0x30
 80073a0:	d0f8      	beq.n	8007394 <_dtoa_r+0x61c>
 80073a2:	46bb      	mov	fp, r7
 80073a4:	e04a      	b.n	800743c <_dtoa_r+0x6c4>
 80073a6:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <_dtoa_r+0x648>)
 80073a8:	f7f9 f936 	bl	8000618 <__aeabi_dmul>
 80073ac:	4680      	mov	r8, r0
 80073ae:	4689      	mov	r9, r1
 80073b0:	e7bd      	b.n	800732e <_dtoa_r+0x5b6>
 80073b2:	bf00      	nop
 80073b4:	08008f80 	.word	0x08008f80
 80073b8:	08008f58 	.word	0x08008f58
 80073bc:	3ff00000 	.word	0x3ff00000
 80073c0:	40240000 	.word	0x40240000
 80073c4:	401c0000 	.word	0x401c0000
 80073c8:	40140000 	.word	0x40140000
 80073cc:	3fe00000 	.word	0x3fe00000
 80073d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073d4:	9d00      	ldr	r5, [sp, #0]
 80073d6:	4642      	mov	r2, r8
 80073d8:	464b      	mov	r3, r9
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f9 fa45 	bl	800086c <__aeabi_ddiv>
 80073e2:	f7f9 fbc9 	bl	8000b78 <__aeabi_d2iz>
 80073e6:	9001      	str	r0, [sp, #4]
 80073e8:	f7f9 f8ac 	bl	8000544 <__aeabi_i2d>
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	f7f9 f912 	bl	8000618 <__aeabi_dmul>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f8 ff54 	bl	80002a8 <__aeabi_dsub>
 8007400:	9e01      	ldr	r6, [sp, #4]
 8007402:	9f04      	ldr	r7, [sp, #16]
 8007404:	3630      	adds	r6, #48	; 0x30
 8007406:	f805 6b01 	strb.w	r6, [r5], #1
 800740a:	9e00      	ldr	r6, [sp, #0]
 800740c:	1bae      	subs	r6, r5, r6
 800740e:	42b7      	cmp	r7, r6
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	d134      	bne.n	8007480 <_dtoa_r+0x708>
 8007416:	f7f8 ff49 	bl	80002ac <__adddf3>
 800741a:	4642      	mov	r2, r8
 800741c:	464b      	mov	r3, r9
 800741e:	4606      	mov	r6, r0
 8007420:	460f      	mov	r7, r1
 8007422:	f7f9 fb89 	bl	8000b38 <__aeabi_dcmpgt>
 8007426:	b9c8      	cbnz	r0, 800745c <_dtoa_r+0x6e4>
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f9 fb5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007434:	b110      	cbz	r0, 800743c <_dtoa_r+0x6c4>
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	07db      	lsls	r3, r3, #31
 800743a:	d40f      	bmi.n	800745c <_dtoa_r+0x6e4>
 800743c:	4651      	mov	r1, sl
 800743e:	4620      	mov	r0, r4
 8007440:	f000 fbcc 	bl	8007bdc <_Bfree>
 8007444:	2300      	movs	r3, #0
 8007446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007448:	702b      	strb	r3, [r5, #0]
 800744a:	f10b 0301 	add.w	r3, fp, #1
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007452:	2b00      	cmp	r3, #0
 8007454:	f43f ace2 	beq.w	8006e1c <_dtoa_r+0xa4>
 8007458:	601d      	str	r5, [r3, #0]
 800745a:	e4df      	b.n	8006e1c <_dtoa_r+0xa4>
 800745c:	465f      	mov	r7, fp
 800745e:	462b      	mov	r3, r5
 8007460:	461d      	mov	r5, r3
 8007462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007466:	2a39      	cmp	r2, #57	; 0x39
 8007468:	d106      	bne.n	8007478 <_dtoa_r+0x700>
 800746a:	9a00      	ldr	r2, [sp, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d1f7      	bne.n	8007460 <_dtoa_r+0x6e8>
 8007470:	9900      	ldr	r1, [sp, #0]
 8007472:	2230      	movs	r2, #48	; 0x30
 8007474:	3701      	adds	r7, #1
 8007476:	700a      	strb	r2, [r1, #0]
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	3201      	adds	r2, #1
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	e790      	b.n	80073a2 <_dtoa_r+0x62a>
 8007480:	4ba3      	ldr	r3, [pc, #652]	; (8007710 <_dtoa_r+0x998>)
 8007482:	2200      	movs	r2, #0
 8007484:	f7f9 f8c8 	bl	8000618 <__aeabi_dmul>
 8007488:	2200      	movs	r2, #0
 800748a:	2300      	movs	r3, #0
 800748c:	4606      	mov	r6, r0
 800748e:	460f      	mov	r7, r1
 8007490:	f7f9 fb2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007494:	2800      	cmp	r0, #0
 8007496:	d09e      	beq.n	80073d6 <_dtoa_r+0x65e>
 8007498:	e7d0      	b.n	800743c <_dtoa_r+0x6c4>
 800749a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800749c:	2a00      	cmp	r2, #0
 800749e:	f000 80ca 	beq.w	8007636 <_dtoa_r+0x8be>
 80074a2:	9a07      	ldr	r2, [sp, #28]
 80074a4:	2a01      	cmp	r2, #1
 80074a6:	f300 80ad 	bgt.w	8007604 <_dtoa_r+0x88c>
 80074aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	f000 80a5 	beq.w	80075fc <_dtoa_r+0x884>
 80074b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074b6:	9e08      	ldr	r6, [sp, #32]
 80074b8:	9d05      	ldr	r5, [sp, #20]
 80074ba:	9a05      	ldr	r2, [sp, #20]
 80074bc:	441a      	add	r2, r3
 80074be:	9205      	str	r2, [sp, #20]
 80074c0:	9a06      	ldr	r2, [sp, #24]
 80074c2:	2101      	movs	r1, #1
 80074c4:	441a      	add	r2, r3
 80074c6:	4620      	mov	r0, r4
 80074c8:	9206      	str	r2, [sp, #24]
 80074ca:	f000 fc3d 	bl	8007d48 <__i2b>
 80074ce:	4607      	mov	r7, r0
 80074d0:	b165      	cbz	r5, 80074ec <_dtoa_r+0x774>
 80074d2:	9b06      	ldr	r3, [sp, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dd09      	ble.n	80074ec <_dtoa_r+0x774>
 80074d8:	42ab      	cmp	r3, r5
 80074da:	9a05      	ldr	r2, [sp, #20]
 80074dc:	bfa8      	it	ge
 80074de:	462b      	movge	r3, r5
 80074e0:	1ad2      	subs	r2, r2, r3
 80074e2:	9205      	str	r2, [sp, #20]
 80074e4:	9a06      	ldr	r2, [sp, #24]
 80074e6:	1aed      	subs	r5, r5, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	9306      	str	r3, [sp, #24]
 80074ec:	9b08      	ldr	r3, [sp, #32]
 80074ee:	b1f3      	cbz	r3, 800752e <_dtoa_r+0x7b6>
 80074f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80a3 	beq.w	800763e <_dtoa_r+0x8c6>
 80074f8:	2e00      	cmp	r6, #0
 80074fa:	dd10      	ble.n	800751e <_dtoa_r+0x7a6>
 80074fc:	4639      	mov	r1, r7
 80074fe:	4632      	mov	r2, r6
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fce1 	bl	8007ec8 <__pow5mult>
 8007506:	4652      	mov	r2, sl
 8007508:	4601      	mov	r1, r0
 800750a:	4607      	mov	r7, r0
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fc31 	bl	8007d74 <__multiply>
 8007512:	4651      	mov	r1, sl
 8007514:	4680      	mov	r8, r0
 8007516:	4620      	mov	r0, r4
 8007518:	f000 fb60 	bl	8007bdc <_Bfree>
 800751c:	46c2      	mov	sl, r8
 800751e:	9b08      	ldr	r3, [sp, #32]
 8007520:	1b9a      	subs	r2, r3, r6
 8007522:	d004      	beq.n	800752e <_dtoa_r+0x7b6>
 8007524:	4651      	mov	r1, sl
 8007526:	4620      	mov	r0, r4
 8007528:	f000 fcce 	bl	8007ec8 <__pow5mult>
 800752c:	4682      	mov	sl, r0
 800752e:	2101      	movs	r1, #1
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fc09 	bl	8007d48 <__i2b>
 8007536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007538:	2b00      	cmp	r3, #0
 800753a:	4606      	mov	r6, r0
 800753c:	f340 8081 	ble.w	8007642 <_dtoa_r+0x8ca>
 8007540:	461a      	mov	r2, r3
 8007542:	4601      	mov	r1, r0
 8007544:	4620      	mov	r0, r4
 8007546:	f000 fcbf 	bl	8007ec8 <__pow5mult>
 800754a:	9b07      	ldr	r3, [sp, #28]
 800754c:	2b01      	cmp	r3, #1
 800754e:	4606      	mov	r6, r0
 8007550:	dd7a      	ble.n	8007648 <_dtoa_r+0x8d0>
 8007552:	f04f 0800 	mov.w	r8, #0
 8007556:	6933      	ldr	r3, [r6, #16]
 8007558:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800755c:	6918      	ldr	r0, [r3, #16]
 800755e:	f000 fba5 	bl	8007cac <__hi0bits>
 8007562:	f1c0 0020 	rsb	r0, r0, #32
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	4418      	add	r0, r3
 800756a:	f010 001f 	ands.w	r0, r0, #31
 800756e:	f000 8094 	beq.w	800769a <_dtoa_r+0x922>
 8007572:	f1c0 0320 	rsb	r3, r0, #32
 8007576:	2b04      	cmp	r3, #4
 8007578:	f340 8085 	ble.w	8007686 <_dtoa_r+0x90e>
 800757c:	9b05      	ldr	r3, [sp, #20]
 800757e:	f1c0 001c 	rsb	r0, r0, #28
 8007582:	4403      	add	r3, r0
 8007584:	9305      	str	r3, [sp, #20]
 8007586:	9b06      	ldr	r3, [sp, #24]
 8007588:	4403      	add	r3, r0
 800758a:	4405      	add	r5, r0
 800758c:	9306      	str	r3, [sp, #24]
 800758e:	9b05      	ldr	r3, [sp, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	dd05      	ble.n	80075a0 <_dtoa_r+0x828>
 8007594:	4651      	mov	r1, sl
 8007596:	461a      	mov	r2, r3
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fcef 	bl	8007f7c <__lshift>
 800759e:	4682      	mov	sl, r0
 80075a0:	9b06      	ldr	r3, [sp, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd05      	ble.n	80075b2 <_dtoa_r+0x83a>
 80075a6:	4631      	mov	r1, r6
 80075a8:	461a      	mov	r2, r3
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 fce6 	bl	8007f7c <__lshift>
 80075b0:	4606      	mov	r6, r0
 80075b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d072      	beq.n	800769e <_dtoa_r+0x926>
 80075b8:	4631      	mov	r1, r6
 80075ba:	4650      	mov	r0, sl
 80075bc:	f000 fd4a 	bl	8008054 <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	da6c      	bge.n	800769e <_dtoa_r+0x926>
 80075c4:	2300      	movs	r3, #0
 80075c6:	4651      	mov	r1, sl
 80075c8:	220a      	movs	r2, #10
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 fb28 	bl	8007c20 <__multadd>
 80075d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80075d6:	4682      	mov	sl, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 81b0 	beq.w	800793e <_dtoa_r+0xbc6>
 80075de:	2300      	movs	r3, #0
 80075e0:	4639      	mov	r1, r7
 80075e2:	220a      	movs	r2, #10
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 fb1b 	bl	8007c20 <__multadd>
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	4607      	mov	r7, r0
 80075f0:	f300 8096 	bgt.w	8007720 <_dtoa_r+0x9a8>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	dc59      	bgt.n	80076ae <_dtoa_r+0x936>
 80075fa:	e091      	b.n	8007720 <_dtoa_r+0x9a8>
 80075fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007602:	e758      	b.n	80074b6 <_dtoa_r+0x73e>
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	1e5e      	subs	r6, r3, #1
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	42b3      	cmp	r3, r6
 800760c:	bfbf      	itttt	lt
 800760e:	9b08      	ldrlt	r3, [sp, #32]
 8007610:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007612:	9608      	strlt	r6, [sp, #32]
 8007614:	1af3      	sublt	r3, r6, r3
 8007616:	bfb4      	ite	lt
 8007618:	18d2      	addlt	r2, r2, r3
 800761a:	1b9e      	subge	r6, r3, r6
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	bfbc      	itt	lt
 8007620:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007622:	2600      	movlt	r6, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	bfb7      	itett	lt
 8007628:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800762c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007630:	1a9d      	sublt	r5, r3, r2
 8007632:	2300      	movlt	r3, #0
 8007634:	e741      	b.n	80074ba <_dtoa_r+0x742>
 8007636:	9e08      	ldr	r6, [sp, #32]
 8007638:	9d05      	ldr	r5, [sp, #20]
 800763a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800763c:	e748      	b.n	80074d0 <_dtoa_r+0x758>
 800763e:	9a08      	ldr	r2, [sp, #32]
 8007640:	e770      	b.n	8007524 <_dtoa_r+0x7ac>
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	2b01      	cmp	r3, #1
 8007646:	dc19      	bgt.n	800767c <_dtoa_r+0x904>
 8007648:	9b02      	ldr	r3, [sp, #8]
 800764a:	b9bb      	cbnz	r3, 800767c <_dtoa_r+0x904>
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007652:	b99b      	cbnz	r3, 800767c <_dtoa_r+0x904>
 8007654:	9b03      	ldr	r3, [sp, #12]
 8007656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800765a:	0d1b      	lsrs	r3, r3, #20
 800765c:	051b      	lsls	r3, r3, #20
 800765e:	b183      	cbz	r3, 8007682 <_dtoa_r+0x90a>
 8007660:	9b05      	ldr	r3, [sp, #20]
 8007662:	3301      	adds	r3, #1
 8007664:	9305      	str	r3, [sp, #20]
 8007666:	9b06      	ldr	r3, [sp, #24]
 8007668:	3301      	adds	r3, #1
 800766a:	9306      	str	r3, [sp, #24]
 800766c:	f04f 0801 	mov.w	r8, #1
 8007670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007672:	2b00      	cmp	r3, #0
 8007674:	f47f af6f 	bne.w	8007556 <_dtoa_r+0x7de>
 8007678:	2001      	movs	r0, #1
 800767a:	e774      	b.n	8007566 <_dtoa_r+0x7ee>
 800767c:	f04f 0800 	mov.w	r8, #0
 8007680:	e7f6      	b.n	8007670 <_dtoa_r+0x8f8>
 8007682:	4698      	mov	r8, r3
 8007684:	e7f4      	b.n	8007670 <_dtoa_r+0x8f8>
 8007686:	d082      	beq.n	800758e <_dtoa_r+0x816>
 8007688:	9a05      	ldr	r2, [sp, #20]
 800768a:	331c      	adds	r3, #28
 800768c:	441a      	add	r2, r3
 800768e:	9205      	str	r2, [sp, #20]
 8007690:	9a06      	ldr	r2, [sp, #24]
 8007692:	441a      	add	r2, r3
 8007694:	441d      	add	r5, r3
 8007696:	9206      	str	r2, [sp, #24]
 8007698:	e779      	b.n	800758e <_dtoa_r+0x816>
 800769a:	4603      	mov	r3, r0
 800769c:	e7f4      	b.n	8007688 <_dtoa_r+0x910>
 800769e:	9b04      	ldr	r3, [sp, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	dc37      	bgt.n	8007714 <_dtoa_r+0x99c>
 80076a4:	9b07      	ldr	r3, [sp, #28]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	dd34      	ble.n	8007714 <_dtoa_r+0x99c>
 80076aa:	9b04      	ldr	r3, [sp, #16]
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	b963      	cbnz	r3, 80076cc <_dtoa_r+0x954>
 80076b2:	4631      	mov	r1, r6
 80076b4:	2205      	movs	r2, #5
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 fab2 	bl	8007c20 <__multadd>
 80076bc:	4601      	mov	r1, r0
 80076be:	4606      	mov	r6, r0
 80076c0:	4650      	mov	r0, sl
 80076c2:	f000 fcc7 	bl	8008054 <__mcmp>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f73f adbb 	bgt.w	8007242 <_dtoa_r+0x4ca>
 80076cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ce:	9d00      	ldr	r5, [sp, #0]
 80076d0:	ea6f 0b03 	mvn.w	fp, r3
 80076d4:	f04f 0800 	mov.w	r8, #0
 80076d8:	4631      	mov	r1, r6
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 fa7e 	bl	8007bdc <_Bfree>
 80076e0:	2f00      	cmp	r7, #0
 80076e2:	f43f aeab 	beq.w	800743c <_dtoa_r+0x6c4>
 80076e6:	f1b8 0f00 	cmp.w	r8, #0
 80076ea:	d005      	beq.n	80076f8 <_dtoa_r+0x980>
 80076ec:	45b8      	cmp	r8, r7
 80076ee:	d003      	beq.n	80076f8 <_dtoa_r+0x980>
 80076f0:	4641      	mov	r1, r8
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 fa72 	bl	8007bdc <_Bfree>
 80076f8:	4639      	mov	r1, r7
 80076fa:	4620      	mov	r0, r4
 80076fc:	f000 fa6e 	bl	8007bdc <_Bfree>
 8007700:	e69c      	b.n	800743c <_dtoa_r+0x6c4>
 8007702:	2600      	movs	r6, #0
 8007704:	4637      	mov	r7, r6
 8007706:	e7e1      	b.n	80076cc <_dtoa_r+0x954>
 8007708:	46bb      	mov	fp, r7
 800770a:	4637      	mov	r7, r6
 800770c:	e599      	b.n	8007242 <_dtoa_r+0x4ca>
 800770e:	bf00      	nop
 8007710:	40240000 	.word	0x40240000
 8007714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 80c8 	beq.w	80078ac <_dtoa_r+0xb34>
 800771c:	9b04      	ldr	r3, [sp, #16]
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	2d00      	cmp	r5, #0
 8007722:	dd05      	ble.n	8007730 <_dtoa_r+0x9b8>
 8007724:	4639      	mov	r1, r7
 8007726:	462a      	mov	r2, r5
 8007728:	4620      	mov	r0, r4
 800772a:	f000 fc27 	bl	8007f7c <__lshift>
 800772e:	4607      	mov	r7, r0
 8007730:	f1b8 0f00 	cmp.w	r8, #0
 8007734:	d05b      	beq.n	80077ee <_dtoa_r+0xa76>
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fa0f 	bl	8007b5c <_Balloc>
 800773e:	4605      	mov	r5, r0
 8007740:	b928      	cbnz	r0, 800774e <_dtoa_r+0x9d6>
 8007742:	4b83      	ldr	r3, [pc, #524]	; (8007950 <_dtoa_r+0xbd8>)
 8007744:	4602      	mov	r2, r0
 8007746:	f240 21ef 	movw	r1, #751	; 0x2ef
 800774a:	f7ff bb2e 	b.w	8006daa <_dtoa_r+0x32>
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	3202      	adds	r2, #2
 8007752:	0092      	lsls	r2, r2, #2
 8007754:	f107 010c 	add.w	r1, r7, #12
 8007758:	300c      	adds	r0, #12
 800775a:	f000 ffab 	bl	80086b4 <memcpy>
 800775e:	2201      	movs	r2, #1
 8007760:	4629      	mov	r1, r5
 8007762:	4620      	mov	r0, r4
 8007764:	f000 fc0a 	bl	8007f7c <__lshift>
 8007768:	9b00      	ldr	r3, [sp, #0]
 800776a:	3301      	adds	r3, #1
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007772:	4413      	add	r3, r2
 8007774:	9308      	str	r3, [sp, #32]
 8007776:	9b02      	ldr	r3, [sp, #8]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	46b8      	mov	r8, r7
 800777e:	9306      	str	r3, [sp, #24]
 8007780:	4607      	mov	r7, r0
 8007782:	9b04      	ldr	r3, [sp, #16]
 8007784:	4631      	mov	r1, r6
 8007786:	3b01      	subs	r3, #1
 8007788:	4650      	mov	r0, sl
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	f7ff fa69 	bl	8006c62 <quorem>
 8007790:	4641      	mov	r1, r8
 8007792:	9002      	str	r0, [sp, #8]
 8007794:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007798:	4650      	mov	r0, sl
 800779a:	f000 fc5b 	bl	8008054 <__mcmp>
 800779e:	463a      	mov	r2, r7
 80077a0:	9005      	str	r0, [sp, #20]
 80077a2:	4631      	mov	r1, r6
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fc71 	bl	800808c <__mdiff>
 80077aa:	68c2      	ldr	r2, [r0, #12]
 80077ac:	4605      	mov	r5, r0
 80077ae:	bb02      	cbnz	r2, 80077f2 <_dtoa_r+0xa7a>
 80077b0:	4601      	mov	r1, r0
 80077b2:	4650      	mov	r0, sl
 80077b4:	f000 fc4e 	bl	8008054 <__mcmp>
 80077b8:	4602      	mov	r2, r0
 80077ba:	4629      	mov	r1, r5
 80077bc:	4620      	mov	r0, r4
 80077be:	9209      	str	r2, [sp, #36]	; 0x24
 80077c0:	f000 fa0c 	bl	8007bdc <_Bfree>
 80077c4:	9b07      	ldr	r3, [sp, #28]
 80077c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c8:	9d04      	ldr	r5, [sp, #16]
 80077ca:	ea43 0102 	orr.w	r1, r3, r2
 80077ce:	9b06      	ldr	r3, [sp, #24]
 80077d0:	4319      	orrs	r1, r3
 80077d2:	d110      	bne.n	80077f6 <_dtoa_r+0xa7e>
 80077d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077d8:	d029      	beq.n	800782e <_dtoa_r+0xab6>
 80077da:	9b05      	ldr	r3, [sp, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	dd02      	ble.n	80077e6 <_dtoa_r+0xa6e>
 80077e0:	9b02      	ldr	r3, [sp, #8]
 80077e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80077e6:	9b01      	ldr	r3, [sp, #4]
 80077e8:	f883 9000 	strb.w	r9, [r3]
 80077ec:	e774      	b.n	80076d8 <_dtoa_r+0x960>
 80077ee:	4638      	mov	r0, r7
 80077f0:	e7ba      	b.n	8007768 <_dtoa_r+0x9f0>
 80077f2:	2201      	movs	r2, #1
 80077f4:	e7e1      	b.n	80077ba <_dtoa_r+0xa42>
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	db04      	blt.n	8007806 <_dtoa_r+0xa8e>
 80077fc:	9907      	ldr	r1, [sp, #28]
 80077fe:	430b      	orrs	r3, r1
 8007800:	9906      	ldr	r1, [sp, #24]
 8007802:	430b      	orrs	r3, r1
 8007804:	d120      	bne.n	8007848 <_dtoa_r+0xad0>
 8007806:	2a00      	cmp	r2, #0
 8007808:	dded      	ble.n	80077e6 <_dtoa_r+0xa6e>
 800780a:	4651      	mov	r1, sl
 800780c:	2201      	movs	r2, #1
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fbb4 	bl	8007f7c <__lshift>
 8007814:	4631      	mov	r1, r6
 8007816:	4682      	mov	sl, r0
 8007818:	f000 fc1c 	bl	8008054 <__mcmp>
 800781c:	2800      	cmp	r0, #0
 800781e:	dc03      	bgt.n	8007828 <_dtoa_r+0xab0>
 8007820:	d1e1      	bne.n	80077e6 <_dtoa_r+0xa6e>
 8007822:	f019 0f01 	tst.w	r9, #1
 8007826:	d0de      	beq.n	80077e6 <_dtoa_r+0xa6e>
 8007828:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800782c:	d1d8      	bne.n	80077e0 <_dtoa_r+0xa68>
 800782e:	9a01      	ldr	r2, [sp, #4]
 8007830:	2339      	movs	r3, #57	; 0x39
 8007832:	7013      	strb	r3, [r2, #0]
 8007834:	462b      	mov	r3, r5
 8007836:	461d      	mov	r5, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800783e:	2a39      	cmp	r2, #57	; 0x39
 8007840:	d06c      	beq.n	800791c <_dtoa_r+0xba4>
 8007842:	3201      	adds	r2, #1
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e747      	b.n	80076d8 <_dtoa_r+0x960>
 8007848:	2a00      	cmp	r2, #0
 800784a:	dd07      	ble.n	800785c <_dtoa_r+0xae4>
 800784c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007850:	d0ed      	beq.n	800782e <_dtoa_r+0xab6>
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	f109 0301 	add.w	r3, r9, #1
 8007858:	7013      	strb	r3, [r2, #0]
 800785a:	e73d      	b.n	80076d8 <_dtoa_r+0x960>
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	9a08      	ldr	r2, [sp, #32]
 8007860:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007864:	4293      	cmp	r3, r2
 8007866:	d043      	beq.n	80078f0 <_dtoa_r+0xb78>
 8007868:	4651      	mov	r1, sl
 800786a:	2300      	movs	r3, #0
 800786c:	220a      	movs	r2, #10
 800786e:	4620      	mov	r0, r4
 8007870:	f000 f9d6 	bl	8007c20 <__multadd>
 8007874:	45b8      	cmp	r8, r7
 8007876:	4682      	mov	sl, r0
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	f04f 020a 	mov.w	r2, #10
 8007880:	4641      	mov	r1, r8
 8007882:	4620      	mov	r0, r4
 8007884:	d107      	bne.n	8007896 <_dtoa_r+0xb1e>
 8007886:	f000 f9cb 	bl	8007c20 <__multadd>
 800788a:	4680      	mov	r8, r0
 800788c:	4607      	mov	r7, r0
 800788e:	9b04      	ldr	r3, [sp, #16]
 8007890:	3301      	adds	r3, #1
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	e775      	b.n	8007782 <_dtoa_r+0xa0a>
 8007896:	f000 f9c3 	bl	8007c20 <__multadd>
 800789a:	4639      	mov	r1, r7
 800789c:	4680      	mov	r8, r0
 800789e:	2300      	movs	r3, #0
 80078a0:	220a      	movs	r2, #10
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 f9bc 	bl	8007c20 <__multadd>
 80078a8:	4607      	mov	r7, r0
 80078aa:	e7f0      	b.n	800788e <_dtoa_r+0xb16>
 80078ac:	9b04      	ldr	r3, [sp, #16]
 80078ae:	9301      	str	r3, [sp, #4]
 80078b0:	9d00      	ldr	r5, [sp, #0]
 80078b2:	4631      	mov	r1, r6
 80078b4:	4650      	mov	r0, sl
 80078b6:	f7ff f9d4 	bl	8006c62 <quorem>
 80078ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80078be:	9b00      	ldr	r3, [sp, #0]
 80078c0:	f805 9b01 	strb.w	r9, [r5], #1
 80078c4:	1aea      	subs	r2, r5, r3
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	4293      	cmp	r3, r2
 80078ca:	dd07      	ble.n	80078dc <_dtoa_r+0xb64>
 80078cc:	4651      	mov	r1, sl
 80078ce:	2300      	movs	r3, #0
 80078d0:	220a      	movs	r2, #10
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 f9a4 	bl	8007c20 <__multadd>
 80078d8:	4682      	mov	sl, r0
 80078da:	e7ea      	b.n	80078b2 <_dtoa_r+0xb3a>
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfc8      	it	gt
 80078e2:	461d      	movgt	r5, r3
 80078e4:	9b00      	ldr	r3, [sp, #0]
 80078e6:	bfd8      	it	le
 80078e8:	2501      	movle	r5, #1
 80078ea:	441d      	add	r5, r3
 80078ec:	f04f 0800 	mov.w	r8, #0
 80078f0:	4651      	mov	r1, sl
 80078f2:	2201      	movs	r2, #1
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fb41 	bl	8007f7c <__lshift>
 80078fa:	4631      	mov	r1, r6
 80078fc:	4682      	mov	sl, r0
 80078fe:	f000 fba9 	bl	8008054 <__mcmp>
 8007902:	2800      	cmp	r0, #0
 8007904:	dc96      	bgt.n	8007834 <_dtoa_r+0xabc>
 8007906:	d102      	bne.n	800790e <_dtoa_r+0xb96>
 8007908:	f019 0f01 	tst.w	r9, #1
 800790c:	d192      	bne.n	8007834 <_dtoa_r+0xabc>
 800790e:	462b      	mov	r3, r5
 8007910:	461d      	mov	r5, r3
 8007912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007916:	2a30      	cmp	r2, #48	; 0x30
 8007918:	d0fa      	beq.n	8007910 <_dtoa_r+0xb98>
 800791a:	e6dd      	b.n	80076d8 <_dtoa_r+0x960>
 800791c:	9a00      	ldr	r2, [sp, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d189      	bne.n	8007836 <_dtoa_r+0xabe>
 8007922:	f10b 0b01 	add.w	fp, fp, #1
 8007926:	2331      	movs	r3, #49	; 0x31
 8007928:	e796      	b.n	8007858 <_dtoa_r+0xae0>
 800792a:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <_dtoa_r+0xbdc>)
 800792c:	f7ff ba99 	b.w	8006e62 <_dtoa_r+0xea>
 8007930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007932:	2b00      	cmp	r3, #0
 8007934:	f47f aa6d 	bne.w	8006e12 <_dtoa_r+0x9a>
 8007938:	4b07      	ldr	r3, [pc, #28]	; (8007958 <_dtoa_r+0xbe0>)
 800793a:	f7ff ba92 	b.w	8006e62 <_dtoa_r+0xea>
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	dcb5      	bgt.n	80078b0 <_dtoa_r+0xb38>
 8007944:	9b07      	ldr	r3, [sp, #28]
 8007946:	2b02      	cmp	r3, #2
 8007948:	f73f aeb1 	bgt.w	80076ae <_dtoa_r+0x936>
 800794c:	e7b0      	b.n	80078b0 <_dtoa_r+0xb38>
 800794e:	bf00      	nop
 8007950:	08008eec 	.word	0x08008eec
 8007954:	08008e4c 	.word	0x08008e4c
 8007958:	08008e70 	.word	0x08008e70

0800795c <_free_r>:
 800795c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800795e:	2900      	cmp	r1, #0
 8007960:	d044      	beq.n	80079ec <_free_r+0x90>
 8007962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007966:	9001      	str	r0, [sp, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f1a1 0404 	sub.w	r4, r1, #4
 800796e:	bfb8      	it	lt
 8007970:	18e4      	addlt	r4, r4, r3
 8007972:	f000 f8e7 	bl	8007b44 <__malloc_lock>
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <_free_r+0x94>)
 8007978:	9801      	ldr	r0, [sp, #4]
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	b933      	cbnz	r3, 800798c <_free_r+0x30>
 800797e:	6063      	str	r3, [r4, #4]
 8007980:	6014      	str	r4, [r2, #0]
 8007982:	b003      	add	sp, #12
 8007984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007988:	f000 b8e2 	b.w	8007b50 <__malloc_unlock>
 800798c:	42a3      	cmp	r3, r4
 800798e:	d908      	bls.n	80079a2 <_free_r+0x46>
 8007990:	6825      	ldr	r5, [r4, #0]
 8007992:	1961      	adds	r1, r4, r5
 8007994:	428b      	cmp	r3, r1
 8007996:	bf01      	itttt	eq
 8007998:	6819      	ldreq	r1, [r3, #0]
 800799a:	685b      	ldreq	r3, [r3, #4]
 800799c:	1949      	addeq	r1, r1, r5
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	e7ed      	b.n	800797e <_free_r+0x22>
 80079a2:	461a      	mov	r2, r3
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	b10b      	cbz	r3, 80079ac <_free_r+0x50>
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	d9fa      	bls.n	80079a2 <_free_r+0x46>
 80079ac:	6811      	ldr	r1, [r2, #0]
 80079ae:	1855      	adds	r5, r2, r1
 80079b0:	42a5      	cmp	r5, r4
 80079b2:	d10b      	bne.n	80079cc <_free_r+0x70>
 80079b4:	6824      	ldr	r4, [r4, #0]
 80079b6:	4421      	add	r1, r4
 80079b8:	1854      	adds	r4, r2, r1
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	6011      	str	r1, [r2, #0]
 80079be:	d1e0      	bne.n	8007982 <_free_r+0x26>
 80079c0:	681c      	ldr	r4, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	6053      	str	r3, [r2, #4]
 80079c6:	440c      	add	r4, r1
 80079c8:	6014      	str	r4, [r2, #0]
 80079ca:	e7da      	b.n	8007982 <_free_r+0x26>
 80079cc:	d902      	bls.n	80079d4 <_free_r+0x78>
 80079ce:	230c      	movs	r3, #12
 80079d0:	6003      	str	r3, [r0, #0]
 80079d2:	e7d6      	b.n	8007982 <_free_r+0x26>
 80079d4:	6825      	ldr	r5, [r4, #0]
 80079d6:	1961      	adds	r1, r4, r5
 80079d8:	428b      	cmp	r3, r1
 80079da:	bf04      	itt	eq
 80079dc:	6819      	ldreq	r1, [r3, #0]
 80079de:	685b      	ldreq	r3, [r3, #4]
 80079e0:	6063      	str	r3, [r4, #4]
 80079e2:	bf04      	itt	eq
 80079e4:	1949      	addeq	r1, r1, r5
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	6054      	str	r4, [r2, #4]
 80079ea:	e7ca      	b.n	8007982 <_free_r+0x26>
 80079ec:	b003      	add	sp, #12
 80079ee:	bd30      	pop	{r4, r5, pc}
 80079f0:	20000b5c 	.word	0x20000b5c

080079f4 <malloc>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <malloc+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f000 b823 	b.w	8007a44 <_malloc_r>
 80079fe:	bf00      	nop
 8007a00:	20000064 	.word	0x20000064

08007a04 <sbrk_aligned>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	4e0e      	ldr	r6, [pc, #56]	; (8007a40 <sbrk_aligned+0x3c>)
 8007a08:	460c      	mov	r4, r1
 8007a0a:	6831      	ldr	r1, [r6, #0]
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	b911      	cbnz	r1, 8007a16 <sbrk_aligned+0x12>
 8007a10:	f000 fe40 	bl	8008694 <_sbrk_r>
 8007a14:	6030      	str	r0, [r6, #0]
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 fe3b 	bl	8008694 <_sbrk_r>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	d00a      	beq.n	8007a38 <sbrk_aligned+0x34>
 8007a22:	1cc4      	adds	r4, r0, #3
 8007a24:	f024 0403 	bic.w	r4, r4, #3
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	d007      	beq.n	8007a3c <sbrk_aligned+0x38>
 8007a2c:	1a21      	subs	r1, r4, r0
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 fe30 	bl	8008694 <_sbrk_r>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d101      	bne.n	8007a3c <sbrk_aligned+0x38>
 8007a38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	20000b60 	.word	0x20000b60

08007a44 <_malloc_r>:
 8007a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a48:	1ccd      	adds	r5, r1, #3
 8007a4a:	f025 0503 	bic.w	r5, r5, #3
 8007a4e:	3508      	adds	r5, #8
 8007a50:	2d0c      	cmp	r5, #12
 8007a52:	bf38      	it	cc
 8007a54:	250c      	movcc	r5, #12
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	4607      	mov	r7, r0
 8007a5a:	db01      	blt.n	8007a60 <_malloc_r+0x1c>
 8007a5c:	42a9      	cmp	r1, r5
 8007a5e:	d905      	bls.n	8007a6c <_malloc_r+0x28>
 8007a60:	230c      	movs	r3, #12
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	2600      	movs	r6, #0
 8007a66:	4630      	mov	r0, r6
 8007a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b40 <_malloc_r+0xfc>
 8007a70:	f000 f868 	bl	8007b44 <__malloc_lock>
 8007a74:	f8d8 3000 	ldr.w	r3, [r8]
 8007a78:	461c      	mov	r4, r3
 8007a7a:	bb5c      	cbnz	r4, 8007ad4 <_malloc_r+0x90>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7ff ffc0 	bl	8007a04 <sbrk_aligned>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	4604      	mov	r4, r0
 8007a88:	d155      	bne.n	8007b36 <_malloc_r+0xf2>
 8007a8a:	f8d8 4000 	ldr.w	r4, [r8]
 8007a8e:	4626      	mov	r6, r4
 8007a90:	2e00      	cmp	r6, #0
 8007a92:	d145      	bne.n	8007b20 <_malloc_r+0xdc>
 8007a94:	2c00      	cmp	r4, #0
 8007a96:	d048      	beq.n	8007b2a <_malloc_r+0xe6>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	eb04 0903 	add.w	r9, r4, r3
 8007aa2:	f000 fdf7 	bl	8008694 <_sbrk_r>
 8007aa6:	4581      	cmp	r9, r0
 8007aa8:	d13f      	bne.n	8007b2a <_malloc_r+0xe6>
 8007aaa:	6821      	ldr	r1, [r4, #0]
 8007aac:	1a6d      	subs	r5, r5, r1
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff ffa7 	bl	8007a04 <sbrk_aligned>
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d037      	beq.n	8007b2a <_malloc_r+0xe6>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	442b      	add	r3, r5
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d038      	beq.n	8007b3a <_malloc_r+0xf6>
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	42a2      	cmp	r2, r4
 8007acc:	d12b      	bne.n	8007b26 <_malloc_r+0xe2>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	e00f      	b.n	8007af4 <_malloc_r+0xb0>
 8007ad4:	6822      	ldr	r2, [r4, #0]
 8007ad6:	1b52      	subs	r2, r2, r5
 8007ad8:	d41f      	bmi.n	8007b1a <_malloc_r+0xd6>
 8007ada:	2a0b      	cmp	r2, #11
 8007adc:	d917      	bls.n	8007b0e <_malloc_r+0xca>
 8007ade:	1961      	adds	r1, r4, r5
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	6025      	str	r5, [r4, #0]
 8007ae4:	bf18      	it	ne
 8007ae6:	6059      	strne	r1, [r3, #4]
 8007ae8:	6863      	ldr	r3, [r4, #4]
 8007aea:	bf08      	it	eq
 8007aec:	f8c8 1000 	streq.w	r1, [r8]
 8007af0:	5162      	str	r2, [r4, r5]
 8007af2:	604b      	str	r3, [r1, #4]
 8007af4:	4638      	mov	r0, r7
 8007af6:	f104 060b 	add.w	r6, r4, #11
 8007afa:	f000 f829 	bl	8007b50 <__malloc_unlock>
 8007afe:	f026 0607 	bic.w	r6, r6, #7
 8007b02:	1d23      	adds	r3, r4, #4
 8007b04:	1af2      	subs	r2, r6, r3
 8007b06:	d0ae      	beq.n	8007a66 <_malloc_r+0x22>
 8007b08:	1b9b      	subs	r3, r3, r6
 8007b0a:	50a3      	str	r3, [r4, r2]
 8007b0c:	e7ab      	b.n	8007a66 <_malloc_r+0x22>
 8007b0e:	42a3      	cmp	r3, r4
 8007b10:	6862      	ldr	r2, [r4, #4]
 8007b12:	d1dd      	bne.n	8007ad0 <_malloc_r+0x8c>
 8007b14:	f8c8 2000 	str.w	r2, [r8]
 8007b18:	e7ec      	b.n	8007af4 <_malloc_r+0xb0>
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	6864      	ldr	r4, [r4, #4]
 8007b1e:	e7ac      	b.n	8007a7a <_malloc_r+0x36>
 8007b20:	4634      	mov	r4, r6
 8007b22:	6876      	ldr	r6, [r6, #4]
 8007b24:	e7b4      	b.n	8007a90 <_malloc_r+0x4c>
 8007b26:	4613      	mov	r3, r2
 8007b28:	e7cc      	b.n	8007ac4 <_malloc_r+0x80>
 8007b2a:	230c      	movs	r3, #12
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f000 f80e 	bl	8007b50 <__malloc_unlock>
 8007b34:	e797      	b.n	8007a66 <_malloc_r+0x22>
 8007b36:	6025      	str	r5, [r4, #0]
 8007b38:	e7dc      	b.n	8007af4 <_malloc_r+0xb0>
 8007b3a:	605b      	str	r3, [r3, #4]
 8007b3c:	deff      	udf	#255	; 0xff
 8007b3e:	bf00      	nop
 8007b40:	20000b5c 	.word	0x20000b5c

08007b44 <__malloc_lock>:
 8007b44:	4801      	ldr	r0, [pc, #4]	; (8007b4c <__malloc_lock+0x8>)
 8007b46:	f7ff b88a 	b.w	8006c5e <__retarget_lock_acquire_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	20000b58 	.word	0x20000b58

08007b50 <__malloc_unlock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__malloc_unlock+0x8>)
 8007b52:	f7ff b885 	b.w	8006c60 <__retarget_lock_release_recursive>
 8007b56:	bf00      	nop
 8007b58:	20000b58 	.word	0x20000b58

08007b5c <_Balloc>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	69c6      	ldr	r6, [r0, #28]
 8007b60:	4604      	mov	r4, r0
 8007b62:	460d      	mov	r5, r1
 8007b64:	b976      	cbnz	r6, 8007b84 <_Balloc+0x28>
 8007b66:	2010      	movs	r0, #16
 8007b68:	f7ff ff44 	bl	80079f4 <malloc>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	61e0      	str	r0, [r4, #28]
 8007b70:	b920      	cbnz	r0, 8007b7c <_Balloc+0x20>
 8007b72:	4b18      	ldr	r3, [pc, #96]	; (8007bd4 <_Balloc+0x78>)
 8007b74:	4818      	ldr	r0, [pc, #96]	; (8007bd8 <_Balloc+0x7c>)
 8007b76:	216b      	movs	r1, #107	; 0x6b
 8007b78:	f000 fdaa 	bl	80086d0 <__assert_func>
 8007b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b80:	6006      	str	r6, [r0, #0]
 8007b82:	60c6      	str	r6, [r0, #12]
 8007b84:	69e6      	ldr	r6, [r4, #28]
 8007b86:	68f3      	ldr	r3, [r6, #12]
 8007b88:	b183      	cbz	r3, 8007bac <_Balloc+0x50>
 8007b8a:	69e3      	ldr	r3, [r4, #28]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b92:	b9b8      	cbnz	r0, 8007bc4 <_Balloc+0x68>
 8007b94:	2101      	movs	r1, #1
 8007b96:	fa01 f605 	lsl.w	r6, r1, r5
 8007b9a:	1d72      	adds	r2, r6, #5
 8007b9c:	0092      	lsls	r2, r2, #2
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 fdb4 	bl	800870c <_calloc_r>
 8007ba4:	b160      	cbz	r0, 8007bc0 <_Balloc+0x64>
 8007ba6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007baa:	e00e      	b.n	8007bca <_Balloc+0x6e>
 8007bac:	2221      	movs	r2, #33	; 0x21
 8007bae:	2104      	movs	r1, #4
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fdab 	bl	800870c <_calloc_r>
 8007bb6:	69e3      	ldr	r3, [r4, #28]
 8007bb8:	60f0      	str	r0, [r6, #12]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e4      	bne.n	8007b8a <_Balloc+0x2e>
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	6802      	ldr	r2, [r0, #0]
 8007bc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bd0:	e7f7      	b.n	8007bc2 <_Balloc+0x66>
 8007bd2:	bf00      	nop
 8007bd4:	08008e7d 	.word	0x08008e7d
 8007bd8:	08008efd 	.word	0x08008efd

08007bdc <_Bfree>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	69c6      	ldr	r6, [r0, #28]
 8007be0:	4605      	mov	r5, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	b976      	cbnz	r6, 8007c04 <_Bfree+0x28>
 8007be6:	2010      	movs	r0, #16
 8007be8:	f7ff ff04 	bl	80079f4 <malloc>
 8007bec:	4602      	mov	r2, r0
 8007bee:	61e8      	str	r0, [r5, #28]
 8007bf0:	b920      	cbnz	r0, 8007bfc <_Bfree+0x20>
 8007bf2:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <_Bfree+0x3c>)
 8007bf4:	4809      	ldr	r0, [pc, #36]	; (8007c1c <_Bfree+0x40>)
 8007bf6:	218f      	movs	r1, #143	; 0x8f
 8007bf8:	f000 fd6a 	bl	80086d0 <__assert_func>
 8007bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c00:	6006      	str	r6, [r0, #0]
 8007c02:	60c6      	str	r6, [r0, #12]
 8007c04:	b13c      	cbz	r4, 8007c16 <_Bfree+0x3a>
 8007c06:	69eb      	ldr	r3, [r5, #28]
 8007c08:	6862      	ldr	r2, [r4, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c10:	6021      	str	r1, [r4, #0]
 8007c12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	08008e7d 	.word	0x08008e7d
 8007c1c:	08008efd 	.word	0x08008efd

08007c20 <__multadd>:
 8007c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c24:	690d      	ldr	r5, [r1, #16]
 8007c26:	4607      	mov	r7, r0
 8007c28:	460c      	mov	r4, r1
 8007c2a:	461e      	mov	r6, r3
 8007c2c:	f101 0c14 	add.w	ip, r1, #20
 8007c30:	2000      	movs	r0, #0
 8007c32:	f8dc 3000 	ldr.w	r3, [ip]
 8007c36:	b299      	uxth	r1, r3
 8007c38:	fb02 6101 	mla	r1, r2, r1, r6
 8007c3c:	0c1e      	lsrs	r6, r3, #16
 8007c3e:	0c0b      	lsrs	r3, r1, #16
 8007c40:	fb02 3306 	mla	r3, r2, r6, r3
 8007c44:	b289      	uxth	r1, r1
 8007c46:	3001      	adds	r0, #1
 8007c48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c4c:	4285      	cmp	r5, r0
 8007c4e:	f84c 1b04 	str.w	r1, [ip], #4
 8007c52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c56:	dcec      	bgt.n	8007c32 <__multadd+0x12>
 8007c58:	b30e      	cbz	r6, 8007c9e <__multadd+0x7e>
 8007c5a:	68a3      	ldr	r3, [r4, #8]
 8007c5c:	42ab      	cmp	r3, r5
 8007c5e:	dc19      	bgt.n	8007c94 <__multadd+0x74>
 8007c60:	6861      	ldr	r1, [r4, #4]
 8007c62:	4638      	mov	r0, r7
 8007c64:	3101      	adds	r1, #1
 8007c66:	f7ff ff79 	bl	8007b5c <_Balloc>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	b928      	cbnz	r0, 8007c7a <__multadd+0x5a>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <__multadd+0x84>)
 8007c72:	480d      	ldr	r0, [pc, #52]	; (8007ca8 <__multadd+0x88>)
 8007c74:	21ba      	movs	r1, #186	; 0xba
 8007c76:	f000 fd2b 	bl	80086d0 <__assert_func>
 8007c7a:	6922      	ldr	r2, [r4, #16]
 8007c7c:	3202      	adds	r2, #2
 8007c7e:	f104 010c 	add.w	r1, r4, #12
 8007c82:	0092      	lsls	r2, r2, #2
 8007c84:	300c      	adds	r0, #12
 8007c86:	f000 fd15 	bl	80086b4 <memcpy>
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	f7ff ffa5 	bl	8007bdc <_Bfree>
 8007c92:	4644      	mov	r4, r8
 8007c94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c98:	3501      	adds	r5, #1
 8007c9a:	615e      	str	r6, [r3, #20]
 8007c9c:	6125      	str	r5, [r4, #16]
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca4:	08008eec 	.word	0x08008eec
 8007ca8:	08008efd 	.word	0x08008efd

08007cac <__hi0bits>:
 8007cac:	0c03      	lsrs	r3, r0, #16
 8007cae:	041b      	lsls	r3, r3, #16
 8007cb0:	b9d3      	cbnz	r3, 8007ce8 <__hi0bits+0x3c>
 8007cb2:	0400      	lsls	r0, r0, #16
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cba:	bf04      	itt	eq
 8007cbc:	0200      	lsleq	r0, r0, #8
 8007cbe:	3308      	addeq	r3, #8
 8007cc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007cc4:	bf04      	itt	eq
 8007cc6:	0100      	lsleq	r0, r0, #4
 8007cc8:	3304      	addeq	r3, #4
 8007cca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007cce:	bf04      	itt	eq
 8007cd0:	0080      	lsleq	r0, r0, #2
 8007cd2:	3302      	addeq	r3, #2
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	db05      	blt.n	8007ce4 <__hi0bits+0x38>
 8007cd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cdc:	f103 0301 	add.w	r3, r3, #1
 8007ce0:	bf08      	it	eq
 8007ce2:	2320      	moveq	r3, #32
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	4770      	bx	lr
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e7e4      	b.n	8007cb6 <__hi0bits+0xa>

08007cec <__lo0bits>:
 8007cec:	6803      	ldr	r3, [r0, #0]
 8007cee:	f013 0207 	ands.w	r2, r3, #7
 8007cf2:	d00c      	beq.n	8007d0e <__lo0bits+0x22>
 8007cf4:	07d9      	lsls	r1, r3, #31
 8007cf6:	d422      	bmi.n	8007d3e <__lo0bits+0x52>
 8007cf8:	079a      	lsls	r2, r3, #30
 8007cfa:	bf49      	itett	mi
 8007cfc:	085b      	lsrmi	r3, r3, #1
 8007cfe:	089b      	lsrpl	r3, r3, #2
 8007d00:	6003      	strmi	r3, [r0, #0]
 8007d02:	2201      	movmi	r2, #1
 8007d04:	bf5c      	itt	pl
 8007d06:	6003      	strpl	r3, [r0, #0]
 8007d08:	2202      	movpl	r2, #2
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4770      	bx	lr
 8007d0e:	b299      	uxth	r1, r3
 8007d10:	b909      	cbnz	r1, 8007d16 <__lo0bits+0x2a>
 8007d12:	0c1b      	lsrs	r3, r3, #16
 8007d14:	2210      	movs	r2, #16
 8007d16:	b2d9      	uxtb	r1, r3
 8007d18:	b909      	cbnz	r1, 8007d1e <__lo0bits+0x32>
 8007d1a:	3208      	adds	r2, #8
 8007d1c:	0a1b      	lsrs	r3, r3, #8
 8007d1e:	0719      	lsls	r1, r3, #28
 8007d20:	bf04      	itt	eq
 8007d22:	091b      	lsreq	r3, r3, #4
 8007d24:	3204      	addeq	r2, #4
 8007d26:	0799      	lsls	r1, r3, #30
 8007d28:	bf04      	itt	eq
 8007d2a:	089b      	lsreq	r3, r3, #2
 8007d2c:	3202      	addeq	r2, #2
 8007d2e:	07d9      	lsls	r1, r3, #31
 8007d30:	d403      	bmi.n	8007d3a <__lo0bits+0x4e>
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	f102 0201 	add.w	r2, r2, #1
 8007d38:	d003      	beq.n	8007d42 <__lo0bits+0x56>
 8007d3a:	6003      	str	r3, [r0, #0]
 8007d3c:	e7e5      	b.n	8007d0a <__lo0bits+0x1e>
 8007d3e:	2200      	movs	r2, #0
 8007d40:	e7e3      	b.n	8007d0a <__lo0bits+0x1e>
 8007d42:	2220      	movs	r2, #32
 8007d44:	e7e1      	b.n	8007d0a <__lo0bits+0x1e>
	...

08007d48 <__i2b>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	f7ff ff05 	bl	8007b5c <_Balloc>
 8007d52:	4602      	mov	r2, r0
 8007d54:	b928      	cbnz	r0, 8007d62 <__i2b+0x1a>
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <__i2b+0x24>)
 8007d58:	4805      	ldr	r0, [pc, #20]	; (8007d70 <__i2b+0x28>)
 8007d5a:	f240 1145 	movw	r1, #325	; 0x145
 8007d5e:	f000 fcb7 	bl	80086d0 <__assert_func>
 8007d62:	2301      	movs	r3, #1
 8007d64:	6144      	str	r4, [r0, #20]
 8007d66:	6103      	str	r3, [r0, #16]
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	bf00      	nop
 8007d6c:	08008eec 	.word	0x08008eec
 8007d70:	08008efd 	.word	0x08008efd

08007d74 <__multiply>:
 8007d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	4691      	mov	r9, r2
 8007d7a:	690a      	ldr	r2, [r1, #16]
 8007d7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	bfb8      	it	lt
 8007d84:	460b      	movlt	r3, r1
 8007d86:	460c      	mov	r4, r1
 8007d88:	bfbc      	itt	lt
 8007d8a:	464c      	movlt	r4, r9
 8007d8c:	4699      	movlt	r9, r3
 8007d8e:	6927      	ldr	r7, [r4, #16]
 8007d90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d94:	68a3      	ldr	r3, [r4, #8]
 8007d96:	6861      	ldr	r1, [r4, #4]
 8007d98:	eb07 060a 	add.w	r6, r7, sl
 8007d9c:	42b3      	cmp	r3, r6
 8007d9e:	b085      	sub	sp, #20
 8007da0:	bfb8      	it	lt
 8007da2:	3101      	addlt	r1, #1
 8007da4:	f7ff feda 	bl	8007b5c <_Balloc>
 8007da8:	b930      	cbnz	r0, 8007db8 <__multiply+0x44>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b44      	ldr	r3, [pc, #272]	; (8007ec0 <__multiply+0x14c>)
 8007dae:	4845      	ldr	r0, [pc, #276]	; (8007ec4 <__multiply+0x150>)
 8007db0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007db4:	f000 fc8c 	bl	80086d0 <__assert_func>
 8007db8:	f100 0514 	add.w	r5, r0, #20
 8007dbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4543      	cmp	r3, r8
 8007dc6:	d321      	bcc.n	8007e0c <__multiply+0x98>
 8007dc8:	f104 0314 	add.w	r3, r4, #20
 8007dcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007dd0:	f109 0314 	add.w	r3, r9, #20
 8007dd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007dd8:	9202      	str	r2, [sp, #8]
 8007dda:	1b3a      	subs	r2, r7, r4
 8007ddc:	3a15      	subs	r2, #21
 8007dde:	f022 0203 	bic.w	r2, r2, #3
 8007de2:	3204      	adds	r2, #4
 8007de4:	f104 0115 	add.w	r1, r4, #21
 8007de8:	428f      	cmp	r7, r1
 8007dea:	bf38      	it	cc
 8007dec:	2204      	movcc	r2, #4
 8007dee:	9201      	str	r2, [sp, #4]
 8007df0:	9a02      	ldr	r2, [sp, #8]
 8007df2:	9303      	str	r3, [sp, #12]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d80c      	bhi.n	8007e12 <__multiply+0x9e>
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	dd03      	ble.n	8007e04 <__multiply+0x90>
 8007dfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d05b      	beq.n	8007ebc <__multiply+0x148>
 8007e04:	6106      	str	r6, [r0, #16]
 8007e06:	b005      	add	sp, #20
 8007e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0c:	f843 2b04 	str.w	r2, [r3], #4
 8007e10:	e7d8      	b.n	8007dc4 <__multiply+0x50>
 8007e12:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e16:	f1ba 0f00 	cmp.w	sl, #0
 8007e1a:	d024      	beq.n	8007e66 <__multiply+0xf2>
 8007e1c:	f104 0e14 	add.w	lr, r4, #20
 8007e20:	46a9      	mov	r9, r5
 8007e22:	f04f 0c00 	mov.w	ip, #0
 8007e26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e2a:	f8d9 1000 	ldr.w	r1, [r9]
 8007e2e:	fa1f fb82 	uxth.w	fp, r2
 8007e32:	b289      	uxth	r1, r1
 8007e34:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8007e40:	4461      	add	r1, ip
 8007e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e46:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e4e:	b289      	uxth	r1, r1
 8007e50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e54:	4577      	cmp	r7, lr
 8007e56:	f849 1b04 	str.w	r1, [r9], #4
 8007e5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e5e:	d8e2      	bhi.n	8007e26 <__multiply+0xb2>
 8007e60:	9a01      	ldr	r2, [sp, #4]
 8007e62:	f845 c002 	str.w	ip, [r5, r2]
 8007e66:	9a03      	ldr	r2, [sp, #12]
 8007e68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	f1b9 0f00 	cmp.w	r9, #0
 8007e72:	d021      	beq.n	8007eb8 <__multiply+0x144>
 8007e74:	6829      	ldr	r1, [r5, #0]
 8007e76:	f104 0c14 	add.w	ip, r4, #20
 8007e7a:	46ae      	mov	lr, r5
 8007e7c:	f04f 0a00 	mov.w	sl, #0
 8007e80:	f8bc b000 	ldrh.w	fp, [ip]
 8007e84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e88:	fb09 220b 	mla	r2, r9, fp, r2
 8007e8c:	4452      	add	r2, sl
 8007e8e:	b289      	uxth	r1, r1
 8007e90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e94:	f84e 1b04 	str.w	r1, [lr], #4
 8007e98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ea0:	f8be 1000 	ldrh.w	r1, [lr]
 8007ea4:	fb09 110a 	mla	r1, r9, sl, r1
 8007ea8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007eac:	4567      	cmp	r7, ip
 8007eae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007eb2:	d8e5      	bhi.n	8007e80 <__multiply+0x10c>
 8007eb4:	9a01      	ldr	r2, [sp, #4]
 8007eb6:	50a9      	str	r1, [r5, r2]
 8007eb8:	3504      	adds	r5, #4
 8007eba:	e799      	b.n	8007df0 <__multiply+0x7c>
 8007ebc:	3e01      	subs	r6, #1
 8007ebe:	e79b      	b.n	8007df8 <__multiply+0x84>
 8007ec0:	08008eec 	.word	0x08008eec
 8007ec4:	08008efd 	.word	0x08008efd

08007ec8 <__pow5mult>:
 8007ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ecc:	4615      	mov	r5, r2
 8007ece:	f012 0203 	ands.w	r2, r2, #3
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	d007      	beq.n	8007ee8 <__pow5mult+0x20>
 8007ed8:	4c25      	ldr	r4, [pc, #148]	; (8007f70 <__pow5mult+0xa8>)
 8007eda:	3a01      	subs	r2, #1
 8007edc:	2300      	movs	r3, #0
 8007ede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ee2:	f7ff fe9d 	bl	8007c20 <__multadd>
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	10ad      	asrs	r5, r5, #2
 8007eea:	d03d      	beq.n	8007f68 <__pow5mult+0xa0>
 8007eec:	69f4      	ldr	r4, [r6, #28]
 8007eee:	b97c      	cbnz	r4, 8007f10 <__pow5mult+0x48>
 8007ef0:	2010      	movs	r0, #16
 8007ef2:	f7ff fd7f 	bl	80079f4 <malloc>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	61f0      	str	r0, [r6, #28]
 8007efa:	b928      	cbnz	r0, 8007f08 <__pow5mult+0x40>
 8007efc:	4b1d      	ldr	r3, [pc, #116]	; (8007f74 <__pow5mult+0xac>)
 8007efe:	481e      	ldr	r0, [pc, #120]	; (8007f78 <__pow5mult+0xb0>)
 8007f00:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007f04:	f000 fbe4 	bl	80086d0 <__assert_func>
 8007f08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f0c:	6004      	str	r4, [r0, #0]
 8007f0e:	60c4      	str	r4, [r0, #12]
 8007f10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007f14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f18:	b94c      	cbnz	r4, 8007f2e <__pow5mult+0x66>
 8007f1a:	f240 2171 	movw	r1, #625	; 0x271
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7ff ff12 	bl	8007d48 <__i2b>
 8007f24:	2300      	movs	r3, #0
 8007f26:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	6003      	str	r3, [r0, #0]
 8007f2e:	f04f 0900 	mov.w	r9, #0
 8007f32:	07eb      	lsls	r3, r5, #31
 8007f34:	d50a      	bpl.n	8007f4c <__pow5mult+0x84>
 8007f36:	4639      	mov	r1, r7
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff ff1a 	bl	8007d74 <__multiply>
 8007f40:	4639      	mov	r1, r7
 8007f42:	4680      	mov	r8, r0
 8007f44:	4630      	mov	r0, r6
 8007f46:	f7ff fe49 	bl	8007bdc <_Bfree>
 8007f4a:	4647      	mov	r7, r8
 8007f4c:	106d      	asrs	r5, r5, #1
 8007f4e:	d00b      	beq.n	8007f68 <__pow5mult+0xa0>
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	b938      	cbnz	r0, 8007f64 <__pow5mult+0x9c>
 8007f54:	4622      	mov	r2, r4
 8007f56:	4621      	mov	r1, r4
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff ff0b 	bl	8007d74 <__multiply>
 8007f5e:	6020      	str	r0, [r4, #0]
 8007f60:	f8c0 9000 	str.w	r9, [r0]
 8007f64:	4604      	mov	r4, r0
 8007f66:	e7e4      	b.n	8007f32 <__pow5mult+0x6a>
 8007f68:	4638      	mov	r0, r7
 8007f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	bf00      	nop
 8007f70:	08009048 	.word	0x08009048
 8007f74:	08008e7d 	.word	0x08008e7d
 8007f78:	08008efd 	.word	0x08008efd

08007f7c <__lshift>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	460c      	mov	r4, r1
 8007f82:	6849      	ldr	r1, [r1, #4]
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	4691      	mov	r9, r2
 8007f90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f94:	f108 0601 	add.w	r6, r8, #1
 8007f98:	42b3      	cmp	r3, r6
 8007f9a:	db0b      	blt.n	8007fb4 <__lshift+0x38>
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	f7ff fddd 	bl	8007b5c <_Balloc>
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	b948      	cbnz	r0, 8007fba <__lshift+0x3e>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	4b28      	ldr	r3, [pc, #160]	; (800804c <__lshift+0xd0>)
 8007faa:	4829      	ldr	r0, [pc, #164]	; (8008050 <__lshift+0xd4>)
 8007fac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007fb0:	f000 fb8e 	bl	80086d0 <__assert_func>
 8007fb4:	3101      	adds	r1, #1
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	e7ee      	b.n	8007f98 <__lshift+0x1c>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f100 0114 	add.w	r1, r0, #20
 8007fc0:	f100 0210 	add.w	r2, r0, #16
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	4553      	cmp	r3, sl
 8007fc8:	db33      	blt.n	8008032 <__lshift+0xb6>
 8007fca:	6920      	ldr	r0, [r4, #16]
 8007fcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fd0:	f104 0314 	add.w	r3, r4, #20
 8007fd4:	f019 091f 	ands.w	r9, r9, #31
 8007fd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fe0:	d02b      	beq.n	800803a <__lshift+0xbe>
 8007fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8007fe6:	468a      	mov	sl, r1
 8007fe8:	2200      	movs	r2, #0
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	fa00 f009 	lsl.w	r0, r0, r9
 8007ff0:	4310      	orrs	r0, r2
 8007ff2:	f84a 0b04 	str.w	r0, [sl], #4
 8007ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffa:	459c      	cmp	ip, r3
 8007ffc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008000:	d8f3      	bhi.n	8007fea <__lshift+0x6e>
 8008002:	ebac 0304 	sub.w	r3, ip, r4
 8008006:	3b15      	subs	r3, #21
 8008008:	f023 0303 	bic.w	r3, r3, #3
 800800c:	3304      	adds	r3, #4
 800800e:	f104 0015 	add.w	r0, r4, #21
 8008012:	4584      	cmp	ip, r0
 8008014:	bf38      	it	cc
 8008016:	2304      	movcc	r3, #4
 8008018:	50ca      	str	r2, [r1, r3]
 800801a:	b10a      	cbz	r2, 8008020 <__lshift+0xa4>
 800801c:	f108 0602 	add.w	r6, r8, #2
 8008020:	3e01      	subs	r6, #1
 8008022:	4638      	mov	r0, r7
 8008024:	612e      	str	r6, [r5, #16]
 8008026:	4621      	mov	r1, r4
 8008028:	f7ff fdd8 	bl	8007bdc <_Bfree>
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008032:	f842 0f04 	str.w	r0, [r2, #4]!
 8008036:	3301      	adds	r3, #1
 8008038:	e7c5      	b.n	8007fc6 <__lshift+0x4a>
 800803a:	3904      	subs	r1, #4
 800803c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008040:	f841 2f04 	str.w	r2, [r1, #4]!
 8008044:	459c      	cmp	ip, r3
 8008046:	d8f9      	bhi.n	800803c <__lshift+0xc0>
 8008048:	e7ea      	b.n	8008020 <__lshift+0xa4>
 800804a:	bf00      	nop
 800804c:	08008eec 	.word	0x08008eec
 8008050:	08008efd 	.word	0x08008efd

08008054 <__mcmp>:
 8008054:	b530      	push	{r4, r5, lr}
 8008056:	6902      	ldr	r2, [r0, #16]
 8008058:	690c      	ldr	r4, [r1, #16]
 800805a:	1b12      	subs	r2, r2, r4
 800805c:	d10e      	bne.n	800807c <__mcmp+0x28>
 800805e:	f100 0314 	add.w	r3, r0, #20
 8008062:	3114      	adds	r1, #20
 8008064:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008068:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800806c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008070:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008074:	42a5      	cmp	r5, r4
 8008076:	d003      	beq.n	8008080 <__mcmp+0x2c>
 8008078:	d305      	bcc.n	8008086 <__mcmp+0x32>
 800807a:	2201      	movs	r2, #1
 800807c:	4610      	mov	r0, r2
 800807e:	bd30      	pop	{r4, r5, pc}
 8008080:	4283      	cmp	r3, r0
 8008082:	d3f3      	bcc.n	800806c <__mcmp+0x18>
 8008084:	e7fa      	b.n	800807c <__mcmp+0x28>
 8008086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800808a:	e7f7      	b.n	800807c <__mcmp+0x28>

0800808c <__mdiff>:
 800808c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	460c      	mov	r4, r1
 8008092:	4606      	mov	r6, r0
 8008094:	4611      	mov	r1, r2
 8008096:	4620      	mov	r0, r4
 8008098:	4690      	mov	r8, r2
 800809a:	f7ff ffdb 	bl	8008054 <__mcmp>
 800809e:	1e05      	subs	r5, r0, #0
 80080a0:	d110      	bne.n	80080c4 <__mdiff+0x38>
 80080a2:	4629      	mov	r1, r5
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7ff fd59 	bl	8007b5c <_Balloc>
 80080aa:	b930      	cbnz	r0, 80080ba <__mdiff+0x2e>
 80080ac:	4b3a      	ldr	r3, [pc, #232]	; (8008198 <__mdiff+0x10c>)
 80080ae:	4602      	mov	r2, r0
 80080b0:	f240 2137 	movw	r1, #567	; 0x237
 80080b4:	4839      	ldr	r0, [pc, #228]	; (800819c <__mdiff+0x110>)
 80080b6:	f000 fb0b 	bl	80086d0 <__assert_func>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c4:	bfa4      	itt	ge
 80080c6:	4643      	movge	r3, r8
 80080c8:	46a0      	movge	r8, r4
 80080ca:	4630      	mov	r0, r6
 80080cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080d0:	bfa6      	itte	ge
 80080d2:	461c      	movge	r4, r3
 80080d4:	2500      	movge	r5, #0
 80080d6:	2501      	movlt	r5, #1
 80080d8:	f7ff fd40 	bl	8007b5c <_Balloc>
 80080dc:	b920      	cbnz	r0, 80080e8 <__mdiff+0x5c>
 80080de:	4b2e      	ldr	r3, [pc, #184]	; (8008198 <__mdiff+0x10c>)
 80080e0:	4602      	mov	r2, r0
 80080e2:	f240 2145 	movw	r1, #581	; 0x245
 80080e6:	e7e5      	b.n	80080b4 <__mdiff+0x28>
 80080e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080ec:	6926      	ldr	r6, [r4, #16]
 80080ee:	60c5      	str	r5, [r0, #12]
 80080f0:	f104 0914 	add.w	r9, r4, #20
 80080f4:	f108 0514 	add.w	r5, r8, #20
 80080f8:	f100 0e14 	add.w	lr, r0, #20
 80080fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008100:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008104:	f108 0210 	add.w	r2, r8, #16
 8008108:	46f2      	mov	sl, lr
 800810a:	2100      	movs	r1, #0
 800810c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008110:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008114:	fa11 f88b 	uxtah	r8, r1, fp
 8008118:	b299      	uxth	r1, r3
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	eba8 0801 	sub.w	r8, r8, r1
 8008120:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008124:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008128:	fa1f f888 	uxth.w	r8, r8
 800812c:	1419      	asrs	r1, r3, #16
 800812e:	454e      	cmp	r6, r9
 8008130:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008134:	f84a 3b04 	str.w	r3, [sl], #4
 8008138:	d8e8      	bhi.n	800810c <__mdiff+0x80>
 800813a:	1b33      	subs	r3, r6, r4
 800813c:	3b15      	subs	r3, #21
 800813e:	f023 0303 	bic.w	r3, r3, #3
 8008142:	3304      	adds	r3, #4
 8008144:	3415      	adds	r4, #21
 8008146:	42a6      	cmp	r6, r4
 8008148:	bf38      	it	cc
 800814a:	2304      	movcc	r3, #4
 800814c:	441d      	add	r5, r3
 800814e:	4473      	add	r3, lr
 8008150:	469e      	mov	lr, r3
 8008152:	462e      	mov	r6, r5
 8008154:	4566      	cmp	r6, ip
 8008156:	d30e      	bcc.n	8008176 <__mdiff+0xea>
 8008158:	f10c 0203 	add.w	r2, ip, #3
 800815c:	1b52      	subs	r2, r2, r5
 800815e:	f022 0203 	bic.w	r2, r2, #3
 8008162:	3d03      	subs	r5, #3
 8008164:	45ac      	cmp	ip, r5
 8008166:	bf38      	it	cc
 8008168:	2200      	movcc	r2, #0
 800816a:	4413      	add	r3, r2
 800816c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008170:	b17a      	cbz	r2, 8008192 <__mdiff+0x106>
 8008172:	6107      	str	r7, [r0, #16]
 8008174:	e7a4      	b.n	80080c0 <__mdiff+0x34>
 8008176:	f856 8b04 	ldr.w	r8, [r6], #4
 800817a:	fa11 f288 	uxtah	r2, r1, r8
 800817e:	1414      	asrs	r4, r2, #16
 8008180:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008184:	b292      	uxth	r2, r2
 8008186:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800818a:	f84e 2b04 	str.w	r2, [lr], #4
 800818e:	1421      	asrs	r1, r4, #16
 8008190:	e7e0      	b.n	8008154 <__mdiff+0xc8>
 8008192:	3f01      	subs	r7, #1
 8008194:	e7ea      	b.n	800816c <__mdiff+0xe0>
 8008196:	bf00      	nop
 8008198:	08008eec 	.word	0x08008eec
 800819c:	08008efd 	.word	0x08008efd

080081a0 <__d2b>:
 80081a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081a4:	460f      	mov	r7, r1
 80081a6:	2101      	movs	r1, #1
 80081a8:	ec59 8b10 	vmov	r8, r9, d0
 80081ac:	4616      	mov	r6, r2
 80081ae:	f7ff fcd5 	bl	8007b5c <_Balloc>
 80081b2:	4604      	mov	r4, r0
 80081b4:	b930      	cbnz	r0, 80081c4 <__d2b+0x24>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b24      	ldr	r3, [pc, #144]	; (800824c <__d2b+0xac>)
 80081ba:	4825      	ldr	r0, [pc, #148]	; (8008250 <__d2b+0xb0>)
 80081bc:	f240 310f 	movw	r1, #783	; 0x30f
 80081c0:	f000 fa86 	bl	80086d0 <__assert_func>
 80081c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081cc:	bb2d      	cbnz	r5, 800821a <__d2b+0x7a>
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	f1b8 0300 	subs.w	r3, r8, #0
 80081d4:	d026      	beq.n	8008224 <__d2b+0x84>
 80081d6:	4668      	mov	r0, sp
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	f7ff fd87 	bl	8007cec <__lo0bits>
 80081de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081e2:	b1e8      	cbz	r0, 8008220 <__d2b+0x80>
 80081e4:	f1c0 0320 	rsb	r3, r0, #32
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	430b      	orrs	r3, r1
 80081ee:	40c2      	lsrs	r2, r0
 80081f0:	6163      	str	r3, [r4, #20]
 80081f2:	9201      	str	r2, [sp, #4]
 80081f4:	9b01      	ldr	r3, [sp, #4]
 80081f6:	61a3      	str	r3, [r4, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bf14      	ite	ne
 80081fc:	2202      	movne	r2, #2
 80081fe:	2201      	moveq	r2, #1
 8008200:	6122      	str	r2, [r4, #16]
 8008202:	b1bd      	cbz	r5, 8008234 <__d2b+0x94>
 8008204:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008208:	4405      	add	r5, r0
 800820a:	603d      	str	r5, [r7, #0]
 800820c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008210:	6030      	str	r0, [r6, #0]
 8008212:	4620      	mov	r0, r4
 8008214:	b003      	add	sp, #12
 8008216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800821a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800821e:	e7d6      	b.n	80081ce <__d2b+0x2e>
 8008220:	6161      	str	r1, [r4, #20]
 8008222:	e7e7      	b.n	80081f4 <__d2b+0x54>
 8008224:	a801      	add	r0, sp, #4
 8008226:	f7ff fd61 	bl	8007cec <__lo0bits>
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	6163      	str	r3, [r4, #20]
 800822e:	3020      	adds	r0, #32
 8008230:	2201      	movs	r2, #1
 8008232:	e7e5      	b.n	8008200 <__d2b+0x60>
 8008234:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008238:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800823c:	6038      	str	r0, [r7, #0]
 800823e:	6918      	ldr	r0, [r3, #16]
 8008240:	f7ff fd34 	bl	8007cac <__hi0bits>
 8008244:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008248:	e7e2      	b.n	8008210 <__d2b+0x70>
 800824a:	bf00      	nop
 800824c:	08008eec 	.word	0x08008eec
 8008250:	08008efd 	.word	0x08008efd

08008254 <__ssputs_r>:
 8008254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008258:	688e      	ldr	r6, [r1, #8]
 800825a:	461f      	mov	r7, r3
 800825c:	42be      	cmp	r6, r7
 800825e:	680b      	ldr	r3, [r1, #0]
 8008260:	4682      	mov	sl, r0
 8008262:	460c      	mov	r4, r1
 8008264:	4690      	mov	r8, r2
 8008266:	d82c      	bhi.n	80082c2 <__ssputs_r+0x6e>
 8008268:	898a      	ldrh	r2, [r1, #12]
 800826a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800826e:	d026      	beq.n	80082be <__ssputs_r+0x6a>
 8008270:	6965      	ldr	r5, [r4, #20]
 8008272:	6909      	ldr	r1, [r1, #16]
 8008274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008278:	eba3 0901 	sub.w	r9, r3, r1
 800827c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008280:	1c7b      	adds	r3, r7, #1
 8008282:	444b      	add	r3, r9
 8008284:	106d      	asrs	r5, r5, #1
 8008286:	429d      	cmp	r5, r3
 8008288:	bf38      	it	cc
 800828a:	461d      	movcc	r5, r3
 800828c:	0553      	lsls	r3, r2, #21
 800828e:	d527      	bpl.n	80082e0 <__ssputs_r+0x8c>
 8008290:	4629      	mov	r1, r5
 8008292:	f7ff fbd7 	bl	8007a44 <_malloc_r>
 8008296:	4606      	mov	r6, r0
 8008298:	b360      	cbz	r0, 80082f4 <__ssputs_r+0xa0>
 800829a:	6921      	ldr	r1, [r4, #16]
 800829c:	464a      	mov	r2, r9
 800829e:	f000 fa09 	bl	80086b4 <memcpy>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ac:	81a3      	strh	r3, [r4, #12]
 80082ae:	6126      	str	r6, [r4, #16]
 80082b0:	6165      	str	r5, [r4, #20]
 80082b2:	444e      	add	r6, r9
 80082b4:	eba5 0509 	sub.w	r5, r5, r9
 80082b8:	6026      	str	r6, [r4, #0]
 80082ba:	60a5      	str	r5, [r4, #8]
 80082bc:	463e      	mov	r6, r7
 80082be:	42be      	cmp	r6, r7
 80082c0:	d900      	bls.n	80082c4 <__ssputs_r+0x70>
 80082c2:	463e      	mov	r6, r7
 80082c4:	6820      	ldr	r0, [r4, #0]
 80082c6:	4632      	mov	r2, r6
 80082c8:	4641      	mov	r1, r8
 80082ca:	f000 f9c9 	bl	8008660 <memmove>
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	1b9b      	subs	r3, r3, r6
 80082d2:	60a3      	str	r3, [r4, #8]
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	4433      	add	r3, r6
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	2000      	movs	r0, #0
 80082dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e0:	462a      	mov	r2, r5
 80082e2:	f000 fa3b 	bl	800875c <_realloc_r>
 80082e6:	4606      	mov	r6, r0
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d1e0      	bne.n	80082ae <__ssputs_r+0x5a>
 80082ec:	6921      	ldr	r1, [r4, #16]
 80082ee:	4650      	mov	r0, sl
 80082f0:	f7ff fb34 	bl	800795c <_free_r>
 80082f4:	230c      	movs	r3, #12
 80082f6:	f8ca 3000 	str.w	r3, [sl]
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008300:	81a3      	strh	r3, [r4, #12]
 8008302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008306:	e7e9      	b.n	80082dc <__ssputs_r+0x88>

08008308 <_svfiprintf_r>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	4698      	mov	r8, r3
 800830e:	898b      	ldrh	r3, [r1, #12]
 8008310:	061b      	lsls	r3, r3, #24
 8008312:	b09d      	sub	sp, #116	; 0x74
 8008314:	4607      	mov	r7, r0
 8008316:	460d      	mov	r5, r1
 8008318:	4614      	mov	r4, r2
 800831a:	d50e      	bpl.n	800833a <_svfiprintf_r+0x32>
 800831c:	690b      	ldr	r3, [r1, #16]
 800831e:	b963      	cbnz	r3, 800833a <_svfiprintf_r+0x32>
 8008320:	2140      	movs	r1, #64	; 0x40
 8008322:	f7ff fb8f 	bl	8007a44 <_malloc_r>
 8008326:	6028      	str	r0, [r5, #0]
 8008328:	6128      	str	r0, [r5, #16]
 800832a:	b920      	cbnz	r0, 8008336 <_svfiprintf_r+0x2e>
 800832c:	230c      	movs	r3, #12
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008334:	e0d0      	b.n	80084d8 <_svfiprintf_r+0x1d0>
 8008336:	2340      	movs	r3, #64	; 0x40
 8008338:	616b      	str	r3, [r5, #20]
 800833a:	2300      	movs	r3, #0
 800833c:	9309      	str	r3, [sp, #36]	; 0x24
 800833e:	2320      	movs	r3, #32
 8008340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008344:	f8cd 800c 	str.w	r8, [sp, #12]
 8008348:	2330      	movs	r3, #48	; 0x30
 800834a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80084f0 <_svfiprintf_r+0x1e8>
 800834e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008352:	f04f 0901 	mov.w	r9, #1
 8008356:	4623      	mov	r3, r4
 8008358:	469a      	mov	sl, r3
 800835a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800835e:	b10a      	cbz	r2, 8008364 <_svfiprintf_r+0x5c>
 8008360:	2a25      	cmp	r2, #37	; 0x25
 8008362:	d1f9      	bne.n	8008358 <_svfiprintf_r+0x50>
 8008364:	ebba 0b04 	subs.w	fp, sl, r4
 8008368:	d00b      	beq.n	8008382 <_svfiprintf_r+0x7a>
 800836a:	465b      	mov	r3, fp
 800836c:	4622      	mov	r2, r4
 800836e:	4629      	mov	r1, r5
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff ff6f 	bl	8008254 <__ssputs_r>
 8008376:	3001      	adds	r0, #1
 8008378:	f000 80a9 	beq.w	80084ce <_svfiprintf_r+0x1c6>
 800837c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800837e:	445a      	add	r2, fp
 8008380:	9209      	str	r2, [sp, #36]	; 0x24
 8008382:	f89a 3000 	ldrb.w	r3, [sl]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 80a1 	beq.w	80084ce <_svfiprintf_r+0x1c6>
 800838c:	2300      	movs	r3, #0
 800838e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008396:	f10a 0a01 	add.w	sl, sl, #1
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	9307      	str	r3, [sp, #28]
 800839e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083a2:	931a      	str	r3, [sp, #104]	; 0x68
 80083a4:	4654      	mov	r4, sl
 80083a6:	2205      	movs	r2, #5
 80083a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ac:	4850      	ldr	r0, [pc, #320]	; (80084f0 <_svfiprintf_r+0x1e8>)
 80083ae:	f7f7 ff1f 	bl	80001f0 <memchr>
 80083b2:	9a04      	ldr	r2, [sp, #16]
 80083b4:	b9d8      	cbnz	r0, 80083ee <_svfiprintf_r+0xe6>
 80083b6:	06d0      	lsls	r0, r2, #27
 80083b8:	bf44      	itt	mi
 80083ba:	2320      	movmi	r3, #32
 80083bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c0:	0711      	lsls	r1, r2, #28
 80083c2:	bf44      	itt	mi
 80083c4:	232b      	movmi	r3, #43	; 0x2b
 80083c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ca:	f89a 3000 	ldrb.w	r3, [sl]
 80083ce:	2b2a      	cmp	r3, #42	; 0x2a
 80083d0:	d015      	beq.n	80083fe <_svfiprintf_r+0xf6>
 80083d2:	9a07      	ldr	r2, [sp, #28]
 80083d4:	4654      	mov	r4, sl
 80083d6:	2000      	movs	r0, #0
 80083d8:	f04f 0c0a 	mov.w	ip, #10
 80083dc:	4621      	mov	r1, r4
 80083de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e2:	3b30      	subs	r3, #48	; 0x30
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	d94d      	bls.n	8008484 <_svfiprintf_r+0x17c>
 80083e8:	b1b0      	cbz	r0, 8008418 <_svfiprintf_r+0x110>
 80083ea:	9207      	str	r2, [sp, #28]
 80083ec:	e014      	b.n	8008418 <_svfiprintf_r+0x110>
 80083ee:	eba0 0308 	sub.w	r3, r0, r8
 80083f2:	fa09 f303 	lsl.w	r3, r9, r3
 80083f6:	4313      	orrs	r3, r2
 80083f8:	9304      	str	r3, [sp, #16]
 80083fa:	46a2      	mov	sl, r4
 80083fc:	e7d2      	b.n	80083a4 <_svfiprintf_r+0x9c>
 80083fe:	9b03      	ldr	r3, [sp, #12]
 8008400:	1d19      	adds	r1, r3, #4
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	9103      	str	r1, [sp, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	bfbb      	ittet	lt
 800840a:	425b      	neglt	r3, r3
 800840c:	f042 0202 	orrlt.w	r2, r2, #2
 8008410:	9307      	strge	r3, [sp, #28]
 8008412:	9307      	strlt	r3, [sp, #28]
 8008414:	bfb8      	it	lt
 8008416:	9204      	strlt	r2, [sp, #16]
 8008418:	7823      	ldrb	r3, [r4, #0]
 800841a:	2b2e      	cmp	r3, #46	; 0x2e
 800841c:	d10c      	bne.n	8008438 <_svfiprintf_r+0x130>
 800841e:	7863      	ldrb	r3, [r4, #1]
 8008420:	2b2a      	cmp	r3, #42	; 0x2a
 8008422:	d134      	bne.n	800848e <_svfiprintf_r+0x186>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	1d1a      	adds	r2, r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	9203      	str	r2, [sp, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	bfb8      	it	lt
 8008430:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008434:	3402      	adds	r4, #2
 8008436:	9305      	str	r3, [sp, #20]
 8008438:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008500 <_svfiprintf_r+0x1f8>
 800843c:	7821      	ldrb	r1, [r4, #0]
 800843e:	2203      	movs	r2, #3
 8008440:	4650      	mov	r0, sl
 8008442:	f7f7 fed5 	bl	80001f0 <memchr>
 8008446:	b138      	cbz	r0, 8008458 <_svfiprintf_r+0x150>
 8008448:	9b04      	ldr	r3, [sp, #16]
 800844a:	eba0 000a 	sub.w	r0, r0, sl
 800844e:	2240      	movs	r2, #64	; 0x40
 8008450:	4082      	lsls	r2, r0
 8008452:	4313      	orrs	r3, r2
 8008454:	3401      	adds	r4, #1
 8008456:	9304      	str	r3, [sp, #16]
 8008458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845c:	4825      	ldr	r0, [pc, #148]	; (80084f4 <_svfiprintf_r+0x1ec>)
 800845e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008462:	2206      	movs	r2, #6
 8008464:	f7f7 fec4 	bl	80001f0 <memchr>
 8008468:	2800      	cmp	r0, #0
 800846a:	d038      	beq.n	80084de <_svfiprintf_r+0x1d6>
 800846c:	4b22      	ldr	r3, [pc, #136]	; (80084f8 <_svfiprintf_r+0x1f0>)
 800846e:	bb1b      	cbnz	r3, 80084b8 <_svfiprintf_r+0x1b0>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	3307      	adds	r3, #7
 8008474:	f023 0307 	bic.w	r3, r3, #7
 8008478:	3308      	adds	r3, #8
 800847a:	9303      	str	r3, [sp, #12]
 800847c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847e:	4433      	add	r3, r6
 8008480:	9309      	str	r3, [sp, #36]	; 0x24
 8008482:	e768      	b.n	8008356 <_svfiprintf_r+0x4e>
 8008484:	fb0c 3202 	mla	r2, ip, r2, r3
 8008488:	460c      	mov	r4, r1
 800848a:	2001      	movs	r0, #1
 800848c:	e7a6      	b.n	80083dc <_svfiprintf_r+0xd4>
 800848e:	2300      	movs	r3, #0
 8008490:	3401      	adds	r4, #1
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	4619      	mov	r1, r3
 8008496:	f04f 0c0a 	mov.w	ip, #10
 800849a:	4620      	mov	r0, r4
 800849c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a0:	3a30      	subs	r2, #48	; 0x30
 80084a2:	2a09      	cmp	r2, #9
 80084a4:	d903      	bls.n	80084ae <_svfiprintf_r+0x1a6>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0c6      	beq.n	8008438 <_svfiprintf_r+0x130>
 80084aa:	9105      	str	r1, [sp, #20]
 80084ac:	e7c4      	b.n	8008438 <_svfiprintf_r+0x130>
 80084ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80084b2:	4604      	mov	r4, r0
 80084b4:	2301      	movs	r3, #1
 80084b6:	e7f0      	b.n	800849a <_svfiprintf_r+0x192>
 80084b8:	ab03      	add	r3, sp, #12
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	462a      	mov	r2, r5
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <_svfiprintf_r+0x1f4>)
 80084c0:	a904      	add	r1, sp, #16
 80084c2:	4638      	mov	r0, r7
 80084c4:	f7fd fe62 	bl	800618c <_printf_float>
 80084c8:	1c42      	adds	r2, r0, #1
 80084ca:	4606      	mov	r6, r0
 80084cc:	d1d6      	bne.n	800847c <_svfiprintf_r+0x174>
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	065b      	lsls	r3, r3, #25
 80084d2:	f53f af2d 	bmi.w	8008330 <_svfiprintf_r+0x28>
 80084d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d8:	b01d      	add	sp, #116	; 0x74
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	ab03      	add	r3, sp, #12
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	462a      	mov	r2, r5
 80084e4:	4b05      	ldr	r3, [pc, #20]	; (80084fc <_svfiprintf_r+0x1f4>)
 80084e6:	a904      	add	r1, sp, #16
 80084e8:	4638      	mov	r0, r7
 80084ea:	f7fe f8f3 	bl	80066d4 <_printf_i>
 80084ee:	e7eb      	b.n	80084c8 <_svfiprintf_r+0x1c0>
 80084f0:	08009054 	.word	0x08009054
 80084f4:	0800905e 	.word	0x0800905e
 80084f8:	0800618d 	.word	0x0800618d
 80084fc:	08008255 	.word	0x08008255
 8008500:	0800905a 	.word	0x0800905a

08008504 <__sflush_r>:
 8008504:	898a      	ldrh	r2, [r1, #12]
 8008506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850a:	4605      	mov	r5, r0
 800850c:	0710      	lsls	r0, r2, #28
 800850e:	460c      	mov	r4, r1
 8008510:	d458      	bmi.n	80085c4 <__sflush_r+0xc0>
 8008512:	684b      	ldr	r3, [r1, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	dc05      	bgt.n	8008524 <__sflush_r+0x20>
 8008518:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800851a:	2b00      	cmp	r3, #0
 800851c:	dc02      	bgt.n	8008524 <__sflush_r+0x20>
 800851e:	2000      	movs	r0, #0
 8008520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008526:	2e00      	cmp	r6, #0
 8008528:	d0f9      	beq.n	800851e <__sflush_r+0x1a>
 800852a:	2300      	movs	r3, #0
 800852c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008530:	682f      	ldr	r7, [r5, #0]
 8008532:	6a21      	ldr	r1, [r4, #32]
 8008534:	602b      	str	r3, [r5, #0]
 8008536:	d032      	beq.n	800859e <__sflush_r+0x9a>
 8008538:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	075a      	lsls	r2, r3, #29
 800853e:	d505      	bpl.n	800854c <__sflush_r+0x48>
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	1ac0      	subs	r0, r0, r3
 8008544:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008546:	b10b      	cbz	r3, 800854c <__sflush_r+0x48>
 8008548:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800854a:	1ac0      	subs	r0, r0, r3
 800854c:	2300      	movs	r3, #0
 800854e:	4602      	mov	r2, r0
 8008550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008552:	6a21      	ldr	r1, [r4, #32]
 8008554:	4628      	mov	r0, r5
 8008556:	47b0      	blx	r6
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	d106      	bne.n	800856c <__sflush_r+0x68>
 800855e:	6829      	ldr	r1, [r5, #0]
 8008560:	291d      	cmp	r1, #29
 8008562:	d82b      	bhi.n	80085bc <__sflush_r+0xb8>
 8008564:	4a29      	ldr	r2, [pc, #164]	; (800860c <__sflush_r+0x108>)
 8008566:	410a      	asrs	r2, r1
 8008568:	07d6      	lsls	r6, r2, #31
 800856a:	d427      	bmi.n	80085bc <__sflush_r+0xb8>
 800856c:	2200      	movs	r2, #0
 800856e:	6062      	str	r2, [r4, #4]
 8008570:	04d9      	lsls	r1, r3, #19
 8008572:	6922      	ldr	r2, [r4, #16]
 8008574:	6022      	str	r2, [r4, #0]
 8008576:	d504      	bpl.n	8008582 <__sflush_r+0x7e>
 8008578:	1c42      	adds	r2, r0, #1
 800857a:	d101      	bne.n	8008580 <__sflush_r+0x7c>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b903      	cbnz	r3, 8008582 <__sflush_r+0x7e>
 8008580:	6560      	str	r0, [r4, #84]	; 0x54
 8008582:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008584:	602f      	str	r7, [r5, #0]
 8008586:	2900      	cmp	r1, #0
 8008588:	d0c9      	beq.n	800851e <__sflush_r+0x1a>
 800858a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800858e:	4299      	cmp	r1, r3
 8008590:	d002      	beq.n	8008598 <__sflush_r+0x94>
 8008592:	4628      	mov	r0, r5
 8008594:	f7ff f9e2 	bl	800795c <_free_r>
 8008598:	2000      	movs	r0, #0
 800859a:	6360      	str	r0, [r4, #52]	; 0x34
 800859c:	e7c0      	b.n	8008520 <__sflush_r+0x1c>
 800859e:	2301      	movs	r3, #1
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b0      	blx	r6
 80085a4:	1c41      	adds	r1, r0, #1
 80085a6:	d1c8      	bne.n	800853a <__sflush_r+0x36>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0c5      	beq.n	800853a <__sflush_r+0x36>
 80085ae:	2b1d      	cmp	r3, #29
 80085b0:	d001      	beq.n	80085b6 <__sflush_r+0xb2>
 80085b2:	2b16      	cmp	r3, #22
 80085b4:	d101      	bne.n	80085ba <__sflush_r+0xb6>
 80085b6:	602f      	str	r7, [r5, #0]
 80085b8:	e7b1      	b.n	800851e <__sflush_r+0x1a>
 80085ba:	89a3      	ldrh	r3, [r4, #12]
 80085bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c0:	81a3      	strh	r3, [r4, #12]
 80085c2:	e7ad      	b.n	8008520 <__sflush_r+0x1c>
 80085c4:	690f      	ldr	r7, [r1, #16]
 80085c6:	2f00      	cmp	r7, #0
 80085c8:	d0a9      	beq.n	800851e <__sflush_r+0x1a>
 80085ca:	0793      	lsls	r3, r2, #30
 80085cc:	680e      	ldr	r6, [r1, #0]
 80085ce:	bf08      	it	eq
 80085d0:	694b      	ldreq	r3, [r1, #20]
 80085d2:	600f      	str	r7, [r1, #0]
 80085d4:	bf18      	it	ne
 80085d6:	2300      	movne	r3, #0
 80085d8:	eba6 0807 	sub.w	r8, r6, r7
 80085dc:	608b      	str	r3, [r1, #8]
 80085de:	f1b8 0f00 	cmp.w	r8, #0
 80085e2:	dd9c      	ble.n	800851e <__sflush_r+0x1a>
 80085e4:	6a21      	ldr	r1, [r4, #32]
 80085e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085e8:	4643      	mov	r3, r8
 80085ea:	463a      	mov	r2, r7
 80085ec:	4628      	mov	r0, r5
 80085ee:	47b0      	blx	r6
 80085f0:	2800      	cmp	r0, #0
 80085f2:	dc06      	bgt.n	8008602 <__sflush_r+0xfe>
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008600:	e78e      	b.n	8008520 <__sflush_r+0x1c>
 8008602:	4407      	add	r7, r0
 8008604:	eba8 0800 	sub.w	r8, r8, r0
 8008608:	e7e9      	b.n	80085de <__sflush_r+0xda>
 800860a:	bf00      	nop
 800860c:	dfbffffe 	.word	0xdfbffffe

08008610 <_fflush_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	690b      	ldr	r3, [r1, #16]
 8008614:	4605      	mov	r5, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b913      	cbnz	r3, 8008620 <_fflush_r+0x10>
 800861a:	2500      	movs	r5, #0
 800861c:	4628      	mov	r0, r5
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	b118      	cbz	r0, 800862a <_fflush_r+0x1a>
 8008622:	6a03      	ldr	r3, [r0, #32]
 8008624:	b90b      	cbnz	r3, 800862a <_fflush_r+0x1a>
 8008626:	f7fe fa03 	bl	8006a30 <__sinit>
 800862a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0f3      	beq.n	800861a <_fflush_r+0xa>
 8008632:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008634:	07d0      	lsls	r0, r2, #31
 8008636:	d404      	bmi.n	8008642 <_fflush_r+0x32>
 8008638:	0599      	lsls	r1, r3, #22
 800863a:	d402      	bmi.n	8008642 <_fflush_r+0x32>
 800863c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800863e:	f7fe fb0e 	bl	8006c5e <__retarget_lock_acquire_recursive>
 8008642:	4628      	mov	r0, r5
 8008644:	4621      	mov	r1, r4
 8008646:	f7ff ff5d 	bl	8008504 <__sflush_r>
 800864a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800864c:	07da      	lsls	r2, r3, #31
 800864e:	4605      	mov	r5, r0
 8008650:	d4e4      	bmi.n	800861c <_fflush_r+0xc>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	059b      	lsls	r3, r3, #22
 8008656:	d4e1      	bmi.n	800861c <_fflush_r+0xc>
 8008658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800865a:	f7fe fb01 	bl	8006c60 <__retarget_lock_release_recursive>
 800865e:	e7dd      	b.n	800861c <_fflush_r+0xc>

08008660 <memmove>:
 8008660:	4288      	cmp	r0, r1
 8008662:	b510      	push	{r4, lr}
 8008664:	eb01 0402 	add.w	r4, r1, r2
 8008668:	d902      	bls.n	8008670 <memmove+0x10>
 800866a:	4284      	cmp	r4, r0
 800866c:	4623      	mov	r3, r4
 800866e:	d807      	bhi.n	8008680 <memmove+0x20>
 8008670:	1e43      	subs	r3, r0, #1
 8008672:	42a1      	cmp	r1, r4
 8008674:	d008      	beq.n	8008688 <memmove+0x28>
 8008676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800867a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800867e:	e7f8      	b.n	8008672 <memmove+0x12>
 8008680:	4402      	add	r2, r0
 8008682:	4601      	mov	r1, r0
 8008684:	428a      	cmp	r2, r1
 8008686:	d100      	bne.n	800868a <memmove+0x2a>
 8008688:	bd10      	pop	{r4, pc}
 800868a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800868e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008692:	e7f7      	b.n	8008684 <memmove+0x24>

08008694 <_sbrk_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d06      	ldr	r5, [pc, #24]	; (80086b0 <_sbrk_r+0x1c>)
 8008698:	2300      	movs	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	602b      	str	r3, [r5, #0]
 80086a0:	f7f9 fa0e 	bl	8001ac0 <_sbrk>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_sbrk_r+0x1a>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_sbrk_r+0x1a>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	20000b54 	.word	0x20000b54

080086b4 <memcpy>:
 80086b4:	440a      	add	r2, r1
 80086b6:	4291      	cmp	r1, r2
 80086b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80086bc:	d100      	bne.n	80086c0 <memcpy+0xc>
 80086be:	4770      	bx	lr
 80086c0:	b510      	push	{r4, lr}
 80086c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ca:	4291      	cmp	r1, r2
 80086cc:	d1f9      	bne.n	80086c2 <memcpy+0xe>
 80086ce:	bd10      	pop	{r4, pc}

080086d0 <__assert_func>:
 80086d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086d2:	4614      	mov	r4, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	4b09      	ldr	r3, [pc, #36]	; (80086fc <__assert_func+0x2c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4605      	mov	r5, r0
 80086dc:	68d8      	ldr	r0, [r3, #12]
 80086de:	b14c      	cbz	r4, 80086f4 <__assert_func+0x24>
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <__assert_func+0x30>)
 80086e2:	9100      	str	r1, [sp, #0]
 80086e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086e8:	4906      	ldr	r1, [pc, #24]	; (8008704 <__assert_func+0x34>)
 80086ea:	462b      	mov	r3, r5
 80086ec:	f000 f872 	bl	80087d4 <fiprintf>
 80086f0:	f000 f882 	bl	80087f8 <abort>
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <__assert_func+0x38>)
 80086f6:	461c      	mov	r4, r3
 80086f8:	e7f3      	b.n	80086e2 <__assert_func+0x12>
 80086fa:	bf00      	nop
 80086fc:	20000064 	.word	0x20000064
 8008700:	0800906f 	.word	0x0800906f
 8008704:	0800907c 	.word	0x0800907c
 8008708:	080090aa 	.word	0x080090aa

0800870c <_calloc_r>:
 800870c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800870e:	fba1 2402 	umull	r2, r4, r1, r2
 8008712:	b94c      	cbnz	r4, 8008728 <_calloc_r+0x1c>
 8008714:	4611      	mov	r1, r2
 8008716:	9201      	str	r2, [sp, #4]
 8008718:	f7ff f994 	bl	8007a44 <_malloc_r>
 800871c:	9a01      	ldr	r2, [sp, #4]
 800871e:	4605      	mov	r5, r0
 8008720:	b930      	cbnz	r0, 8008730 <_calloc_r+0x24>
 8008722:	4628      	mov	r0, r5
 8008724:	b003      	add	sp, #12
 8008726:	bd30      	pop	{r4, r5, pc}
 8008728:	220c      	movs	r2, #12
 800872a:	6002      	str	r2, [r0, #0]
 800872c:	2500      	movs	r5, #0
 800872e:	e7f8      	b.n	8008722 <_calloc_r+0x16>
 8008730:	4621      	mov	r1, r4
 8008732:	f7fe fa16 	bl	8006b62 <memset>
 8008736:	e7f4      	b.n	8008722 <_calloc_r+0x16>

08008738 <__ascii_mbtowc>:
 8008738:	b082      	sub	sp, #8
 800873a:	b901      	cbnz	r1, 800873e <__ascii_mbtowc+0x6>
 800873c:	a901      	add	r1, sp, #4
 800873e:	b142      	cbz	r2, 8008752 <__ascii_mbtowc+0x1a>
 8008740:	b14b      	cbz	r3, 8008756 <__ascii_mbtowc+0x1e>
 8008742:	7813      	ldrb	r3, [r2, #0]
 8008744:	600b      	str	r3, [r1, #0]
 8008746:	7812      	ldrb	r2, [r2, #0]
 8008748:	1e10      	subs	r0, r2, #0
 800874a:	bf18      	it	ne
 800874c:	2001      	movne	r0, #1
 800874e:	b002      	add	sp, #8
 8008750:	4770      	bx	lr
 8008752:	4610      	mov	r0, r2
 8008754:	e7fb      	b.n	800874e <__ascii_mbtowc+0x16>
 8008756:	f06f 0001 	mvn.w	r0, #1
 800875a:	e7f8      	b.n	800874e <__ascii_mbtowc+0x16>

0800875c <_realloc_r>:
 800875c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008760:	4680      	mov	r8, r0
 8008762:	4614      	mov	r4, r2
 8008764:	460e      	mov	r6, r1
 8008766:	b921      	cbnz	r1, 8008772 <_realloc_r+0x16>
 8008768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800876c:	4611      	mov	r1, r2
 800876e:	f7ff b969 	b.w	8007a44 <_malloc_r>
 8008772:	b92a      	cbnz	r2, 8008780 <_realloc_r+0x24>
 8008774:	f7ff f8f2 	bl	800795c <_free_r>
 8008778:	4625      	mov	r5, r4
 800877a:	4628      	mov	r0, r5
 800877c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008780:	f000 f841 	bl	8008806 <_malloc_usable_size_r>
 8008784:	4284      	cmp	r4, r0
 8008786:	4607      	mov	r7, r0
 8008788:	d802      	bhi.n	8008790 <_realloc_r+0x34>
 800878a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800878e:	d812      	bhi.n	80087b6 <_realloc_r+0x5a>
 8008790:	4621      	mov	r1, r4
 8008792:	4640      	mov	r0, r8
 8008794:	f7ff f956 	bl	8007a44 <_malloc_r>
 8008798:	4605      	mov	r5, r0
 800879a:	2800      	cmp	r0, #0
 800879c:	d0ed      	beq.n	800877a <_realloc_r+0x1e>
 800879e:	42bc      	cmp	r4, r7
 80087a0:	4622      	mov	r2, r4
 80087a2:	4631      	mov	r1, r6
 80087a4:	bf28      	it	cs
 80087a6:	463a      	movcs	r2, r7
 80087a8:	f7ff ff84 	bl	80086b4 <memcpy>
 80087ac:	4631      	mov	r1, r6
 80087ae:	4640      	mov	r0, r8
 80087b0:	f7ff f8d4 	bl	800795c <_free_r>
 80087b4:	e7e1      	b.n	800877a <_realloc_r+0x1e>
 80087b6:	4635      	mov	r5, r6
 80087b8:	e7df      	b.n	800877a <_realloc_r+0x1e>

080087ba <__ascii_wctomb>:
 80087ba:	b149      	cbz	r1, 80087d0 <__ascii_wctomb+0x16>
 80087bc:	2aff      	cmp	r2, #255	; 0xff
 80087be:	bf85      	ittet	hi
 80087c0:	238a      	movhi	r3, #138	; 0x8a
 80087c2:	6003      	strhi	r3, [r0, #0]
 80087c4:	700a      	strbls	r2, [r1, #0]
 80087c6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80087ca:	bf98      	it	ls
 80087cc:	2001      	movls	r0, #1
 80087ce:	4770      	bx	lr
 80087d0:	4608      	mov	r0, r1
 80087d2:	4770      	bx	lr

080087d4 <fiprintf>:
 80087d4:	b40e      	push	{r1, r2, r3}
 80087d6:	b503      	push	{r0, r1, lr}
 80087d8:	4601      	mov	r1, r0
 80087da:	ab03      	add	r3, sp, #12
 80087dc:	4805      	ldr	r0, [pc, #20]	; (80087f4 <fiprintf+0x20>)
 80087de:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e2:	6800      	ldr	r0, [r0, #0]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	f000 f83f 	bl	8008868 <_vfiprintf_r>
 80087ea:	b002      	add	sp, #8
 80087ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80087f0:	b003      	add	sp, #12
 80087f2:	4770      	bx	lr
 80087f4:	20000064 	.word	0x20000064

080087f8 <abort>:
 80087f8:	b508      	push	{r3, lr}
 80087fa:	2006      	movs	r0, #6
 80087fc:	f000 fa0c 	bl	8008c18 <raise>
 8008800:	2001      	movs	r0, #1
 8008802:	f7f9 f8e5 	bl	80019d0 <_exit>

08008806 <_malloc_usable_size_r>:
 8008806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880a:	1f18      	subs	r0, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	bfbc      	itt	lt
 8008810:	580b      	ldrlt	r3, [r1, r0]
 8008812:	18c0      	addlt	r0, r0, r3
 8008814:	4770      	bx	lr

08008816 <__sfputc_r>:
 8008816:	6893      	ldr	r3, [r2, #8]
 8008818:	3b01      	subs	r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	b410      	push	{r4}
 800881e:	6093      	str	r3, [r2, #8]
 8008820:	da08      	bge.n	8008834 <__sfputc_r+0x1e>
 8008822:	6994      	ldr	r4, [r2, #24]
 8008824:	42a3      	cmp	r3, r4
 8008826:	db01      	blt.n	800882c <__sfputc_r+0x16>
 8008828:	290a      	cmp	r1, #10
 800882a:	d103      	bne.n	8008834 <__sfputc_r+0x1e>
 800882c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008830:	f000 b934 	b.w	8008a9c <__swbuf_r>
 8008834:	6813      	ldr	r3, [r2, #0]
 8008836:	1c58      	adds	r0, r3, #1
 8008838:	6010      	str	r0, [r2, #0]
 800883a:	7019      	strb	r1, [r3, #0]
 800883c:	4608      	mov	r0, r1
 800883e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008842:	4770      	bx	lr

08008844 <__sfputs_r>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	4606      	mov	r6, r0
 8008848:	460f      	mov	r7, r1
 800884a:	4614      	mov	r4, r2
 800884c:	18d5      	adds	r5, r2, r3
 800884e:	42ac      	cmp	r4, r5
 8008850:	d101      	bne.n	8008856 <__sfputs_r+0x12>
 8008852:	2000      	movs	r0, #0
 8008854:	e007      	b.n	8008866 <__sfputs_r+0x22>
 8008856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885a:	463a      	mov	r2, r7
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff ffda 	bl	8008816 <__sfputc_r>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	d1f3      	bne.n	800884e <__sfputs_r+0xa>
 8008866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008868 <_vfiprintf_r>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	460d      	mov	r5, r1
 800886e:	b09d      	sub	sp, #116	; 0x74
 8008870:	4614      	mov	r4, r2
 8008872:	4698      	mov	r8, r3
 8008874:	4606      	mov	r6, r0
 8008876:	b118      	cbz	r0, 8008880 <_vfiprintf_r+0x18>
 8008878:	6a03      	ldr	r3, [r0, #32]
 800887a:	b90b      	cbnz	r3, 8008880 <_vfiprintf_r+0x18>
 800887c:	f7fe f8d8 	bl	8006a30 <__sinit>
 8008880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008882:	07d9      	lsls	r1, r3, #31
 8008884:	d405      	bmi.n	8008892 <_vfiprintf_r+0x2a>
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	059a      	lsls	r2, r3, #22
 800888a:	d402      	bmi.n	8008892 <_vfiprintf_r+0x2a>
 800888c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800888e:	f7fe f9e6 	bl	8006c5e <__retarget_lock_acquire_recursive>
 8008892:	89ab      	ldrh	r3, [r5, #12]
 8008894:	071b      	lsls	r3, r3, #28
 8008896:	d501      	bpl.n	800889c <_vfiprintf_r+0x34>
 8008898:	692b      	ldr	r3, [r5, #16]
 800889a:	b99b      	cbnz	r3, 80088c4 <_vfiprintf_r+0x5c>
 800889c:	4629      	mov	r1, r5
 800889e:	4630      	mov	r0, r6
 80088a0:	f000 f93a 	bl	8008b18 <__swsetup_r>
 80088a4:	b170      	cbz	r0, 80088c4 <_vfiprintf_r+0x5c>
 80088a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088a8:	07dc      	lsls	r4, r3, #31
 80088aa:	d504      	bpl.n	80088b6 <_vfiprintf_r+0x4e>
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b0:	b01d      	add	sp, #116	; 0x74
 80088b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b6:	89ab      	ldrh	r3, [r5, #12]
 80088b8:	0598      	lsls	r0, r3, #22
 80088ba:	d4f7      	bmi.n	80088ac <_vfiprintf_r+0x44>
 80088bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088be:	f7fe f9cf 	bl	8006c60 <__retarget_lock_release_recursive>
 80088c2:	e7f3      	b.n	80088ac <_vfiprintf_r+0x44>
 80088c4:	2300      	movs	r3, #0
 80088c6:	9309      	str	r3, [sp, #36]	; 0x24
 80088c8:	2320      	movs	r3, #32
 80088ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80088d2:	2330      	movs	r3, #48	; 0x30
 80088d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a88 <_vfiprintf_r+0x220>
 80088d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088dc:	f04f 0901 	mov.w	r9, #1
 80088e0:	4623      	mov	r3, r4
 80088e2:	469a      	mov	sl, r3
 80088e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e8:	b10a      	cbz	r2, 80088ee <_vfiprintf_r+0x86>
 80088ea:	2a25      	cmp	r2, #37	; 0x25
 80088ec:	d1f9      	bne.n	80088e2 <_vfiprintf_r+0x7a>
 80088ee:	ebba 0b04 	subs.w	fp, sl, r4
 80088f2:	d00b      	beq.n	800890c <_vfiprintf_r+0xa4>
 80088f4:	465b      	mov	r3, fp
 80088f6:	4622      	mov	r2, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ffa2 	bl	8008844 <__sfputs_r>
 8008900:	3001      	adds	r0, #1
 8008902:	f000 80a9 	beq.w	8008a58 <_vfiprintf_r+0x1f0>
 8008906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008908:	445a      	add	r2, fp
 800890a:	9209      	str	r2, [sp, #36]	; 0x24
 800890c:	f89a 3000 	ldrb.w	r3, [sl]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80a1 	beq.w	8008a58 <_vfiprintf_r+0x1f0>
 8008916:	2300      	movs	r3, #0
 8008918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800891c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008920:	f10a 0a01 	add.w	sl, sl, #1
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	9307      	str	r3, [sp, #28]
 8008928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800892c:	931a      	str	r3, [sp, #104]	; 0x68
 800892e:	4654      	mov	r4, sl
 8008930:	2205      	movs	r2, #5
 8008932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008936:	4854      	ldr	r0, [pc, #336]	; (8008a88 <_vfiprintf_r+0x220>)
 8008938:	f7f7 fc5a 	bl	80001f0 <memchr>
 800893c:	9a04      	ldr	r2, [sp, #16]
 800893e:	b9d8      	cbnz	r0, 8008978 <_vfiprintf_r+0x110>
 8008940:	06d1      	lsls	r1, r2, #27
 8008942:	bf44      	itt	mi
 8008944:	2320      	movmi	r3, #32
 8008946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800894a:	0713      	lsls	r3, r2, #28
 800894c:	bf44      	itt	mi
 800894e:	232b      	movmi	r3, #43	; 0x2b
 8008950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008954:	f89a 3000 	ldrb.w	r3, [sl]
 8008958:	2b2a      	cmp	r3, #42	; 0x2a
 800895a:	d015      	beq.n	8008988 <_vfiprintf_r+0x120>
 800895c:	9a07      	ldr	r2, [sp, #28]
 800895e:	4654      	mov	r4, sl
 8008960:	2000      	movs	r0, #0
 8008962:	f04f 0c0a 	mov.w	ip, #10
 8008966:	4621      	mov	r1, r4
 8008968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800896c:	3b30      	subs	r3, #48	; 0x30
 800896e:	2b09      	cmp	r3, #9
 8008970:	d94d      	bls.n	8008a0e <_vfiprintf_r+0x1a6>
 8008972:	b1b0      	cbz	r0, 80089a2 <_vfiprintf_r+0x13a>
 8008974:	9207      	str	r2, [sp, #28]
 8008976:	e014      	b.n	80089a2 <_vfiprintf_r+0x13a>
 8008978:	eba0 0308 	sub.w	r3, r0, r8
 800897c:	fa09 f303 	lsl.w	r3, r9, r3
 8008980:	4313      	orrs	r3, r2
 8008982:	9304      	str	r3, [sp, #16]
 8008984:	46a2      	mov	sl, r4
 8008986:	e7d2      	b.n	800892e <_vfiprintf_r+0xc6>
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	1d19      	adds	r1, r3, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	9103      	str	r1, [sp, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	bfbb      	ittet	lt
 8008994:	425b      	neglt	r3, r3
 8008996:	f042 0202 	orrlt.w	r2, r2, #2
 800899a:	9307      	strge	r3, [sp, #28]
 800899c:	9307      	strlt	r3, [sp, #28]
 800899e:	bfb8      	it	lt
 80089a0:	9204      	strlt	r2, [sp, #16]
 80089a2:	7823      	ldrb	r3, [r4, #0]
 80089a4:	2b2e      	cmp	r3, #46	; 0x2e
 80089a6:	d10c      	bne.n	80089c2 <_vfiprintf_r+0x15a>
 80089a8:	7863      	ldrb	r3, [r4, #1]
 80089aa:	2b2a      	cmp	r3, #42	; 0x2a
 80089ac:	d134      	bne.n	8008a18 <_vfiprintf_r+0x1b0>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	1d1a      	adds	r2, r3, #4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	9203      	str	r2, [sp, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bfb8      	it	lt
 80089ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089be:	3402      	adds	r4, #2
 80089c0:	9305      	str	r3, [sp, #20]
 80089c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a98 <_vfiprintf_r+0x230>
 80089c6:	7821      	ldrb	r1, [r4, #0]
 80089c8:	2203      	movs	r2, #3
 80089ca:	4650      	mov	r0, sl
 80089cc:	f7f7 fc10 	bl	80001f0 <memchr>
 80089d0:	b138      	cbz	r0, 80089e2 <_vfiprintf_r+0x17a>
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	eba0 000a 	sub.w	r0, r0, sl
 80089d8:	2240      	movs	r2, #64	; 0x40
 80089da:	4082      	lsls	r2, r0
 80089dc:	4313      	orrs	r3, r2
 80089de:	3401      	adds	r4, #1
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e6:	4829      	ldr	r0, [pc, #164]	; (8008a8c <_vfiprintf_r+0x224>)
 80089e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ec:	2206      	movs	r2, #6
 80089ee:	f7f7 fbff 	bl	80001f0 <memchr>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d03f      	beq.n	8008a76 <_vfiprintf_r+0x20e>
 80089f6:	4b26      	ldr	r3, [pc, #152]	; (8008a90 <_vfiprintf_r+0x228>)
 80089f8:	bb1b      	cbnz	r3, 8008a42 <_vfiprintf_r+0x1da>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	3307      	adds	r3, #7
 80089fe:	f023 0307 	bic.w	r3, r3, #7
 8008a02:	3308      	adds	r3, #8
 8008a04:	9303      	str	r3, [sp, #12]
 8008a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a08:	443b      	add	r3, r7
 8008a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0c:	e768      	b.n	80088e0 <_vfiprintf_r+0x78>
 8008a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a12:	460c      	mov	r4, r1
 8008a14:	2001      	movs	r0, #1
 8008a16:	e7a6      	b.n	8008966 <_vfiprintf_r+0xfe>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	3401      	adds	r4, #1
 8008a1c:	9305      	str	r3, [sp, #20]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	f04f 0c0a 	mov.w	ip, #10
 8008a24:	4620      	mov	r0, r4
 8008a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a2a:	3a30      	subs	r2, #48	; 0x30
 8008a2c:	2a09      	cmp	r2, #9
 8008a2e:	d903      	bls.n	8008a38 <_vfiprintf_r+0x1d0>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0c6      	beq.n	80089c2 <_vfiprintf_r+0x15a>
 8008a34:	9105      	str	r1, [sp, #20]
 8008a36:	e7c4      	b.n	80089c2 <_vfiprintf_r+0x15a>
 8008a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e7f0      	b.n	8008a24 <_vfiprintf_r+0x1bc>
 8008a42:	ab03      	add	r3, sp, #12
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	462a      	mov	r2, r5
 8008a48:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <_vfiprintf_r+0x22c>)
 8008a4a:	a904      	add	r1, sp, #16
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f7fd fb9d 	bl	800618c <_printf_float>
 8008a52:	4607      	mov	r7, r0
 8008a54:	1c78      	adds	r0, r7, #1
 8008a56:	d1d6      	bne.n	8008a06 <_vfiprintf_r+0x19e>
 8008a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	d405      	bmi.n	8008a6a <_vfiprintf_r+0x202>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	059a      	lsls	r2, r3, #22
 8008a62:	d402      	bmi.n	8008a6a <_vfiprintf_r+0x202>
 8008a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a66:	f7fe f8fb 	bl	8006c60 <__retarget_lock_release_recursive>
 8008a6a:	89ab      	ldrh	r3, [r5, #12]
 8008a6c:	065b      	lsls	r3, r3, #25
 8008a6e:	f53f af1d 	bmi.w	80088ac <_vfiprintf_r+0x44>
 8008a72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a74:	e71c      	b.n	80088b0 <_vfiprintf_r+0x48>
 8008a76:	ab03      	add	r3, sp, #12
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <_vfiprintf_r+0x22c>)
 8008a7e:	a904      	add	r1, sp, #16
 8008a80:	4630      	mov	r0, r6
 8008a82:	f7fd fe27 	bl	80066d4 <_printf_i>
 8008a86:	e7e4      	b.n	8008a52 <_vfiprintf_r+0x1ea>
 8008a88:	08009054 	.word	0x08009054
 8008a8c:	0800905e 	.word	0x0800905e
 8008a90:	0800618d 	.word	0x0800618d
 8008a94:	08008845 	.word	0x08008845
 8008a98:	0800905a 	.word	0x0800905a

08008a9c <__swbuf_r>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	460e      	mov	r6, r1
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	b118      	cbz	r0, 8008aae <__swbuf_r+0x12>
 8008aa6:	6a03      	ldr	r3, [r0, #32]
 8008aa8:	b90b      	cbnz	r3, 8008aae <__swbuf_r+0x12>
 8008aaa:	f7fd ffc1 	bl	8006a30 <__sinit>
 8008aae:	69a3      	ldr	r3, [r4, #24]
 8008ab0:	60a3      	str	r3, [r4, #8]
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	071a      	lsls	r2, r3, #28
 8008ab6:	d525      	bpl.n	8008b04 <__swbuf_r+0x68>
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	b31b      	cbz	r3, 8008b04 <__swbuf_r+0x68>
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	6922      	ldr	r2, [r4, #16]
 8008ac0:	1a98      	subs	r0, r3, r2
 8008ac2:	6963      	ldr	r3, [r4, #20]
 8008ac4:	b2f6      	uxtb	r6, r6
 8008ac6:	4283      	cmp	r3, r0
 8008ac8:	4637      	mov	r7, r6
 8008aca:	dc04      	bgt.n	8008ad6 <__swbuf_r+0x3a>
 8008acc:	4621      	mov	r1, r4
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f7ff fd9e 	bl	8008610 <_fflush_r>
 8008ad4:	b9e0      	cbnz	r0, 8008b10 <__swbuf_r+0x74>
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	60a3      	str	r3, [r4, #8]
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	6022      	str	r2, [r4, #0]
 8008ae2:	701e      	strb	r6, [r3, #0]
 8008ae4:	6962      	ldr	r2, [r4, #20]
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d004      	beq.n	8008af6 <__swbuf_r+0x5a>
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	07db      	lsls	r3, r3, #31
 8008af0:	d506      	bpl.n	8008b00 <__swbuf_r+0x64>
 8008af2:	2e0a      	cmp	r6, #10
 8008af4:	d104      	bne.n	8008b00 <__swbuf_r+0x64>
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f7ff fd89 	bl	8008610 <_fflush_r>
 8008afe:	b938      	cbnz	r0, 8008b10 <__swbuf_r+0x74>
 8008b00:	4638      	mov	r0, r7
 8008b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b04:	4621      	mov	r1, r4
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 f806 	bl	8008b18 <__swsetup_r>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d0d5      	beq.n	8008abc <__swbuf_r+0x20>
 8008b10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008b14:	e7f4      	b.n	8008b00 <__swbuf_r+0x64>
	...

08008b18 <__swsetup_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4b2a      	ldr	r3, [pc, #168]	; (8008bc4 <__swsetup_r+0xac>)
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	460c      	mov	r4, r1
 8008b22:	b118      	cbz	r0, 8008b2c <__swsetup_r+0x14>
 8008b24:	6a03      	ldr	r3, [r0, #32]
 8008b26:	b90b      	cbnz	r3, 8008b2c <__swsetup_r+0x14>
 8008b28:	f7fd ff82 	bl	8006a30 <__sinit>
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b32:	0718      	lsls	r0, r3, #28
 8008b34:	d422      	bmi.n	8008b7c <__swsetup_r+0x64>
 8008b36:	06d9      	lsls	r1, r3, #27
 8008b38:	d407      	bmi.n	8008b4a <__swsetup_r+0x32>
 8008b3a:	2309      	movs	r3, #9
 8008b3c:	602b      	str	r3, [r5, #0]
 8008b3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b48:	e034      	b.n	8008bb4 <__swsetup_r+0x9c>
 8008b4a:	0758      	lsls	r0, r3, #29
 8008b4c:	d512      	bpl.n	8008b74 <__swsetup_r+0x5c>
 8008b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b50:	b141      	cbz	r1, 8008b64 <__swsetup_r+0x4c>
 8008b52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b56:	4299      	cmp	r1, r3
 8008b58:	d002      	beq.n	8008b60 <__swsetup_r+0x48>
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f7fe fefe 	bl	800795c <_free_r>
 8008b60:	2300      	movs	r3, #0
 8008b62:	6363      	str	r3, [r4, #52]	; 0x34
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6063      	str	r3, [r4, #4]
 8008b70:	6923      	ldr	r3, [r4, #16]
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f043 0308 	orr.w	r3, r3, #8
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	b94b      	cbnz	r3, 8008b94 <__swsetup_r+0x7c>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b8a:	d003      	beq.n	8008b94 <__swsetup_r+0x7c>
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 f884 	bl	8008c9c <__smakebuf_r>
 8008b94:	89a0      	ldrh	r0, [r4, #12]
 8008b96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b9a:	f010 0301 	ands.w	r3, r0, #1
 8008b9e:	d00a      	beq.n	8008bb6 <__swsetup_r+0x9e>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60a3      	str	r3, [r4, #8]
 8008ba4:	6963      	ldr	r3, [r4, #20]
 8008ba6:	425b      	negs	r3, r3
 8008ba8:	61a3      	str	r3, [r4, #24]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	b943      	cbnz	r3, 8008bc0 <__swsetup_r+0xa8>
 8008bae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bb2:	d1c4      	bne.n	8008b3e <__swsetup_r+0x26>
 8008bb4:	bd38      	pop	{r3, r4, r5, pc}
 8008bb6:	0781      	lsls	r1, r0, #30
 8008bb8:	bf58      	it	pl
 8008bba:	6963      	ldrpl	r3, [r4, #20]
 8008bbc:	60a3      	str	r3, [r4, #8]
 8008bbe:	e7f4      	b.n	8008baa <__swsetup_r+0x92>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e7f7      	b.n	8008bb4 <__swsetup_r+0x9c>
 8008bc4:	20000064 	.word	0x20000064

08008bc8 <_raise_r>:
 8008bc8:	291f      	cmp	r1, #31
 8008bca:	b538      	push	{r3, r4, r5, lr}
 8008bcc:	4604      	mov	r4, r0
 8008bce:	460d      	mov	r5, r1
 8008bd0:	d904      	bls.n	8008bdc <_raise_r+0x14>
 8008bd2:	2316      	movs	r3, #22
 8008bd4:	6003      	str	r3, [r0, #0]
 8008bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008bde:	b112      	cbz	r2, 8008be6 <_raise_r+0x1e>
 8008be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008be4:	b94b      	cbnz	r3, 8008bfa <_raise_r+0x32>
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 f830 	bl	8008c4c <_getpid_r>
 8008bec:	462a      	mov	r2, r5
 8008bee:	4601      	mov	r1, r0
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf6:	f000 b817 	b.w	8008c28 <_kill_r>
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d00a      	beq.n	8008c14 <_raise_r+0x4c>
 8008bfe:	1c59      	adds	r1, r3, #1
 8008c00:	d103      	bne.n	8008c0a <_raise_r+0x42>
 8008c02:	2316      	movs	r3, #22
 8008c04:	6003      	str	r3, [r0, #0]
 8008c06:	2001      	movs	r0, #1
 8008c08:	e7e7      	b.n	8008bda <_raise_r+0x12>
 8008c0a:	2400      	movs	r4, #0
 8008c0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c10:	4628      	mov	r0, r5
 8008c12:	4798      	blx	r3
 8008c14:	2000      	movs	r0, #0
 8008c16:	e7e0      	b.n	8008bda <_raise_r+0x12>

08008c18 <raise>:
 8008c18:	4b02      	ldr	r3, [pc, #8]	; (8008c24 <raise+0xc>)
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	f7ff bfd3 	b.w	8008bc8 <_raise_r>
 8008c22:	bf00      	nop
 8008c24:	20000064 	.word	0x20000064

08008c28 <_kill_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d07      	ldr	r5, [pc, #28]	; (8008c48 <_kill_r+0x20>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	f7f8 febb 	bl	80019b0 <_kill>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d102      	bne.n	8008c44 <_kill_r+0x1c>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b103      	cbz	r3, 8008c44 <_kill_r+0x1c>
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	20000b54 	.word	0x20000b54

08008c4c <_getpid_r>:
 8008c4c:	f7f8 bea8 	b.w	80019a0 <_getpid>

08008c50 <__swhatbuf_r>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	460c      	mov	r4, r1
 8008c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	b096      	sub	sp, #88	; 0x58
 8008c5c:	4615      	mov	r5, r2
 8008c5e:	461e      	mov	r6, r3
 8008c60:	da0d      	bge.n	8008c7e <__swhatbuf_r+0x2e>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c68:	f04f 0100 	mov.w	r1, #0
 8008c6c:	bf0c      	ite	eq
 8008c6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c72:	2340      	movne	r3, #64	; 0x40
 8008c74:	2000      	movs	r0, #0
 8008c76:	6031      	str	r1, [r6, #0]
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	b016      	add	sp, #88	; 0x58
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
 8008c7e:	466a      	mov	r2, sp
 8008c80:	f000 f848 	bl	8008d14 <_fstat_r>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	dbec      	blt.n	8008c62 <__swhatbuf_r+0x12>
 8008c88:	9901      	ldr	r1, [sp, #4]
 8008c8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c92:	4259      	negs	r1, r3
 8008c94:	4159      	adcs	r1, r3
 8008c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9a:	e7eb      	b.n	8008c74 <__swhatbuf_r+0x24>

08008c9c <__smakebuf_r>:
 8008c9c:	898b      	ldrh	r3, [r1, #12]
 8008c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca0:	079d      	lsls	r5, r3, #30
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	d507      	bpl.n	8008cb8 <__smakebuf_r+0x1c>
 8008ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	6163      	str	r3, [r4, #20]
 8008cb4:	b002      	add	sp, #8
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	ab01      	add	r3, sp, #4
 8008cba:	466a      	mov	r2, sp
 8008cbc:	f7ff ffc8 	bl	8008c50 <__swhatbuf_r>
 8008cc0:	9900      	ldr	r1, [sp, #0]
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7fe febd 	bl	8007a44 <_malloc_r>
 8008cca:	b948      	cbnz	r0, 8008ce0 <__smakebuf_r+0x44>
 8008ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd0:	059a      	lsls	r2, r3, #22
 8008cd2:	d4ef      	bmi.n	8008cb4 <__smakebuf_r+0x18>
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	f043 0302 	orr.w	r3, r3, #2
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	e7e3      	b.n	8008ca8 <__smakebuf_r+0xc>
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	6020      	str	r0, [r4, #0]
 8008ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	9b00      	ldr	r3, [sp, #0]
 8008cec:	6163      	str	r3, [r4, #20]
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	6120      	str	r0, [r4, #16]
 8008cf2:	b15b      	cbz	r3, 8008d0c <__smakebuf_r+0x70>
 8008cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f000 f81d 	bl	8008d38 <_isatty_r>
 8008cfe:	b128      	cbz	r0, 8008d0c <__smakebuf_r+0x70>
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	f023 0303 	bic.w	r3, r3, #3
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	81a3      	strh	r3, [r4, #12]
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	431d      	orrs	r5, r3
 8008d10:	81a5      	strh	r5, [r4, #12]
 8008d12:	e7cf      	b.n	8008cb4 <__smakebuf_r+0x18>

08008d14 <_fstat_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4d07      	ldr	r5, [pc, #28]	; (8008d34 <_fstat_r+0x20>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	4611      	mov	r1, r2
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	f7f8 fea4 	bl	8001a6e <_fstat>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	d102      	bne.n	8008d30 <_fstat_r+0x1c>
 8008d2a:	682b      	ldr	r3, [r5, #0]
 8008d2c:	b103      	cbz	r3, 8008d30 <_fstat_r+0x1c>
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	bd38      	pop	{r3, r4, r5, pc}
 8008d32:	bf00      	nop
 8008d34:	20000b54 	.word	0x20000b54

08008d38 <_isatty_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	; (8008d54 <_isatty_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7f8 fea3 	bl	8001a8e <_isatty>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_isatty_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_isatty_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20000b54 	.word	0x20000b54

08008d58 <_init>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr

08008d64 <_fini>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr
