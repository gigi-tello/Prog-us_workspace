
TP-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008588  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08008738  08008738  00018738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b24  08008b24  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b2c  08008b2c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b2c  08008b2c  00018b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000990  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b64  20000b64  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014056  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033d0  00000000  00000000  0003429d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001148  00000000  00000000  00037670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d45  00000000  00000000  000387b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028e67  00000000  00000000  000394fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017917  00000000  00000000  00062364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed8ff  00000000  00000000  00079c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005854  00000000  00000000  0016757c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0016cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008720 	.word	0x08008720

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008720 	.word	0x08008720

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000f7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <MX_ADC1_Init+0xa0>)
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000fc6:	f001 f93d 	bl	8002244 <HAL_ADC_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fd0:	f000 fb5c 	bl	800168c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_ADC1_Init+0x98>)
 8000fe6:	f001 f971 	bl	80022cc <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f000 fb4c 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200001f0 	.word	0x200001f0
 8001000:	40012000 	.word	0x40012000
 8001004:	0f000001 	.word	0x0f000001

08001008 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_ADC_MspInit+0x7c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d127      	bne.n	800107a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_ADC_MspInit+0x80>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a15      	ldr	r2, [pc, #84]	; (8001088 <HAL_ADC_MspInit+0x80>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_ADC_MspInit+0x80>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_ADC_MspInit+0x80>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_ADC_MspInit+0x80>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_ADC_MspInit+0x80>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001062:	2308      	movs	r3, #8
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001066:	2303      	movs	r3, #3
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_ADC_MspInit+0x84>)
 8001076:	f001 ff65 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	; 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40012000 	.word	0x40012000
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000

08001090 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_ETH_Init+0x84>)
 8001096:	4a20      	ldr	r2, [pc, #128]	; (8001118 <MX_ETH_Init+0x88>)
 8001098:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_ETH_Init+0x8c>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_ETH_Init+0x8c>)
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_ETH_Init+0x8c>)
 80010a8:	22e1      	movs	r2, #225	; 0xe1
 80010aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_ETH_Init+0x8c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_ETH_Init+0x8c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_ETH_Init+0x8c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_ETH_Init+0x84>)
 80010c0:	4a16      	ldr	r2, [pc, #88]	; (800111c <MX_ETH_Init+0x8c>)
 80010c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_ETH_Init+0x84>)
 80010c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_ETH_Init+0x84>)
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <MX_ETH_Init+0x90>)
 80010d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_ETH_Init+0x84>)
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <MX_ETH_Init+0x94>)
 80010d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_ETH_Init+0x84>)
 80010da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_ETH_Init+0x84>)
 80010e2:	f001 fc07 	bl	80028f4 <HAL_ETH_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010ec:	f000 face 	bl	800168c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010f0:	2238      	movs	r2, #56	; 0x38
 80010f2:	2100      	movs	r1, #0
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <MX_ETH_Init+0x98>)
 80010f6:	f005 fa1a 	bl	800652e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_ETH_Init+0x98>)
 80010fc:	2221      	movs	r2, #33	; 0x21
 80010fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_ETH_Init+0x98>)
 8001102:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001106:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_ETH_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200003b0 	.word	0x200003b0
 8001118:	40028000 	.word	0x40028000
 800111c:	20000460 	.word	0x20000460
 8001120:	200002d8 	.word	0x200002d8
 8001124:	20000238 	.word	0x20000238
 8001128:	20000378 	.word	0x20000378

0800112c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a55      	ldr	r2, [pc, #340]	; (80012a0 <HAL_ETH_MspInit+0x174>)
 800114a:	4293      	cmp	r3, r2
 800114c:	f040 80a4 	bne.w	8001298 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 800115a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	623b      	str	r3, [r7, #32]
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	4b4c      	ldr	r3, [pc, #304]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a4b      	ldr	r2, [pc, #300]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 8001176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b49      	ldr	r3, [pc, #292]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a44      	ldr	r2, [pc, #272]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 8001192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a3d      	ldr	r2, [pc, #244]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 8001202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_ETH_MspInit+0x178>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001214:	2332      	movs	r3, #50	; 0x32
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001224:	230b      	movs	r3, #11
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	481e      	ldr	r0, [pc, #120]	; (80012a8 <HAL_ETH_MspInit+0x17c>)
 8001230:	f001 fe88 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001234:	2386      	movs	r3, #134	; 0x86
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001244:	230b      	movs	r3, #11
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <HAL_ETH_MspInit+0x180>)
 8001250:	f001 fe78 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001266:	230b      	movs	r3, #11
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	480f      	ldr	r0, [pc, #60]	; (80012b0 <HAL_ETH_MspInit+0x184>)
 8001272:	f001 fe67 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001276:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001288:	230b      	movs	r3, #11
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <HAL_ETH_MspInit+0x188>)
 8001294:	f001 fe56 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001298:	bf00      	nop
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40028000 	.word	0x40028000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40021800 	.word	0x40021800

080012b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <MX_GPIO_Init+0x14c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <MX_GPIO_Init+0x14c>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <MX_GPIO_Init+0x14c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	4b45      	ldr	r3, [pc, #276]	; (8001404 <MX_GPIO_Init+0x14c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a44      	ldr	r2, [pc, #272]	; (8001404 <MX_GPIO_Init+0x14c>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b42      	ldr	r3, [pc, #264]	; (8001404 <MX_GPIO_Init+0x14c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <MX_GPIO_Init+0x14c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a3d      	ldr	r2, [pc, #244]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a36      	ldr	r2, [pc, #216]	; (8001404 <MX_GPIO_Init+0x14c>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <MX_GPIO_Init+0x14c>)
 8001364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_GPIO_Init+0x14c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f244 0181 	movw	r1, #16513	; 0x4081
 800137c:	4822      	ldr	r0, [pc, #136]	; (8001408 <MX_GPIO_Init+0x150>)
 800137e:	f001 ff8d 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2140      	movs	r1, #64	; 0x40
 8001386:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_GPIO_Init+0x154>)
 8001388:	f001 ff88 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001392:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	481b      	ldr	r0, [pc, #108]	; (8001410 <MX_GPIO_Init+0x158>)
 80013a4:	f001 fdce 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4811      	ldr	r0, [pc, #68]	; (8001408 <MX_GPIO_Init+0x150>)
 80013c2:	f001 fdbf 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013c6:	2340      	movs	r3, #64	; 0x40
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <MX_GPIO_Init+0x154>)
 80013de:	f001 fdb1 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_GPIO_Init+0x154>)
 80013f6:	f001 fda5 	bl	8002f44 <HAL_GPIO_Init>

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400
 800140c:	40021800 	.word	0x40021800
 8001410:	40020800 	.word	0x40020800

08001414 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_I2C1_Init+0x74>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <MX_I2C1_Init+0x78>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_I2C1_Init+0x74>)
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MX_I2C1_Init+0x7c>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_I2C1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_I2C1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_I2C1_Init+0x74>)
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_I2C1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_I2C1_Init+0x74>)
 8001452:	f001 ff3d 	bl	80032d0 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 f916 	bl	800168c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	4809      	ldr	r0, [pc, #36]	; (8001488 <MX_I2C1_Init+0x74>)
 8001464:	f002 fee3 	bl	800422e <HAL_I2CEx_ConfigAnalogFilter>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800146e:	f000 f90d 	bl	800168c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_I2C1_Init+0x74>)
 8001476:	f002 ff16 	bl	80042a6 <HAL_I2CEx_ConfigDigitalFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001480:	f000 f904 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000468 	.word	0x20000468
 800148c:	40005400 	.word	0x40005400
 8001490:	000186a0 	.word	0x000186a0

08001494 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_I2C_MspInit+0x84>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12c      	bne.n	8001510 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e4:	2304      	movs	r3, #4
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <HAL_I2C_MspInit+0x8c>)
 80014f0:	f001 fd28 	bl	8002f44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_I2C_MspInit+0x88>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40005400 	.word	0x40005400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f000 fdf5 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f843 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f7ff fec1 	bl	80012b8 <MX_GPIO_Init>
  MX_ETH_Init();
 8001536:	f7ff fdab 	bl	8001090 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800153a:	f000 fae5 	bl	8001b08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800153e:	f000 fb55 	bl	8001bec <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001542:	f7ff ff67 	bl	8001414 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001546:	f7ff fd0d 	bl	8000f64 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f000 fe56 	bl	80021fc <HAL_Delay>
    lcd_init();
 8001550:	f000 fc24 	bl	8001d9c <lcd_init>
    char mensaje[] = "Hola";
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <main+0x88>)
 8001556:	463b      	mov	r3, r7
 8001558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155c:	6018      	str	r0, [r3, #0]
 800155e:	3304      	adds	r3, #4
 8001560:	7019      	strb	r1, [r3, #0]
    lcd_enviar_cadena(mensaje);
 8001562:	463b      	mov	r3, r7
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fcb7 	bl	8001ed8 <lcd_enviar_cadena>
    lcd_pos_cursor(1,5);
 800156a:	2105      	movs	r1, #5
 800156c:	2001      	movs	r0, #1
 800156e:	f000 fcc8 	bl	8001f02 <lcd_pos_cursor>
    lcd_enviar_cadena("mundo");
 8001572:	480f      	ldr	r0, [pc, #60]	; (80015b0 <main+0x8c>)
 8001574:	f000 fcb0 	bl	8001ed8 <lcd_enviar_cadena>
    HAL_Delay(500);
 8001578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157c:	f000 fe3e 	bl	80021fc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(mostrar_pantalla){
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <main+0x90>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d00c      	beq.n	80015a2 <main+0x7e>
 8001588:	2b02      	cmp	r3, #2
 800158a:	dc0d      	bgt.n	80015a8 <main+0x84>
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <main+0x72>
 8001590:	2b01      	cmp	r3, #1
 8001592:	d003      	beq.n	800159c <main+0x78>
	          break;
	      case PAGINA_TEMP:
	    	  pag_temp();
	          break;
	      default:
	          break;
 8001594:	e008      	b.n	80015a8 <main+0x84>
	    	  pag_opciones();
 8001596:	f000 f87f 	bl	8001698 <pag_opciones>
	          break;
 800159a:	e006      	b.n	80015aa <main+0x86>
	    	  pag_fecha();
 800159c:	f000 f906 	bl	80017ac <pag_fecha>
	          break;
 80015a0:	e003      	b.n	80015aa <main+0x86>
	    	  pag_temp();
 80015a2:	f000 f94d 	bl	8001840 <pag_temp>
	          break;
 80015a6:	e000      	b.n	80015aa <main+0x86>
	          break;
 80015a8:	bf00      	nop
	  switch(mostrar_pantalla){
 80015aa:	e7e9      	b.n	8001580 <main+0x5c>
 80015ac:	08008740 	.word	0x08008740
 80015b0:	08008738 	.word	0x08008738
 80015b4:	200004bc 	.word	0x200004bc

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	2230      	movs	r2, #48	; 0x30
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 ffb1 	bl	800652e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <SystemClock_Config+0xcc>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a27      	ldr	r2, [pc, #156]	; (8001684 <SystemClock_Config+0xcc>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <SystemClock_Config+0xcc>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <SystemClock_Config+0xd0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a21      	ldr	r2, [pc, #132]	; (8001688 <SystemClock_Config+0xd0>)
 8001602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <SystemClock_Config+0xd0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001618:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800162c:	23a8      	movs	r3, #168	; 0xa8
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001634:	2307      	movs	r3, #7
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f002 ff8f 	bl	8004560 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001648:	f000 f820 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2105      	movs	r1, #5
 800166a:	4618      	mov	r0, r3
 800166c:	f003 f9f0 	bl	8004a50 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001676:	f000 f809 	bl	800168c <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3750      	adds	r7, #80	; 0x50
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <pag_opciones>:
#include "pantallas.h"

void pag_opciones(void){
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
    /*
    |>Mostrar fecha  |
    | Mostrar temp   |
    */
	bool_t boton_presionado = false;
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]
	uint8_t boton = BOT_NINGUNO;
 80016a2:	2300      	movs	r3, #0
 80016a4:	717b      	strb	r3, [r7, #5]
	uint8_t pos_cursor = OPCION_MOSTRAR_FECHA;
 80016a6:	2300      	movs	r3, #0
 80016a8:	71bb      	strb	r3, [r7, #6]

	lcd_borrar();
 80016aa:	f000 fc4a 	bl	8001f42 <lcd_borrar>
	lcd_pos_cursor(0, 1);
 80016ae:	2101      	movs	r1, #1
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 fc26 	bl	8001f02 <lcd_pos_cursor>
    lcd_enviar_cadena(MSJ_MOSTRAR_FECHA);
 80016b6:	4826      	ldr	r0, [pc, #152]	; (8001750 <pag_opciones+0xb8>)
 80016b8:	f000 fc0e 	bl	8001ed8 <lcd_enviar_cadena>
    lcd_pos_cursor(1, 1);
 80016bc:	2101      	movs	r1, #1
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 fc1f 	bl	8001f02 <lcd_pos_cursor>
    lcd_enviar_cadena(MSJ_MOSTRAR_TEMP);
 80016c4:	4823      	ldr	r0, [pc, #140]	; (8001754 <pag_opciones+0xbc>)
 80016c6:	f000 fc07 	bl	8001ed8 <lcd_enviar_cadena>

    while(boton_presionado == false){
 80016ca:	e036      	b.n	800173a <pag_opciones+0xa2>
    	boton = obtener_boton_presionado();
 80016cc:	f000 fb3f 	bl	8001d4e <obtener_boton_presionado>
 80016d0:	4603      	mov	r3, r0
 80016d2:	717b      	strb	r3, [r7, #5]

    	switch (boton){
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d006      	beq.n	80016e8 <pag_opciones+0x50>
 80016da:	2b03      	cmp	r3, #3
 80016dc:	dc2c      	bgt.n	8001738 <pag_opciones+0xa0>
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d01a      	beq.n	8001718 <pag_opciones+0x80>
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d00c      	beq.n	8001700 <pag_opciones+0x68>
 80016e6:	e027      	b.n	8001738 <pag_opciones+0xa0>
    	case BOT_ABAJO :
    		if(pos_cursor == OPCION_MOSTRAR_FECHA){
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <pag_opciones+0x62>
    			pos_cursor = OPCION_MOSTRAR_TEMP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	71bb      	strb	r3, [r7, #6]
    			pag_fila_cursor(pos_cursor);
 80016f2:	79bb      	ldrb	r3, [r7, #6]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f831 	bl	800175c <pag_fila_cursor>
    		}
    		boton_presionado = true;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
    		break;
 80016fe:	e01c      	b.n	800173a <pag_opciones+0xa2>
    	case BOT_ARRIBA :
    		if(pos_cursor == OPCION_MOSTRAR_TEMP){
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <pag_opciones+0x7a>
    			pos_cursor = OPCION_MOSTRAR_FECHA;
 8001706:	2300      	movs	r3, #0
 8001708:	71bb      	strb	r3, [r7, #6]
    			pag_fila_cursor(pos_cursor);
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f825 	bl	800175c <pag_fila_cursor>
    		}
    		boton_presionado = true;
 8001712:	2301      	movs	r3, #1
 8001714:	71fb      	strb	r3, [r7, #7]
    		break;
 8001716:	e010      	b.n	800173a <pag_opciones+0xa2>
    	case BOT_ADELANTE :
    		if(pos_cursor == OPCION_MOSTRAR_FECHA){
 8001718:	79bb      	ldrb	r3, [r7, #6]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <pag_opciones+0x8e>
    			mostrar_pantalla = PAGINA_FECHA;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <pag_opciones+0xc0>)
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
 8001724:	e005      	b.n	8001732 <pag_opciones+0x9a>
    		}
    		else if(pos_cursor == OPCION_MOSTRAR_TEMP){
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d102      	bne.n	8001732 <pag_opciones+0x9a>
    			mostrar_pantalla = PAGINA_TEMP;
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <pag_opciones+0xc0>)
 800172e:	2202      	movs	r2, #2
 8001730:	701a      	strb	r2, [r3, #0]
    		}
    		boton_presionado = true;
 8001732:	2301      	movs	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
    		break;
 8001736:	e000      	b.n	800173a <pag_opciones+0xa2>
    	default:
    		break;
 8001738:	bf00      	nop
    while(boton_presionado == false){
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f083 0301 	eor.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1c2      	bne.n	80016cc <pag_opciones+0x34>
    	}

    }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08008748 	.word	0x08008748
 8001754:	08008758 	.word	0x08008758
 8001758:	200004bc 	.word	0x200004bc

0800175c <pag_fila_cursor>:

void pag_fila_cursor(uint8_t opcion){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
    switch (opcion){
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <pag_fila_cursor+0x16>
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <pag_fila_cursor+0x20>
 8001770:	e009      	b.n	8001786 <pag_fila_cursor+0x2a>
        case OPCION_MOSTRAR_FECHA:
        	lcd_pos_cursor(OPCION_MOSTRAR_TEMP, 0);
 8001772:	2100      	movs	r1, #0
 8001774:	2001      	movs	r0, #1
 8001776:	f000 fbc4 	bl	8001f02 <lcd_pos_cursor>
            break;
 800177a:	e004      	b.n	8001786 <pag_fila_cursor+0x2a>
        case OPCION_MOSTRAR_TEMP:
        	lcd_pos_cursor(OPCION_MOSTRAR_FECHA, 0);
 800177c:	2100      	movs	r1, #0
 800177e:	2000      	movs	r0, #0
 8001780:	f000 fbbf 	bl	8001f02 <lcd_pos_cursor>
            break;
 8001784:	bf00      	nop
    }
    lcd_enviar_cadena(" ");
 8001786:	4807      	ldr	r0, [pc, #28]	; (80017a4 <pag_fila_cursor+0x48>)
 8001788:	f000 fba6 	bl	8001ed8 <lcd_enviar_cadena>
    lcd_pos_cursor(opcion, 0);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fbb6 	bl	8001f02 <lcd_pos_cursor>
    lcd_enviar_cadena(CARACTER_CURSOR);
 8001796:	4804      	ldr	r0, [pc, #16]	; (80017a8 <pag_fila_cursor+0x4c>)
 8001798:	f000 fb9e 	bl	8001ed8 <lcd_enviar_cadena>
    //lcd_enviar_cadena();
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	08008768 	.word	0x08008768
 80017a8:	0800876c 	.word	0x0800876c

080017ac <pag_fecha>:

void pag_fecha(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
    /*
    |   dd/mm/aaaa   |
    |     hh:mm      |
    */

	char fecha[LARGO_CADENA_FECHA] = "";
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	711a      	strb	r2, [r3, #4]
	char hora[LARGO_CADENA_HORA] =  "";
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	2300      	movs	r3, #0
 80017c6:	813b      	strh	r3, [r7, #8]
	bool_t boton_presionado = false;
 80017c8:	2300      	movs	r3, #0
 80017ca:	75fb      	strb	r3, [r7, #23]
	uint8_t boton = BOT_NINGUNO;
 80017cc:	2300      	movs	r3, #0
 80017ce:	75bb      	strb	r3, [r7, #22]

	obtener_fecha(fecha);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fc1d 	bl	8002014 <obtener_fecha>
	obtener_hora(hora);
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fc33 	bl	8002048 <obtener_hora>

    lcd_borrar();
 80017e2:	f000 fbae 	bl	8001f42 <lcd_borrar>
    lcd_pos_cursor(0, 4);
 80017e6:	2104      	movs	r1, #4
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 fb8a 	bl	8001f02 <lcd_pos_cursor>
    lcd_enviar_cadena(fecha);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fb70 	bl	8001ed8 <lcd_enviar_cadena>

    lcd_pos_cursor(1, 5);
 80017f8:	2105      	movs	r1, #5
 80017fa:	2001      	movs	r0, #1
 80017fc:	f000 fb81 	bl	8001f02 <lcd_pos_cursor>
    lcd_enviar_cadena(hora);
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fb68 	bl	8001ed8 <lcd_enviar_cadena>

    while(boton_presionado == false){
 8001808:	e00d      	b.n	8001826 <pag_fecha+0x7a>
    	boton = obtener_boton_presionado();
 800180a:	f000 faa0 	bl	8001d4e <obtener_boton_presionado>
 800180e:	4603      	mov	r3, r0
 8001810:	75bb      	strb	r3, [r7, #22]

        switch (boton){
 8001812:	7dbb      	ldrb	r3, [r7, #22]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d105      	bne.n	8001824 <pag_fecha+0x78>
            case BOT_ATRAS:
            	mostrar_pantalla = PAGINA_OPCIONES;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <pag_fecha+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
            	boton_presionado = true;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
                break;
 8001822:	e000      	b.n	8001826 <pag_fecha+0x7a>
            default:
                break;
 8001824:	bf00      	nop
    while(boton_presionado == false){
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	f083 0301 	eor.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1eb      	bne.n	800180a <pag_fecha+0x5e>
        }

    }

}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200004bc 	.word	0x200004bc

08001840 <pag_temp>:

void pag_temp(void){
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
    /*
    |   Temp: tt C   |
    |                |
    */
    char cad_temperatura[LARGO_CADENA_TEMP] = "";
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	f8c3 2007 	str.w	r2, [r3, #7]
	bool_t boton_presionado = false;
 8001858:	2300      	movs	r3, #0
 800185a:	75fb      	strb	r3, [r7, #23]
	uint8_t boton = BOT_NINGUNO;
 800185c:	2300      	movs	r3, #0
 800185e:	75bb      	strb	r3, [r7, #22]

    obtener_temp(cad_temperatura);
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fc40 	bl	80020e8 <obtener_temp>
    //sprintf(cad_temperatura,"Temp: %d \004C", temperatura_ext); // \004 está definido en caracteres.h para el símbolo de grado

    lcd_borrar();
 8001868:	f000 fb6b 	bl	8001f42 <lcd_borrar>
    lcd_pos_cursor(0, 0);
 800186c:	2100      	movs	r1, #0
 800186e:	2000      	movs	r0, #0
 8001870:	f000 fb47 	bl	8001f02 <lcd_pos_cursor>
    lcd_enviar_cadena(cad_temperatura);
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fb2e 	bl	8001ed8 <lcd_enviar_cadena>

    while(boton_presionado == false){
 800187c:	e00d      	b.n	800189a <pag_temp+0x5a>
    	boton = obtener_boton_presionado();
 800187e:	f000 fa66 	bl	8001d4e <obtener_boton_presionado>
 8001882:	4603      	mov	r3, r0
 8001884:	75bb      	strb	r3, [r7, #22]

        switch (boton){
 8001886:	7dbb      	ldrb	r3, [r7, #22]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d105      	bne.n	8001898 <pag_temp+0x58>
            case BOT_ATRAS:
            	mostrar_pantalla = PAGINA_OPCIONES;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <pag_temp+0x70>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
            	boton_presionado = true;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
                break;
 8001896:	e000      	b.n	800189a <pag_temp+0x5a>
            default:
                break;
 8001898:	bf00      	nop
    while(boton_presionado == false){
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	f083 0301 	eor.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1eb      	bne.n	800187e <pag_temp+0x3e>
        }

    }

}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200004bc 	.word	0x200004bc

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_MspInit+0x4c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_MspInit+0x4c>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_MspInit+0x4c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 fc34 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001972:	f004 fe2f 	bl	80065d4 <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
  return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800199a:	e7fe      	b.n	800199a <_exit+0x12>

0800199c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e00a      	b.n	80019c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ae:	f3af 8000 	nop.w
 80019b2:	4601      	mov	r1, r0
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf0      	blt.n	80019ae <_read+0x12>
  }

  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e009      	b.n	80019fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf1      	blt.n	80019e8 <_write+0x12>
  }
  return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_close>:

int _close(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a36:	605a      	str	r2, [r3, #4]
  return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_isatty>:

int _isatty(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f004 fd94 	bl	80065d4 <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20030000 	.word	0x20030000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	200004c0 	.word	0x200004c0
 8001ae0:	20000b68 	.word	0x20000b68

08001ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART3_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART3_UART_Init+0x4c>)
 8001b40:	f003 f9a6 	bl	8004e90 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f7ff fd9f 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200004c4 	.word	0x200004c4
 8001b58:	40004800 	.word	0x40004800

08001b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12c      	bne.n	8001bd8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <HAL_UART_MspInit+0x8c>)
 8001bd4:	f001 f9b6 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40004800 	.word	0x40004800
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020c00 	.word	0x40020c00

08001bec <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c30:	f002 fb78 	bl	8004324 <HAL_PCD_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c3a:	f7ff fd27 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000508 	.word	0x20000508

08001c48 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c68:	d13f      	bne.n	8001cea <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_PCD_MspInit+0xac>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_PCD_MspInit+0xac>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_PCD_MspInit+0xac>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c86:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c98:	230a      	movs	r3, #10
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <HAL_PCD_MspInit+0xb0>)
 8001ca4:	f001 f94e 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <HAL_PCD_MspInit+0xb0>)
 8001cbe:	f001 f941 	bl	8002f44 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_PCD_MspInit+0xac>)
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <HAL_PCD_MspInit+0xac>)
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ccc:	6353      	str	r3, [r2, #52]	; 0x34
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_PCD_MspInit+0xac>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_PCD_MspInit+0xac>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_PCD_MspInit+0xac>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000

08001cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d02:	490e      	ldr	r1, [pc, #56]	; (8001d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d18:	4c0b      	ldr	r4, [pc, #44]	; (8001d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d26:	f7ff fedd 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f004 fc59 	bl	80065e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2e:	f7ff fbf9 	bl	8001524 <main>
  bx  lr    
 8001d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d40:	08008b34 	.word	0x08008b34
  ldr r2, =_sbss
 8001d44:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d48:	20000b64 	.word	0x20000b64

08001d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC_IRQHandler>

08001d4e <obtener_boton_presionado>:
#include "API_keypad.h"

uint8_t obtener_boton_presionado(uint32_t req){
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
    uint8_t boton = BOT_NINGUNO;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
    if (req < 50) {
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b31      	cmp	r3, #49	; 0x31
 8001d5e:	d802      	bhi.n	8001d66 <obtener_boton_presionado+0x18>
        boton = BOT_ADELANTE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e013      	b.n	8001d8e <obtener_boton_presionado+0x40>
    } else if (req < 250) {
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2bf9      	cmp	r3, #249	; 0xf9
 8001d6a:	d802      	bhi.n	8001d72 <obtener_boton_presionado+0x24>
        boton = BOT_ARRIBA;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e00d      	b.n	8001d8e <obtener_boton_presionado+0x40>
    } else if (req < 500) {
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d78:	d202      	bcs.n	8001d80 <obtener_boton_presionado+0x32>
        boton = BOT_ABAJO;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	73fb      	strb	r3, [r7, #15]
 8001d7e:	e006      	b.n	8001d8e <obtener_boton_presionado+0x40>
    } else if (req < 790) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f240 3215 	movw	r2, #789	; 0x315
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d801      	bhi.n	8001d8e <obtener_boton_presionado+0x40>
        boton = BOT_ATRAS;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	73fb      	strb	r3, [r7, #15]
    }
    return boton;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <lcd_init>:
#include <API_lcd.h>

void lcd_init (void){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
    // Inicialización para 4 bit
    HAL_Delay(50);  // Esperar >40ms
 8001da0:	2032      	movs	r0, #50	; 0x32
 8001da2:	f000 fa2b 	bl	80021fc <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001da6:	2030      	movs	r0, #48	; 0x30
 8001da8:	f000 f836 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(5);  // Esperar >4.1ms
 8001dac:	2005      	movs	r0, #5
 8001dae:	f000 fa25 	bl	80021fc <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001db2:	2030      	movs	r0, #48	; 0x30
 8001db4:	f000 f830 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(1);  // Esperar >100us
 8001db8:	2001      	movs	r0, #1
 8001dba:	f000 fa1f 	bl	80021fc <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001dbe:	2030      	movs	r0, #48	; 0x30
 8001dc0:	f000 f82a 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(10);
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f000 fa19 	bl	80021fc <HAL_Delay>
    lcd_enviar_comando (MODO_4BIT);
 8001dca:	2020      	movs	r0, #32
 8001dcc:	f000 f824 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(10);
 8001dd0:	200a      	movs	r0, #10
 8001dd2:	f000 fa13 	bl	80021fc <HAL_Delay>

  // dislay initialisation
    lcd_enviar_comando (FUNCTION_SET); // FDL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001dd6:	2028      	movs	r0, #40	; 0x28
 8001dd8:	f000 f81e 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(1);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f000 fa0d 	bl	80021fc <HAL_Delay>
    lcd_enviar_comando (LCD_OFF); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001de2:	2008      	movs	r0, #8
 8001de4:	f000 f818 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(1);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f000 fa07 	bl	80021fc <HAL_Delay>
    lcd_enviar_comando (CLEAR_LCD);  // clear display
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 f812 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(1);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f000 fa01 	bl	80021fc <HAL_Delay>
    HAL_Delay(1);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f000 f9fe 	bl	80021fc <HAL_Delay>
    lcd_enviar_comando (ENTRY_MODE_SET); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001e00:	2006      	movs	r0, #6
 8001e02:	f000 f809 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(1);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f000 f9f8 	bl	80021fc <HAL_Delay>
    lcd_enviar_comando (BLINK_CURSOR); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001e0c:	200c      	movs	r0, #12
 8001e0e:	f000 f803 	bl	8001e18 <lcd_enviar_comando>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <lcd_enviar_comando>:

void lcd_enviar_comando (char cmd){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd&0xf0);
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f023 030f 	bic.w	r3, r3, #15
 8001e28:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd<<4)&0xf0);
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	f043 030c 	orr.w	r3, r3, #12
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x08;  //en=0, rs=0
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001e44:	7bbb      	ldrb	r3, [r7, #14]
 8001e46:	f043 030c 	orr.w	r3, r3, #12
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x08;  //en=0, rs=0
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e58:	f107 0208 	add.w	r2, r7, #8
 8001e5c:	2364      	movs	r3, #100	; 0x64
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2304      	movs	r3, #4
 8001e62:	214e      	movs	r1, #78	; 0x4e
 8001e64:	4803      	ldr	r0, [pc, #12]	; (8001e74 <lcd_enviar_comando+0x5c>)
 8001e66:	f001 fb77 	bl	8003558 <HAL_I2C_Master_Transmit>
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000468 	.word	0x20000468

08001e78 <lcd_enviar_dato>:


void lcd_enviar_dato (char dato){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (dato&0xf0);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f023 030f 	bic.w	r3, r3, #15
 8001e88:	73fb      	strb	r3, [r7, #15]
    data_l = ((dato<<4)&0xf0);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	f043 030d 	orr.w	r3, r3, #13
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x09;  //en=0, rs=1
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	f043 0309 	orr.w	r3, r3, #9
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	f043 030d 	orr.w	r3, r3, #13
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x09;  //en=0, rs=1
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	f043 0309 	orr.w	r3, r3, #9
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001eb8:	f107 0208 	add.w	r2, r7, #8
 8001ebc:	2364      	movs	r3, #100	; 0x64
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	214e      	movs	r1, #78	; 0x4e
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <lcd_enviar_dato+0x5c>)
 8001ec6:	f001 fb47 	bl	8003558 <HAL_I2C_Master_Transmit>
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000468 	.word	0x20000468

08001ed8 <lcd_enviar_cadena>:
void lcd_enviar_cadena (char *str){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    while (*str) lcd_enviar_dato (*str++);
 8001ee0:	e006      	b.n	8001ef0 <lcd_enviar_cadena+0x18>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ffc4 	bl	8001e78 <lcd_enviar_dato>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f4      	bne.n	8001ee2 <lcd_enviar_cadena+0xa>
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <lcd_pos_cursor>:

void lcd_pos_cursor(uint8_t fil, uint8_t col){
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	460a      	mov	r2, r1
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	71bb      	strb	r3, [r7, #6]
    switch (fil){
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <lcd_pos_cursor+0x1c>
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d005      	beq.n	8001f28 <lcd_pos_cursor+0x26>
 8001f1c:	e009      	b.n	8001f32 <lcd_pos_cursor+0x30>
        case 0:
            col |= 0x80;
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f24:	71bb      	strb	r3, [r7, #6]
            break;
 8001f26:	e004      	b.n	8001f32 <lcd_pos_cursor+0x30>
        case 1:
            col |= 0xC0;
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001f2e:	71bb      	strb	r3, [r7, #6]
            break;
 8001f30:	bf00      	nop
    }
    lcd_enviar_comando(col);
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff6f 	bl	8001e18 <lcd_enviar_comando>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <lcd_borrar>:

void lcd_borrar(void){
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
	lcd_enviar_comando(CLEAR_LCD);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff ff66 	bl	8001e18 <lcd_enviar_comando>
    HAL_Delay(5);
 8001f4c:	2005      	movs	r0, #5
 8001f4e:	f000 f955 	bl	80021fc <HAL_Delay>

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <bcd2dec>:
uint8_t dec2bcd(int val){
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convierte de bcd a decimal
// Multiplica al nibble alto por 10, y le suma el nibble bajo
static uint8_t bcd2dec(uint8_t bcd){
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  int dec = ((bcd & 0xF0) >> 4) * 10 + (bcd & 0x0F);
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	461a      	mov	r2, r3
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  return dec;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	b2db      	uxtb	r3, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <leer_fecha_hora>:

dateTime_t leer_fecha_hora(void){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af04      	add	r7, sp, #16
 8001f92:	6078      	str	r0, [r7, #4]
	dateTime_t dato;
	uint8_t dato_leido[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, MEM_REG, 1, dato_leido, CANT_REG_FH, RTC_TIMEOUT);
 8001f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f98:	9302      	str	r3, [sp, #8]
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	21d0      	movs	r1, #208	; 0xd0
 8001faa:	4819      	ldr	r0, [pc, #100]	; (8002010 <leer_fecha_hora+0x84>)
 8001fac:	f001 fbd2 	bl	8003754 <HAL_I2C_Mem_Read>

	dato.seg = bcd2dec(dato_leido[0]);
 8001fb0:	7a3b      	ldrb	r3, [r7, #8]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ffcf 	bl	8001f56 <bcd2dec>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	757b      	strb	r3, [r7, #21]
	dato.min = bcd2dec(dato_leido[1]);
 8001fbc:	7a7b      	ldrb	r3, [r7, #9]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffc9 	bl	8001f56 <bcd2dec>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	753b      	strb	r3, [r7, #20]
	dato.hora = bcd2dec(dato_leido[2]);
 8001fc8:	7abb      	ldrb	r3, [r7, #10]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ffc3 	bl	8001f56 <bcd2dec>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	74fb      	strb	r3, [r7, #19]
	//dato_leido[3] corresponde al día de la semana
	dato.dia = bcd2dec(dato_leido[4]);
 8001fd4:	7b3b      	ldrb	r3, [r7, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ffbd 	bl	8001f56 <bcd2dec>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	74bb      	strb	r3, [r7, #18]
	dato.mes = bcd2dec(dato_leido[5]);
 8001fe0:	7b7b      	ldrb	r3, [r7, #13]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ffb7 	bl	8001f56 <bcd2dec>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	747b      	strb	r3, [r7, #17]
	dato.anio = bcd2dec(dato_leido[6]);
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ffb1 	bl	8001f56 <bcd2dec>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	743b      	strb	r3, [r7, #16]

	return dato;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	6010      	str	r0, [r2, #0]
 8002004:	889b      	ldrh	r3, [r3, #4]
 8002006:	8093      	strh	r3, [r2, #4]
}
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000468 	.word	0x20000468

08002014 <obtener_fecha>:

void obtener_fecha(char* fecha){
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af02      	add	r7, sp, #8
 800201a:	6078      	str	r0, [r7, #4]

	dateTime_t fecha_hora = leer_fecha_hora();
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ffb3 	bl	8001f8c <leer_fecha_hora>

	sprintf(fecha, FORMATO_FECHA, fecha_hora.dia, fecha_hora.mes, fecha_hora.anio);
 8002026:	7abb      	ldrb	r3, [r7, #10]
 8002028:	461a      	mov	r2, r3
 800202a:	7a7b      	ldrb	r3, [r7, #9]
 800202c:	4619      	mov	r1, r3
 800202e:	7a3b      	ldrb	r3, [r7, #8]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	460b      	mov	r3, r1
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <obtener_fecha+0x30>)
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f004 fa16 	bl	8006468 <siprintf>
	return;
 800203c:	bf00      	nop
}
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	08008770 	.word	0x08008770

08002048 <obtener_hora>:

void obtener_hora(char* hora){
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	dateTime_t fecha_hora = leer_fecha_hora();
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff99 	bl	8001f8c <leer_fecha_hora>

	sprintf(hora, FORMATO_HORA, fecha_hora.hora, fecha_hora.min);
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	461a      	mov	r2, r3
 800205e:	7b3b      	ldrb	r3, [r7, #12]
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <obtener_hora+0x28>)
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f004 fa00 	bl	8006468 <siprintf>
	return;
 8002068:	bf00      	nop
}
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08008780 	.word	0x08008780

08002074 <leer_temp>:
}

//Lee la temperatura desde los registros 0x11 y 0x12
//En 0x11 está la parte entera del valor, y en 0x12 la parte decimal
//La resolución es 0.25gC por eso la parte decimal se divide por 4
temp_t leer_temp (void){
 8002074:	b5b0      	push	{r4, r5, r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af04      	add	r7, sp, #16
	uint8_t temp[2];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, TEMP_REG, 1, temp, CANT_REG_TEMP, RTC_TIMEOUT);
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	2302      	movs	r3, #2
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2301      	movs	r3, #1
 800208a:	2211      	movs	r2, #17
 800208c:	21d0      	movs	r1, #208	; 0xd0
 800208e:	4814      	ldr	r0, [pc, #80]	; (80020e0 <leer_temp+0x6c>)
 8002090:	f001 fb60 	bl	8003754 <HAL_I2C_Mem_Read>

	return ((temp[0])+(temp[1]>>6)*0.25);
 8002094:	793b      	ldrb	r3, [r7, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa54 	bl	8000544 <__aeabi_i2d>
 800209c:	4604      	mov	r4, r0
 800209e:	460d      	mov	r5, r1
 80020a0:	797b      	ldrb	r3, [r7, #5]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa4c 	bl	8000544 <__aeabi_i2d>
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <leer_temp+0x70>)
 80020b2:	f7fe fab1 	bl	8000618 <__aeabi_dmul>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4620      	mov	r0, r4
 80020bc:	4629      	mov	r1, r5
 80020be:	f7fe f8f5 	bl	80002ac <__adddf3>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7fe fd7d 	bl	8000bc8 <__aeabi_d2f>
 80020ce:	4603      	mov	r3, r0
 80020d0:	ee07 3a90 	vmov	s15, r3
}
 80020d4:	eeb0 0a67 	vmov.f32	s0, s15
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdb0      	pop	{r4, r5, r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000468 	.word	0x20000468
 80020e4:	3fd00000 	.word	0x3fd00000

080020e8 <obtener_temp>:

void obtener_temp(char* temp){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	temp_t temperatura = leer_temp();
 80020f0:	f7ff ffc0 	bl	8002074 <leer_temp>
 80020f4:	ed87 0a03 	vstr	s0, [r7, #12]

	sprintf(temp, FORMATO_TEMP, temperatura);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7fe fa35 	bl	8000568 <__aeabi_f2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4904      	ldr	r1, [pc, #16]	; (8002114 <obtener_temp+0x2c>)
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f004 f9af 	bl	8006468 <siprintf>
	return;
 800210a:	bf00      	nop
}
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	0800878c 	.word	0x0800878c

08002118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_Init+0x40>)
 8002122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_Init+0x40>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_Init+0x40>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 fba3 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	2000      	movs	r0, #0
 8002148:	f000 f808 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7ff fbb2 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023c00 	.word	0x40023c00

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_InitTick+0x54>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0x58>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	fbb3 f3f1 	udiv	r3, r3, r1
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fbad 	bl	80028da <HAL_SYSTICK_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00e      	b.n	80021a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	d80a      	bhi.n	80021a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002198:	f000 fb83 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <HAL_InitTick+0x5c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000008 	.word	0x20000008
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000a14 	.word	0x20000a14

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000a14 	.word	0x20000a14

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff ffee 	bl	80021e4 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffde 	bl	80021e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000008 	.word	0x20000008

08002244 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e033      	b.n	80022c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fed0 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800228a:	f023 0302 	bic.w	r3, r3, #2
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f94a 	bl	8002530 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
 80022b2:	e001      	b.n	80022b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1c>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e113      	b.n	8002510 <HAL_ADC_ConfigChannel+0x244>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b09      	cmp	r3, #9
 80022f6:	d925      	bls.n	8002344 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68d9      	ldr	r1, [r3, #12]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	3b1e      	subs	r3, #30
 800230e:	2207      	movs	r2, #7
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43da      	mvns	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	400a      	ands	r2, r1
 800231c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68d9      	ldr	r1, [r3, #12]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	4603      	mov	r3, r0
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4403      	add	r3, r0
 8002336:	3b1e      	subs	r3, #30
 8002338:	409a      	lsls	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	e022      	b.n	800238a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6919      	ldr	r1, [r3, #16]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	2207      	movs	r2, #7
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	400a      	ands	r2, r1
 8002366:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6919      	ldr	r1, [r3, #16]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	4603      	mov	r3, r0
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4403      	add	r3, r0
 8002380:	409a      	lsls	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b06      	cmp	r3, #6
 8002390:	d824      	bhi.n	80023dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	3b05      	subs	r3, #5
 80023a4:	221f      	movs	r2, #31
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	400a      	ands	r2, r1
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	3b05      	subs	r3, #5
 80023ce:	fa00 f203 	lsl.w	r2, r0, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
 80023da:	e04c      	b.n	8002476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b0c      	cmp	r3, #12
 80023e2:	d824      	bhi.n	800242e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b23      	subs	r3, #35	; 0x23
 80023f6:	221f      	movs	r2, #31
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43da      	mvns	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	400a      	ands	r2, r1
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	4618      	mov	r0, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	3b23      	subs	r3, #35	; 0x23
 8002420:	fa00 f203 	lsl.w	r2, r0, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
 800242c:	e023      	b.n	8002476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b41      	subs	r3, #65	; 0x41
 8002440:	221f      	movs	r2, #31
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	400a      	ands	r2, r1
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b41      	subs	r3, #65	; 0x41
 800246a:	fa00 f203 	lsl.w	r2, r0, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <HAL_ADC_ConfigChannel+0x250>)
 8002478:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a28      	ldr	r2, [pc, #160]	; (8002520 <HAL_ADC_ConfigChannel+0x254>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10f      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b12      	cmp	r3, #18
 800248a:	d10b      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_ADC_ConfigChannel+0x254>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d12b      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x23a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_ADC_ConfigChannel+0x258>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d003      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x1f4>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b11      	cmp	r3, #17
 80024be:	d122      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <HAL_ADC_ConfigChannel+0x258>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d111      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_ADC_ConfigChannel+0x25c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_ADC_ConfigChannel+0x260>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	0c9a      	lsrs	r2, r3, #18
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f8:	e002      	b.n	8002500 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f9      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40012300 	.word	0x40012300
 8002520:	40012000 	.word	0x40012000
 8002524:	10000012 	.word	0x10000012
 8002528:	20000000 	.word	0x20000000
 800252c:	431bde83 	.word	0x431bde83

08002530 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002538:	4b79      	ldr	r3, [pc, #484]	; (8002720 <ADC_Init+0x1f0>)
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	431a      	orrs	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	021a      	lsls	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	4a58      	ldr	r2, [pc, #352]	; (8002724 <ADC_Init+0x1f4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d022      	beq.n	800260e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e00f      	b.n	800262e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800261c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800262c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0202 	bic.w	r2, r2, #2
 800263c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7e1b      	ldrb	r3, [r3, #24]
 8002648:	005a      	lsls	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800267a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	3b01      	subs	r3, #1
 8002688:	035a      	lsls	r2, r3, #13
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	e007      	b.n	80026a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	3b01      	subs	r3, #1
 80026c0:	051a      	lsls	r2, r3, #20
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e6:	025a      	lsls	r2, r3, #9
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	029a      	lsls	r2, r3, #10
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	609a      	str	r2, [r3, #8]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012300 	.word	0x40012300
 8002724:	0f000001 	.word	0x0f000001

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800286c:	f7ff ff8e 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff47 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff5c 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff8e 	bl	80027e0 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5d 	bl	800278c <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffb0 	bl	8002848 <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e06c      	b.n	80029e0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2223      	movs	r2, #35	; 0x23
 8002914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fe fc07 	bl	800112c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_ETH_Init+0xf4>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_ETH_Init+0xf4>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_ETH_Init+0xf4>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800293a:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <HAL_ETH_Init+0xf8>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a2b      	ldr	r2, [pc, #172]	; (80029ec <HAL_ETH_Init+0xf8>)
 8002940:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002944:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_ETH_Init+0xf8>)
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4927      	ldr	r1, [pc, #156]	; (80029ec <HAL_ETH_Init+0xf8>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_ETH_Init+0xf8>)
 8002956:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800296e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002970:	f7ff fc38 	bl	80021e4 <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002976:	e011      	b.n	800299c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002978:	f7ff fc34 	bl	80021e4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002986:	d909      	bls.n	800299c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2204      	movs	r2, #4
 800298c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	22e0      	movs	r2, #224	; 0xe0
 8002994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e021      	b.n	80029e0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1e4      	bne.n	8002978 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f958 	bl	8002c64 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f9ff 	bl	8002db8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa55 	bl	8002e6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	461a      	mov	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f9bd 	bl	8002d48 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2210      	movs	r2, #16
 80029da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40013800 	.word	0x40013800

080029f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <ETH_SetMACConfig+0x15c>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7c1b      	ldrb	r3, [r3, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <ETH_SetMACConfig+0x28>
 8002a12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a16:	e000      	b.n	8002a1a <ETH_SetMACConfig+0x2a>
 8002a18:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	7c5b      	ldrb	r3, [r3, #17]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <ETH_SetMACConfig+0x38>
 8002a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a26:	e000      	b.n	8002a2a <ETH_SetMACConfig+0x3a>
 8002a28:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a2a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	7fdb      	ldrb	r3, [r3, #31]
 8002a36:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a38:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	7f92      	ldrb	r2, [r2, #30]
 8002a44:	2a00      	cmp	r2, #0
 8002a46:	d102      	bne.n	8002a4e <ETH_SetMACConfig+0x5e>
 8002a48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4c:	e000      	b.n	8002a50 <ETH_SetMACConfig+0x60>
 8002a4e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	7f1b      	ldrb	r3, [r3, #28]
 8002a56:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a58:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	791b      	ldrb	r3, [r3, #4]
 8002a64:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a6e:	2a00      	cmp	r2, #0
 8002a70:	d102      	bne.n	8002a78 <ETH_SetMACConfig+0x88>
 8002a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a76:	e000      	b.n	8002a7a <ETH_SetMACConfig+0x8a>
 8002a78:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	7bdb      	ldrb	r3, [r3, #15]
 8002a80:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a82:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a90:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a92:	4313      	orrs	r3, r2
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7ff fba6 	bl	80021fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002ad6:	2a00      	cmp	r2, #0
 8002ad8:	d101      	bne.n	8002ade <ETH_SetMACConfig+0xee>
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	e000      	b.n	8002ae0 <ETH_SetMACConfig+0xf0>
 8002ade:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ae0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ae6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002aee:	2a01      	cmp	r2, #1
 8002af0:	d101      	bne.n	8002af6 <ETH_SetMACConfig+0x106>
 8002af2:	2208      	movs	r2, #8
 8002af4:	e000      	b.n	8002af8 <ETH_SetMACConfig+0x108>
 8002af6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002af8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b00:	2a01      	cmp	r2, #1
 8002b02:	d101      	bne.n	8002b08 <ETH_SetMACConfig+0x118>
 8002b04:	2204      	movs	r2, #4
 8002b06:	e000      	b.n	8002b0a <ETH_SetMACConfig+0x11a>
 8002b08:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b12:	2a01      	cmp	r2, #1
 8002b14:	d101      	bne.n	8002b1a <ETH_SetMACConfig+0x12a>
 8002b16:	2202      	movs	r2, #2
 8002b18:	e000      	b.n	8002b1c <ETH_SetMACConfig+0x12c>
 8002b1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7ff fb61 	bl	80021fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	ff20810f 	.word	0xff20810f

08002b50 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <ETH_SetDMAConfig+0x110>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	7b1b      	ldrb	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <ETH_SetDMAConfig+0x2c>
 8002b76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b7a:	e000      	b.n	8002b7e <ETH_SetDMAConfig+0x2e>
 8002b7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	7b5b      	ldrb	r3, [r3, #13]
 8002b82:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b84:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	7f52      	ldrb	r2, [r2, #29]
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	d102      	bne.n	8002b94 <ETH_SetDMAConfig+0x44>
 8002b8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b92:	e000      	b.n	8002b96 <ETH_SetDMAConfig+0x46>
 8002b94:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	7b9b      	ldrb	r3, [r3, #14]
 8002b9c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b9e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ba4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	7f1b      	ldrb	r3, [r3, #28]
 8002baa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002bac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	7f9b      	ldrb	r3, [r3, #30]
 8002bb2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bb4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7ff fb08 	bl	80021fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	791b      	ldrb	r3, [r3, #4]
 8002bfe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c04:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c0a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c10:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c18:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c1a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c22:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c28:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c36:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7ff fad9 	bl	80021fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	f8de3f23 	.word	0xf8de3f23

08002c64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b0a6      	sub	sp, #152	; 0x98
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ccc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002cd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fe86 	bl	80029f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d18:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d1e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d24:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff08 	bl	8002b50 <ETH_SetDMAConfig>
}
 8002d40:	bf00      	nop
 8002d42:	3798      	adds	r7, #152	; 0x98
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3305      	adds	r3, #5
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	3204      	adds	r2, #4
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <ETH_MACAddressConfig+0x68>)
 8002d6a:	4413      	add	r3, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3303      	adds	r3, #3
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	061a      	lsls	r2, r3, #24
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3301      	adds	r3, #1
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <ETH_MACAddressConfig+0x6c>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6013      	str	r3, [r2, #0]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40028040 	.word	0x40028040
 8002db4:	40028044 	.word	0x40028044

08002db8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e03e      	b.n	8002e44 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2200      	movs	r2, #0
 8002dee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	3206      	adds	r2, #6
 8002df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d80c      	bhi.n	8002e28 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68d9      	ldr	r1, [r3, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	e004      	b.n	8002e32 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d9bd      	bls.n	8002dc6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5c:	611a      	str	r2, [r3, #16]
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e046      	b.n	8002f06 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6919      	ldr	r1, [r3, #16]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2200      	movs	r2, #0
 8002e94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002eb4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002ebc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	3212      	adds	r2, #18
 8002ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d80c      	bhi.n	8002ef6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6919      	ldr	r1, [r3, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	440b      	add	r3, r1
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	60da      	str	r2, [r3, #12]
 8002ef4:	e004      	b.n	8002f00 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d9b5      	bls.n	8002e78 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f36:	60da      	str	r2, [r3, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e177      	b.n	8003250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f040 8166 	bne.w	800324a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d005      	beq.n	8002f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d130      	bne.n	8002ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 0201 	and.w	r2, r3, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b03      	cmp	r3, #3
 8003002:	d017      	beq.n	8003034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d123      	bne.n	8003088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	220f      	movs	r2, #15
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0203 	and.w	r2, r3, #3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80c0 	beq.w	800324a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_GPIO_Init+0x324>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a65      	ldr	r2, [pc, #404]	; (8003268 <HAL_GPIO_Init+0x324>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <HAL_GPIO_Init+0x324>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e6:	4a61      	ldr	r2, [pc, #388]	; (800326c <HAL_GPIO_Init+0x328>)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_GPIO_Init+0x32c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d037      	beq.n	8003182 <HAL_GPIO_Init+0x23e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a57      	ldr	r2, [pc, #348]	; (8003274 <HAL_GPIO_Init+0x330>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_GPIO_Init+0x23a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a56      	ldr	r2, [pc, #344]	; (8003278 <HAL_GPIO_Init+0x334>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02b      	beq.n	800317a <HAL_GPIO_Init+0x236>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a55      	ldr	r2, [pc, #340]	; (800327c <HAL_GPIO_Init+0x338>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d025      	beq.n	8003176 <HAL_GPIO_Init+0x232>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a54      	ldr	r2, [pc, #336]	; (8003280 <HAL_GPIO_Init+0x33c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01f      	beq.n	8003172 <HAL_GPIO_Init+0x22e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a53      	ldr	r2, [pc, #332]	; (8003284 <HAL_GPIO_Init+0x340>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d019      	beq.n	800316e <HAL_GPIO_Init+0x22a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a52      	ldr	r2, [pc, #328]	; (8003288 <HAL_GPIO_Init+0x344>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0x226>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a51      	ldr	r2, [pc, #324]	; (800328c <HAL_GPIO_Init+0x348>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_GPIO_Init+0x222>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_GPIO_Init+0x34c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x21e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4f      	ldr	r2, [pc, #316]	; (8003294 <HAL_GPIO_Init+0x350>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_GPIO_Init+0x21a>
 800315a:	2309      	movs	r3, #9
 800315c:	e012      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800315e:	230a      	movs	r3, #10
 8003160:	e010      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003162:	2308      	movs	r3, #8
 8003164:	e00e      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003166:	2307      	movs	r3, #7
 8003168:	e00c      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800316a:	2306      	movs	r3, #6
 800316c:	e00a      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800316e:	2305      	movs	r3, #5
 8003170:	e008      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003172:	2304      	movs	r3, #4
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003176:	2303      	movs	r3, #3
 8003178:	e004      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800317a:	2302      	movs	r3, #2
 800317c:	e002      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003182:	2300      	movs	r3, #0
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	f002 0203 	and.w	r2, r2, #3
 800318a:	0092      	lsls	r2, r2, #2
 800318c:	4093      	lsls	r3, r2
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003194:	4935      	ldr	r1, [pc, #212]	; (800326c <HAL_GPIO_Init+0x328>)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	3302      	adds	r3, #2
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031cc:	4b32      	ldr	r3, [pc, #200]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031f6:	4b28      	ldr	r3, [pc, #160]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800321a:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_GPIO_Init+0x354>)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_GPIO_Init+0x354>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_GPIO_Init+0x354>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3301      	adds	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b0f      	cmp	r3, #15
 8003254:	f67f ae84 	bls.w	8002f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	40013800 	.word	0x40013800
 8003270:	40020000 	.word	0x40020000
 8003274:	40020400 	.word	0x40020400
 8003278:	40020800 	.word	0x40020800
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40021000 	.word	0x40021000
 8003284:	40021400 	.word	0x40021400
 8003288:	40021800 	.word	0x40021800
 800328c:	40021c00 	.word	0x40021c00
 8003290:	40022000 	.word	0x40022000
 8003294:	40022400 	.word	0x40022400
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	4613      	mov	r3, r2
 80032aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ac:	787b      	ldrb	r3, [r7, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b8:	e003      	b.n	80032c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	041a      	lsls	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	619a      	str	r2, [r3, #24]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e12b      	b.n	800353a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe f8cc 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	; 0x24
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003334:	f001 fd84 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8003338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a81      	ldr	r2, [pc, #516]	; (8003544 <HAL_I2C_Init+0x274>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d807      	bhi.n	8003354 <HAL_I2C_Init+0x84>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a80      	ldr	r2, [pc, #512]	; (8003548 <HAL_I2C_Init+0x278>)
 8003348:	4293      	cmp	r3, r2
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e006      	b.n	8003362 <HAL_I2C_Init+0x92>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a7d      	ldr	r2, [pc, #500]	; (800354c <HAL_I2C_Init+0x27c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0e7      	b.n	800353a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a78      	ldr	r2, [pc, #480]	; (8003550 <HAL_I2C_Init+0x280>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0c9b      	lsrs	r3, r3, #18
 8003374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a6a      	ldr	r2, [pc, #424]	; (8003544 <HAL_I2C_Init+0x274>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d802      	bhi.n	80033a4 <HAL_I2C_Init+0xd4>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3301      	adds	r3, #1
 80033a2:	e009      	b.n	80033b8 <HAL_I2C_Init+0xe8>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	4a69      	ldr	r2, [pc, #420]	; (8003554 <HAL_I2C_Init+0x284>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	3301      	adds	r3, #1
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	430b      	orrs	r3, r1
 80033be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	495c      	ldr	r1, [pc, #368]	; (8003544 <HAL_I2C_Init+0x274>)
 80033d4:	428b      	cmp	r3, r1
 80033d6:	d819      	bhi.n	800340c <HAL_I2C_Init+0x13c>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e59      	subs	r1, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033ec:	400b      	ands	r3, r1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_I2C_Init+0x138>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1e59      	subs	r1, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003400:	3301      	adds	r3, #1
 8003402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003406:	e051      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 8003408:	2304      	movs	r3, #4
 800340a:	e04f      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d111      	bne.n	8003438 <HAL_I2C_Init+0x168>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e012      	b.n	800345e <HAL_I2C_Init+0x18e>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e58      	subs	r0, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	0099      	lsls	r1, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Init+0x196>
 8003462:	2301      	movs	r3, #1
 8003464:	e022      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10e      	bne.n	800348c <HAL_I2C_Init+0x1bc>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e58      	subs	r0, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	440b      	add	r3, r1
 800347c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003480:	3301      	adds	r3, #1
 8003482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348a:	e00f      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	0099      	lsls	r1, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	6809      	ldr	r1, [r1, #0]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6911      	ldr	r1, [r2, #16]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68d2      	ldr	r2, [r2, #12]
 80034e6:	4311      	orrs	r1, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	000186a0 	.word	0x000186a0
 8003548:	001e847f 	.word	0x001e847f
 800354c:	003d08ff 	.word	0x003d08ff
 8003550:	431bde83 	.word	0x431bde83
 8003554:	10624dd3 	.word	0x10624dd3

08003558 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	461a      	mov	r2, r3
 8003564:	460b      	mov	r3, r1
 8003566:	817b      	strh	r3, [r7, #10]
 8003568:	4613      	mov	r3, r2
 800356a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7fe fe3a 	bl	80021e4 <HAL_GetTick>
 8003570:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	f040 80e0 	bne.w	8003740 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2319      	movs	r3, #25
 8003586:	2201      	movs	r2, #1
 8003588:	4970      	ldr	r1, [pc, #448]	; (800374c <HAL_I2C_Master_Transmit+0x1f4>)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fc72 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
 8003598:	e0d3      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_I2C_Master_Transmit+0x50>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0cc      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d007      	beq.n	80035ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2221      	movs	r2, #33	; 0x21
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2210      	movs	r2, #16
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	893a      	ldrh	r2, [r7, #8]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a50      	ldr	r2, [pc, #320]	; (8003750 <HAL_I2C_Master_Transmit+0x1f8>)
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003610:	8979      	ldrh	r1, [r7, #10]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fac2 	bl	8003ba0 <I2C_MasterRequestWrite>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e08d      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800363c:	e066      	b.n	800370c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6a39      	ldr	r1, [r7, #32]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fcec 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d107      	bne.n	8003666 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06b      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_I2C_Master_Transmit+0x188>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d017      	beq.n	80036e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	6a39      	ldr	r1, [r7, #32]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fcdc 	bl	80040a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e01a      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d194      	bne.n	800363e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	00100002 	.word	0x00100002
 8003750:	ffff0000 	.word	0xffff0000

08003754 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4603      	mov	r3, r0
 8003764:	817b      	strh	r3, [r7, #10]
 8003766:	460b      	mov	r3, r1
 8003768:	813b      	strh	r3, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800376e:	f7fe fd39 	bl	80021e4 <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b20      	cmp	r3, #32
 800377e:	f040 8208 	bne.w	8003b92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2319      	movs	r3, #25
 8003788:	2201      	movs	r2, #1
 800378a:	497b      	ldr	r1, [pc, #492]	; (8003978 <HAL_I2C_Mem_Read+0x224>)
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fb71 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
 800379a:	e1fb      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Mem_Read+0x56>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e1f4      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d007      	beq.n	80037d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2222      	movs	r2, #34	; 0x22
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2240      	movs	r2, #64	; 0x40
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a5b      	ldr	r2, [pc, #364]	; (800397c <HAL_I2C_Mem_Read+0x228>)
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003812:	88f8      	ldrh	r0, [r7, #6]
 8003814:	893a      	ldrh	r2, [r7, #8]
 8003816:	8979      	ldrh	r1, [r7, #10]
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4603      	mov	r3, r0
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fa3e 	bl	8003ca4 <I2C_RequestMemoryRead>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1b0      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003836:	2b00      	cmp	r3, #0
 8003838:	d113      	bne.n	8003862 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	623b      	str	r3, [r7, #32]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e184      	b.n	8003b6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	2b01      	cmp	r3, #1
 8003868:	d11b      	bne.n	80038a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e164      	b.n	8003b6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d11b      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	e144      	b.n	8003b6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038f8:	e138      	b.n	8003b6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	2b03      	cmp	r3, #3
 8003900:	f200 80f1 	bhi.w	8003ae6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	2b01      	cmp	r3, #1
 800390a:	d123      	bne.n	8003954 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fc07 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e139      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003952:	e10b      	b.n	8003b6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	2b02      	cmp	r3, #2
 800395a:	d14e      	bne.n	80039fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	2200      	movs	r2, #0
 8003964:	4906      	ldr	r1, [pc, #24]	; (8003980 <HAL_I2C_Mem_Read+0x22c>)
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fa84 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e10e      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
 8003976:	bf00      	nop
 8003978:	00100002 	.word	0x00100002
 800397c:	ffff0000 	.word	0xffff0000
 8003980:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f8:	e0b8      	b.n	8003b6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	2200      	movs	r2, #0
 8003a02:	4966      	ldr	r1, [pc, #408]	; (8003b9c <HAL_I2C_Mem_Read+0x448>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fa35 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0bf      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	494f      	ldr	r1, [pc, #316]	; (8003b9c <HAL_I2C_Mem_Read+0x448>)
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fa07 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e091      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ae4:	e042      	b.n	8003b6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fb1a 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e04c      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d118      	bne.n	8003b6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f aec2 	bne.w	80038fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	00010004 	.word	0x00010004

08003ba0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	460b      	mov	r3, r1
 8003bae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d006      	beq.n	8003bca <I2C_MasterRequestWrite+0x2a>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d003      	beq.n	8003bca <I2C_MasterRequestWrite+0x2a>
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc8:	d108      	bne.n	8003bdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e00b      	b.n	8003bf4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	2b12      	cmp	r3, #18
 8003be2:	d107      	bne.n	8003bf4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f937 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	d103      	bne.n	8003c24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e035      	b.n	8003c94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c30:	d108      	bne.n	8003c44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c32:	897b      	ldrh	r3, [r7, #10]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c40:	611a      	str	r2, [r3, #16]
 8003c42:	e01b      	b.n	8003c7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c44:	897b      	ldrh	r3, [r7, #10]
 8003c46:	11db      	asrs	r3, r3, #7
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 0306 	and.w	r3, r3, #6
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f063 030f 	orn	r3, r3, #15
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <I2C_MasterRequestWrite+0xfc>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f95d 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e010      	b.n	8003c94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4907      	ldr	r1, [pc, #28]	; (8003ca0 <I2C_MasterRequestWrite+0x100>)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f94d 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00010008 	.word	0x00010008
 8003ca0:	00010002 	.word	0x00010002

08003ca4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8c2 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d103      	bne.n	8003d0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0aa      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	4952      	ldr	r1, [pc, #328]	; (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f8fa 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e097      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f964 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e076      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e021      	b.n	8003dd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8c:	893b      	ldrh	r3, [r7, #8]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f93e 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e050      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f923 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d107      	bne.n	8003df8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e035      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f82b 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d103      	bne.n	8003e3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e013      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	4906      	ldr	r1, [pc, #24]	; (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f863 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e84:	e025      	b.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e8c:	d021      	beq.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fe f9a9 	bl	80021e4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d116      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e023      	b.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10d      	bne.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	e00c      	b.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d0b6      	beq.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f30:	e051      	b.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d123      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e046      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f90:	d021      	beq.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fe f927 	bl	80021e4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d116      	bne.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e020      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10c      	bne.n	8003ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e00b      	b.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d18d      	bne.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	e02d      	b.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f8ce 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e02d      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004044:	d021      	beq.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fe f8cd 	bl	80021e4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d116      	bne.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e007      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d1ca      	bne.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ae:	e02d      	b.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f88d 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e02d      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c6:	d021      	beq.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe f88c 	bl	80021e4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d116      	bne.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b04      	cmp	r3, #4
 8004118:	d1ca      	bne.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004130:	e042      	b.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	d119      	bne.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0210 	mvn.w	r2, #16
 8004148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e029      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fe f836 	bl	80021e4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e007      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d1b5      	bne.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d11b      	bne.n	8004220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b20      	cmp	r3, #32
 8004242:	d129      	bne.n	8004298 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0210 	bic.w	r2, r2, #16
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d12a      	bne.n	8004316 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80042e0:	89fb      	ldrh	r3, [r7, #14]
 80042e2:	f023 030f 	bic.w	r3, r3, #15
 80042e6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	89fb      	ldrh	r3, [r7, #14]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	89fa      	ldrh	r2, [r7, #14]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004326:	b08f      	sub	sp, #60	; 0x3c
 8004328:	af0a      	add	r7, sp, #40	; 0x28
 800432a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e10f      	b.n	8004556 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fd fc79 	bl	8001c48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2203      	movs	r2, #3
 800435a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f001 f8ae 	bl	80054d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	687e      	ldr	r6, [r7, #4]
 8004382:	466d      	mov	r5, sp
 8004384:	f106 0410 	add.w	r4, r6, #16
 8004388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800438a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800438c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800438e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004390:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004394:	e885 0003 	stmia.w	r5, {r0, r1}
 8004398:	1d33      	adds	r3, r6, #4
 800439a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800439c:	6838      	ldr	r0, [r7, #0]
 800439e:	f001 f839 	bl	8005414 <USB_CoreInit>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0d0      	b.n	8004556 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 f89c 	bl	80054f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	e04a      	b.n	800445c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	333d      	adds	r3, #61	; 0x3d
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	333c      	adds	r3, #60	; 0x3c
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	b298      	uxth	r0, r3
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3344      	adds	r3, #68	; 0x44
 8004402:	4602      	mov	r2, r0
 8004404:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004406:	7bfa      	ldrb	r2, [r7, #15]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3340      	adds	r3, #64	; 0x40
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	3348      	adds	r3, #72	; 0x48
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	334c      	adds	r3, #76	; 0x4c
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004442:	7bfa      	ldrb	r2, [r7, #15]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3354      	adds	r3, #84	; 0x54
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	3301      	adds	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	429a      	cmp	r2, r3
 8004464:	d3af      	bcc.n	80043c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	e044      	b.n	80044f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	3301      	adds	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d3b5      	bcc.n	800446c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	687e      	ldr	r6, [r7, #4]
 8004508:	466d      	mov	r5, sp
 800450a:	f106 0410 	add.w	r4, r6, #16
 800450e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800451a:	e885 0003 	stmia.w	r5, {r0, r1}
 800451e:	1d33      	adds	r3, r6, #4
 8004520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f001 f834 	bl	8005590 <USB_DevInit>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e00d      	b.n	8004556 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f001 f9ff 	bl	8005952 <USB_DevDisconnect>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e267      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d075      	beq.n	800466a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457e:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b04      	cmp	r3, #4
 8004588:	d00c      	beq.n	80045a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b85      	ldr	r3, [pc, #532]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004592:	2b08      	cmp	r3, #8
 8004594:	d112      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004596:	4b82      	ldr	r3, [pc, #520]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a2:	d10b      	bne.n	80045bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	4b7e      	ldr	r3, [pc, #504]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d05b      	beq.n	8004668 <HAL_RCC_OscConfig+0x108>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d157      	bne.n	8004668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e242      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d106      	bne.n	80045d4 <HAL_RCC_OscConfig+0x74>
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a75      	ldr	r2, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e01d      	b.n	8004610 <HAL_RCC_OscConfig+0xb0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x98>
 80045de:	4b70      	ldr	r3, [pc, #448]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6f      	ldr	r2, [pc, #444]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6c      	ldr	r2, [pc, #432]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e00b      	b.n	8004610 <HAL_RCC_OscConfig+0xb0>
 80045f8:	4b69      	ldr	r3, [pc, #420]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b66      	ldr	r3, [pc, #408]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a65      	ldr	r2, [pc, #404]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800460a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fd fde4 	bl	80021e4 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7fd fde0 	bl	80021e4 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e207      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0xc0>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd fdd0 	bl	80021e4 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004648:	f7fd fdcc 	bl	80021e4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1f3      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	4b51      	ldr	r3, [pc, #324]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0xe8>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d063      	beq.n	800473e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468a:	2b08      	cmp	r3, #8
 800468c:	d11c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b44      	ldr	r3, [pc, #272]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_RCC_OscConfig+0x152>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e1c7      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4937      	ldr	r1, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	e03a      	b.n	800473e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x244>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd fd85 	bl	80021e4 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046de:	f7fd fd81 	bl	80021e4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1a8      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4925      	ldr	r1, [pc, #148]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x244>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd fd64 	bl	80021e4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004720:	f7fd fd60 	bl	80021e4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e187      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d036      	beq.n	80047b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_RCC_OscConfig+0x248>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fd44 	bl	80021e4 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004760:	f7fd fd40 	bl	80021e4 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e167      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_OscConfig+0x240>)
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x200>
 800477e:	e01b      	b.n	80047b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_OscConfig+0x248>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7fd fd2d 	bl	80021e4 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800478c:	e00e      	b.n	80047ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478e:	f7fd fd29 	bl	80021e4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d907      	bls.n	80047ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e150      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
 80047a0:	40023800 	.word	0x40023800
 80047a4:	42470000 	.word	0x42470000
 80047a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ea      	bne.n	800478e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8097 	beq.w	80048f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b7d      	ldr	r3, [pc, #500]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b77      	ldr	r3, [pc, #476]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004802:	4b74      	ldr	r3, [pc, #464]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a73      	ldr	r2, [pc, #460]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fd fce9 	bl	80021e4 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fd fce5 	bl	80021e4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e10c      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_OscConfig+0x474>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x2ea>
 800483c:	4b64      	ldr	r3, [pc, #400]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a63      	ldr	r2, [pc, #396]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e01c      	b.n	8004884 <HAL_RCC_OscConfig+0x324>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x30c>
 8004852:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	4b5c      	ldr	r3, [pc, #368]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a5b      	ldr	r2, [pc, #364]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0x324>
 800486c:	4b58      	ldr	r3, [pc, #352]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
 8004878:	4b55      	ldr	r3, [pc, #340]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd fcaa 	bl	80021e4 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fd fca6 	bl	80021e4 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0cb      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048aa:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ee      	beq.n	8004894 <HAL_RCC_OscConfig+0x334>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b8:	f7fd fc94 	bl	80021e4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fd fc90 	bl	80021e4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0b5      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ee      	bne.n	80048c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80048ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80a1 	beq.w	8004a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048fe:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b08      	cmp	r3, #8
 8004908:	d05c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d141      	bne.n	8004996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fd fc64 	bl	80021e4 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd fc60 	bl	80021e4 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e087      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	491b      	ldr	r1, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004968:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7fd fc39 	bl	80021e4 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004976:	f7fd fc35 	bl	80021e4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e05c      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x416>
 8004994:	e054      	b.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <HAL_RCC_OscConfig+0x478>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fd fc22 	bl	80021e4 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fd fc1e 	bl	80021e4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e045      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_OscConfig+0x470>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x444>
 80049c2:	e03d      	b.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e038      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40007000 	.word	0x40007000
 80049d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCC_OscConfig+0x4ec>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d028      	beq.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d121      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d11a      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d111      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	3b01      	subs	r3, #1
 8004a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800

08004a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cc      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b68      	ldr	r3, [pc, #416]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d90c      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0b8      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa4:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a52      	ldr	r2, [pc, #328]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac8:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	494d      	ldr	r1, [pc, #308]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d044      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d119      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e07f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e06f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e067      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 0203 	bic.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4934      	ldr	r1, [pc, #208]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b40:	f7fd fb50 	bl	80021e4 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b48:	f7fd fb4c 	bl	80021e4 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5e:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 020c 	and.w	r2, r3, #12
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1eb      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d20c      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e032      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4916      	ldr	r1, [pc, #88]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	490e      	ldr	r1, [pc, #56]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bd6:	f000 f821 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	490a      	ldr	r1, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	5ccb      	ldrb	r3, [r1, r3]
 8004bea:	fa22 f303 	lsr.w	r3, r2, r3
 8004bee:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fd fab0 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023c00 	.word	0x40023c00
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	0800879c 	.word	0x0800879c
 8004c14:	20000000 	.word	0x20000000
 8004c18:	20000004 	.word	0x20000004

08004c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c20:	b094      	sub	sp, #80	; 0x50
 8004c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	647b      	str	r3, [r7, #68]	; 0x44
 8004c28:	2300      	movs	r3, #0
 8004c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c34:	4b79      	ldr	r3, [pc, #484]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d00d      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0x40>
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	f200 80e1 	bhi.w	8004e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x34>
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c4e:	e0db      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c50:	4b73      	ldr	r3, [pc, #460]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c54:	e0db      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c56:	4b73      	ldr	r3, [pc, #460]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c5a:	e0d8      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c5c:	4b6f      	ldr	r3, [pc, #444]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c66:	4b6d      	ldr	r3, [pc, #436]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d063      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c72:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	2200      	movs	r2, #0
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
 8004c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c8e:	4622      	mov	r2, r4
 8004c90:	462b      	mov	r3, r5
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	0159      	lsls	r1, r3, #5
 8004c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca0:	0150      	lsls	r0, r2, #5
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	1a51      	subs	r1, r2, r1
 8004caa:	6139      	str	r1, [r7, #16]
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	018b      	lsls	r3, r1, #6
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cca:	4651      	mov	r1, sl
 8004ccc:	018a      	lsls	r2, r1, #6
 8004cce:	4651      	mov	r1, sl
 8004cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	eb18 0303 	adds.w	r3, r8, r3
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	eb49 0303 	adc.w	r3, r9, r3
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d0e:	4629      	mov	r1, r5
 8004d10:	024b      	lsls	r3, r1, #9
 8004d12:	4621      	mov	r1, r4
 8004d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d18:	4621      	mov	r1, r4
 8004d1a:	024a      	lsls	r2, r1, #9
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d22:	2200      	movs	r2, #0
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2c:	f7fb ff9c 	bl	8000c68 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4613      	mov	r3, r2
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	e058      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	2200      	movs	r2, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	4611      	mov	r1, r2
 8004d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	f04f 0000 	mov.w	r0, #0
 8004d5c:	f04f 0100 	mov.w	r1, #0
 8004d60:	0159      	lsls	r1, r3, #5
 8004d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d66:	0150      	lsls	r0, r2, #5
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d72:	4649      	mov	r1, r9
 8004d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d90:	eb63 050b 	sbc.w	r5, r3, fp
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	00eb      	lsls	r3, r5, #3
 8004d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da2:	00e2      	lsls	r2, r4, #3
 8004da4:	4614      	mov	r4, r2
 8004da6:	461d      	mov	r5, r3
 8004da8:	4643      	mov	r3, r8
 8004daa:	18e3      	adds	r3, r4, r3
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	464b      	mov	r3, r9
 8004db0:	eb45 0303 	adc.w	r3, r5, r3
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	028b      	lsls	r3, r1, #10
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dcc:	4621      	mov	r1, r4
 8004dce:	028a      	lsls	r2, r1, #10
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	61fa      	str	r2, [r7, #28]
 8004ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de0:	f7fb ff42 	bl	8000c68 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3750      	adds	r7, #80	; 0x50
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	007a1200 	.word	0x007a1200

08004e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000000 	.word	0x20000000

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e44:	f7ff fff0 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0a9b      	lsrs	r3, r3, #10
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	080087ac 	.word	0x080087ac

08004e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e6c:	f7ff ffdc 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0b5b      	lsrs	r3, r3, #13
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4903      	ldr	r1, [pc, #12]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	080087ac 	.word	0x080087ac

08004e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e03f      	b.n	8004f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fc fe50 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2224      	movs	r2, #36	; 0x24
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f829 	bl	8004f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f30:	b0c0      	sub	sp, #256	; 0x100
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	68d9      	ldr	r1, [r3, #12]
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	ea40 0301 	orr.w	r3, r0, r1
 8004f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f84:	f021 010c 	bic.w	r1, r1, #12
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f92:	430b      	orrs	r3, r1
 8004f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	6999      	ldr	r1, [r3, #24]
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	ea40 0301 	orr.w	r3, r0, r1
 8004fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b8f      	ldr	r3, [pc, #572]	; (80051f8 <UART_SetConfig+0x2cc>)
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d005      	beq.n	8004fcc <UART_SetConfig+0xa0>
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b8d      	ldr	r3, [pc, #564]	; (80051fc <UART_SetConfig+0x2d0>)
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d104      	bne.n	8004fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fcc:	f7ff ff4c 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 8004fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fd4:	e003      	b.n	8004fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fd6:	f7ff ff33 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8004fda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe8:	f040 810c 	bne.w	8005204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	1891      	adds	r1, r2, r2
 8005004:	65b9      	str	r1, [r7, #88]	; 0x58
 8005006:	415b      	adcs	r3, r3
 8005008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800500a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800500e:	4621      	mov	r1, r4
 8005010:	eb12 0801 	adds.w	r8, r2, r1
 8005014:	4629      	mov	r1, r5
 8005016:	eb43 0901 	adc.w	r9, r3, r1
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800502a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502e:	4690      	mov	r8, r2
 8005030:	4699      	mov	r9, r3
 8005032:	4623      	mov	r3, r4
 8005034:	eb18 0303 	adds.w	r3, r8, r3
 8005038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800503c:	462b      	mov	r3, r5
 800503e:	eb49 0303 	adc.w	r3, r9, r3
 8005042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005052:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800505a:	460b      	mov	r3, r1
 800505c:	18db      	adds	r3, r3, r3
 800505e:	653b      	str	r3, [r7, #80]	; 0x50
 8005060:	4613      	mov	r3, r2
 8005062:	eb42 0303 	adc.w	r3, r2, r3
 8005066:	657b      	str	r3, [r7, #84]	; 0x54
 8005068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800506c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005070:	f7fb fdfa 	bl	8000c68 <__aeabi_uldivmod>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4b61      	ldr	r3, [pc, #388]	; (8005200 <UART_SetConfig+0x2d4>)
 800507a:	fba3 2302 	umull	r2, r3, r3, r2
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	011c      	lsls	r4, r3, #4
 8005082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005086:	2200      	movs	r2, #0
 8005088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800508c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005094:	4642      	mov	r2, r8
 8005096:	464b      	mov	r3, r9
 8005098:	1891      	adds	r1, r2, r2
 800509a:	64b9      	str	r1, [r7, #72]	; 0x48
 800509c:	415b      	adcs	r3, r3
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050a4:	4641      	mov	r1, r8
 80050a6:	eb12 0a01 	adds.w	sl, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb43 0b01 	adc.w	fp, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c4:	4692      	mov	sl, r2
 80050c6:	469b      	mov	fp, r3
 80050c8:	4643      	mov	r3, r8
 80050ca:	eb1a 0303 	adds.w	r3, sl, r3
 80050ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050d2:	464b      	mov	r3, r9
 80050d4:	eb4b 0303 	adc.w	r3, fp, r3
 80050d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050f0:	460b      	mov	r3, r1
 80050f2:	18db      	adds	r3, r3, r3
 80050f4:	643b      	str	r3, [r7, #64]	; 0x40
 80050f6:	4613      	mov	r3, r2
 80050f8:	eb42 0303 	adc.w	r3, r2, r3
 80050fc:	647b      	str	r3, [r7, #68]	; 0x44
 80050fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005106:	f7fb fdaf 	bl	8000c68 <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4611      	mov	r1, r2
 8005110:	4b3b      	ldr	r3, [pc, #236]	; (8005200 <UART_SetConfig+0x2d4>)
 8005112:	fba3 2301 	umull	r2, r3, r3, r1
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	2264      	movs	r2, #100	; 0x64
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	1acb      	subs	r3, r1, r3
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005126:	4b36      	ldr	r3, [pc, #216]	; (8005200 <UART_SetConfig+0x2d4>)
 8005128:	fba3 2302 	umull	r2, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005134:	441c      	add	r4, r3
 8005136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005140:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005148:	4642      	mov	r2, r8
 800514a:	464b      	mov	r3, r9
 800514c:	1891      	adds	r1, r2, r2
 800514e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005150:	415b      	adcs	r3, r3
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005158:	4641      	mov	r1, r8
 800515a:	1851      	adds	r1, r2, r1
 800515c:	6339      	str	r1, [r7, #48]	; 0x30
 800515e:	4649      	mov	r1, r9
 8005160:	414b      	adcs	r3, r1
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005170:	4659      	mov	r1, fp
 8005172:	00cb      	lsls	r3, r1, #3
 8005174:	4651      	mov	r1, sl
 8005176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517a:	4651      	mov	r1, sl
 800517c:	00ca      	lsls	r2, r1, #3
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	4603      	mov	r3, r0
 8005184:	4642      	mov	r2, r8
 8005186:	189b      	adds	r3, r3, r2
 8005188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800518c:	464b      	mov	r3, r9
 800518e:	460a      	mov	r2, r1
 8005190:	eb42 0303 	adc.w	r3, r2, r3
 8005194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051ac:	460b      	mov	r3, r1
 80051ae:	18db      	adds	r3, r3, r3
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b2:	4613      	mov	r3, r2
 80051b4:	eb42 0303 	adc.w	r3, r2, r3
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051c2:	f7fb fd51 	bl	8000c68 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <UART_SetConfig+0x2d4>)
 80051cc:	fba3 1302 	umull	r1, r3, r3, r2
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	2164      	movs	r1, #100	; 0x64
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	3332      	adds	r3, #50	; 0x32
 80051de:	4a08      	ldr	r2, [pc, #32]	; (8005200 <UART_SetConfig+0x2d4>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	f003 0207 	and.w	r2, r3, #7
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4422      	add	r2, r4
 80051f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051f4:	e106      	b.n	8005404 <UART_SetConfig+0x4d8>
 80051f6:	bf00      	nop
 80051f8:	40011000 	.word	0x40011000
 80051fc:	40011400 	.word	0x40011400
 8005200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005208:	2200      	movs	r2, #0
 800520a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800520e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005216:	4642      	mov	r2, r8
 8005218:	464b      	mov	r3, r9
 800521a:	1891      	adds	r1, r2, r2
 800521c:	6239      	str	r1, [r7, #32]
 800521e:	415b      	adcs	r3, r3
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005226:	4641      	mov	r1, r8
 8005228:	1854      	adds	r4, r2, r1
 800522a:	4649      	mov	r1, r9
 800522c:	eb43 0501 	adc.w	r5, r3, r1
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	00eb      	lsls	r3, r5, #3
 800523a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800523e:	00e2      	lsls	r2, r4, #3
 8005240:	4614      	mov	r4, r2
 8005242:	461d      	mov	r5, r3
 8005244:	4643      	mov	r3, r8
 8005246:	18e3      	adds	r3, r4, r3
 8005248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800524c:	464b      	mov	r3, r9
 800524e:	eb45 0303 	adc.w	r3, r5, r3
 8005252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005262:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005272:	4629      	mov	r1, r5
 8005274:	008b      	lsls	r3, r1, #2
 8005276:	4621      	mov	r1, r4
 8005278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527c:	4621      	mov	r1, r4
 800527e:	008a      	lsls	r2, r1, #2
 8005280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005284:	f7fb fcf0 	bl	8000c68 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4b60      	ldr	r3, [pc, #384]	; (8005410 <UART_SetConfig+0x4e4>)
 800528e:	fba3 2302 	umull	r2, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	011c      	lsls	r4, r3, #4
 8005296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	1891      	adds	r1, r2, r2
 80052ae:	61b9      	str	r1, [r7, #24]
 80052b0:	415b      	adcs	r3, r3
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b8:	4641      	mov	r1, r8
 80052ba:	1851      	adds	r1, r2, r1
 80052bc:	6139      	str	r1, [r7, #16]
 80052be:	4649      	mov	r1, r9
 80052c0:	414b      	adcs	r3, r1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052d0:	4659      	mov	r1, fp
 80052d2:	00cb      	lsls	r3, r1, #3
 80052d4:	4651      	mov	r1, sl
 80052d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052da:	4651      	mov	r1, sl
 80052dc:	00ca      	lsls	r2, r1, #3
 80052de:	4610      	mov	r0, r2
 80052e0:	4619      	mov	r1, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	4642      	mov	r2, r8
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052ec:	464b      	mov	r3, r9
 80052ee:	460a      	mov	r2, r1
 80052f0:	eb42 0303 	adc.w	r3, r2, r3
 80052f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	67bb      	str	r3, [r7, #120]	; 0x78
 8005302:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005310:	4649      	mov	r1, r9
 8005312:	008b      	lsls	r3, r1, #2
 8005314:	4641      	mov	r1, r8
 8005316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800531a:	4641      	mov	r1, r8
 800531c:	008a      	lsls	r2, r1, #2
 800531e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005322:	f7fb fca1 	bl	8000c68 <__aeabi_uldivmod>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4611      	mov	r1, r2
 800532c:	4b38      	ldr	r3, [pc, #224]	; (8005410 <UART_SetConfig+0x4e4>)
 800532e:	fba3 2301 	umull	r2, r3, r3, r1
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2264      	movs	r2, #100	; 0x64
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	1acb      	subs	r3, r1, r3
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	3332      	adds	r3, #50	; 0x32
 8005340:	4a33      	ldr	r2, [pc, #204]	; (8005410 <UART_SetConfig+0x4e4>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800534c:	441c      	add	r4, r3
 800534e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005352:	2200      	movs	r2, #0
 8005354:	673b      	str	r3, [r7, #112]	; 0x70
 8005356:	677a      	str	r2, [r7, #116]	; 0x74
 8005358:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	415b      	adcs	r3, r3
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800536c:	4641      	mov	r1, r8
 800536e:	1851      	adds	r1, r2, r1
 8005370:	6039      	str	r1, [r7, #0]
 8005372:	4649      	mov	r1, r9
 8005374:	414b      	adcs	r3, r1
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005384:	4659      	mov	r1, fp
 8005386:	00cb      	lsls	r3, r1, #3
 8005388:	4651      	mov	r1, sl
 800538a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538e:	4651      	mov	r1, sl
 8005390:	00ca      	lsls	r2, r1, #3
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	4603      	mov	r3, r0
 8005398:	4642      	mov	r2, r8
 800539a:	189b      	adds	r3, r3, r2
 800539c:	66bb      	str	r3, [r7, #104]	; 0x68
 800539e:	464b      	mov	r3, r9
 80053a0:	460a      	mov	r2, r1
 80053a2:	eb42 0303 	adc.w	r3, r2, r3
 80053a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	663b      	str	r3, [r7, #96]	; 0x60
 80053b2:	667a      	str	r2, [r7, #100]	; 0x64
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053c0:	4649      	mov	r1, r9
 80053c2:	008b      	lsls	r3, r1, #2
 80053c4:	4641      	mov	r1, r8
 80053c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ca:	4641      	mov	r1, r8
 80053cc:	008a      	lsls	r2, r1, #2
 80053ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053d2:	f7fb fc49 	bl	8000c68 <__aeabi_uldivmod>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <UART_SetConfig+0x4e4>)
 80053dc:	fba3 1302 	umull	r1, r3, r3, r2
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	2164      	movs	r1, #100	; 0x64
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	3332      	adds	r3, #50	; 0x32
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <UART_SetConfig+0x4e4>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f003 020f 	and.w	r2, r3, #15
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4422      	add	r2, r4
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800540a:	46bd      	mov	sp, r7
 800540c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005410:	51eb851f 	.word	0x51eb851f

08005414 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005414:	b084      	sub	sp, #16
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	f107 001c 	add.w	r0, r7, #28
 8005422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	2b01      	cmp	r3, #1
 800542a:	d122      	bne.n	8005472 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d105      	bne.n	8005466 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 faa2 	bl	80059b0 <USB_CoreReset>
 800546c:	4603      	mov	r3, r0
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e01a      	b.n	80054a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa96 	bl	80059b0 <USB_CoreReset>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
 800549a:	e005      	b.n	80054a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d10b      	bne.n	80054c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f043 0206 	orr.w	r2, r3, #6
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d2:	b004      	add	sp, #16
 80054d4:	4770      	bx	lr

080054d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f023 0201 	bic.w	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d115      	bne.n	8005546 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005526:	2001      	movs	r0, #1
 8005528:	f7fc fe68 	bl	80021fc <HAL_Delay>
      ms++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa2e 	bl	8005994 <USB_GetMode>
 8005538:	4603      	mov	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d01e      	beq.n	800557c <USB_SetCurrentMode+0x84>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b31      	cmp	r3, #49	; 0x31
 8005542:	d9f0      	bls.n	8005526 <USB_SetCurrentMode+0x2e>
 8005544:	e01a      	b.n	800557c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d115      	bne.n	8005578 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005558:	2001      	movs	r0, #1
 800555a:	f7fc fe4f 	bl	80021fc <HAL_Delay>
      ms++;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fa15 	bl	8005994 <USB_GetMode>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <USB_SetCurrentMode+0x84>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b31      	cmp	r3, #49	; 0x31
 8005574:	d9f0      	bls.n	8005558 <USB_SetCurrentMode+0x60>
 8005576:	e001      	b.n	800557c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e005      	b.n	8005588 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b32      	cmp	r3, #50	; 0x32
 8005580:	d101      	bne.n	8005586 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005590:	b084      	sub	sp, #16
 8005592:	b580      	push	{r7, lr}
 8005594:	b086      	sub	sp, #24
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800559e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	e009      	b.n	80055c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3340      	adds	r3, #64	; 0x40
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3301      	adds	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b0e      	cmp	r3, #14
 80055c8:	d9f2      	bls.n	80055b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d11c      	bne.n	800560a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055de:	f043 0302 	orr.w	r3, r3, #2
 80055e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
 8005608:	e00b      	b.n	8005622 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005628:	461a      	mov	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005634:	4619      	mov	r1, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563c:	461a      	mov	r2, r3
 800563e:	680b      	ldr	r3, [r1, #0]
 8005640:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b01      	cmp	r3, #1
 8005646:	d10c      	bne.n	8005662 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800564e:	2100      	movs	r1, #0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f965 	bl	8005920 <USB_SetDevSpeed>
 8005656:	e008      	b.n	800566a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005658:	2101      	movs	r1, #1
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f960 	bl	8005920 <USB_SetDevSpeed>
 8005660:	e003      	b.n	800566a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005662:	2103      	movs	r1, #3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f95b 	bl	8005920 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800566a:	2110      	movs	r1, #16
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8f3 	bl	8005858 <USB_FlushTxFifo>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f91f 	bl	80058c0 <USB_FlushRxFifo>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005692:	461a      	mov	r2, r3
 8005694:	2300      	movs	r3, #0
 8005696:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	461a      	mov	r2, r3
 80056a0:	2300      	movs	r3, #0
 80056a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	461a      	mov	r2, r3
 80056ac:	2300      	movs	r3, #0
 80056ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	e043      	b.n	800573e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056cc:	d118      	bne.n	8005700 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	461a      	mov	r2, r3
 80056e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e013      	b.n	8005712 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f6:	461a      	mov	r2, r3
 80056f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e008      	b.n	8005712 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	461a      	mov	r2, r3
 800570e:	2300      	movs	r3, #0
 8005710:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571e:	461a      	mov	r2, r3
 8005720:	2300      	movs	r3, #0
 8005722:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	461a      	mov	r2, r3
 8005732:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005736:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	3301      	adds	r3, #1
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	d3b7      	bcc.n	80056b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e043      	b.n	80057d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005762:	d118      	bne.n	8005796 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	461a      	mov	r2, r3
 8005778:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e013      	b.n	80057a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	461a      	mov	r2, r3
 800578e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e008      	b.n	80057a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	461a      	mov	r2, r3
 80057a4:	2300      	movs	r3, #0
 80057a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c6:	461a      	mov	r2, r3
 80057c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	3301      	adds	r3, #1
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d3b7      	bcc.n	800574c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f043 0210 	orr.w	r2, r3, #16
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <USB_DevInit+0x2c4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f043 0208 	orr.w	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800582e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d107      	bne.n	8005844 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800583c:	f043 0304 	orr.w	r3, r3, #4
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005844:	7dfb      	ldrb	r3, [r7, #23]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005850:	b004      	add	sp, #16
 8005852:	4770      	bx	lr
 8005854:	803c3800 	.word	0x803c3800

08005858 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a13      	ldr	r2, [pc, #76]	; (80058bc <USB_FlushTxFifo+0x64>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e01b      	b.n	80058b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	daf2      	bge.n	8005866 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	019b      	lsls	r3, r3, #6
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a08      	ldr	r2, [pc, #32]	; (80058bc <USB_FlushTxFifo+0x64>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e006      	b.n	80058b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d0f0      	beq.n	8005890 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	00030d40 	.word	0x00030d40

080058c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4a11      	ldr	r2, [pc, #68]	; (800591c <USB_FlushRxFifo+0x5c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e018      	b.n	8005910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	daf2      	bge.n	80058cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2210      	movs	r2, #16
 80058ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a08      	ldr	r2, [pc, #32]	; (800591c <USB_FlushRxFifo+0x5c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e006      	b.n	8005910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d0f0      	beq.n	80058f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	00030d40 	.word	0x00030d40

08005920 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800596c:	f023 0303 	bic.w	r3, r3, #3
 8005970:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005980:	f043 0302 	orr.w	r3, r3, #2
 8005984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f003 0301 	and.w	r3, r3, #1
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3301      	adds	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4a13      	ldr	r2, [pc, #76]	; (8005a14 <USB_CoreReset+0x64>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e01b      	b.n	8005a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	daf2      	bge.n	80059bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f043 0201 	orr.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <USB_CoreReset+0x64>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d0f0      	beq.n	80059e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	00030d40 	.word	0x00030d40

08005a18 <__cvt>:
 8005a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1c:	ec55 4b10 	vmov	r4, r5, d0
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	460e      	mov	r6, r1
 8005a24:	4619      	mov	r1, r3
 8005a26:	462b      	mov	r3, r5
 8005a28:	bfbb      	ittet	lt
 8005a2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a2e:	461d      	movlt	r5, r3
 8005a30:	2300      	movge	r3, #0
 8005a32:	232d      	movlt	r3, #45	; 0x2d
 8005a34:	700b      	strb	r3, [r1, #0]
 8005a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a3c:	4691      	mov	r9, r2
 8005a3e:	f023 0820 	bic.w	r8, r3, #32
 8005a42:	bfbc      	itt	lt
 8005a44:	4622      	movlt	r2, r4
 8005a46:	4614      	movlt	r4, r2
 8005a48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a4c:	d005      	beq.n	8005a5a <__cvt+0x42>
 8005a4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a52:	d100      	bne.n	8005a56 <__cvt+0x3e>
 8005a54:	3601      	adds	r6, #1
 8005a56:	2102      	movs	r1, #2
 8005a58:	e000      	b.n	8005a5c <__cvt+0x44>
 8005a5a:	2103      	movs	r1, #3
 8005a5c:	ab03      	add	r3, sp, #12
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	ab02      	add	r3, sp, #8
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	ec45 4b10 	vmov	d0, r4, r5
 8005a68:	4653      	mov	r3, sl
 8005a6a:	4632      	mov	r2, r6
 8005a6c:	f000 fe68 	bl	8006740 <_dtoa_r>
 8005a70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a74:	4607      	mov	r7, r0
 8005a76:	d102      	bne.n	8005a7e <__cvt+0x66>
 8005a78:	f019 0f01 	tst.w	r9, #1
 8005a7c:	d022      	beq.n	8005ac4 <__cvt+0xac>
 8005a7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a82:	eb07 0906 	add.w	r9, r7, r6
 8005a86:	d110      	bne.n	8005aaa <__cvt+0x92>
 8005a88:	783b      	ldrb	r3, [r7, #0]
 8005a8a:	2b30      	cmp	r3, #48	; 0x30
 8005a8c:	d10a      	bne.n	8005aa4 <__cvt+0x8c>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2300      	movs	r3, #0
 8005a92:	4620      	mov	r0, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	f7fb f827 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a9a:	b918      	cbnz	r0, 8005aa4 <__cvt+0x8c>
 8005a9c:	f1c6 0601 	rsb	r6, r6, #1
 8005aa0:	f8ca 6000 	str.w	r6, [sl]
 8005aa4:	f8da 3000 	ldr.w	r3, [sl]
 8005aa8:	4499      	add	r9, r3
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2300      	movs	r3, #0
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7fb f819 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ab6:	b108      	cbz	r0, 8005abc <__cvt+0xa4>
 8005ab8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005abc:	2230      	movs	r2, #48	; 0x30
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	454b      	cmp	r3, r9
 8005ac2:	d307      	bcc.n	8005ad4 <__cvt+0xbc>
 8005ac4:	9b03      	ldr	r3, [sp, #12]
 8005ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ac8:	1bdb      	subs	r3, r3, r7
 8005aca:	4638      	mov	r0, r7
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	b004      	add	sp, #16
 8005ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad4:	1c59      	adds	r1, r3, #1
 8005ad6:	9103      	str	r1, [sp, #12]
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	e7f0      	b.n	8005abe <__cvt+0xa6>

08005adc <__exponent>:
 8005adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	bfb8      	it	lt
 8005ae4:	4249      	neglt	r1, r1
 8005ae6:	f803 2b02 	strb.w	r2, [r3], #2
 8005aea:	bfb4      	ite	lt
 8005aec:	222d      	movlt	r2, #45	; 0x2d
 8005aee:	222b      	movge	r2, #43	; 0x2b
 8005af0:	2909      	cmp	r1, #9
 8005af2:	7042      	strb	r2, [r0, #1]
 8005af4:	dd2a      	ble.n	8005b4c <__exponent+0x70>
 8005af6:	f10d 0207 	add.w	r2, sp, #7
 8005afa:	4617      	mov	r7, r2
 8005afc:	260a      	movs	r6, #10
 8005afe:	4694      	mov	ip, r2
 8005b00:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b04:	fb06 1415 	mls	r4, r6, r5, r1
 8005b08:	3430      	adds	r4, #48	; 0x30
 8005b0a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b0e:	460c      	mov	r4, r1
 8005b10:	2c63      	cmp	r4, #99	; 0x63
 8005b12:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005b16:	4629      	mov	r1, r5
 8005b18:	dcf1      	bgt.n	8005afe <__exponent+0x22>
 8005b1a:	3130      	adds	r1, #48	; 0x30
 8005b1c:	f1ac 0402 	sub.w	r4, ip, #2
 8005b20:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b24:	1c41      	adds	r1, r0, #1
 8005b26:	4622      	mov	r2, r4
 8005b28:	42ba      	cmp	r2, r7
 8005b2a:	d30a      	bcc.n	8005b42 <__exponent+0x66>
 8005b2c:	f10d 0209 	add.w	r2, sp, #9
 8005b30:	eba2 020c 	sub.w	r2, r2, ip
 8005b34:	42bc      	cmp	r4, r7
 8005b36:	bf88      	it	hi
 8005b38:	2200      	movhi	r2, #0
 8005b3a:	4413      	add	r3, r2
 8005b3c:	1a18      	subs	r0, r3, r0
 8005b3e:	b003      	add	sp, #12
 8005b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b42:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b46:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005b4a:	e7ed      	b.n	8005b28 <__exponent+0x4c>
 8005b4c:	2330      	movs	r3, #48	; 0x30
 8005b4e:	3130      	adds	r1, #48	; 0x30
 8005b50:	7083      	strb	r3, [r0, #2]
 8005b52:	70c1      	strb	r1, [r0, #3]
 8005b54:	1d03      	adds	r3, r0, #4
 8005b56:	e7f1      	b.n	8005b3c <__exponent+0x60>

08005b58 <_printf_float>:
 8005b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	ed2d 8b02 	vpush	{d8}
 8005b60:	b08d      	sub	sp, #52	; 0x34
 8005b62:	460c      	mov	r4, r1
 8005b64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b68:	4616      	mov	r6, r2
 8005b6a:	461f      	mov	r7, r3
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	f000 fce7 	bl	8006540 <_localeconv_r>
 8005b72:	f8d0 a000 	ldr.w	sl, [r0]
 8005b76:	4650      	mov	r0, sl
 8005b78:	f7fa fb8a 	bl	8000290 <strlen>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	9305      	str	r3, [sp, #20]
 8005b84:	f8d8 3000 	ldr.w	r3, [r8]
 8005b88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b8c:	3307      	adds	r3, #7
 8005b8e:	f023 0307 	bic.w	r3, r3, #7
 8005b92:	f103 0208 	add.w	r2, r3, #8
 8005b96:	f8c8 2000 	str.w	r2, [r8]
 8005b9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ba2:	9307      	str	r3, [sp, #28]
 8005ba4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ba8:	ee08 0a10 	vmov	s16, r0
 8005bac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005bb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bb4:	4b9e      	ldr	r3, [pc, #632]	; (8005e30 <_printf_float+0x2d8>)
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bba:	f7fa ffc7 	bl	8000b4c <__aeabi_dcmpun>
 8005bbe:	bb88      	cbnz	r0, 8005c24 <_printf_float+0xcc>
 8005bc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc4:	4b9a      	ldr	r3, [pc, #616]	; (8005e30 <_printf_float+0x2d8>)
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bca:	f7fa ffa1 	bl	8000b10 <__aeabi_dcmple>
 8005bce:	bb48      	cbnz	r0, 8005c24 <_printf_float+0xcc>
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	f7fa ff90 	bl	8000afc <__aeabi_dcmplt>
 8005bdc:	b110      	cbz	r0, 8005be4 <_printf_float+0x8c>
 8005bde:	232d      	movs	r3, #45	; 0x2d
 8005be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be4:	4a93      	ldr	r2, [pc, #588]	; (8005e34 <_printf_float+0x2dc>)
 8005be6:	4b94      	ldr	r3, [pc, #592]	; (8005e38 <_printf_float+0x2e0>)
 8005be8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bec:	bf94      	ite	ls
 8005bee:	4690      	movls	r8, r2
 8005bf0:	4698      	movhi	r8, r3
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	6123      	str	r3, [r4, #16]
 8005bf6:	9b05      	ldr	r3, [sp, #20]
 8005bf8:	f023 0304 	bic.w	r3, r3, #4
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	f04f 0900 	mov.w	r9, #0
 8005c02:	9700      	str	r7, [sp, #0]
 8005c04:	4633      	mov	r3, r6
 8005c06:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 f9da 	bl	8005fc4 <_printf_common>
 8005c10:	3001      	adds	r0, #1
 8005c12:	f040 8090 	bne.w	8005d36 <_printf_float+0x1de>
 8005c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c1a:	b00d      	add	sp, #52	; 0x34
 8005c1c:	ecbd 8b02 	vpop	{d8}
 8005c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	f7fa ff8e 	bl	8000b4c <__aeabi_dcmpun>
 8005c30:	b140      	cbz	r0, 8005c44 <_printf_float+0xec>
 8005c32:	464b      	mov	r3, r9
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfbc      	itt	lt
 8005c38:	232d      	movlt	r3, #45	; 0x2d
 8005c3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c3e:	4a7f      	ldr	r2, [pc, #508]	; (8005e3c <_printf_float+0x2e4>)
 8005c40:	4b7f      	ldr	r3, [pc, #508]	; (8005e40 <_printf_float+0x2e8>)
 8005c42:	e7d1      	b.n	8005be8 <_printf_float+0x90>
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c4a:	9206      	str	r2, [sp, #24]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	d13f      	bne.n	8005cd0 <_printf_float+0x178>
 8005c50:	2306      	movs	r3, #6
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	9b05      	ldr	r3, [sp, #20]
 8005c56:	6861      	ldr	r1, [r4, #4]
 8005c58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	ab0a      	add	r3, sp, #40	; 0x28
 8005c62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c66:	ab09      	add	r3, sp, #36	; 0x24
 8005c68:	ec49 8b10 	vmov	d0, r8, r9
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6022      	str	r2, [r4, #0]
 8005c70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c74:	4628      	mov	r0, r5
 8005c76:	f7ff fecf 	bl	8005a18 <__cvt>
 8005c7a:	9b06      	ldr	r3, [sp, #24]
 8005c7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c7e:	2b47      	cmp	r3, #71	; 0x47
 8005c80:	4680      	mov	r8, r0
 8005c82:	d108      	bne.n	8005c96 <_printf_float+0x13e>
 8005c84:	1cc8      	adds	r0, r1, #3
 8005c86:	db02      	blt.n	8005c8e <_printf_float+0x136>
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	dd41      	ble.n	8005d12 <_printf_float+0x1ba>
 8005c8e:	f1ab 0302 	sub.w	r3, fp, #2
 8005c92:	fa5f fb83 	uxtb.w	fp, r3
 8005c96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c9a:	d820      	bhi.n	8005cde <_printf_float+0x186>
 8005c9c:	3901      	subs	r1, #1
 8005c9e:	465a      	mov	r2, fp
 8005ca0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ca4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ca6:	f7ff ff19 	bl	8005adc <__exponent>
 8005caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cac:	1813      	adds	r3, r2, r0
 8005cae:	2a01      	cmp	r2, #1
 8005cb0:	4681      	mov	r9, r0
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	dc02      	bgt.n	8005cbc <_printf_float+0x164>
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	07d2      	lsls	r2, r2, #31
 8005cba:	d501      	bpl.n	8005cc0 <_printf_float+0x168>
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d09c      	beq.n	8005c02 <_printf_float+0xaa>
 8005cc8:	232d      	movs	r3, #45	; 0x2d
 8005cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cce:	e798      	b.n	8005c02 <_printf_float+0xaa>
 8005cd0:	9a06      	ldr	r2, [sp, #24]
 8005cd2:	2a47      	cmp	r2, #71	; 0x47
 8005cd4:	d1be      	bne.n	8005c54 <_printf_float+0xfc>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1bc      	bne.n	8005c54 <_printf_float+0xfc>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e7b9      	b.n	8005c52 <_printf_float+0xfa>
 8005cde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ce2:	d118      	bne.n	8005d16 <_printf_float+0x1be>
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	dd0b      	ble.n	8005d02 <_printf_float+0x1aa>
 8005cea:	6121      	str	r1, [r4, #16]
 8005cec:	b913      	cbnz	r3, 8005cf4 <_printf_float+0x19c>
 8005cee:	6822      	ldr	r2, [r4, #0]
 8005cf0:	07d0      	lsls	r0, r2, #31
 8005cf2:	d502      	bpl.n	8005cfa <_printf_float+0x1a2>
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	440b      	add	r3, r1
 8005cf8:	6123      	str	r3, [r4, #16]
 8005cfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8005cfc:	f04f 0900 	mov.w	r9, #0
 8005d00:	e7de      	b.n	8005cc0 <_printf_float+0x168>
 8005d02:	b913      	cbnz	r3, 8005d0a <_printf_float+0x1b2>
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	07d2      	lsls	r2, r2, #31
 8005d08:	d501      	bpl.n	8005d0e <_printf_float+0x1b6>
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	e7f4      	b.n	8005cf8 <_printf_float+0x1a0>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e7f2      	b.n	8005cf8 <_printf_float+0x1a0>
 8005d12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	db05      	blt.n	8005d28 <_printf_float+0x1d0>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	6121      	str	r1, [r4, #16]
 8005d20:	07d8      	lsls	r0, r3, #31
 8005d22:	d5ea      	bpl.n	8005cfa <_printf_float+0x1a2>
 8005d24:	1c4b      	adds	r3, r1, #1
 8005d26:	e7e7      	b.n	8005cf8 <_printf_float+0x1a0>
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	bfd4      	ite	le
 8005d2c:	f1c1 0202 	rsble	r2, r1, #2
 8005d30:	2201      	movgt	r2, #1
 8005d32:	4413      	add	r3, r2
 8005d34:	e7e0      	b.n	8005cf8 <_printf_float+0x1a0>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	055a      	lsls	r2, r3, #21
 8005d3a:	d407      	bmi.n	8005d4c <_printf_float+0x1f4>
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	4642      	mov	r2, r8
 8005d40:	4631      	mov	r1, r6
 8005d42:	4628      	mov	r0, r5
 8005d44:	47b8      	blx	r7
 8005d46:	3001      	adds	r0, #1
 8005d48:	d12c      	bne.n	8005da4 <_printf_float+0x24c>
 8005d4a:	e764      	b.n	8005c16 <_printf_float+0xbe>
 8005d4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d50:	f240 80e0 	bls.w	8005f14 <_printf_float+0x3bc>
 8005d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f7fa fec4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d034      	beq.n	8005dce <_printf_float+0x276>
 8005d64:	4a37      	ldr	r2, [pc, #220]	; (8005e44 <_printf_float+0x2ec>)
 8005d66:	2301      	movs	r3, #1
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	f43f af51 	beq.w	8005c16 <_printf_float+0xbe>
 8005d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	db02      	blt.n	8005d82 <_printf_float+0x22a>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	07d8      	lsls	r0, r3, #31
 8005d80:	d510      	bpl.n	8005da4 <_printf_float+0x24c>
 8005d82:	ee18 3a10 	vmov	r3, s16
 8005d86:	4652      	mov	r2, sl
 8005d88:	4631      	mov	r1, r6
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	f43f af41 	beq.w	8005c16 <_printf_float+0xbe>
 8005d94:	f04f 0800 	mov.w	r8, #0
 8005d98:	f104 091a 	add.w	r9, r4, #26
 8005d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	4543      	cmp	r3, r8
 8005da2:	dc09      	bgt.n	8005db8 <_printf_float+0x260>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	079b      	lsls	r3, r3, #30
 8005da8:	f100 8107 	bmi.w	8005fba <_printf_float+0x462>
 8005dac:	68e0      	ldr	r0, [r4, #12]
 8005dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005db0:	4298      	cmp	r0, r3
 8005db2:	bfb8      	it	lt
 8005db4:	4618      	movlt	r0, r3
 8005db6:	e730      	b.n	8005c1a <_printf_float+0xc2>
 8005db8:	2301      	movs	r3, #1
 8005dba:	464a      	mov	r2, r9
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	47b8      	blx	r7
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	f43f af27 	beq.w	8005c16 <_printf_float+0xbe>
 8005dc8:	f108 0801 	add.w	r8, r8, #1
 8005dcc:	e7e6      	b.n	8005d9c <_printf_float+0x244>
 8005dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	dc39      	bgt.n	8005e48 <_printf_float+0x2f0>
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <_printf_float+0x2ec>)
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b8      	blx	r7
 8005dde:	3001      	adds	r0, #1
 8005de0:	f43f af19 	beq.w	8005c16 <_printf_float+0xbe>
 8005de4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005de8:	4313      	orrs	r3, r2
 8005dea:	d102      	bne.n	8005df2 <_printf_float+0x29a>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	07d9      	lsls	r1, r3, #31
 8005df0:	d5d8      	bpl.n	8005da4 <_printf_float+0x24c>
 8005df2:	ee18 3a10 	vmov	r3, s16
 8005df6:	4652      	mov	r2, sl
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f af09 	beq.w	8005c16 <_printf_float+0xbe>
 8005e04:	f04f 0900 	mov.w	r9, #0
 8005e08:	f104 0a1a 	add.w	sl, r4, #26
 8005e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0e:	425b      	negs	r3, r3
 8005e10:	454b      	cmp	r3, r9
 8005e12:	dc01      	bgt.n	8005e18 <_printf_float+0x2c0>
 8005e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e16:	e792      	b.n	8005d3e <_printf_float+0x1e6>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4652      	mov	r2, sl
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f43f aef7 	beq.w	8005c16 <_printf_float+0xbe>
 8005e28:	f109 0901 	add.w	r9, r9, #1
 8005e2c:	e7ee      	b.n	8005e0c <_printf_float+0x2b4>
 8005e2e:	bf00      	nop
 8005e30:	7fefffff 	.word	0x7fefffff
 8005e34:	080087b4 	.word	0x080087b4
 8005e38:	080087b8 	.word	0x080087b8
 8005e3c:	080087bc 	.word	0x080087bc
 8005e40:	080087c0 	.word	0x080087c0
 8005e44:	080087c4 	.word	0x080087c4
 8005e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	bfa8      	it	ge
 8005e50:	461a      	movge	r2, r3
 8005e52:	2a00      	cmp	r2, #0
 8005e54:	4691      	mov	r9, r2
 8005e56:	dc37      	bgt.n	8005ec8 <_printf_float+0x370>
 8005e58:	f04f 0b00 	mov.w	fp, #0
 8005e5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e60:	f104 021a 	add.w	r2, r4, #26
 8005e64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e66:	9305      	str	r3, [sp, #20]
 8005e68:	eba3 0309 	sub.w	r3, r3, r9
 8005e6c:	455b      	cmp	r3, fp
 8005e6e:	dc33      	bgt.n	8005ed8 <_printf_float+0x380>
 8005e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e74:	429a      	cmp	r2, r3
 8005e76:	db3b      	blt.n	8005ef0 <_printf_float+0x398>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	07da      	lsls	r2, r3, #31
 8005e7c:	d438      	bmi.n	8005ef0 <_printf_float+0x398>
 8005e7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e82:	eba2 0903 	sub.w	r9, r2, r3
 8005e86:	9b05      	ldr	r3, [sp, #20]
 8005e88:	1ad2      	subs	r2, r2, r3
 8005e8a:	4591      	cmp	r9, r2
 8005e8c:	bfa8      	it	ge
 8005e8e:	4691      	movge	r9, r2
 8005e90:	f1b9 0f00 	cmp.w	r9, #0
 8005e94:	dc35      	bgt.n	8005f02 <_printf_float+0x3aa>
 8005e96:	f04f 0800 	mov.w	r8, #0
 8005e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e9e:	f104 0a1a 	add.w	sl, r4, #26
 8005ea2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	eba3 0309 	sub.w	r3, r3, r9
 8005eac:	4543      	cmp	r3, r8
 8005eae:	f77f af79 	ble.w	8005da4 <_printf_float+0x24c>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f aeaa 	beq.w	8005c16 <_printf_float+0xbe>
 8005ec2:	f108 0801 	add.w	r8, r8, #1
 8005ec6:	e7ec      	b.n	8005ea2 <_printf_float+0x34a>
 8005ec8:	4613      	mov	r3, r2
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4642      	mov	r2, r8
 8005ece:	4628      	mov	r0, r5
 8005ed0:	47b8      	blx	r7
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d1c0      	bne.n	8005e58 <_printf_float+0x300>
 8005ed6:	e69e      	b.n	8005c16 <_printf_float+0xbe>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	9205      	str	r2, [sp, #20]
 8005ee0:	47b8      	blx	r7
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	f43f ae97 	beq.w	8005c16 <_printf_float+0xbe>
 8005ee8:	9a05      	ldr	r2, [sp, #20]
 8005eea:	f10b 0b01 	add.w	fp, fp, #1
 8005eee:	e7b9      	b.n	8005e64 <_printf_float+0x30c>
 8005ef0:	ee18 3a10 	vmov	r3, s16
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b8      	blx	r7
 8005efc:	3001      	adds	r0, #1
 8005efe:	d1be      	bne.n	8005e7e <_printf_float+0x326>
 8005f00:	e689      	b.n	8005c16 <_printf_float+0xbe>
 8005f02:	9a05      	ldr	r2, [sp, #20]
 8005f04:	464b      	mov	r3, r9
 8005f06:	4442      	add	r2, r8
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d1c1      	bne.n	8005e96 <_printf_float+0x33e>
 8005f12:	e680      	b.n	8005c16 <_printf_float+0xbe>
 8005f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f16:	2a01      	cmp	r2, #1
 8005f18:	dc01      	bgt.n	8005f1e <_printf_float+0x3c6>
 8005f1a:	07db      	lsls	r3, r3, #31
 8005f1c:	d53a      	bpl.n	8005f94 <_printf_float+0x43c>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4642      	mov	r2, r8
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f43f ae74 	beq.w	8005c16 <_printf_float+0xbe>
 8005f2e:	ee18 3a10 	vmov	r3, s16
 8005f32:	4652      	mov	r2, sl
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	f43f ae6b 	beq.w	8005c16 <_printf_float+0xbe>
 8005f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f44:	2200      	movs	r2, #0
 8005f46:	2300      	movs	r3, #0
 8005f48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005f4c:	f7fa fdcc 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f50:	b9d8      	cbnz	r0, 8005f8a <_printf_float+0x432>
 8005f52:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005f56:	f108 0201 	add.w	r2, r8, #1
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	d10e      	bne.n	8005f82 <_printf_float+0x42a>
 8005f64:	e657      	b.n	8005c16 <_printf_float+0xbe>
 8005f66:	2301      	movs	r3, #1
 8005f68:	4652      	mov	r2, sl
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	47b8      	blx	r7
 8005f70:	3001      	adds	r0, #1
 8005f72:	f43f ae50 	beq.w	8005c16 <_printf_float+0xbe>
 8005f76:	f108 0801 	add.w	r8, r8, #1
 8005f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	4543      	cmp	r3, r8
 8005f80:	dcf1      	bgt.n	8005f66 <_printf_float+0x40e>
 8005f82:	464b      	mov	r3, r9
 8005f84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f88:	e6da      	b.n	8005d40 <_printf_float+0x1e8>
 8005f8a:	f04f 0800 	mov.w	r8, #0
 8005f8e:	f104 0a1a 	add.w	sl, r4, #26
 8005f92:	e7f2      	b.n	8005f7a <_printf_float+0x422>
 8005f94:	2301      	movs	r3, #1
 8005f96:	4642      	mov	r2, r8
 8005f98:	e7df      	b.n	8005f5a <_printf_float+0x402>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	464a      	mov	r2, r9
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b8      	blx	r7
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	f43f ae36 	beq.w	8005c16 <_printf_float+0xbe>
 8005faa:	f108 0801 	add.w	r8, r8, #1
 8005fae:	68e3      	ldr	r3, [r4, #12]
 8005fb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fb2:	1a5b      	subs	r3, r3, r1
 8005fb4:	4543      	cmp	r3, r8
 8005fb6:	dcf0      	bgt.n	8005f9a <_printf_float+0x442>
 8005fb8:	e6f8      	b.n	8005dac <_printf_float+0x254>
 8005fba:	f04f 0800 	mov.w	r8, #0
 8005fbe:	f104 0919 	add.w	r9, r4, #25
 8005fc2:	e7f4      	b.n	8005fae <_printf_float+0x456>

08005fc4 <_printf_common>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	4616      	mov	r6, r2
 8005fca:	4699      	mov	r9, r3
 8005fcc:	688a      	ldr	r2, [r1, #8]
 8005fce:	690b      	ldr	r3, [r1, #16]
 8005fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	bfb8      	it	lt
 8005fd8:	4613      	movlt	r3, r2
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	b10a      	cbz	r2, 8005fea <_printf_common+0x26>
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	0699      	lsls	r1, r3, #26
 8005fee:	bf42      	ittt	mi
 8005ff0:	6833      	ldrmi	r3, [r6, #0]
 8005ff2:	3302      	addmi	r3, #2
 8005ff4:	6033      	strmi	r3, [r6, #0]
 8005ff6:	6825      	ldr	r5, [r4, #0]
 8005ff8:	f015 0506 	ands.w	r5, r5, #6
 8005ffc:	d106      	bne.n	800600c <_printf_common+0x48>
 8005ffe:	f104 0a19 	add.w	sl, r4, #25
 8006002:	68e3      	ldr	r3, [r4, #12]
 8006004:	6832      	ldr	r2, [r6, #0]
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	42ab      	cmp	r3, r5
 800600a:	dc26      	bgt.n	800605a <_printf_common+0x96>
 800600c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006010:	1e13      	subs	r3, r2, #0
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	bf18      	it	ne
 8006016:	2301      	movne	r3, #1
 8006018:	0692      	lsls	r2, r2, #26
 800601a:	d42b      	bmi.n	8006074 <_printf_common+0xb0>
 800601c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006020:	4649      	mov	r1, r9
 8006022:	4638      	mov	r0, r7
 8006024:	47c0      	blx	r8
 8006026:	3001      	adds	r0, #1
 8006028:	d01e      	beq.n	8006068 <_printf_common+0xa4>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	6922      	ldr	r2, [r4, #16]
 800602e:	f003 0306 	and.w	r3, r3, #6
 8006032:	2b04      	cmp	r3, #4
 8006034:	bf02      	ittt	eq
 8006036:	68e5      	ldreq	r5, [r4, #12]
 8006038:	6833      	ldreq	r3, [r6, #0]
 800603a:	1aed      	subeq	r5, r5, r3
 800603c:	68a3      	ldr	r3, [r4, #8]
 800603e:	bf0c      	ite	eq
 8006040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006044:	2500      	movne	r5, #0
 8006046:	4293      	cmp	r3, r2
 8006048:	bfc4      	itt	gt
 800604a:	1a9b      	subgt	r3, r3, r2
 800604c:	18ed      	addgt	r5, r5, r3
 800604e:	2600      	movs	r6, #0
 8006050:	341a      	adds	r4, #26
 8006052:	42b5      	cmp	r5, r6
 8006054:	d11a      	bne.n	800608c <_printf_common+0xc8>
 8006056:	2000      	movs	r0, #0
 8006058:	e008      	b.n	800606c <_printf_common+0xa8>
 800605a:	2301      	movs	r3, #1
 800605c:	4652      	mov	r2, sl
 800605e:	4649      	mov	r1, r9
 8006060:	4638      	mov	r0, r7
 8006062:	47c0      	blx	r8
 8006064:	3001      	adds	r0, #1
 8006066:	d103      	bne.n	8006070 <_printf_common+0xac>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006070:	3501      	adds	r5, #1
 8006072:	e7c6      	b.n	8006002 <_printf_common+0x3e>
 8006074:	18e1      	adds	r1, r4, r3
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	2030      	movs	r0, #48	; 0x30
 800607a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800607e:	4422      	add	r2, r4
 8006080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006088:	3302      	adds	r3, #2
 800608a:	e7c7      	b.n	800601c <_printf_common+0x58>
 800608c:	2301      	movs	r3, #1
 800608e:	4622      	mov	r2, r4
 8006090:	4649      	mov	r1, r9
 8006092:	4638      	mov	r0, r7
 8006094:	47c0      	blx	r8
 8006096:	3001      	adds	r0, #1
 8006098:	d0e6      	beq.n	8006068 <_printf_common+0xa4>
 800609a:	3601      	adds	r6, #1
 800609c:	e7d9      	b.n	8006052 <_printf_common+0x8e>
	...

080060a0 <_printf_i>:
 80060a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a4:	7e0f      	ldrb	r7, [r1, #24]
 80060a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060a8:	2f78      	cmp	r7, #120	; 0x78
 80060aa:	4691      	mov	r9, r2
 80060ac:	4680      	mov	r8, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	469a      	mov	sl, r3
 80060b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060b6:	d807      	bhi.n	80060c8 <_printf_i+0x28>
 80060b8:	2f62      	cmp	r7, #98	; 0x62
 80060ba:	d80a      	bhi.n	80060d2 <_printf_i+0x32>
 80060bc:	2f00      	cmp	r7, #0
 80060be:	f000 80d4 	beq.w	800626a <_printf_i+0x1ca>
 80060c2:	2f58      	cmp	r7, #88	; 0x58
 80060c4:	f000 80c0 	beq.w	8006248 <_printf_i+0x1a8>
 80060c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d0:	e03a      	b.n	8006148 <_printf_i+0xa8>
 80060d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060d6:	2b15      	cmp	r3, #21
 80060d8:	d8f6      	bhi.n	80060c8 <_printf_i+0x28>
 80060da:	a101      	add	r1, pc, #4	; (adr r1, 80060e0 <_printf_i+0x40>)
 80060dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e0:	08006139 	.word	0x08006139
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	080060c9 	.word	0x080060c9
 80060ec:	080060c9 	.word	0x080060c9
 80060f0:	080060c9 	.word	0x080060c9
 80060f4:	080060c9 	.word	0x080060c9
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	080060c9 	.word	0x080060c9
 8006100:	080060c9 	.word	0x080060c9
 8006104:	080060c9 	.word	0x080060c9
 8006108:	080060c9 	.word	0x080060c9
 800610c:	08006251 	.word	0x08006251
 8006110:	08006179 	.word	0x08006179
 8006114:	0800620b 	.word	0x0800620b
 8006118:	080060c9 	.word	0x080060c9
 800611c:	080060c9 	.word	0x080060c9
 8006120:	08006273 	.word	0x08006273
 8006124:	080060c9 	.word	0x080060c9
 8006128:	08006179 	.word	0x08006179
 800612c:	080060c9 	.word	0x080060c9
 8006130:	080060c9 	.word	0x080060c9
 8006134:	08006213 	.word	0x08006213
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	1d1a      	adds	r2, r3, #4
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	602a      	str	r2, [r5, #0]
 8006140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006148:	2301      	movs	r3, #1
 800614a:	e09f      	b.n	800628c <_printf_i+0x1ec>
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	0607      	lsls	r7, r0, #24
 8006152:	f103 0104 	add.w	r1, r3, #4
 8006156:	6029      	str	r1, [r5, #0]
 8006158:	d501      	bpl.n	800615e <_printf_i+0xbe>
 800615a:	681e      	ldr	r6, [r3, #0]
 800615c:	e003      	b.n	8006166 <_printf_i+0xc6>
 800615e:	0646      	lsls	r6, r0, #25
 8006160:	d5fb      	bpl.n	800615a <_printf_i+0xba>
 8006162:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006166:	2e00      	cmp	r6, #0
 8006168:	da03      	bge.n	8006172 <_printf_i+0xd2>
 800616a:	232d      	movs	r3, #45	; 0x2d
 800616c:	4276      	negs	r6, r6
 800616e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006172:	485a      	ldr	r0, [pc, #360]	; (80062dc <_printf_i+0x23c>)
 8006174:	230a      	movs	r3, #10
 8006176:	e012      	b.n	800619e <_printf_i+0xfe>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	6820      	ldr	r0, [r4, #0]
 800617c:	1d19      	adds	r1, r3, #4
 800617e:	6029      	str	r1, [r5, #0]
 8006180:	0605      	lsls	r5, r0, #24
 8006182:	d501      	bpl.n	8006188 <_printf_i+0xe8>
 8006184:	681e      	ldr	r6, [r3, #0]
 8006186:	e002      	b.n	800618e <_printf_i+0xee>
 8006188:	0641      	lsls	r1, r0, #25
 800618a:	d5fb      	bpl.n	8006184 <_printf_i+0xe4>
 800618c:	881e      	ldrh	r6, [r3, #0]
 800618e:	4853      	ldr	r0, [pc, #332]	; (80062dc <_printf_i+0x23c>)
 8006190:	2f6f      	cmp	r7, #111	; 0x6f
 8006192:	bf0c      	ite	eq
 8006194:	2308      	moveq	r3, #8
 8006196:	230a      	movne	r3, #10
 8006198:	2100      	movs	r1, #0
 800619a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800619e:	6865      	ldr	r5, [r4, #4]
 80061a0:	60a5      	str	r5, [r4, #8]
 80061a2:	2d00      	cmp	r5, #0
 80061a4:	bfa2      	ittt	ge
 80061a6:	6821      	ldrge	r1, [r4, #0]
 80061a8:	f021 0104 	bicge.w	r1, r1, #4
 80061ac:	6021      	strge	r1, [r4, #0]
 80061ae:	b90e      	cbnz	r6, 80061b4 <_printf_i+0x114>
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	d04b      	beq.n	800624c <_printf_i+0x1ac>
 80061b4:	4615      	mov	r5, r2
 80061b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061ba:	fb03 6711 	mls	r7, r3, r1, r6
 80061be:	5dc7      	ldrb	r7, [r0, r7]
 80061c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061c4:	4637      	mov	r7, r6
 80061c6:	42bb      	cmp	r3, r7
 80061c8:	460e      	mov	r6, r1
 80061ca:	d9f4      	bls.n	80061b6 <_printf_i+0x116>
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d10b      	bne.n	80061e8 <_printf_i+0x148>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	07de      	lsls	r6, r3, #31
 80061d4:	d508      	bpl.n	80061e8 <_printf_i+0x148>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	6861      	ldr	r1, [r4, #4]
 80061da:	4299      	cmp	r1, r3
 80061dc:	bfde      	ittt	le
 80061de:	2330      	movle	r3, #48	; 0x30
 80061e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80061e8:	1b52      	subs	r2, r2, r5
 80061ea:	6122      	str	r2, [r4, #16]
 80061ec:	f8cd a000 	str.w	sl, [sp]
 80061f0:	464b      	mov	r3, r9
 80061f2:	aa03      	add	r2, sp, #12
 80061f4:	4621      	mov	r1, r4
 80061f6:	4640      	mov	r0, r8
 80061f8:	f7ff fee4 	bl	8005fc4 <_printf_common>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d14a      	bne.n	8006296 <_printf_i+0x1f6>
 8006200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006204:	b004      	add	sp, #16
 8006206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	f043 0320 	orr.w	r3, r3, #32
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	4833      	ldr	r0, [pc, #204]	; (80062e0 <_printf_i+0x240>)
 8006214:	2778      	movs	r7, #120	; 0x78
 8006216:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	6829      	ldr	r1, [r5, #0]
 800621e:	061f      	lsls	r7, r3, #24
 8006220:	f851 6b04 	ldr.w	r6, [r1], #4
 8006224:	d402      	bmi.n	800622c <_printf_i+0x18c>
 8006226:	065f      	lsls	r7, r3, #25
 8006228:	bf48      	it	mi
 800622a:	b2b6      	uxthmi	r6, r6
 800622c:	07df      	lsls	r7, r3, #31
 800622e:	bf48      	it	mi
 8006230:	f043 0320 	orrmi.w	r3, r3, #32
 8006234:	6029      	str	r1, [r5, #0]
 8006236:	bf48      	it	mi
 8006238:	6023      	strmi	r3, [r4, #0]
 800623a:	b91e      	cbnz	r6, 8006244 <_printf_i+0x1a4>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	f023 0320 	bic.w	r3, r3, #32
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	2310      	movs	r3, #16
 8006246:	e7a7      	b.n	8006198 <_printf_i+0xf8>
 8006248:	4824      	ldr	r0, [pc, #144]	; (80062dc <_printf_i+0x23c>)
 800624a:	e7e4      	b.n	8006216 <_printf_i+0x176>
 800624c:	4615      	mov	r5, r2
 800624e:	e7bd      	b.n	80061cc <_printf_i+0x12c>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	6826      	ldr	r6, [r4, #0]
 8006254:	6961      	ldr	r1, [r4, #20]
 8006256:	1d18      	adds	r0, r3, #4
 8006258:	6028      	str	r0, [r5, #0]
 800625a:	0635      	lsls	r5, r6, #24
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	d501      	bpl.n	8006264 <_printf_i+0x1c4>
 8006260:	6019      	str	r1, [r3, #0]
 8006262:	e002      	b.n	800626a <_printf_i+0x1ca>
 8006264:	0670      	lsls	r0, r6, #25
 8006266:	d5fb      	bpl.n	8006260 <_printf_i+0x1c0>
 8006268:	8019      	strh	r1, [r3, #0]
 800626a:	2300      	movs	r3, #0
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	4615      	mov	r5, r2
 8006270:	e7bc      	b.n	80061ec <_printf_i+0x14c>
 8006272:	682b      	ldr	r3, [r5, #0]
 8006274:	1d1a      	adds	r2, r3, #4
 8006276:	602a      	str	r2, [r5, #0]
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	6862      	ldr	r2, [r4, #4]
 800627c:	2100      	movs	r1, #0
 800627e:	4628      	mov	r0, r5
 8006280:	f7f9 ffb6 	bl	80001f0 <memchr>
 8006284:	b108      	cbz	r0, 800628a <_printf_i+0x1ea>
 8006286:	1b40      	subs	r0, r0, r5
 8006288:	6060      	str	r0, [r4, #4]
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	2300      	movs	r3, #0
 8006290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006294:	e7aa      	b.n	80061ec <_printf_i+0x14c>
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	462a      	mov	r2, r5
 800629a:	4649      	mov	r1, r9
 800629c:	4640      	mov	r0, r8
 800629e:	47d0      	blx	sl
 80062a0:	3001      	adds	r0, #1
 80062a2:	d0ad      	beq.n	8006200 <_printf_i+0x160>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	079b      	lsls	r3, r3, #30
 80062a8:	d413      	bmi.n	80062d2 <_printf_i+0x232>
 80062aa:	68e0      	ldr	r0, [r4, #12]
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	4298      	cmp	r0, r3
 80062b0:	bfb8      	it	lt
 80062b2:	4618      	movlt	r0, r3
 80062b4:	e7a6      	b.n	8006204 <_printf_i+0x164>
 80062b6:	2301      	movs	r3, #1
 80062b8:	4632      	mov	r2, r6
 80062ba:	4649      	mov	r1, r9
 80062bc:	4640      	mov	r0, r8
 80062be:	47d0      	blx	sl
 80062c0:	3001      	adds	r0, #1
 80062c2:	d09d      	beq.n	8006200 <_printf_i+0x160>
 80062c4:	3501      	adds	r5, #1
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	9903      	ldr	r1, [sp, #12]
 80062ca:	1a5b      	subs	r3, r3, r1
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	dcf2      	bgt.n	80062b6 <_printf_i+0x216>
 80062d0:	e7eb      	b.n	80062aa <_printf_i+0x20a>
 80062d2:	2500      	movs	r5, #0
 80062d4:	f104 0619 	add.w	r6, r4, #25
 80062d8:	e7f5      	b.n	80062c6 <_printf_i+0x226>
 80062da:	bf00      	nop
 80062dc:	080087c6 	.word	0x080087c6
 80062e0:	080087d7 	.word	0x080087d7

080062e4 <std>:
 80062e4:	2300      	movs	r3, #0
 80062e6:	b510      	push	{r4, lr}
 80062e8:	4604      	mov	r4, r0
 80062ea:	e9c0 3300 	strd	r3, r3, [r0]
 80062ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062f2:	6083      	str	r3, [r0, #8]
 80062f4:	8181      	strh	r1, [r0, #12]
 80062f6:	6643      	str	r3, [r0, #100]	; 0x64
 80062f8:	81c2      	strh	r2, [r0, #14]
 80062fa:	6183      	str	r3, [r0, #24]
 80062fc:	4619      	mov	r1, r3
 80062fe:	2208      	movs	r2, #8
 8006300:	305c      	adds	r0, #92	; 0x5c
 8006302:	f000 f914 	bl	800652e <memset>
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <std+0x58>)
 8006308:	6263      	str	r3, [r4, #36]	; 0x24
 800630a:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <std+0x5c>)
 800630c:	62a3      	str	r3, [r4, #40]	; 0x28
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <std+0x60>)
 8006310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <std+0x64>)
 8006314:	6323      	str	r3, [r4, #48]	; 0x30
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <std+0x68>)
 8006318:	6224      	str	r4, [r4, #32]
 800631a:	429c      	cmp	r4, r3
 800631c:	d006      	beq.n	800632c <std+0x48>
 800631e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006322:	4294      	cmp	r4, r2
 8006324:	d002      	beq.n	800632c <std+0x48>
 8006326:	33d0      	adds	r3, #208	; 0xd0
 8006328:	429c      	cmp	r4, r3
 800632a:	d105      	bne.n	8006338 <std+0x54>
 800632c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006334:	f000 b978 	b.w	8006628 <__retarget_lock_init_recursive>
 8006338:	bd10      	pop	{r4, pc}
 800633a:	bf00      	nop
 800633c:	080064a9 	.word	0x080064a9
 8006340:	080064cb 	.word	0x080064cb
 8006344:	08006503 	.word	0x08006503
 8006348:	08006527 	.word	0x08006527
 800634c:	20000a18 	.word	0x20000a18

08006350 <stdio_exit_handler>:
 8006350:	4a02      	ldr	r2, [pc, #8]	; (800635c <stdio_exit_handler+0xc>)
 8006352:	4903      	ldr	r1, [pc, #12]	; (8006360 <stdio_exit_handler+0x10>)
 8006354:	4803      	ldr	r0, [pc, #12]	; (8006364 <stdio_exit_handler+0x14>)
 8006356:	f000 b869 	b.w	800642c <_fwalk_sglue>
 800635a:	bf00      	nop
 800635c:	2000000c 	.word	0x2000000c
 8006360:	08007fd9 	.word	0x08007fd9
 8006364:	20000018 	.word	0x20000018

08006368 <cleanup_stdio>:
 8006368:	6841      	ldr	r1, [r0, #4]
 800636a:	4b0c      	ldr	r3, [pc, #48]	; (800639c <cleanup_stdio+0x34>)
 800636c:	4299      	cmp	r1, r3
 800636e:	b510      	push	{r4, lr}
 8006370:	4604      	mov	r4, r0
 8006372:	d001      	beq.n	8006378 <cleanup_stdio+0x10>
 8006374:	f001 fe30 	bl	8007fd8 <_fflush_r>
 8006378:	68a1      	ldr	r1, [r4, #8]
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <cleanup_stdio+0x38>)
 800637c:	4299      	cmp	r1, r3
 800637e:	d002      	beq.n	8006386 <cleanup_stdio+0x1e>
 8006380:	4620      	mov	r0, r4
 8006382:	f001 fe29 	bl	8007fd8 <_fflush_r>
 8006386:	68e1      	ldr	r1, [r4, #12]
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <cleanup_stdio+0x3c>)
 800638a:	4299      	cmp	r1, r3
 800638c:	d004      	beq.n	8006398 <cleanup_stdio+0x30>
 800638e:	4620      	mov	r0, r4
 8006390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006394:	f001 be20 	b.w	8007fd8 <_fflush_r>
 8006398:	bd10      	pop	{r4, pc}
 800639a:	bf00      	nop
 800639c:	20000a18 	.word	0x20000a18
 80063a0:	20000a80 	.word	0x20000a80
 80063a4:	20000ae8 	.word	0x20000ae8

080063a8 <global_stdio_init.part.0>:
 80063a8:	b510      	push	{r4, lr}
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <global_stdio_init.part.0+0x30>)
 80063ac:	4c0b      	ldr	r4, [pc, #44]	; (80063dc <global_stdio_init.part.0+0x34>)
 80063ae:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <global_stdio_init.part.0+0x38>)
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	4620      	mov	r0, r4
 80063b4:	2200      	movs	r2, #0
 80063b6:	2104      	movs	r1, #4
 80063b8:	f7ff ff94 	bl	80062e4 <std>
 80063bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063c0:	2201      	movs	r2, #1
 80063c2:	2109      	movs	r1, #9
 80063c4:	f7ff ff8e 	bl	80062e4 <std>
 80063c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80063cc:	2202      	movs	r2, #2
 80063ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d2:	2112      	movs	r1, #18
 80063d4:	f7ff bf86 	b.w	80062e4 <std>
 80063d8:	20000b50 	.word	0x20000b50
 80063dc:	20000a18 	.word	0x20000a18
 80063e0:	08006351 	.word	0x08006351

080063e4 <__sfp_lock_acquire>:
 80063e4:	4801      	ldr	r0, [pc, #4]	; (80063ec <__sfp_lock_acquire+0x8>)
 80063e6:	f000 b920 	b.w	800662a <__retarget_lock_acquire_recursive>
 80063ea:	bf00      	nop
 80063ec:	20000b59 	.word	0x20000b59

080063f0 <__sfp_lock_release>:
 80063f0:	4801      	ldr	r0, [pc, #4]	; (80063f8 <__sfp_lock_release+0x8>)
 80063f2:	f000 b91b 	b.w	800662c <__retarget_lock_release_recursive>
 80063f6:	bf00      	nop
 80063f8:	20000b59 	.word	0x20000b59

080063fc <__sinit>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	4604      	mov	r4, r0
 8006400:	f7ff fff0 	bl	80063e4 <__sfp_lock_acquire>
 8006404:	6a23      	ldr	r3, [r4, #32]
 8006406:	b11b      	cbz	r3, 8006410 <__sinit+0x14>
 8006408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800640c:	f7ff bff0 	b.w	80063f0 <__sfp_lock_release>
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <__sinit+0x28>)
 8006412:	6223      	str	r3, [r4, #32]
 8006414:	4b04      	ldr	r3, [pc, #16]	; (8006428 <__sinit+0x2c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f5      	bne.n	8006408 <__sinit+0xc>
 800641c:	f7ff ffc4 	bl	80063a8 <global_stdio_init.part.0>
 8006420:	e7f2      	b.n	8006408 <__sinit+0xc>
 8006422:	bf00      	nop
 8006424:	08006369 	.word	0x08006369
 8006428:	20000b50 	.word	0x20000b50

0800642c <_fwalk_sglue>:
 800642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006430:	4607      	mov	r7, r0
 8006432:	4688      	mov	r8, r1
 8006434:	4614      	mov	r4, r2
 8006436:	2600      	movs	r6, #0
 8006438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800643c:	f1b9 0901 	subs.w	r9, r9, #1
 8006440:	d505      	bpl.n	800644e <_fwalk_sglue+0x22>
 8006442:	6824      	ldr	r4, [r4, #0]
 8006444:	2c00      	cmp	r4, #0
 8006446:	d1f7      	bne.n	8006438 <_fwalk_sglue+0xc>
 8006448:	4630      	mov	r0, r6
 800644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d907      	bls.n	8006464 <_fwalk_sglue+0x38>
 8006454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006458:	3301      	adds	r3, #1
 800645a:	d003      	beq.n	8006464 <_fwalk_sglue+0x38>
 800645c:	4629      	mov	r1, r5
 800645e:	4638      	mov	r0, r7
 8006460:	47c0      	blx	r8
 8006462:	4306      	orrs	r6, r0
 8006464:	3568      	adds	r5, #104	; 0x68
 8006466:	e7e9      	b.n	800643c <_fwalk_sglue+0x10>

08006468 <siprintf>:
 8006468:	b40e      	push	{r1, r2, r3}
 800646a:	b500      	push	{lr}
 800646c:	b09c      	sub	sp, #112	; 0x70
 800646e:	ab1d      	add	r3, sp, #116	; 0x74
 8006470:	9002      	str	r0, [sp, #8]
 8006472:	9006      	str	r0, [sp, #24]
 8006474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006478:	4809      	ldr	r0, [pc, #36]	; (80064a0 <siprintf+0x38>)
 800647a:	9107      	str	r1, [sp, #28]
 800647c:	9104      	str	r1, [sp, #16]
 800647e:	4909      	ldr	r1, [pc, #36]	; (80064a4 <siprintf+0x3c>)
 8006480:	f853 2b04 	ldr.w	r2, [r3], #4
 8006484:	9105      	str	r1, [sp, #20]
 8006486:	6800      	ldr	r0, [r0, #0]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	a902      	add	r1, sp, #8
 800648c:	f001 fc20 	bl	8007cd0 <_svfiprintf_r>
 8006490:	9b02      	ldr	r3, [sp, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	b01c      	add	sp, #112	; 0x70
 8006498:	f85d eb04 	ldr.w	lr, [sp], #4
 800649c:	b003      	add	sp, #12
 800649e:	4770      	bx	lr
 80064a0:	20000064 	.word	0x20000064
 80064a4:	ffff0208 	.word	0xffff0208

080064a8 <__sread>:
 80064a8:	b510      	push	{r4, lr}
 80064aa:	460c      	mov	r4, r1
 80064ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b0:	f000 f86c 	bl	800658c <_read_r>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	bfab      	itete	ge
 80064b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064ba:	89a3      	ldrhlt	r3, [r4, #12]
 80064bc:	181b      	addge	r3, r3, r0
 80064be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064c2:	bfac      	ite	ge
 80064c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80064c6:	81a3      	strhlt	r3, [r4, #12]
 80064c8:	bd10      	pop	{r4, pc}

080064ca <__swrite>:
 80064ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ce:	461f      	mov	r7, r3
 80064d0:	898b      	ldrh	r3, [r1, #12]
 80064d2:	05db      	lsls	r3, r3, #23
 80064d4:	4605      	mov	r5, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	4616      	mov	r6, r2
 80064da:	d505      	bpl.n	80064e8 <__swrite+0x1e>
 80064dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e0:	2302      	movs	r3, #2
 80064e2:	2200      	movs	r2, #0
 80064e4:	f000 f840 	bl	8006568 <_lseek_r>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	4632      	mov	r2, r6
 80064f6:	463b      	mov	r3, r7
 80064f8:	4628      	mov	r0, r5
 80064fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064fe:	f000 b857 	b.w	80065b0 <_write_r>

08006502 <__sseek>:
 8006502:	b510      	push	{r4, lr}
 8006504:	460c      	mov	r4, r1
 8006506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650a:	f000 f82d 	bl	8006568 <_lseek_r>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	bf15      	itete	ne
 8006514:	6560      	strne	r0, [r4, #84]	; 0x54
 8006516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800651a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800651e:	81a3      	strheq	r3, [r4, #12]
 8006520:	bf18      	it	ne
 8006522:	81a3      	strhne	r3, [r4, #12]
 8006524:	bd10      	pop	{r4, pc}

08006526 <__sclose>:
 8006526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652a:	f000 b80d 	b.w	8006548 <_close_r>

0800652e <memset>:
 800652e:	4402      	add	r2, r0
 8006530:	4603      	mov	r3, r0
 8006532:	4293      	cmp	r3, r2
 8006534:	d100      	bne.n	8006538 <memset+0xa>
 8006536:	4770      	bx	lr
 8006538:	f803 1b01 	strb.w	r1, [r3], #1
 800653c:	e7f9      	b.n	8006532 <memset+0x4>
	...

08006540 <_localeconv_r>:
 8006540:	4800      	ldr	r0, [pc, #0]	; (8006544 <_localeconv_r+0x4>)
 8006542:	4770      	bx	lr
 8006544:	20000158 	.word	0x20000158

08006548 <_close_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d06      	ldr	r5, [pc, #24]	; (8006564 <_close_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fb fa5b 	bl	8001a0e <_close>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_close_r+0x1a>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_close_r+0x1a>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	20000b54 	.word	0x20000b54

08006568 <_lseek_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d07      	ldr	r5, [pc, #28]	; (8006588 <_lseek_r+0x20>)
 800656c:	4604      	mov	r4, r0
 800656e:	4608      	mov	r0, r1
 8006570:	4611      	mov	r1, r2
 8006572:	2200      	movs	r2, #0
 8006574:	602a      	str	r2, [r5, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f7fb fa70 	bl	8001a5c <_lseek>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_lseek_r+0x1e>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_lseek_r+0x1e>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	20000b54 	.word	0x20000b54

0800658c <_read_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d07      	ldr	r5, [pc, #28]	; (80065ac <_read_r+0x20>)
 8006590:	4604      	mov	r4, r0
 8006592:	4608      	mov	r0, r1
 8006594:	4611      	mov	r1, r2
 8006596:	2200      	movs	r2, #0
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fb f9fe 	bl	800199c <_read>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_read_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_read_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000b54 	.word	0x20000b54

080065b0 <_write_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	; (80065d0 <_write_r+0x20>)
 80065b4:	4604      	mov	r4, r0
 80065b6:	4608      	mov	r0, r1
 80065b8:	4611      	mov	r1, r2
 80065ba:	2200      	movs	r2, #0
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fb fa09 	bl	80019d6 <_write>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_write_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_write_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	20000b54 	.word	0x20000b54

080065d4 <__errno>:
 80065d4:	4b01      	ldr	r3, [pc, #4]	; (80065dc <__errno+0x8>)
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000064 	.word	0x20000064

080065e0 <__libc_init_array>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4d0d      	ldr	r5, [pc, #52]	; (8006618 <__libc_init_array+0x38>)
 80065e4:	4c0d      	ldr	r4, [pc, #52]	; (800661c <__libc_init_array+0x3c>)
 80065e6:	1b64      	subs	r4, r4, r5
 80065e8:	10a4      	asrs	r4, r4, #2
 80065ea:	2600      	movs	r6, #0
 80065ec:	42a6      	cmp	r6, r4
 80065ee:	d109      	bne.n	8006604 <__libc_init_array+0x24>
 80065f0:	4d0b      	ldr	r5, [pc, #44]	; (8006620 <__libc_init_array+0x40>)
 80065f2:	4c0c      	ldr	r4, [pc, #48]	; (8006624 <__libc_init_array+0x44>)
 80065f4:	f002 f894 	bl	8008720 <_init>
 80065f8:	1b64      	subs	r4, r4, r5
 80065fa:	10a4      	asrs	r4, r4, #2
 80065fc:	2600      	movs	r6, #0
 80065fe:	42a6      	cmp	r6, r4
 8006600:	d105      	bne.n	800660e <__libc_init_array+0x2e>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f855 3b04 	ldr.w	r3, [r5], #4
 8006608:	4798      	blx	r3
 800660a:	3601      	adds	r6, #1
 800660c:	e7ee      	b.n	80065ec <__libc_init_array+0xc>
 800660e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006612:	4798      	blx	r3
 8006614:	3601      	adds	r6, #1
 8006616:	e7f2      	b.n	80065fe <__libc_init_array+0x1e>
 8006618:	08008b2c 	.word	0x08008b2c
 800661c:	08008b2c 	.word	0x08008b2c
 8006620:	08008b2c 	.word	0x08008b2c
 8006624:	08008b30 	.word	0x08008b30

08006628 <__retarget_lock_init_recursive>:
 8006628:	4770      	bx	lr

0800662a <__retarget_lock_acquire_recursive>:
 800662a:	4770      	bx	lr

0800662c <__retarget_lock_release_recursive>:
 800662c:	4770      	bx	lr

0800662e <quorem>:
 800662e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006632:	6903      	ldr	r3, [r0, #16]
 8006634:	690c      	ldr	r4, [r1, #16]
 8006636:	42a3      	cmp	r3, r4
 8006638:	4607      	mov	r7, r0
 800663a:	db7e      	blt.n	800673a <quorem+0x10c>
 800663c:	3c01      	subs	r4, #1
 800663e:	f101 0814 	add.w	r8, r1, #20
 8006642:	f100 0514 	add.w	r5, r0, #20
 8006646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006654:	3301      	adds	r3, #1
 8006656:	429a      	cmp	r2, r3
 8006658:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800665c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006660:	fbb2 f6f3 	udiv	r6, r2, r3
 8006664:	d331      	bcc.n	80066ca <quorem+0x9c>
 8006666:	f04f 0e00 	mov.w	lr, #0
 800666a:	4640      	mov	r0, r8
 800666c:	46ac      	mov	ip, r5
 800666e:	46f2      	mov	sl, lr
 8006670:	f850 2b04 	ldr.w	r2, [r0], #4
 8006674:	b293      	uxth	r3, r2
 8006676:	fb06 e303 	mla	r3, r6, r3, lr
 800667a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800667e:	0c1a      	lsrs	r2, r3, #16
 8006680:	b29b      	uxth	r3, r3
 8006682:	ebaa 0303 	sub.w	r3, sl, r3
 8006686:	f8dc a000 	ldr.w	sl, [ip]
 800668a:	fa13 f38a 	uxtah	r3, r3, sl
 800668e:	fb06 220e 	mla	r2, r6, lr, r2
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	9b00      	ldr	r3, [sp, #0]
 8006696:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800669a:	b292      	uxth	r2, r2
 800669c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80066a8:	4581      	cmp	r9, r0
 80066aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ae:	f84c 3b04 	str.w	r3, [ip], #4
 80066b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066b6:	d2db      	bcs.n	8006670 <quorem+0x42>
 80066b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80066bc:	b92b      	cbnz	r3, 80066ca <quorem+0x9c>
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	3b04      	subs	r3, #4
 80066c2:	429d      	cmp	r5, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	d32c      	bcc.n	8006722 <quorem+0xf4>
 80066c8:	613c      	str	r4, [r7, #16]
 80066ca:	4638      	mov	r0, r7
 80066cc:	f001 f9a6 	bl	8007a1c <__mcmp>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	db22      	blt.n	800671a <quorem+0xec>
 80066d4:	3601      	adds	r6, #1
 80066d6:	4629      	mov	r1, r5
 80066d8:	2000      	movs	r0, #0
 80066da:	f858 2b04 	ldr.w	r2, [r8], #4
 80066de:	f8d1 c000 	ldr.w	ip, [r1]
 80066e2:	b293      	uxth	r3, r2
 80066e4:	1ac3      	subs	r3, r0, r3
 80066e6:	0c12      	lsrs	r2, r2, #16
 80066e8:	fa13 f38c 	uxtah	r3, r3, ip
 80066ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80066f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066fa:	45c1      	cmp	r9, r8
 80066fc:	f841 3b04 	str.w	r3, [r1], #4
 8006700:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006704:	d2e9      	bcs.n	80066da <quorem+0xac>
 8006706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800670a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670e:	b922      	cbnz	r2, 800671a <quorem+0xec>
 8006710:	3b04      	subs	r3, #4
 8006712:	429d      	cmp	r5, r3
 8006714:	461a      	mov	r2, r3
 8006716:	d30a      	bcc.n	800672e <quorem+0x100>
 8006718:	613c      	str	r4, [r7, #16]
 800671a:	4630      	mov	r0, r6
 800671c:	b003      	add	sp, #12
 800671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	3b04      	subs	r3, #4
 8006726:	2a00      	cmp	r2, #0
 8006728:	d1ce      	bne.n	80066c8 <quorem+0x9a>
 800672a:	3c01      	subs	r4, #1
 800672c:	e7c9      	b.n	80066c2 <quorem+0x94>
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	3b04      	subs	r3, #4
 8006732:	2a00      	cmp	r2, #0
 8006734:	d1f0      	bne.n	8006718 <quorem+0xea>
 8006736:	3c01      	subs	r4, #1
 8006738:	e7eb      	b.n	8006712 <quorem+0xe4>
 800673a:	2000      	movs	r0, #0
 800673c:	e7ee      	b.n	800671c <quorem+0xee>
	...

08006740 <_dtoa_r>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	ed2d 8b04 	vpush	{d8-d9}
 8006748:	69c5      	ldr	r5, [r0, #28]
 800674a:	b093      	sub	sp, #76	; 0x4c
 800674c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006750:	ec57 6b10 	vmov	r6, r7, d0
 8006754:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006758:	9107      	str	r1, [sp, #28]
 800675a:	4604      	mov	r4, r0
 800675c:	920a      	str	r2, [sp, #40]	; 0x28
 800675e:	930d      	str	r3, [sp, #52]	; 0x34
 8006760:	b975      	cbnz	r5, 8006780 <_dtoa_r+0x40>
 8006762:	2010      	movs	r0, #16
 8006764:	f000 fe2a 	bl	80073bc <malloc>
 8006768:	4602      	mov	r2, r0
 800676a:	61e0      	str	r0, [r4, #28]
 800676c:	b920      	cbnz	r0, 8006778 <_dtoa_r+0x38>
 800676e:	4bae      	ldr	r3, [pc, #696]	; (8006a28 <_dtoa_r+0x2e8>)
 8006770:	21ef      	movs	r1, #239	; 0xef
 8006772:	48ae      	ldr	r0, [pc, #696]	; (8006a2c <_dtoa_r+0x2ec>)
 8006774:	f001 fc90 	bl	8008098 <__assert_func>
 8006778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800677c:	6005      	str	r5, [r0, #0]
 800677e:	60c5      	str	r5, [r0, #12]
 8006780:	69e3      	ldr	r3, [r4, #28]
 8006782:	6819      	ldr	r1, [r3, #0]
 8006784:	b151      	cbz	r1, 800679c <_dtoa_r+0x5c>
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	604a      	str	r2, [r1, #4]
 800678a:	2301      	movs	r3, #1
 800678c:	4093      	lsls	r3, r2
 800678e:	608b      	str	r3, [r1, #8]
 8006790:	4620      	mov	r0, r4
 8006792:	f000 ff07 	bl	80075a4 <_Bfree>
 8006796:	69e3      	ldr	r3, [r4, #28]
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	1e3b      	subs	r3, r7, #0
 800679e:	bfbb      	ittet	lt
 80067a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067a4:	9303      	strlt	r3, [sp, #12]
 80067a6:	2300      	movge	r3, #0
 80067a8:	2201      	movlt	r2, #1
 80067aa:	bfac      	ite	ge
 80067ac:	f8c8 3000 	strge.w	r3, [r8]
 80067b0:	f8c8 2000 	strlt.w	r2, [r8]
 80067b4:	4b9e      	ldr	r3, [pc, #632]	; (8006a30 <_dtoa_r+0x2f0>)
 80067b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80067ba:	ea33 0308 	bics.w	r3, r3, r8
 80067be:	d11b      	bne.n	80067f8 <_dtoa_r+0xb8>
 80067c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067cc:	4333      	orrs	r3, r6
 80067ce:	f000 8593 	beq.w	80072f8 <_dtoa_r+0xbb8>
 80067d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067d4:	b963      	cbnz	r3, 80067f0 <_dtoa_r+0xb0>
 80067d6:	4b97      	ldr	r3, [pc, #604]	; (8006a34 <_dtoa_r+0x2f4>)
 80067d8:	e027      	b.n	800682a <_dtoa_r+0xea>
 80067da:	4b97      	ldr	r3, [pc, #604]	; (8006a38 <_dtoa_r+0x2f8>)
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	9800      	ldr	r0, [sp, #0]
 80067e6:	b013      	add	sp, #76	; 0x4c
 80067e8:	ecbd 8b04 	vpop	{d8-d9}
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	4b90      	ldr	r3, [pc, #576]	; (8006a34 <_dtoa_r+0x2f4>)
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	3303      	adds	r3, #3
 80067f6:	e7f3      	b.n	80067e0 <_dtoa_r+0xa0>
 80067f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	ec51 0b17 	vmov	r0, r1, d7
 8006802:	eeb0 8a47 	vmov.f32	s16, s14
 8006806:	eef0 8a67 	vmov.f32	s17, s15
 800680a:	2300      	movs	r3, #0
 800680c:	f7fa f96c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006810:	4681      	mov	r9, r0
 8006812:	b160      	cbz	r0, 800682e <_dtoa_r+0xee>
 8006814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006816:	2301      	movs	r3, #1
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8568 	beq.w	80072f2 <_dtoa_r+0xbb2>
 8006822:	4b86      	ldr	r3, [pc, #536]	; (8006a3c <_dtoa_r+0x2fc>)
 8006824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	3b01      	subs	r3, #1
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	e7da      	b.n	80067e4 <_dtoa_r+0xa4>
 800682e:	aa10      	add	r2, sp, #64	; 0x40
 8006830:	a911      	add	r1, sp, #68	; 0x44
 8006832:	4620      	mov	r0, r4
 8006834:	eeb0 0a48 	vmov.f32	s0, s16
 8006838:	eef0 0a68 	vmov.f32	s1, s17
 800683c:	f001 f994 	bl	8007b68 <__d2b>
 8006840:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006844:	4682      	mov	sl, r0
 8006846:	2d00      	cmp	r5, #0
 8006848:	d07f      	beq.n	800694a <_dtoa_r+0x20a>
 800684a:	ee18 3a90 	vmov	r3, s17
 800684e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006852:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006856:	ec51 0b18 	vmov	r0, r1, d8
 800685a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800685e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006862:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006866:	4619      	mov	r1, r3
 8006868:	2200      	movs	r2, #0
 800686a:	4b75      	ldr	r3, [pc, #468]	; (8006a40 <_dtoa_r+0x300>)
 800686c:	f7f9 fd1c 	bl	80002a8 <__aeabi_dsub>
 8006870:	a367      	add	r3, pc, #412	; (adr r3, 8006a10 <_dtoa_r+0x2d0>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 fecf 	bl	8000618 <__aeabi_dmul>
 800687a:	a367      	add	r3, pc, #412	; (adr r3, 8006a18 <_dtoa_r+0x2d8>)
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f7f9 fd14 	bl	80002ac <__adddf3>
 8006884:	4606      	mov	r6, r0
 8006886:	4628      	mov	r0, r5
 8006888:	460f      	mov	r7, r1
 800688a:	f7f9 fe5b 	bl	8000544 <__aeabi_i2d>
 800688e:	a364      	add	r3, pc, #400	; (adr r3, 8006a20 <_dtoa_r+0x2e0>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7f9 fec0 	bl	8000618 <__aeabi_dmul>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4630      	mov	r0, r6
 800689e:	4639      	mov	r1, r7
 80068a0:	f7f9 fd04 	bl	80002ac <__adddf3>
 80068a4:	4606      	mov	r6, r0
 80068a6:	460f      	mov	r7, r1
 80068a8:	f7fa f966 	bl	8000b78 <__aeabi_d2iz>
 80068ac:	2200      	movs	r2, #0
 80068ae:	4683      	mov	fp, r0
 80068b0:	2300      	movs	r3, #0
 80068b2:	4630      	mov	r0, r6
 80068b4:	4639      	mov	r1, r7
 80068b6:	f7fa f921 	bl	8000afc <__aeabi_dcmplt>
 80068ba:	b148      	cbz	r0, 80068d0 <_dtoa_r+0x190>
 80068bc:	4658      	mov	r0, fp
 80068be:	f7f9 fe41 	bl	8000544 <__aeabi_i2d>
 80068c2:	4632      	mov	r2, r6
 80068c4:	463b      	mov	r3, r7
 80068c6:	f7fa f90f 	bl	8000ae8 <__aeabi_dcmpeq>
 80068ca:	b908      	cbnz	r0, 80068d0 <_dtoa_r+0x190>
 80068cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80068d0:	f1bb 0f16 	cmp.w	fp, #22
 80068d4:	d857      	bhi.n	8006986 <_dtoa_r+0x246>
 80068d6:	4b5b      	ldr	r3, [pc, #364]	; (8006a44 <_dtoa_r+0x304>)
 80068d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	ec51 0b18 	vmov	r0, r1, d8
 80068e4:	f7fa f90a 	bl	8000afc <__aeabi_dcmplt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d04e      	beq.n	800698a <_dtoa_r+0x24a>
 80068ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80068f0:	2300      	movs	r3, #0
 80068f2:	930c      	str	r3, [sp, #48]	; 0x30
 80068f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068f6:	1b5b      	subs	r3, r3, r5
 80068f8:	1e5a      	subs	r2, r3, #1
 80068fa:	bf45      	ittet	mi
 80068fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006900:	9305      	strmi	r3, [sp, #20]
 8006902:	2300      	movpl	r3, #0
 8006904:	2300      	movmi	r3, #0
 8006906:	9206      	str	r2, [sp, #24]
 8006908:	bf54      	ite	pl
 800690a:	9305      	strpl	r3, [sp, #20]
 800690c:	9306      	strmi	r3, [sp, #24]
 800690e:	f1bb 0f00 	cmp.w	fp, #0
 8006912:	db3c      	blt.n	800698e <_dtoa_r+0x24e>
 8006914:	9b06      	ldr	r3, [sp, #24]
 8006916:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800691a:	445b      	add	r3, fp
 800691c:	9306      	str	r3, [sp, #24]
 800691e:	2300      	movs	r3, #0
 8006920:	9308      	str	r3, [sp, #32]
 8006922:	9b07      	ldr	r3, [sp, #28]
 8006924:	2b09      	cmp	r3, #9
 8006926:	d868      	bhi.n	80069fa <_dtoa_r+0x2ba>
 8006928:	2b05      	cmp	r3, #5
 800692a:	bfc4      	itt	gt
 800692c:	3b04      	subgt	r3, #4
 800692e:	9307      	strgt	r3, [sp, #28]
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	f1a3 0302 	sub.w	r3, r3, #2
 8006936:	bfcc      	ite	gt
 8006938:	2500      	movgt	r5, #0
 800693a:	2501      	movle	r5, #1
 800693c:	2b03      	cmp	r3, #3
 800693e:	f200 8085 	bhi.w	8006a4c <_dtoa_r+0x30c>
 8006942:	e8df f003 	tbb	[pc, r3]
 8006946:	3b2e      	.short	0x3b2e
 8006948:	5839      	.short	0x5839
 800694a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800694e:	441d      	add	r5, r3
 8006950:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006954:	2b20      	cmp	r3, #32
 8006956:	bfc1      	itttt	gt
 8006958:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800695c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006960:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006964:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006968:	bfd6      	itet	le
 800696a:	f1c3 0320 	rsble	r3, r3, #32
 800696e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006972:	fa06 f003 	lslle.w	r0, r6, r3
 8006976:	f7f9 fdd5 	bl	8000524 <__aeabi_ui2d>
 800697a:	2201      	movs	r2, #1
 800697c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006980:	3d01      	subs	r5, #1
 8006982:	920e      	str	r2, [sp, #56]	; 0x38
 8006984:	e76f      	b.n	8006866 <_dtoa_r+0x126>
 8006986:	2301      	movs	r3, #1
 8006988:	e7b3      	b.n	80068f2 <_dtoa_r+0x1b2>
 800698a:	900c      	str	r0, [sp, #48]	; 0x30
 800698c:	e7b2      	b.n	80068f4 <_dtoa_r+0x1b4>
 800698e:	9b05      	ldr	r3, [sp, #20]
 8006990:	eba3 030b 	sub.w	r3, r3, fp
 8006994:	9305      	str	r3, [sp, #20]
 8006996:	f1cb 0300 	rsb	r3, fp, #0
 800699a:	9308      	str	r3, [sp, #32]
 800699c:	2300      	movs	r3, #0
 800699e:	930b      	str	r3, [sp, #44]	; 0x2c
 80069a0:	e7bf      	b.n	8006922 <_dtoa_r+0x1e2>
 80069a2:	2300      	movs	r3, #0
 80069a4:	9309      	str	r3, [sp, #36]	; 0x24
 80069a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dc52      	bgt.n	8006a52 <_dtoa_r+0x312>
 80069ac:	2301      	movs	r3, #1
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	461a      	mov	r2, r3
 80069b4:	920a      	str	r2, [sp, #40]	; 0x28
 80069b6:	e00b      	b.n	80069d0 <_dtoa_r+0x290>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e7f3      	b.n	80069a4 <_dtoa_r+0x264>
 80069bc:	2300      	movs	r3, #0
 80069be:	9309      	str	r3, [sp, #36]	; 0x24
 80069c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c2:	445b      	add	r3, fp
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	3301      	adds	r3, #1
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	9304      	str	r3, [sp, #16]
 80069cc:	bfb8      	it	lt
 80069ce:	2301      	movlt	r3, #1
 80069d0:	69e0      	ldr	r0, [r4, #28]
 80069d2:	2100      	movs	r1, #0
 80069d4:	2204      	movs	r2, #4
 80069d6:	f102 0614 	add.w	r6, r2, #20
 80069da:	429e      	cmp	r6, r3
 80069dc:	d93d      	bls.n	8006a5a <_dtoa_r+0x31a>
 80069de:	6041      	str	r1, [r0, #4]
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fd9f 	bl	8007524 <_Balloc>
 80069e6:	9000      	str	r0, [sp, #0]
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d139      	bne.n	8006a60 <_dtoa_r+0x320>
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <_dtoa_r+0x308>)
 80069ee:	4602      	mov	r2, r0
 80069f0:	f240 11af 	movw	r1, #431	; 0x1af
 80069f4:	e6bd      	b.n	8006772 <_dtoa_r+0x32>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e7e1      	b.n	80069be <_dtoa_r+0x27e>
 80069fa:	2501      	movs	r5, #1
 80069fc:	2300      	movs	r3, #0
 80069fe:	9307      	str	r3, [sp, #28]
 8006a00:	9509      	str	r5, [sp, #36]	; 0x24
 8006a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2312      	movs	r3, #18
 8006a0e:	e7d1      	b.n	80069b4 <_dtoa_r+0x274>
 8006a10:	636f4361 	.word	0x636f4361
 8006a14:	3fd287a7 	.word	0x3fd287a7
 8006a18:	8b60c8b3 	.word	0x8b60c8b3
 8006a1c:	3fc68a28 	.word	0x3fc68a28
 8006a20:	509f79fb 	.word	0x509f79fb
 8006a24:	3fd34413 	.word	0x3fd34413
 8006a28:	080087f5 	.word	0x080087f5
 8006a2c:	0800880c 	.word	0x0800880c
 8006a30:	7ff00000 	.word	0x7ff00000
 8006a34:	080087f1 	.word	0x080087f1
 8006a38:	080087e8 	.word	0x080087e8
 8006a3c:	080087c5 	.word	0x080087c5
 8006a40:	3ff80000 	.word	0x3ff80000
 8006a44:	080088f8 	.word	0x080088f8
 8006a48:	08008864 	.word	0x08008864
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a50:	e7d7      	b.n	8006a02 <_dtoa_r+0x2c2>
 8006a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	9304      	str	r3, [sp, #16]
 8006a58:	e7ba      	b.n	80069d0 <_dtoa_r+0x290>
 8006a5a:	3101      	adds	r1, #1
 8006a5c:	0052      	lsls	r2, r2, #1
 8006a5e:	e7ba      	b.n	80069d6 <_dtoa_r+0x296>
 8006a60:	69e3      	ldr	r3, [r4, #28]
 8006a62:	9a00      	ldr	r2, [sp, #0]
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	2b0e      	cmp	r3, #14
 8006a6a:	f200 80a8 	bhi.w	8006bbe <_dtoa_r+0x47e>
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	f000 80a5 	beq.w	8006bbe <_dtoa_r+0x47e>
 8006a74:	f1bb 0f00 	cmp.w	fp, #0
 8006a78:	dd38      	ble.n	8006aec <_dtoa_r+0x3ac>
 8006a7a:	4bc0      	ldr	r3, [pc, #768]	; (8006d7c <_dtoa_r+0x63c>)
 8006a7c:	f00b 020f 	and.w	r2, fp, #15
 8006a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006a88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006a90:	d019      	beq.n	8006ac6 <_dtoa_r+0x386>
 8006a92:	4bbb      	ldr	r3, [pc, #748]	; (8006d80 <_dtoa_r+0x640>)
 8006a94:	ec51 0b18 	vmov	r0, r1, d8
 8006a98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a9c:	f7f9 fee6 	bl	800086c <__aeabi_ddiv>
 8006aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa4:	f008 080f 	and.w	r8, r8, #15
 8006aa8:	2503      	movs	r5, #3
 8006aaa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006d80 <_dtoa_r+0x640>
 8006aae:	f1b8 0f00 	cmp.w	r8, #0
 8006ab2:	d10a      	bne.n	8006aca <_dtoa_r+0x38a>
 8006ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab8:	4632      	mov	r2, r6
 8006aba:	463b      	mov	r3, r7
 8006abc:	f7f9 fed6 	bl	800086c <__aeabi_ddiv>
 8006ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac4:	e02b      	b.n	8006b1e <_dtoa_r+0x3de>
 8006ac6:	2502      	movs	r5, #2
 8006ac8:	e7ef      	b.n	8006aaa <_dtoa_r+0x36a>
 8006aca:	f018 0f01 	tst.w	r8, #1
 8006ace:	d008      	beq.n	8006ae2 <_dtoa_r+0x3a2>
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ad8:	f7f9 fd9e 	bl	8000618 <__aeabi_dmul>
 8006adc:	3501      	adds	r5, #1
 8006ade:	4606      	mov	r6, r0
 8006ae0:	460f      	mov	r7, r1
 8006ae2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ae6:	f109 0908 	add.w	r9, r9, #8
 8006aea:	e7e0      	b.n	8006aae <_dtoa_r+0x36e>
 8006aec:	f000 809f 	beq.w	8006c2e <_dtoa_r+0x4ee>
 8006af0:	f1cb 0600 	rsb	r6, fp, #0
 8006af4:	4ba1      	ldr	r3, [pc, #644]	; (8006d7c <_dtoa_r+0x63c>)
 8006af6:	4fa2      	ldr	r7, [pc, #648]	; (8006d80 <_dtoa_r+0x640>)
 8006af8:	f006 020f 	and.w	r2, r6, #15
 8006afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	ec51 0b18 	vmov	r0, r1, d8
 8006b08:	f7f9 fd86 	bl	8000618 <__aeabi_dmul>
 8006b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b10:	1136      	asrs	r6, r6, #4
 8006b12:	2300      	movs	r3, #0
 8006b14:	2502      	movs	r5, #2
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	d17e      	bne.n	8006c18 <_dtoa_r+0x4d8>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1d0      	bne.n	8006ac0 <_dtoa_r+0x380>
 8006b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8084 	beq.w	8006c32 <_dtoa_r+0x4f2>
 8006b2a:	4b96      	ldr	r3, [pc, #600]	; (8006d84 <_dtoa_r+0x644>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4640      	mov	r0, r8
 8006b30:	4649      	mov	r1, r9
 8006b32:	f7f9 ffe3 	bl	8000afc <__aeabi_dcmplt>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d07b      	beq.n	8006c32 <_dtoa_r+0x4f2>
 8006b3a:	9b04      	ldr	r3, [sp, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d078      	beq.n	8006c32 <_dtoa_r+0x4f2>
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dd39      	ble.n	8006bba <_dtoa_r+0x47a>
 8006b46:	4b90      	ldr	r3, [pc, #576]	; (8006d88 <_dtoa_r+0x648>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	f7f9 fd63 	bl	8000618 <__aeabi_dmul>
 8006b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b56:	9e01      	ldr	r6, [sp, #4]
 8006b58:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7f9 fcee 	bl	8000544 <__aeabi_i2d>
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	f7f9 fd54 	bl	8000618 <__aeabi_dmul>
 8006b70:	4b86      	ldr	r3, [pc, #536]	; (8006d8c <_dtoa_r+0x64c>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fb9a 	bl	80002ac <__adddf3>
 8006b78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	2e00      	cmp	r6, #0
 8006b84:	d158      	bne.n	8006c38 <_dtoa_r+0x4f8>
 8006b86:	4b82      	ldr	r3, [pc, #520]	; (8006d90 <_dtoa_r+0x650>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	f7f9 fb8b 	bl	80002a8 <__aeabi_dsub>
 8006b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b96:	4680      	mov	r8, r0
 8006b98:	4689      	mov	r9, r1
 8006b9a:	f7f9 ffcd 	bl	8000b38 <__aeabi_dcmpgt>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f040 8296 	bne.w	80070d0 <_dtoa_r+0x990>
 8006ba4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006ba8:	4640      	mov	r0, r8
 8006baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 ffa4 	bl	8000afc <__aeabi_dcmplt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f040 8289 	bne.w	80070cc <_dtoa_r+0x98c>
 8006bba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006bbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f2c0 814e 	blt.w	8006e62 <_dtoa_r+0x722>
 8006bc6:	f1bb 0f0e 	cmp.w	fp, #14
 8006bca:	f300 814a 	bgt.w	8006e62 <_dtoa_r+0x722>
 8006bce:	4b6b      	ldr	r3, [pc, #428]	; (8006d7c <_dtoa_r+0x63c>)
 8006bd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f280 80dc 	bge.w	8006d98 <_dtoa_r+0x658>
 8006be0:	9b04      	ldr	r3, [sp, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f300 80d8 	bgt.w	8006d98 <_dtoa_r+0x658>
 8006be8:	f040 826f 	bne.w	80070ca <_dtoa_r+0x98a>
 8006bec:	4b68      	ldr	r3, [pc, #416]	; (8006d90 <_dtoa_r+0x650>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	f7f9 fd10 	bl	8000618 <__aeabi_dmul>
 8006bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bfc:	f7f9 ff92 	bl	8000b24 <__aeabi_dcmpge>
 8006c00:	9e04      	ldr	r6, [sp, #16]
 8006c02:	4637      	mov	r7, r6
 8006c04:	2800      	cmp	r0, #0
 8006c06:	f040 8245 	bne.w	8007094 <_dtoa_r+0x954>
 8006c0a:	9d00      	ldr	r5, [sp, #0]
 8006c0c:	2331      	movs	r3, #49	; 0x31
 8006c0e:	f805 3b01 	strb.w	r3, [r5], #1
 8006c12:	f10b 0b01 	add.w	fp, fp, #1
 8006c16:	e241      	b.n	800709c <_dtoa_r+0x95c>
 8006c18:	07f2      	lsls	r2, r6, #31
 8006c1a:	d505      	bpl.n	8006c28 <_dtoa_r+0x4e8>
 8006c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c20:	f7f9 fcfa 	bl	8000618 <__aeabi_dmul>
 8006c24:	3501      	adds	r5, #1
 8006c26:	2301      	movs	r3, #1
 8006c28:	1076      	asrs	r6, r6, #1
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	e773      	b.n	8006b16 <_dtoa_r+0x3d6>
 8006c2e:	2502      	movs	r5, #2
 8006c30:	e775      	b.n	8006b1e <_dtoa_r+0x3de>
 8006c32:	9e04      	ldr	r6, [sp, #16]
 8006c34:	465f      	mov	r7, fp
 8006c36:	e792      	b.n	8006b5e <_dtoa_r+0x41e>
 8006c38:	9900      	ldr	r1, [sp, #0]
 8006c3a:	4b50      	ldr	r3, [pc, #320]	; (8006d7c <_dtoa_r+0x63c>)
 8006c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c40:	4431      	add	r1, r6
 8006c42:	9102      	str	r1, [sp, #8]
 8006c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c46:	eeb0 9a47 	vmov.f32	s18, s14
 8006c4a:	eef0 9a67 	vmov.f32	s19, s15
 8006c4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c56:	2900      	cmp	r1, #0
 8006c58:	d044      	beq.n	8006ce4 <_dtoa_r+0x5a4>
 8006c5a:	494e      	ldr	r1, [pc, #312]	; (8006d94 <_dtoa_r+0x654>)
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f7f9 fe05 	bl	800086c <__aeabi_ddiv>
 8006c62:	ec53 2b19 	vmov	r2, r3, d9
 8006c66:	f7f9 fb1f 	bl	80002a8 <__aeabi_dsub>
 8006c6a:	9d00      	ldr	r5, [sp, #0]
 8006c6c:	ec41 0b19 	vmov	d9, r0, r1
 8006c70:	4649      	mov	r1, r9
 8006c72:	4640      	mov	r0, r8
 8006c74:	f7f9 ff80 	bl	8000b78 <__aeabi_d2iz>
 8006c78:	4606      	mov	r6, r0
 8006c7a:	f7f9 fc63 	bl	8000544 <__aeabi_i2d>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 fb0f 	bl	80002a8 <__aeabi_dsub>
 8006c8a:	3630      	adds	r6, #48	; 0x30
 8006c8c:	f805 6b01 	strb.w	r6, [r5], #1
 8006c90:	ec53 2b19 	vmov	r2, r3, d9
 8006c94:	4680      	mov	r8, r0
 8006c96:	4689      	mov	r9, r1
 8006c98:	f7f9 ff30 	bl	8000afc <__aeabi_dcmplt>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d164      	bne.n	8006d6a <_dtoa_r+0x62a>
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	4937      	ldr	r1, [pc, #220]	; (8006d84 <_dtoa_r+0x644>)
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	f7f9 fafe 	bl	80002a8 <__aeabi_dsub>
 8006cac:	ec53 2b19 	vmov	r2, r3, d9
 8006cb0:	f7f9 ff24 	bl	8000afc <__aeabi_dcmplt>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f040 80b6 	bne.w	8006e26 <_dtoa_r+0x6e6>
 8006cba:	9b02      	ldr	r3, [sp, #8]
 8006cbc:	429d      	cmp	r5, r3
 8006cbe:	f43f af7c 	beq.w	8006bba <_dtoa_r+0x47a>
 8006cc2:	4b31      	ldr	r3, [pc, #196]	; (8006d88 <_dtoa_r+0x648>)
 8006cc4:	ec51 0b19 	vmov	r0, r1, d9
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f7f9 fca5 	bl	8000618 <__aeabi_dmul>
 8006cce:	4b2e      	ldr	r3, [pc, #184]	; (8006d88 <_dtoa_r+0x648>)
 8006cd0:	ec41 0b19 	vmov	d9, r0, r1
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	4649      	mov	r1, r9
 8006cda:	f7f9 fc9d 	bl	8000618 <__aeabi_dmul>
 8006cde:	4680      	mov	r8, r0
 8006ce0:	4689      	mov	r9, r1
 8006ce2:	e7c5      	b.n	8006c70 <_dtoa_r+0x530>
 8006ce4:	ec51 0b17 	vmov	r0, r1, d7
 8006ce8:	f7f9 fc96 	bl	8000618 <__aeabi_dmul>
 8006cec:	9b02      	ldr	r3, [sp, #8]
 8006cee:	9d00      	ldr	r5, [sp, #0]
 8006cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cf2:	ec41 0b19 	vmov	d9, r0, r1
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	f7f9 ff3d 	bl	8000b78 <__aeabi_d2iz>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	f7f9 fc20 	bl	8000544 <__aeabi_i2d>
 8006d04:	3630      	adds	r6, #48	; 0x30
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	f7f9 facb 	bl	80002a8 <__aeabi_dsub>
 8006d12:	f805 6b01 	strb.w	r6, [r5], #1
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	429d      	cmp	r5, r3
 8006d1a:	4680      	mov	r8, r0
 8006d1c:	4689      	mov	r9, r1
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	d124      	bne.n	8006d6e <_dtoa_r+0x62e>
 8006d24:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <_dtoa_r+0x654>)
 8006d26:	ec51 0b19 	vmov	r0, r1, d9
 8006d2a:	f7f9 fabf 	bl	80002ac <__adddf3>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4640      	mov	r0, r8
 8006d34:	4649      	mov	r1, r9
 8006d36:	f7f9 feff 	bl	8000b38 <__aeabi_dcmpgt>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d173      	bne.n	8006e26 <_dtoa_r+0x6e6>
 8006d3e:	ec53 2b19 	vmov	r2, r3, d9
 8006d42:	4914      	ldr	r1, [pc, #80]	; (8006d94 <_dtoa_r+0x654>)
 8006d44:	2000      	movs	r0, #0
 8006d46:	f7f9 faaf 	bl	80002a8 <__aeabi_dsub>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	f7f9 fed3 	bl	8000afc <__aeabi_dcmplt>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	f43f af2f 	beq.w	8006bba <_dtoa_r+0x47a>
 8006d5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d5e:	1e6b      	subs	r3, r5, #1
 8006d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d66:	2b30      	cmp	r3, #48	; 0x30
 8006d68:	d0f8      	beq.n	8006d5c <_dtoa_r+0x61c>
 8006d6a:	46bb      	mov	fp, r7
 8006d6c:	e04a      	b.n	8006e04 <_dtoa_r+0x6c4>
 8006d6e:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <_dtoa_r+0x648>)
 8006d70:	f7f9 fc52 	bl	8000618 <__aeabi_dmul>
 8006d74:	4680      	mov	r8, r0
 8006d76:	4689      	mov	r9, r1
 8006d78:	e7bd      	b.n	8006cf6 <_dtoa_r+0x5b6>
 8006d7a:	bf00      	nop
 8006d7c:	080088f8 	.word	0x080088f8
 8006d80:	080088d0 	.word	0x080088d0
 8006d84:	3ff00000 	.word	0x3ff00000
 8006d88:	40240000 	.word	0x40240000
 8006d8c:	401c0000 	.word	0x401c0000
 8006d90:	40140000 	.word	0x40140000
 8006d94:	3fe00000 	.word	0x3fe00000
 8006d98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d9c:	9d00      	ldr	r5, [sp, #0]
 8006d9e:	4642      	mov	r2, r8
 8006da0:	464b      	mov	r3, r9
 8006da2:	4630      	mov	r0, r6
 8006da4:	4639      	mov	r1, r7
 8006da6:	f7f9 fd61 	bl	800086c <__aeabi_ddiv>
 8006daa:	f7f9 fee5 	bl	8000b78 <__aeabi_d2iz>
 8006dae:	9001      	str	r0, [sp, #4]
 8006db0:	f7f9 fbc8 	bl	8000544 <__aeabi_i2d>
 8006db4:	4642      	mov	r2, r8
 8006db6:	464b      	mov	r3, r9
 8006db8:	f7f9 fc2e 	bl	8000618 <__aeabi_dmul>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fa70 	bl	80002a8 <__aeabi_dsub>
 8006dc8:	9e01      	ldr	r6, [sp, #4]
 8006dca:	9f04      	ldr	r7, [sp, #16]
 8006dcc:	3630      	adds	r6, #48	; 0x30
 8006dce:	f805 6b01 	strb.w	r6, [r5], #1
 8006dd2:	9e00      	ldr	r6, [sp, #0]
 8006dd4:	1bae      	subs	r6, r5, r6
 8006dd6:	42b7      	cmp	r7, r6
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	d134      	bne.n	8006e48 <_dtoa_r+0x708>
 8006dde:	f7f9 fa65 	bl	80002ac <__adddf3>
 8006de2:	4642      	mov	r2, r8
 8006de4:	464b      	mov	r3, r9
 8006de6:	4606      	mov	r6, r0
 8006de8:	460f      	mov	r7, r1
 8006dea:	f7f9 fea5 	bl	8000b38 <__aeabi_dcmpgt>
 8006dee:	b9c8      	cbnz	r0, 8006e24 <_dtoa_r+0x6e4>
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	4630      	mov	r0, r6
 8006df6:	4639      	mov	r1, r7
 8006df8:	f7f9 fe76 	bl	8000ae8 <__aeabi_dcmpeq>
 8006dfc:	b110      	cbz	r0, 8006e04 <_dtoa_r+0x6c4>
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	07db      	lsls	r3, r3, #31
 8006e02:	d40f      	bmi.n	8006e24 <_dtoa_r+0x6e4>
 8006e04:	4651      	mov	r1, sl
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 fbcc 	bl	80075a4 <_Bfree>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e10:	702b      	strb	r3, [r5, #0]
 8006e12:	f10b 0301 	add.w	r3, fp, #1
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f43f ace2 	beq.w	80067e4 <_dtoa_r+0xa4>
 8006e20:	601d      	str	r5, [r3, #0]
 8006e22:	e4df      	b.n	80067e4 <_dtoa_r+0xa4>
 8006e24:	465f      	mov	r7, fp
 8006e26:	462b      	mov	r3, r5
 8006e28:	461d      	mov	r5, r3
 8006e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2e:	2a39      	cmp	r2, #57	; 0x39
 8006e30:	d106      	bne.n	8006e40 <_dtoa_r+0x700>
 8006e32:	9a00      	ldr	r2, [sp, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d1f7      	bne.n	8006e28 <_dtoa_r+0x6e8>
 8006e38:	9900      	ldr	r1, [sp, #0]
 8006e3a:	2230      	movs	r2, #48	; 0x30
 8006e3c:	3701      	adds	r7, #1
 8006e3e:	700a      	strb	r2, [r1, #0]
 8006e40:	781a      	ldrb	r2, [r3, #0]
 8006e42:	3201      	adds	r2, #1
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e790      	b.n	8006d6a <_dtoa_r+0x62a>
 8006e48:	4ba3      	ldr	r3, [pc, #652]	; (80070d8 <_dtoa_r+0x998>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7f9 fbe4 	bl	8000618 <__aeabi_dmul>
 8006e50:	2200      	movs	r2, #0
 8006e52:	2300      	movs	r3, #0
 8006e54:	4606      	mov	r6, r0
 8006e56:	460f      	mov	r7, r1
 8006e58:	f7f9 fe46 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d09e      	beq.n	8006d9e <_dtoa_r+0x65e>
 8006e60:	e7d0      	b.n	8006e04 <_dtoa_r+0x6c4>
 8006e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	f000 80ca 	beq.w	8006ffe <_dtoa_r+0x8be>
 8006e6a:	9a07      	ldr	r2, [sp, #28]
 8006e6c:	2a01      	cmp	r2, #1
 8006e6e:	f300 80ad 	bgt.w	8006fcc <_dtoa_r+0x88c>
 8006e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	f000 80a5 	beq.w	8006fc4 <_dtoa_r+0x884>
 8006e7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e7e:	9e08      	ldr	r6, [sp, #32]
 8006e80:	9d05      	ldr	r5, [sp, #20]
 8006e82:	9a05      	ldr	r2, [sp, #20]
 8006e84:	441a      	add	r2, r3
 8006e86:	9205      	str	r2, [sp, #20]
 8006e88:	9a06      	ldr	r2, [sp, #24]
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	441a      	add	r2, r3
 8006e8e:	4620      	mov	r0, r4
 8006e90:	9206      	str	r2, [sp, #24]
 8006e92:	f000 fc3d 	bl	8007710 <__i2b>
 8006e96:	4607      	mov	r7, r0
 8006e98:	b165      	cbz	r5, 8006eb4 <_dtoa_r+0x774>
 8006e9a:	9b06      	ldr	r3, [sp, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dd09      	ble.n	8006eb4 <_dtoa_r+0x774>
 8006ea0:	42ab      	cmp	r3, r5
 8006ea2:	9a05      	ldr	r2, [sp, #20]
 8006ea4:	bfa8      	it	ge
 8006ea6:	462b      	movge	r3, r5
 8006ea8:	1ad2      	subs	r2, r2, r3
 8006eaa:	9205      	str	r2, [sp, #20]
 8006eac:	9a06      	ldr	r2, [sp, #24]
 8006eae:	1aed      	subs	r5, r5, r3
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	9306      	str	r3, [sp, #24]
 8006eb4:	9b08      	ldr	r3, [sp, #32]
 8006eb6:	b1f3      	cbz	r3, 8006ef6 <_dtoa_r+0x7b6>
 8006eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 80a3 	beq.w	8007006 <_dtoa_r+0x8c6>
 8006ec0:	2e00      	cmp	r6, #0
 8006ec2:	dd10      	ble.n	8006ee6 <_dtoa_r+0x7a6>
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fce1 	bl	8007890 <__pow5mult>
 8006ece:	4652      	mov	r2, sl
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4607      	mov	r7, r0
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fc31 	bl	800773c <__multiply>
 8006eda:	4651      	mov	r1, sl
 8006edc:	4680      	mov	r8, r0
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 fb60 	bl	80075a4 <_Bfree>
 8006ee4:	46c2      	mov	sl, r8
 8006ee6:	9b08      	ldr	r3, [sp, #32]
 8006ee8:	1b9a      	subs	r2, r3, r6
 8006eea:	d004      	beq.n	8006ef6 <_dtoa_r+0x7b6>
 8006eec:	4651      	mov	r1, sl
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 fcce 	bl	8007890 <__pow5mult>
 8006ef4:	4682      	mov	sl, r0
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fc09 	bl	8007710 <__i2b>
 8006efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	4606      	mov	r6, r0
 8006f04:	f340 8081 	ble.w	800700a <_dtoa_r+0x8ca>
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4601      	mov	r1, r0
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 fcbf 	bl	8007890 <__pow5mult>
 8006f12:	9b07      	ldr	r3, [sp, #28]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	4606      	mov	r6, r0
 8006f18:	dd7a      	ble.n	8007010 <_dtoa_r+0x8d0>
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	6933      	ldr	r3, [r6, #16]
 8006f20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f24:	6918      	ldr	r0, [r3, #16]
 8006f26:	f000 fba5 	bl	8007674 <__hi0bits>
 8006f2a:	f1c0 0020 	rsb	r0, r0, #32
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	4418      	add	r0, r3
 8006f32:	f010 001f 	ands.w	r0, r0, #31
 8006f36:	f000 8094 	beq.w	8007062 <_dtoa_r+0x922>
 8006f3a:	f1c0 0320 	rsb	r3, r0, #32
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	f340 8085 	ble.w	800704e <_dtoa_r+0x90e>
 8006f44:	9b05      	ldr	r3, [sp, #20]
 8006f46:	f1c0 001c 	rsb	r0, r0, #28
 8006f4a:	4403      	add	r3, r0
 8006f4c:	9305      	str	r3, [sp, #20]
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	4403      	add	r3, r0
 8006f52:	4405      	add	r5, r0
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	9b05      	ldr	r3, [sp, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dd05      	ble.n	8006f68 <_dtoa_r+0x828>
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	461a      	mov	r2, r3
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fcef 	bl	8007944 <__lshift>
 8006f66:	4682      	mov	sl, r0
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dd05      	ble.n	8006f7a <_dtoa_r+0x83a>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	461a      	mov	r2, r3
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 fce6 	bl	8007944 <__lshift>
 8006f78:	4606      	mov	r6, r0
 8006f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d072      	beq.n	8007066 <_dtoa_r+0x926>
 8006f80:	4631      	mov	r1, r6
 8006f82:	4650      	mov	r0, sl
 8006f84:	f000 fd4a 	bl	8007a1c <__mcmp>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	da6c      	bge.n	8007066 <_dtoa_r+0x926>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	4651      	mov	r1, sl
 8006f90:	220a      	movs	r2, #10
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fb28 	bl	80075e8 <__multadd>
 8006f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006f9e:	4682      	mov	sl, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 81b0 	beq.w	8007306 <_dtoa_r+0xbc6>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	4639      	mov	r1, r7
 8006faa:	220a      	movs	r2, #10
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fb1b 	bl	80075e8 <__multadd>
 8006fb2:	9b01      	ldr	r3, [sp, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	f300 8096 	bgt.w	80070e8 <_dtoa_r+0x9a8>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	dc59      	bgt.n	8007076 <_dtoa_r+0x936>
 8006fc2:	e091      	b.n	80070e8 <_dtoa_r+0x9a8>
 8006fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fca:	e758      	b.n	8006e7e <_dtoa_r+0x73e>
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	1e5e      	subs	r6, r3, #1
 8006fd0:	9b08      	ldr	r3, [sp, #32]
 8006fd2:	42b3      	cmp	r3, r6
 8006fd4:	bfbf      	itttt	lt
 8006fd6:	9b08      	ldrlt	r3, [sp, #32]
 8006fd8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006fda:	9608      	strlt	r6, [sp, #32]
 8006fdc:	1af3      	sublt	r3, r6, r3
 8006fde:	bfb4      	ite	lt
 8006fe0:	18d2      	addlt	r2, r2, r3
 8006fe2:	1b9e      	subge	r6, r3, r6
 8006fe4:	9b04      	ldr	r3, [sp, #16]
 8006fe6:	bfbc      	itt	lt
 8006fe8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006fea:	2600      	movlt	r6, #0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfb7      	itett	lt
 8006ff0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ff4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ff8:	1a9d      	sublt	r5, r3, r2
 8006ffa:	2300      	movlt	r3, #0
 8006ffc:	e741      	b.n	8006e82 <_dtoa_r+0x742>
 8006ffe:	9e08      	ldr	r6, [sp, #32]
 8007000:	9d05      	ldr	r5, [sp, #20]
 8007002:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007004:	e748      	b.n	8006e98 <_dtoa_r+0x758>
 8007006:	9a08      	ldr	r2, [sp, #32]
 8007008:	e770      	b.n	8006eec <_dtoa_r+0x7ac>
 800700a:	9b07      	ldr	r3, [sp, #28]
 800700c:	2b01      	cmp	r3, #1
 800700e:	dc19      	bgt.n	8007044 <_dtoa_r+0x904>
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	b9bb      	cbnz	r3, 8007044 <_dtoa_r+0x904>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800701a:	b99b      	cbnz	r3, 8007044 <_dtoa_r+0x904>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007022:	0d1b      	lsrs	r3, r3, #20
 8007024:	051b      	lsls	r3, r3, #20
 8007026:	b183      	cbz	r3, 800704a <_dtoa_r+0x90a>
 8007028:	9b05      	ldr	r3, [sp, #20]
 800702a:	3301      	adds	r3, #1
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	9b06      	ldr	r3, [sp, #24]
 8007030:	3301      	adds	r3, #1
 8007032:	9306      	str	r3, [sp, #24]
 8007034:	f04f 0801 	mov.w	r8, #1
 8007038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800703a:	2b00      	cmp	r3, #0
 800703c:	f47f af6f 	bne.w	8006f1e <_dtoa_r+0x7de>
 8007040:	2001      	movs	r0, #1
 8007042:	e774      	b.n	8006f2e <_dtoa_r+0x7ee>
 8007044:	f04f 0800 	mov.w	r8, #0
 8007048:	e7f6      	b.n	8007038 <_dtoa_r+0x8f8>
 800704a:	4698      	mov	r8, r3
 800704c:	e7f4      	b.n	8007038 <_dtoa_r+0x8f8>
 800704e:	d082      	beq.n	8006f56 <_dtoa_r+0x816>
 8007050:	9a05      	ldr	r2, [sp, #20]
 8007052:	331c      	adds	r3, #28
 8007054:	441a      	add	r2, r3
 8007056:	9205      	str	r2, [sp, #20]
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	441a      	add	r2, r3
 800705c:	441d      	add	r5, r3
 800705e:	9206      	str	r2, [sp, #24]
 8007060:	e779      	b.n	8006f56 <_dtoa_r+0x816>
 8007062:	4603      	mov	r3, r0
 8007064:	e7f4      	b.n	8007050 <_dtoa_r+0x910>
 8007066:	9b04      	ldr	r3, [sp, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	dc37      	bgt.n	80070dc <_dtoa_r+0x99c>
 800706c:	9b07      	ldr	r3, [sp, #28]
 800706e:	2b02      	cmp	r3, #2
 8007070:	dd34      	ble.n	80070dc <_dtoa_r+0x99c>
 8007072:	9b04      	ldr	r3, [sp, #16]
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	b963      	cbnz	r3, 8007094 <_dtoa_r+0x954>
 800707a:	4631      	mov	r1, r6
 800707c:	2205      	movs	r2, #5
 800707e:	4620      	mov	r0, r4
 8007080:	f000 fab2 	bl	80075e8 <__multadd>
 8007084:	4601      	mov	r1, r0
 8007086:	4606      	mov	r6, r0
 8007088:	4650      	mov	r0, sl
 800708a:	f000 fcc7 	bl	8007a1c <__mcmp>
 800708e:	2800      	cmp	r0, #0
 8007090:	f73f adbb 	bgt.w	8006c0a <_dtoa_r+0x4ca>
 8007094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007096:	9d00      	ldr	r5, [sp, #0]
 8007098:	ea6f 0b03 	mvn.w	fp, r3
 800709c:	f04f 0800 	mov.w	r8, #0
 80070a0:	4631      	mov	r1, r6
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 fa7e 	bl	80075a4 <_Bfree>
 80070a8:	2f00      	cmp	r7, #0
 80070aa:	f43f aeab 	beq.w	8006e04 <_dtoa_r+0x6c4>
 80070ae:	f1b8 0f00 	cmp.w	r8, #0
 80070b2:	d005      	beq.n	80070c0 <_dtoa_r+0x980>
 80070b4:	45b8      	cmp	r8, r7
 80070b6:	d003      	beq.n	80070c0 <_dtoa_r+0x980>
 80070b8:	4641      	mov	r1, r8
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 fa72 	bl	80075a4 <_Bfree>
 80070c0:	4639      	mov	r1, r7
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fa6e 	bl	80075a4 <_Bfree>
 80070c8:	e69c      	b.n	8006e04 <_dtoa_r+0x6c4>
 80070ca:	2600      	movs	r6, #0
 80070cc:	4637      	mov	r7, r6
 80070ce:	e7e1      	b.n	8007094 <_dtoa_r+0x954>
 80070d0:	46bb      	mov	fp, r7
 80070d2:	4637      	mov	r7, r6
 80070d4:	e599      	b.n	8006c0a <_dtoa_r+0x4ca>
 80070d6:	bf00      	nop
 80070d8:	40240000 	.word	0x40240000
 80070dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80c8 	beq.w	8007274 <_dtoa_r+0xb34>
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	dd05      	ble.n	80070f8 <_dtoa_r+0x9b8>
 80070ec:	4639      	mov	r1, r7
 80070ee:	462a      	mov	r2, r5
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 fc27 	bl	8007944 <__lshift>
 80070f6:	4607      	mov	r7, r0
 80070f8:	f1b8 0f00 	cmp.w	r8, #0
 80070fc:	d05b      	beq.n	80071b6 <_dtoa_r+0xa76>
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fa0f 	bl	8007524 <_Balloc>
 8007106:	4605      	mov	r5, r0
 8007108:	b928      	cbnz	r0, 8007116 <_dtoa_r+0x9d6>
 800710a:	4b83      	ldr	r3, [pc, #524]	; (8007318 <_dtoa_r+0xbd8>)
 800710c:	4602      	mov	r2, r0
 800710e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007112:	f7ff bb2e 	b.w	8006772 <_dtoa_r+0x32>
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	3202      	adds	r2, #2
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	f107 010c 	add.w	r1, r7, #12
 8007120:	300c      	adds	r0, #12
 8007122:	f000 ffab 	bl	800807c <memcpy>
 8007126:	2201      	movs	r2, #1
 8007128:	4629      	mov	r1, r5
 800712a:	4620      	mov	r0, r4
 800712c:	f000 fc0a 	bl	8007944 <__lshift>
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800713a:	4413      	add	r3, r2
 800713c:	9308      	str	r3, [sp, #32]
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	46b8      	mov	r8, r7
 8007146:	9306      	str	r3, [sp, #24]
 8007148:	4607      	mov	r7, r0
 800714a:	9b04      	ldr	r3, [sp, #16]
 800714c:	4631      	mov	r1, r6
 800714e:	3b01      	subs	r3, #1
 8007150:	4650      	mov	r0, sl
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	f7ff fa6b 	bl	800662e <quorem>
 8007158:	4641      	mov	r1, r8
 800715a:	9002      	str	r0, [sp, #8]
 800715c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007160:	4650      	mov	r0, sl
 8007162:	f000 fc5b 	bl	8007a1c <__mcmp>
 8007166:	463a      	mov	r2, r7
 8007168:	9005      	str	r0, [sp, #20]
 800716a:	4631      	mov	r1, r6
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fc71 	bl	8007a54 <__mdiff>
 8007172:	68c2      	ldr	r2, [r0, #12]
 8007174:	4605      	mov	r5, r0
 8007176:	bb02      	cbnz	r2, 80071ba <_dtoa_r+0xa7a>
 8007178:	4601      	mov	r1, r0
 800717a:	4650      	mov	r0, sl
 800717c:	f000 fc4e 	bl	8007a1c <__mcmp>
 8007180:	4602      	mov	r2, r0
 8007182:	4629      	mov	r1, r5
 8007184:	4620      	mov	r0, r4
 8007186:	9209      	str	r2, [sp, #36]	; 0x24
 8007188:	f000 fa0c 	bl	80075a4 <_Bfree>
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007190:	9d04      	ldr	r5, [sp, #16]
 8007192:	ea43 0102 	orr.w	r1, r3, r2
 8007196:	9b06      	ldr	r3, [sp, #24]
 8007198:	4319      	orrs	r1, r3
 800719a:	d110      	bne.n	80071be <_dtoa_r+0xa7e>
 800719c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071a0:	d029      	beq.n	80071f6 <_dtoa_r+0xab6>
 80071a2:	9b05      	ldr	r3, [sp, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	dd02      	ble.n	80071ae <_dtoa_r+0xa6e>
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	f883 9000 	strb.w	r9, [r3]
 80071b4:	e774      	b.n	80070a0 <_dtoa_r+0x960>
 80071b6:	4638      	mov	r0, r7
 80071b8:	e7ba      	b.n	8007130 <_dtoa_r+0x9f0>
 80071ba:	2201      	movs	r2, #1
 80071bc:	e7e1      	b.n	8007182 <_dtoa_r+0xa42>
 80071be:	9b05      	ldr	r3, [sp, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	db04      	blt.n	80071ce <_dtoa_r+0xa8e>
 80071c4:	9907      	ldr	r1, [sp, #28]
 80071c6:	430b      	orrs	r3, r1
 80071c8:	9906      	ldr	r1, [sp, #24]
 80071ca:	430b      	orrs	r3, r1
 80071cc:	d120      	bne.n	8007210 <_dtoa_r+0xad0>
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	dded      	ble.n	80071ae <_dtoa_r+0xa6e>
 80071d2:	4651      	mov	r1, sl
 80071d4:	2201      	movs	r2, #1
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fbb4 	bl	8007944 <__lshift>
 80071dc:	4631      	mov	r1, r6
 80071de:	4682      	mov	sl, r0
 80071e0:	f000 fc1c 	bl	8007a1c <__mcmp>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	dc03      	bgt.n	80071f0 <_dtoa_r+0xab0>
 80071e8:	d1e1      	bne.n	80071ae <_dtoa_r+0xa6e>
 80071ea:	f019 0f01 	tst.w	r9, #1
 80071ee:	d0de      	beq.n	80071ae <_dtoa_r+0xa6e>
 80071f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071f4:	d1d8      	bne.n	80071a8 <_dtoa_r+0xa68>
 80071f6:	9a01      	ldr	r2, [sp, #4]
 80071f8:	2339      	movs	r3, #57	; 0x39
 80071fa:	7013      	strb	r3, [r2, #0]
 80071fc:	462b      	mov	r3, r5
 80071fe:	461d      	mov	r5, r3
 8007200:	3b01      	subs	r3, #1
 8007202:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007206:	2a39      	cmp	r2, #57	; 0x39
 8007208:	d06c      	beq.n	80072e4 <_dtoa_r+0xba4>
 800720a:	3201      	adds	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e747      	b.n	80070a0 <_dtoa_r+0x960>
 8007210:	2a00      	cmp	r2, #0
 8007212:	dd07      	ble.n	8007224 <_dtoa_r+0xae4>
 8007214:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007218:	d0ed      	beq.n	80071f6 <_dtoa_r+0xab6>
 800721a:	9a01      	ldr	r2, [sp, #4]
 800721c:	f109 0301 	add.w	r3, r9, #1
 8007220:	7013      	strb	r3, [r2, #0]
 8007222:	e73d      	b.n	80070a0 <_dtoa_r+0x960>
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	9a08      	ldr	r2, [sp, #32]
 8007228:	f803 9c01 	strb.w	r9, [r3, #-1]
 800722c:	4293      	cmp	r3, r2
 800722e:	d043      	beq.n	80072b8 <_dtoa_r+0xb78>
 8007230:	4651      	mov	r1, sl
 8007232:	2300      	movs	r3, #0
 8007234:	220a      	movs	r2, #10
 8007236:	4620      	mov	r0, r4
 8007238:	f000 f9d6 	bl	80075e8 <__multadd>
 800723c:	45b8      	cmp	r8, r7
 800723e:	4682      	mov	sl, r0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	f04f 020a 	mov.w	r2, #10
 8007248:	4641      	mov	r1, r8
 800724a:	4620      	mov	r0, r4
 800724c:	d107      	bne.n	800725e <_dtoa_r+0xb1e>
 800724e:	f000 f9cb 	bl	80075e8 <__multadd>
 8007252:	4680      	mov	r8, r0
 8007254:	4607      	mov	r7, r0
 8007256:	9b04      	ldr	r3, [sp, #16]
 8007258:	3301      	adds	r3, #1
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	e775      	b.n	800714a <_dtoa_r+0xa0a>
 800725e:	f000 f9c3 	bl	80075e8 <__multadd>
 8007262:	4639      	mov	r1, r7
 8007264:	4680      	mov	r8, r0
 8007266:	2300      	movs	r3, #0
 8007268:	220a      	movs	r2, #10
 800726a:	4620      	mov	r0, r4
 800726c:	f000 f9bc 	bl	80075e8 <__multadd>
 8007270:	4607      	mov	r7, r0
 8007272:	e7f0      	b.n	8007256 <_dtoa_r+0xb16>
 8007274:	9b04      	ldr	r3, [sp, #16]
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	9d00      	ldr	r5, [sp, #0]
 800727a:	4631      	mov	r1, r6
 800727c:	4650      	mov	r0, sl
 800727e:	f7ff f9d6 	bl	800662e <quorem>
 8007282:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007286:	9b00      	ldr	r3, [sp, #0]
 8007288:	f805 9b01 	strb.w	r9, [r5], #1
 800728c:	1aea      	subs	r2, r5, r3
 800728e:	9b01      	ldr	r3, [sp, #4]
 8007290:	4293      	cmp	r3, r2
 8007292:	dd07      	ble.n	80072a4 <_dtoa_r+0xb64>
 8007294:	4651      	mov	r1, sl
 8007296:	2300      	movs	r3, #0
 8007298:	220a      	movs	r2, #10
 800729a:	4620      	mov	r0, r4
 800729c:	f000 f9a4 	bl	80075e8 <__multadd>
 80072a0:	4682      	mov	sl, r0
 80072a2:	e7ea      	b.n	800727a <_dtoa_r+0xb3a>
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bfc8      	it	gt
 80072aa:	461d      	movgt	r5, r3
 80072ac:	9b00      	ldr	r3, [sp, #0]
 80072ae:	bfd8      	it	le
 80072b0:	2501      	movle	r5, #1
 80072b2:	441d      	add	r5, r3
 80072b4:	f04f 0800 	mov.w	r8, #0
 80072b8:	4651      	mov	r1, sl
 80072ba:	2201      	movs	r2, #1
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 fb41 	bl	8007944 <__lshift>
 80072c2:	4631      	mov	r1, r6
 80072c4:	4682      	mov	sl, r0
 80072c6:	f000 fba9 	bl	8007a1c <__mcmp>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	dc96      	bgt.n	80071fc <_dtoa_r+0xabc>
 80072ce:	d102      	bne.n	80072d6 <_dtoa_r+0xb96>
 80072d0:	f019 0f01 	tst.w	r9, #1
 80072d4:	d192      	bne.n	80071fc <_dtoa_r+0xabc>
 80072d6:	462b      	mov	r3, r5
 80072d8:	461d      	mov	r5, r3
 80072da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072de:	2a30      	cmp	r2, #48	; 0x30
 80072e0:	d0fa      	beq.n	80072d8 <_dtoa_r+0xb98>
 80072e2:	e6dd      	b.n	80070a0 <_dtoa_r+0x960>
 80072e4:	9a00      	ldr	r2, [sp, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d189      	bne.n	80071fe <_dtoa_r+0xabe>
 80072ea:	f10b 0b01 	add.w	fp, fp, #1
 80072ee:	2331      	movs	r3, #49	; 0x31
 80072f0:	e796      	b.n	8007220 <_dtoa_r+0xae0>
 80072f2:	4b0a      	ldr	r3, [pc, #40]	; (800731c <_dtoa_r+0xbdc>)
 80072f4:	f7ff ba99 	b.w	800682a <_dtoa_r+0xea>
 80072f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f47f aa6d 	bne.w	80067da <_dtoa_r+0x9a>
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <_dtoa_r+0xbe0>)
 8007302:	f7ff ba92 	b.w	800682a <_dtoa_r+0xea>
 8007306:	9b01      	ldr	r3, [sp, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	dcb5      	bgt.n	8007278 <_dtoa_r+0xb38>
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	2b02      	cmp	r3, #2
 8007310:	f73f aeb1 	bgt.w	8007076 <_dtoa_r+0x936>
 8007314:	e7b0      	b.n	8007278 <_dtoa_r+0xb38>
 8007316:	bf00      	nop
 8007318:	08008864 	.word	0x08008864
 800731c:	080087c4 	.word	0x080087c4
 8007320:	080087e8 	.word	0x080087e8

08007324 <_free_r>:
 8007324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007326:	2900      	cmp	r1, #0
 8007328:	d044      	beq.n	80073b4 <_free_r+0x90>
 800732a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800732e:	9001      	str	r0, [sp, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f1a1 0404 	sub.w	r4, r1, #4
 8007336:	bfb8      	it	lt
 8007338:	18e4      	addlt	r4, r4, r3
 800733a:	f000 f8e7 	bl	800750c <__malloc_lock>
 800733e:	4a1e      	ldr	r2, [pc, #120]	; (80073b8 <_free_r+0x94>)
 8007340:	9801      	ldr	r0, [sp, #4]
 8007342:	6813      	ldr	r3, [r2, #0]
 8007344:	b933      	cbnz	r3, 8007354 <_free_r+0x30>
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	6014      	str	r4, [r2, #0]
 800734a:	b003      	add	sp, #12
 800734c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007350:	f000 b8e2 	b.w	8007518 <__malloc_unlock>
 8007354:	42a3      	cmp	r3, r4
 8007356:	d908      	bls.n	800736a <_free_r+0x46>
 8007358:	6825      	ldr	r5, [r4, #0]
 800735a:	1961      	adds	r1, r4, r5
 800735c:	428b      	cmp	r3, r1
 800735e:	bf01      	itttt	eq
 8007360:	6819      	ldreq	r1, [r3, #0]
 8007362:	685b      	ldreq	r3, [r3, #4]
 8007364:	1949      	addeq	r1, r1, r5
 8007366:	6021      	streq	r1, [r4, #0]
 8007368:	e7ed      	b.n	8007346 <_free_r+0x22>
 800736a:	461a      	mov	r2, r3
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	b10b      	cbz	r3, 8007374 <_free_r+0x50>
 8007370:	42a3      	cmp	r3, r4
 8007372:	d9fa      	bls.n	800736a <_free_r+0x46>
 8007374:	6811      	ldr	r1, [r2, #0]
 8007376:	1855      	adds	r5, r2, r1
 8007378:	42a5      	cmp	r5, r4
 800737a:	d10b      	bne.n	8007394 <_free_r+0x70>
 800737c:	6824      	ldr	r4, [r4, #0]
 800737e:	4421      	add	r1, r4
 8007380:	1854      	adds	r4, r2, r1
 8007382:	42a3      	cmp	r3, r4
 8007384:	6011      	str	r1, [r2, #0]
 8007386:	d1e0      	bne.n	800734a <_free_r+0x26>
 8007388:	681c      	ldr	r4, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	6053      	str	r3, [r2, #4]
 800738e:	440c      	add	r4, r1
 8007390:	6014      	str	r4, [r2, #0]
 8007392:	e7da      	b.n	800734a <_free_r+0x26>
 8007394:	d902      	bls.n	800739c <_free_r+0x78>
 8007396:	230c      	movs	r3, #12
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	e7d6      	b.n	800734a <_free_r+0x26>
 800739c:	6825      	ldr	r5, [r4, #0]
 800739e:	1961      	adds	r1, r4, r5
 80073a0:	428b      	cmp	r3, r1
 80073a2:	bf04      	itt	eq
 80073a4:	6819      	ldreq	r1, [r3, #0]
 80073a6:	685b      	ldreq	r3, [r3, #4]
 80073a8:	6063      	str	r3, [r4, #4]
 80073aa:	bf04      	itt	eq
 80073ac:	1949      	addeq	r1, r1, r5
 80073ae:	6021      	streq	r1, [r4, #0]
 80073b0:	6054      	str	r4, [r2, #4]
 80073b2:	e7ca      	b.n	800734a <_free_r+0x26>
 80073b4:	b003      	add	sp, #12
 80073b6:	bd30      	pop	{r4, r5, pc}
 80073b8:	20000b5c 	.word	0x20000b5c

080073bc <malloc>:
 80073bc:	4b02      	ldr	r3, [pc, #8]	; (80073c8 <malloc+0xc>)
 80073be:	4601      	mov	r1, r0
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	f000 b823 	b.w	800740c <_malloc_r>
 80073c6:	bf00      	nop
 80073c8:	20000064 	.word	0x20000064

080073cc <sbrk_aligned>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	4e0e      	ldr	r6, [pc, #56]	; (8007408 <sbrk_aligned+0x3c>)
 80073d0:	460c      	mov	r4, r1
 80073d2:	6831      	ldr	r1, [r6, #0]
 80073d4:	4605      	mov	r5, r0
 80073d6:	b911      	cbnz	r1, 80073de <sbrk_aligned+0x12>
 80073d8:	f000 fe40 	bl	800805c <_sbrk_r>
 80073dc:	6030      	str	r0, [r6, #0]
 80073de:	4621      	mov	r1, r4
 80073e0:	4628      	mov	r0, r5
 80073e2:	f000 fe3b 	bl	800805c <_sbrk_r>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d00a      	beq.n	8007400 <sbrk_aligned+0x34>
 80073ea:	1cc4      	adds	r4, r0, #3
 80073ec:	f024 0403 	bic.w	r4, r4, #3
 80073f0:	42a0      	cmp	r0, r4
 80073f2:	d007      	beq.n	8007404 <sbrk_aligned+0x38>
 80073f4:	1a21      	subs	r1, r4, r0
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 fe30 	bl	800805c <_sbrk_r>
 80073fc:	3001      	adds	r0, #1
 80073fe:	d101      	bne.n	8007404 <sbrk_aligned+0x38>
 8007400:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007404:	4620      	mov	r0, r4
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	20000b60 	.word	0x20000b60

0800740c <_malloc_r>:
 800740c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007410:	1ccd      	adds	r5, r1, #3
 8007412:	f025 0503 	bic.w	r5, r5, #3
 8007416:	3508      	adds	r5, #8
 8007418:	2d0c      	cmp	r5, #12
 800741a:	bf38      	it	cc
 800741c:	250c      	movcc	r5, #12
 800741e:	2d00      	cmp	r5, #0
 8007420:	4607      	mov	r7, r0
 8007422:	db01      	blt.n	8007428 <_malloc_r+0x1c>
 8007424:	42a9      	cmp	r1, r5
 8007426:	d905      	bls.n	8007434 <_malloc_r+0x28>
 8007428:	230c      	movs	r3, #12
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	2600      	movs	r6, #0
 800742e:	4630      	mov	r0, r6
 8007430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007434:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007508 <_malloc_r+0xfc>
 8007438:	f000 f868 	bl	800750c <__malloc_lock>
 800743c:	f8d8 3000 	ldr.w	r3, [r8]
 8007440:	461c      	mov	r4, r3
 8007442:	bb5c      	cbnz	r4, 800749c <_malloc_r+0x90>
 8007444:	4629      	mov	r1, r5
 8007446:	4638      	mov	r0, r7
 8007448:	f7ff ffc0 	bl	80073cc <sbrk_aligned>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	4604      	mov	r4, r0
 8007450:	d155      	bne.n	80074fe <_malloc_r+0xf2>
 8007452:	f8d8 4000 	ldr.w	r4, [r8]
 8007456:	4626      	mov	r6, r4
 8007458:	2e00      	cmp	r6, #0
 800745a:	d145      	bne.n	80074e8 <_malloc_r+0xdc>
 800745c:	2c00      	cmp	r4, #0
 800745e:	d048      	beq.n	80074f2 <_malloc_r+0xe6>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	4631      	mov	r1, r6
 8007464:	4638      	mov	r0, r7
 8007466:	eb04 0903 	add.w	r9, r4, r3
 800746a:	f000 fdf7 	bl	800805c <_sbrk_r>
 800746e:	4581      	cmp	r9, r0
 8007470:	d13f      	bne.n	80074f2 <_malloc_r+0xe6>
 8007472:	6821      	ldr	r1, [r4, #0]
 8007474:	1a6d      	subs	r5, r5, r1
 8007476:	4629      	mov	r1, r5
 8007478:	4638      	mov	r0, r7
 800747a:	f7ff ffa7 	bl	80073cc <sbrk_aligned>
 800747e:	3001      	adds	r0, #1
 8007480:	d037      	beq.n	80074f2 <_malloc_r+0xe6>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	442b      	add	r3, r5
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	f8d8 3000 	ldr.w	r3, [r8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d038      	beq.n	8007502 <_malloc_r+0xf6>
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	42a2      	cmp	r2, r4
 8007494:	d12b      	bne.n	80074ee <_malloc_r+0xe2>
 8007496:	2200      	movs	r2, #0
 8007498:	605a      	str	r2, [r3, #4]
 800749a:	e00f      	b.n	80074bc <_malloc_r+0xb0>
 800749c:	6822      	ldr	r2, [r4, #0]
 800749e:	1b52      	subs	r2, r2, r5
 80074a0:	d41f      	bmi.n	80074e2 <_malloc_r+0xd6>
 80074a2:	2a0b      	cmp	r2, #11
 80074a4:	d917      	bls.n	80074d6 <_malloc_r+0xca>
 80074a6:	1961      	adds	r1, r4, r5
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	6025      	str	r5, [r4, #0]
 80074ac:	bf18      	it	ne
 80074ae:	6059      	strne	r1, [r3, #4]
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	bf08      	it	eq
 80074b4:	f8c8 1000 	streq.w	r1, [r8]
 80074b8:	5162      	str	r2, [r4, r5]
 80074ba:	604b      	str	r3, [r1, #4]
 80074bc:	4638      	mov	r0, r7
 80074be:	f104 060b 	add.w	r6, r4, #11
 80074c2:	f000 f829 	bl	8007518 <__malloc_unlock>
 80074c6:	f026 0607 	bic.w	r6, r6, #7
 80074ca:	1d23      	adds	r3, r4, #4
 80074cc:	1af2      	subs	r2, r6, r3
 80074ce:	d0ae      	beq.n	800742e <_malloc_r+0x22>
 80074d0:	1b9b      	subs	r3, r3, r6
 80074d2:	50a3      	str	r3, [r4, r2]
 80074d4:	e7ab      	b.n	800742e <_malloc_r+0x22>
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	6862      	ldr	r2, [r4, #4]
 80074da:	d1dd      	bne.n	8007498 <_malloc_r+0x8c>
 80074dc:	f8c8 2000 	str.w	r2, [r8]
 80074e0:	e7ec      	b.n	80074bc <_malloc_r+0xb0>
 80074e2:	4623      	mov	r3, r4
 80074e4:	6864      	ldr	r4, [r4, #4]
 80074e6:	e7ac      	b.n	8007442 <_malloc_r+0x36>
 80074e8:	4634      	mov	r4, r6
 80074ea:	6876      	ldr	r6, [r6, #4]
 80074ec:	e7b4      	b.n	8007458 <_malloc_r+0x4c>
 80074ee:	4613      	mov	r3, r2
 80074f0:	e7cc      	b.n	800748c <_malloc_r+0x80>
 80074f2:	230c      	movs	r3, #12
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	4638      	mov	r0, r7
 80074f8:	f000 f80e 	bl	8007518 <__malloc_unlock>
 80074fc:	e797      	b.n	800742e <_malloc_r+0x22>
 80074fe:	6025      	str	r5, [r4, #0]
 8007500:	e7dc      	b.n	80074bc <_malloc_r+0xb0>
 8007502:	605b      	str	r3, [r3, #4]
 8007504:	deff      	udf	#255	; 0xff
 8007506:	bf00      	nop
 8007508:	20000b5c 	.word	0x20000b5c

0800750c <__malloc_lock>:
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <__malloc_lock+0x8>)
 800750e:	f7ff b88c 	b.w	800662a <__retarget_lock_acquire_recursive>
 8007512:	bf00      	nop
 8007514:	20000b58 	.word	0x20000b58

08007518 <__malloc_unlock>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__malloc_unlock+0x8>)
 800751a:	f7ff b887 	b.w	800662c <__retarget_lock_release_recursive>
 800751e:	bf00      	nop
 8007520:	20000b58 	.word	0x20000b58

08007524 <_Balloc>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	69c6      	ldr	r6, [r0, #28]
 8007528:	4604      	mov	r4, r0
 800752a:	460d      	mov	r5, r1
 800752c:	b976      	cbnz	r6, 800754c <_Balloc+0x28>
 800752e:	2010      	movs	r0, #16
 8007530:	f7ff ff44 	bl	80073bc <malloc>
 8007534:	4602      	mov	r2, r0
 8007536:	61e0      	str	r0, [r4, #28]
 8007538:	b920      	cbnz	r0, 8007544 <_Balloc+0x20>
 800753a:	4b18      	ldr	r3, [pc, #96]	; (800759c <_Balloc+0x78>)
 800753c:	4818      	ldr	r0, [pc, #96]	; (80075a0 <_Balloc+0x7c>)
 800753e:	216b      	movs	r1, #107	; 0x6b
 8007540:	f000 fdaa 	bl	8008098 <__assert_func>
 8007544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007548:	6006      	str	r6, [r0, #0]
 800754a:	60c6      	str	r6, [r0, #12]
 800754c:	69e6      	ldr	r6, [r4, #28]
 800754e:	68f3      	ldr	r3, [r6, #12]
 8007550:	b183      	cbz	r3, 8007574 <_Balloc+0x50>
 8007552:	69e3      	ldr	r3, [r4, #28]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800755a:	b9b8      	cbnz	r0, 800758c <_Balloc+0x68>
 800755c:	2101      	movs	r1, #1
 800755e:	fa01 f605 	lsl.w	r6, r1, r5
 8007562:	1d72      	adds	r2, r6, #5
 8007564:	0092      	lsls	r2, r2, #2
 8007566:	4620      	mov	r0, r4
 8007568:	f000 fdb4 	bl	80080d4 <_calloc_r>
 800756c:	b160      	cbz	r0, 8007588 <_Balloc+0x64>
 800756e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007572:	e00e      	b.n	8007592 <_Balloc+0x6e>
 8007574:	2221      	movs	r2, #33	; 0x21
 8007576:	2104      	movs	r1, #4
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fdab 	bl	80080d4 <_calloc_r>
 800757e:	69e3      	ldr	r3, [r4, #28]
 8007580:	60f0      	str	r0, [r6, #12]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e4      	bne.n	8007552 <_Balloc+0x2e>
 8007588:	2000      	movs	r0, #0
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	6802      	ldr	r2, [r0, #0]
 800758e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007592:	2300      	movs	r3, #0
 8007594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007598:	e7f7      	b.n	800758a <_Balloc+0x66>
 800759a:	bf00      	nop
 800759c:	080087f5 	.word	0x080087f5
 80075a0:	08008875 	.word	0x08008875

080075a4 <_Bfree>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	69c6      	ldr	r6, [r0, #28]
 80075a8:	4605      	mov	r5, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	b976      	cbnz	r6, 80075cc <_Bfree+0x28>
 80075ae:	2010      	movs	r0, #16
 80075b0:	f7ff ff04 	bl	80073bc <malloc>
 80075b4:	4602      	mov	r2, r0
 80075b6:	61e8      	str	r0, [r5, #28]
 80075b8:	b920      	cbnz	r0, 80075c4 <_Bfree+0x20>
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <_Bfree+0x3c>)
 80075bc:	4809      	ldr	r0, [pc, #36]	; (80075e4 <_Bfree+0x40>)
 80075be:	218f      	movs	r1, #143	; 0x8f
 80075c0:	f000 fd6a 	bl	8008098 <__assert_func>
 80075c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c8:	6006      	str	r6, [r0, #0]
 80075ca:	60c6      	str	r6, [r0, #12]
 80075cc:	b13c      	cbz	r4, 80075de <_Bfree+0x3a>
 80075ce:	69eb      	ldr	r3, [r5, #28]
 80075d0:	6862      	ldr	r2, [r4, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075d8:	6021      	str	r1, [r4, #0]
 80075da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	080087f5 	.word	0x080087f5
 80075e4:	08008875 	.word	0x08008875

080075e8 <__multadd>:
 80075e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ec:	690d      	ldr	r5, [r1, #16]
 80075ee:	4607      	mov	r7, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	461e      	mov	r6, r3
 80075f4:	f101 0c14 	add.w	ip, r1, #20
 80075f8:	2000      	movs	r0, #0
 80075fa:	f8dc 3000 	ldr.w	r3, [ip]
 80075fe:	b299      	uxth	r1, r3
 8007600:	fb02 6101 	mla	r1, r2, r1, r6
 8007604:	0c1e      	lsrs	r6, r3, #16
 8007606:	0c0b      	lsrs	r3, r1, #16
 8007608:	fb02 3306 	mla	r3, r2, r6, r3
 800760c:	b289      	uxth	r1, r1
 800760e:	3001      	adds	r0, #1
 8007610:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007614:	4285      	cmp	r5, r0
 8007616:	f84c 1b04 	str.w	r1, [ip], #4
 800761a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800761e:	dcec      	bgt.n	80075fa <__multadd+0x12>
 8007620:	b30e      	cbz	r6, 8007666 <__multadd+0x7e>
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	42ab      	cmp	r3, r5
 8007626:	dc19      	bgt.n	800765c <__multadd+0x74>
 8007628:	6861      	ldr	r1, [r4, #4]
 800762a:	4638      	mov	r0, r7
 800762c:	3101      	adds	r1, #1
 800762e:	f7ff ff79 	bl	8007524 <_Balloc>
 8007632:	4680      	mov	r8, r0
 8007634:	b928      	cbnz	r0, 8007642 <__multadd+0x5a>
 8007636:	4602      	mov	r2, r0
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <__multadd+0x84>)
 800763a:	480d      	ldr	r0, [pc, #52]	; (8007670 <__multadd+0x88>)
 800763c:	21ba      	movs	r1, #186	; 0xba
 800763e:	f000 fd2b 	bl	8008098 <__assert_func>
 8007642:	6922      	ldr	r2, [r4, #16]
 8007644:	3202      	adds	r2, #2
 8007646:	f104 010c 	add.w	r1, r4, #12
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	300c      	adds	r0, #12
 800764e:	f000 fd15 	bl	800807c <memcpy>
 8007652:	4621      	mov	r1, r4
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ffa5 	bl	80075a4 <_Bfree>
 800765a:	4644      	mov	r4, r8
 800765c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007660:	3501      	adds	r5, #1
 8007662:	615e      	str	r6, [r3, #20]
 8007664:	6125      	str	r5, [r4, #16]
 8007666:	4620      	mov	r0, r4
 8007668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800766c:	08008864 	.word	0x08008864
 8007670:	08008875 	.word	0x08008875

08007674 <__hi0bits>:
 8007674:	0c03      	lsrs	r3, r0, #16
 8007676:	041b      	lsls	r3, r3, #16
 8007678:	b9d3      	cbnz	r3, 80076b0 <__hi0bits+0x3c>
 800767a:	0400      	lsls	r0, r0, #16
 800767c:	2310      	movs	r3, #16
 800767e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007682:	bf04      	itt	eq
 8007684:	0200      	lsleq	r0, r0, #8
 8007686:	3308      	addeq	r3, #8
 8007688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800768c:	bf04      	itt	eq
 800768e:	0100      	lsleq	r0, r0, #4
 8007690:	3304      	addeq	r3, #4
 8007692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007696:	bf04      	itt	eq
 8007698:	0080      	lsleq	r0, r0, #2
 800769a:	3302      	addeq	r3, #2
 800769c:	2800      	cmp	r0, #0
 800769e:	db05      	blt.n	80076ac <__hi0bits+0x38>
 80076a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076a4:	f103 0301 	add.w	r3, r3, #1
 80076a8:	bf08      	it	eq
 80076aa:	2320      	moveq	r3, #32
 80076ac:	4618      	mov	r0, r3
 80076ae:	4770      	bx	lr
 80076b0:	2300      	movs	r3, #0
 80076b2:	e7e4      	b.n	800767e <__hi0bits+0xa>

080076b4 <__lo0bits>:
 80076b4:	6803      	ldr	r3, [r0, #0]
 80076b6:	f013 0207 	ands.w	r2, r3, #7
 80076ba:	d00c      	beq.n	80076d6 <__lo0bits+0x22>
 80076bc:	07d9      	lsls	r1, r3, #31
 80076be:	d422      	bmi.n	8007706 <__lo0bits+0x52>
 80076c0:	079a      	lsls	r2, r3, #30
 80076c2:	bf49      	itett	mi
 80076c4:	085b      	lsrmi	r3, r3, #1
 80076c6:	089b      	lsrpl	r3, r3, #2
 80076c8:	6003      	strmi	r3, [r0, #0]
 80076ca:	2201      	movmi	r2, #1
 80076cc:	bf5c      	itt	pl
 80076ce:	6003      	strpl	r3, [r0, #0]
 80076d0:	2202      	movpl	r2, #2
 80076d2:	4610      	mov	r0, r2
 80076d4:	4770      	bx	lr
 80076d6:	b299      	uxth	r1, r3
 80076d8:	b909      	cbnz	r1, 80076de <__lo0bits+0x2a>
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	2210      	movs	r2, #16
 80076de:	b2d9      	uxtb	r1, r3
 80076e0:	b909      	cbnz	r1, 80076e6 <__lo0bits+0x32>
 80076e2:	3208      	adds	r2, #8
 80076e4:	0a1b      	lsrs	r3, r3, #8
 80076e6:	0719      	lsls	r1, r3, #28
 80076e8:	bf04      	itt	eq
 80076ea:	091b      	lsreq	r3, r3, #4
 80076ec:	3204      	addeq	r2, #4
 80076ee:	0799      	lsls	r1, r3, #30
 80076f0:	bf04      	itt	eq
 80076f2:	089b      	lsreq	r3, r3, #2
 80076f4:	3202      	addeq	r2, #2
 80076f6:	07d9      	lsls	r1, r3, #31
 80076f8:	d403      	bmi.n	8007702 <__lo0bits+0x4e>
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	f102 0201 	add.w	r2, r2, #1
 8007700:	d003      	beq.n	800770a <__lo0bits+0x56>
 8007702:	6003      	str	r3, [r0, #0]
 8007704:	e7e5      	b.n	80076d2 <__lo0bits+0x1e>
 8007706:	2200      	movs	r2, #0
 8007708:	e7e3      	b.n	80076d2 <__lo0bits+0x1e>
 800770a:	2220      	movs	r2, #32
 800770c:	e7e1      	b.n	80076d2 <__lo0bits+0x1e>
	...

08007710 <__i2b>:
 8007710:	b510      	push	{r4, lr}
 8007712:	460c      	mov	r4, r1
 8007714:	2101      	movs	r1, #1
 8007716:	f7ff ff05 	bl	8007524 <_Balloc>
 800771a:	4602      	mov	r2, r0
 800771c:	b928      	cbnz	r0, 800772a <__i2b+0x1a>
 800771e:	4b05      	ldr	r3, [pc, #20]	; (8007734 <__i2b+0x24>)
 8007720:	4805      	ldr	r0, [pc, #20]	; (8007738 <__i2b+0x28>)
 8007722:	f240 1145 	movw	r1, #325	; 0x145
 8007726:	f000 fcb7 	bl	8008098 <__assert_func>
 800772a:	2301      	movs	r3, #1
 800772c:	6144      	str	r4, [r0, #20]
 800772e:	6103      	str	r3, [r0, #16]
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop
 8007734:	08008864 	.word	0x08008864
 8007738:	08008875 	.word	0x08008875

0800773c <__multiply>:
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	4691      	mov	r9, r2
 8007742:	690a      	ldr	r2, [r1, #16]
 8007744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007748:	429a      	cmp	r2, r3
 800774a:	bfb8      	it	lt
 800774c:	460b      	movlt	r3, r1
 800774e:	460c      	mov	r4, r1
 8007750:	bfbc      	itt	lt
 8007752:	464c      	movlt	r4, r9
 8007754:	4699      	movlt	r9, r3
 8007756:	6927      	ldr	r7, [r4, #16]
 8007758:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800775c:	68a3      	ldr	r3, [r4, #8]
 800775e:	6861      	ldr	r1, [r4, #4]
 8007760:	eb07 060a 	add.w	r6, r7, sl
 8007764:	42b3      	cmp	r3, r6
 8007766:	b085      	sub	sp, #20
 8007768:	bfb8      	it	lt
 800776a:	3101      	addlt	r1, #1
 800776c:	f7ff feda 	bl	8007524 <_Balloc>
 8007770:	b930      	cbnz	r0, 8007780 <__multiply+0x44>
 8007772:	4602      	mov	r2, r0
 8007774:	4b44      	ldr	r3, [pc, #272]	; (8007888 <__multiply+0x14c>)
 8007776:	4845      	ldr	r0, [pc, #276]	; (800788c <__multiply+0x150>)
 8007778:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800777c:	f000 fc8c 	bl	8008098 <__assert_func>
 8007780:	f100 0514 	add.w	r5, r0, #20
 8007784:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007788:	462b      	mov	r3, r5
 800778a:	2200      	movs	r2, #0
 800778c:	4543      	cmp	r3, r8
 800778e:	d321      	bcc.n	80077d4 <__multiply+0x98>
 8007790:	f104 0314 	add.w	r3, r4, #20
 8007794:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007798:	f109 0314 	add.w	r3, r9, #20
 800779c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077a0:	9202      	str	r2, [sp, #8]
 80077a2:	1b3a      	subs	r2, r7, r4
 80077a4:	3a15      	subs	r2, #21
 80077a6:	f022 0203 	bic.w	r2, r2, #3
 80077aa:	3204      	adds	r2, #4
 80077ac:	f104 0115 	add.w	r1, r4, #21
 80077b0:	428f      	cmp	r7, r1
 80077b2:	bf38      	it	cc
 80077b4:	2204      	movcc	r2, #4
 80077b6:	9201      	str	r2, [sp, #4]
 80077b8:	9a02      	ldr	r2, [sp, #8]
 80077ba:	9303      	str	r3, [sp, #12]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d80c      	bhi.n	80077da <__multiply+0x9e>
 80077c0:	2e00      	cmp	r6, #0
 80077c2:	dd03      	ble.n	80077cc <__multiply+0x90>
 80077c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d05b      	beq.n	8007884 <__multiply+0x148>
 80077cc:	6106      	str	r6, [r0, #16]
 80077ce:	b005      	add	sp, #20
 80077d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d4:	f843 2b04 	str.w	r2, [r3], #4
 80077d8:	e7d8      	b.n	800778c <__multiply+0x50>
 80077da:	f8b3 a000 	ldrh.w	sl, [r3]
 80077de:	f1ba 0f00 	cmp.w	sl, #0
 80077e2:	d024      	beq.n	800782e <__multiply+0xf2>
 80077e4:	f104 0e14 	add.w	lr, r4, #20
 80077e8:	46a9      	mov	r9, r5
 80077ea:	f04f 0c00 	mov.w	ip, #0
 80077ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077f2:	f8d9 1000 	ldr.w	r1, [r9]
 80077f6:	fa1f fb82 	uxth.w	fp, r2
 80077fa:	b289      	uxth	r1, r1
 80077fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007800:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007804:	f8d9 2000 	ldr.w	r2, [r9]
 8007808:	4461      	add	r1, ip
 800780a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800780e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007812:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007816:	b289      	uxth	r1, r1
 8007818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800781c:	4577      	cmp	r7, lr
 800781e:	f849 1b04 	str.w	r1, [r9], #4
 8007822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007826:	d8e2      	bhi.n	80077ee <__multiply+0xb2>
 8007828:	9a01      	ldr	r2, [sp, #4]
 800782a:	f845 c002 	str.w	ip, [r5, r2]
 800782e:	9a03      	ldr	r2, [sp, #12]
 8007830:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007834:	3304      	adds	r3, #4
 8007836:	f1b9 0f00 	cmp.w	r9, #0
 800783a:	d021      	beq.n	8007880 <__multiply+0x144>
 800783c:	6829      	ldr	r1, [r5, #0]
 800783e:	f104 0c14 	add.w	ip, r4, #20
 8007842:	46ae      	mov	lr, r5
 8007844:	f04f 0a00 	mov.w	sl, #0
 8007848:	f8bc b000 	ldrh.w	fp, [ip]
 800784c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007850:	fb09 220b 	mla	r2, r9, fp, r2
 8007854:	4452      	add	r2, sl
 8007856:	b289      	uxth	r1, r1
 8007858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800785c:	f84e 1b04 	str.w	r1, [lr], #4
 8007860:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007864:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007868:	f8be 1000 	ldrh.w	r1, [lr]
 800786c:	fb09 110a 	mla	r1, r9, sl, r1
 8007870:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007874:	4567      	cmp	r7, ip
 8007876:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800787a:	d8e5      	bhi.n	8007848 <__multiply+0x10c>
 800787c:	9a01      	ldr	r2, [sp, #4]
 800787e:	50a9      	str	r1, [r5, r2]
 8007880:	3504      	adds	r5, #4
 8007882:	e799      	b.n	80077b8 <__multiply+0x7c>
 8007884:	3e01      	subs	r6, #1
 8007886:	e79b      	b.n	80077c0 <__multiply+0x84>
 8007888:	08008864 	.word	0x08008864
 800788c:	08008875 	.word	0x08008875

08007890 <__pow5mult>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	4615      	mov	r5, r2
 8007896:	f012 0203 	ands.w	r2, r2, #3
 800789a:	4606      	mov	r6, r0
 800789c:	460f      	mov	r7, r1
 800789e:	d007      	beq.n	80078b0 <__pow5mult+0x20>
 80078a0:	4c25      	ldr	r4, [pc, #148]	; (8007938 <__pow5mult+0xa8>)
 80078a2:	3a01      	subs	r2, #1
 80078a4:	2300      	movs	r3, #0
 80078a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078aa:	f7ff fe9d 	bl	80075e8 <__multadd>
 80078ae:	4607      	mov	r7, r0
 80078b0:	10ad      	asrs	r5, r5, #2
 80078b2:	d03d      	beq.n	8007930 <__pow5mult+0xa0>
 80078b4:	69f4      	ldr	r4, [r6, #28]
 80078b6:	b97c      	cbnz	r4, 80078d8 <__pow5mult+0x48>
 80078b8:	2010      	movs	r0, #16
 80078ba:	f7ff fd7f 	bl	80073bc <malloc>
 80078be:	4602      	mov	r2, r0
 80078c0:	61f0      	str	r0, [r6, #28]
 80078c2:	b928      	cbnz	r0, 80078d0 <__pow5mult+0x40>
 80078c4:	4b1d      	ldr	r3, [pc, #116]	; (800793c <__pow5mult+0xac>)
 80078c6:	481e      	ldr	r0, [pc, #120]	; (8007940 <__pow5mult+0xb0>)
 80078c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80078cc:	f000 fbe4 	bl	8008098 <__assert_func>
 80078d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078d4:	6004      	str	r4, [r0, #0]
 80078d6:	60c4      	str	r4, [r0, #12]
 80078d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80078dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078e0:	b94c      	cbnz	r4, 80078f6 <__pow5mult+0x66>
 80078e2:	f240 2171 	movw	r1, #625	; 0x271
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7ff ff12 	bl	8007710 <__i2b>
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80078f2:	4604      	mov	r4, r0
 80078f4:	6003      	str	r3, [r0, #0]
 80078f6:	f04f 0900 	mov.w	r9, #0
 80078fa:	07eb      	lsls	r3, r5, #31
 80078fc:	d50a      	bpl.n	8007914 <__pow5mult+0x84>
 80078fe:	4639      	mov	r1, r7
 8007900:	4622      	mov	r2, r4
 8007902:	4630      	mov	r0, r6
 8007904:	f7ff ff1a 	bl	800773c <__multiply>
 8007908:	4639      	mov	r1, r7
 800790a:	4680      	mov	r8, r0
 800790c:	4630      	mov	r0, r6
 800790e:	f7ff fe49 	bl	80075a4 <_Bfree>
 8007912:	4647      	mov	r7, r8
 8007914:	106d      	asrs	r5, r5, #1
 8007916:	d00b      	beq.n	8007930 <__pow5mult+0xa0>
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	b938      	cbnz	r0, 800792c <__pow5mult+0x9c>
 800791c:	4622      	mov	r2, r4
 800791e:	4621      	mov	r1, r4
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff ff0b 	bl	800773c <__multiply>
 8007926:	6020      	str	r0, [r4, #0]
 8007928:	f8c0 9000 	str.w	r9, [r0]
 800792c:	4604      	mov	r4, r0
 800792e:	e7e4      	b.n	80078fa <__pow5mult+0x6a>
 8007930:	4638      	mov	r0, r7
 8007932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007936:	bf00      	nop
 8007938:	080089c0 	.word	0x080089c0
 800793c:	080087f5 	.word	0x080087f5
 8007940:	08008875 	.word	0x08008875

08007944 <__lshift>:
 8007944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	460c      	mov	r4, r1
 800794a:	6849      	ldr	r1, [r1, #4]
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	4607      	mov	r7, r0
 8007956:	4691      	mov	r9, r2
 8007958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800795c:	f108 0601 	add.w	r6, r8, #1
 8007960:	42b3      	cmp	r3, r6
 8007962:	db0b      	blt.n	800797c <__lshift+0x38>
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff fddd 	bl	8007524 <_Balloc>
 800796a:	4605      	mov	r5, r0
 800796c:	b948      	cbnz	r0, 8007982 <__lshift+0x3e>
 800796e:	4602      	mov	r2, r0
 8007970:	4b28      	ldr	r3, [pc, #160]	; (8007a14 <__lshift+0xd0>)
 8007972:	4829      	ldr	r0, [pc, #164]	; (8007a18 <__lshift+0xd4>)
 8007974:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007978:	f000 fb8e 	bl	8008098 <__assert_func>
 800797c:	3101      	adds	r1, #1
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	e7ee      	b.n	8007960 <__lshift+0x1c>
 8007982:	2300      	movs	r3, #0
 8007984:	f100 0114 	add.w	r1, r0, #20
 8007988:	f100 0210 	add.w	r2, r0, #16
 800798c:	4618      	mov	r0, r3
 800798e:	4553      	cmp	r3, sl
 8007990:	db33      	blt.n	80079fa <__lshift+0xb6>
 8007992:	6920      	ldr	r0, [r4, #16]
 8007994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007998:	f104 0314 	add.w	r3, r4, #20
 800799c:	f019 091f 	ands.w	r9, r9, #31
 80079a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079a8:	d02b      	beq.n	8007a02 <__lshift+0xbe>
 80079aa:	f1c9 0e20 	rsb	lr, r9, #32
 80079ae:	468a      	mov	sl, r1
 80079b0:	2200      	movs	r2, #0
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	fa00 f009 	lsl.w	r0, r0, r9
 80079b8:	4310      	orrs	r0, r2
 80079ba:	f84a 0b04 	str.w	r0, [sl], #4
 80079be:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c2:	459c      	cmp	ip, r3
 80079c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80079c8:	d8f3      	bhi.n	80079b2 <__lshift+0x6e>
 80079ca:	ebac 0304 	sub.w	r3, ip, r4
 80079ce:	3b15      	subs	r3, #21
 80079d0:	f023 0303 	bic.w	r3, r3, #3
 80079d4:	3304      	adds	r3, #4
 80079d6:	f104 0015 	add.w	r0, r4, #21
 80079da:	4584      	cmp	ip, r0
 80079dc:	bf38      	it	cc
 80079de:	2304      	movcc	r3, #4
 80079e0:	50ca      	str	r2, [r1, r3]
 80079e2:	b10a      	cbz	r2, 80079e8 <__lshift+0xa4>
 80079e4:	f108 0602 	add.w	r6, r8, #2
 80079e8:	3e01      	subs	r6, #1
 80079ea:	4638      	mov	r0, r7
 80079ec:	612e      	str	r6, [r5, #16]
 80079ee:	4621      	mov	r1, r4
 80079f0:	f7ff fdd8 	bl	80075a4 <_Bfree>
 80079f4:	4628      	mov	r0, r5
 80079f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80079fe:	3301      	adds	r3, #1
 8007a00:	e7c5      	b.n	800798e <__lshift+0x4a>
 8007a02:	3904      	subs	r1, #4
 8007a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a0c:	459c      	cmp	ip, r3
 8007a0e:	d8f9      	bhi.n	8007a04 <__lshift+0xc0>
 8007a10:	e7ea      	b.n	80079e8 <__lshift+0xa4>
 8007a12:	bf00      	nop
 8007a14:	08008864 	.word	0x08008864
 8007a18:	08008875 	.word	0x08008875

08007a1c <__mcmp>:
 8007a1c:	b530      	push	{r4, r5, lr}
 8007a1e:	6902      	ldr	r2, [r0, #16]
 8007a20:	690c      	ldr	r4, [r1, #16]
 8007a22:	1b12      	subs	r2, r2, r4
 8007a24:	d10e      	bne.n	8007a44 <__mcmp+0x28>
 8007a26:	f100 0314 	add.w	r3, r0, #20
 8007a2a:	3114      	adds	r1, #20
 8007a2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a3c:	42a5      	cmp	r5, r4
 8007a3e:	d003      	beq.n	8007a48 <__mcmp+0x2c>
 8007a40:	d305      	bcc.n	8007a4e <__mcmp+0x32>
 8007a42:	2201      	movs	r2, #1
 8007a44:	4610      	mov	r0, r2
 8007a46:	bd30      	pop	{r4, r5, pc}
 8007a48:	4283      	cmp	r3, r0
 8007a4a:	d3f3      	bcc.n	8007a34 <__mcmp+0x18>
 8007a4c:	e7fa      	b.n	8007a44 <__mcmp+0x28>
 8007a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a52:	e7f7      	b.n	8007a44 <__mcmp+0x28>

08007a54 <__mdiff>:
 8007a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a58:	460c      	mov	r4, r1
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4690      	mov	r8, r2
 8007a62:	f7ff ffdb 	bl	8007a1c <__mcmp>
 8007a66:	1e05      	subs	r5, r0, #0
 8007a68:	d110      	bne.n	8007a8c <__mdiff+0x38>
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f7ff fd59 	bl	8007524 <_Balloc>
 8007a72:	b930      	cbnz	r0, 8007a82 <__mdiff+0x2e>
 8007a74:	4b3a      	ldr	r3, [pc, #232]	; (8007b60 <__mdiff+0x10c>)
 8007a76:	4602      	mov	r2, r0
 8007a78:	f240 2137 	movw	r1, #567	; 0x237
 8007a7c:	4839      	ldr	r0, [pc, #228]	; (8007b64 <__mdiff+0x110>)
 8007a7e:	f000 fb0b 	bl	8008098 <__assert_func>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	bfa4      	itt	ge
 8007a8e:	4643      	movge	r3, r8
 8007a90:	46a0      	movge	r8, r4
 8007a92:	4630      	mov	r0, r6
 8007a94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a98:	bfa6      	itte	ge
 8007a9a:	461c      	movge	r4, r3
 8007a9c:	2500      	movge	r5, #0
 8007a9e:	2501      	movlt	r5, #1
 8007aa0:	f7ff fd40 	bl	8007524 <_Balloc>
 8007aa4:	b920      	cbnz	r0, 8007ab0 <__mdiff+0x5c>
 8007aa6:	4b2e      	ldr	r3, [pc, #184]	; (8007b60 <__mdiff+0x10c>)
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	f240 2145 	movw	r1, #581	; 0x245
 8007aae:	e7e5      	b.n	8007a7c <__mdiff+0x28>
 8007ab0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ab4:	6926      	ldr	r6, [r4, #16]
 8007ab6:	60c5      	str	r5, [r0, #12]
 8007ab8:	f104 0914 	add.w	r9, r4, #20
 8007abc:	f108 0514 	add.w	r5, r8, #20
 8007ac0:	f100 0e14 	add.w	lr, r0, #20
 8007ac4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ac8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007acc:	f108 0210 	add.w	r2, r8, #16
 8007ad0:	46f2      	mov	sl, lr
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ad8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007adc:	fa11 f88b 	uxtah	r8, r1, fp
 8007ae0:	b299      	uxth	r1, r3
 8007ae2:	0c1b      	lsrs	r3, r3, #16
 8007ae4:	eba8 0801 	sub.w	r8, r8, r1
 8007ae8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007aec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007af0:	fa1f f888 	uxth.w	r8, r8
 8007af4:	1419      	asrs	r1, r3, #16
 8007af6:	454e      	cmp	r6, r9
 8007af8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007afc:	f84a 3b04 	str.w	r3, [sl], #4
 8007b00:	d8e8      	bhi.n	8007ad4 <__mdiff+0x80>
 8007b02:	1b33      	subs	r3, r6, r4
 8007b04:	3b15      	subs	r3, #21
 8007b06:	f023 0303 	bic.w	r3, r3, #3
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	3415      	adds	r4, #21
 8007b0e:	42a6      	cmp	r6, r4
 8007b10:	bf38      	it	cc
 8007b12:	2304      	movcc	r3, #4
 8007b14:	441d      	add	r5, r3
 8007b16:	4473      	add	r3, lr
 8007b18:	469e      	mov	lr, r3
 8007b1a:	462e      	mov	r6, r5
 8007b1c:	4566      	cmp	r6, ip
 8007b1e:	d30e      	bcc.n	8007b3e <__mdiff+0xea>
 8007b20:	f10c 0203 	add.w	r2, ip, #3
 8007b24:	1b52      	subs	r2, r2, r5
 8007b26:	f022 0203 	bic.w	r2, r2, #3
 8007b2a:	3d03      	subs	r5, #3
 8007b2c:	45ac      	cmp	ip, r5
 8007b2e:	bf38      	it	cc
 8007b30:	2200      	movcc	r2, #0
 8007b32:	4413      	add	r3, r2
 8007b34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007b38:	b17a      	cbz	r2, 8007b5a <__mdiff+0x106>
 8007b3a:	6107      	str	r7, [r0, #16]
 8007b3c:	e7a4      	b.n	8007a88 <__mdiff+0x34>
 8007b3e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b42:	fa11 f288 	uxtah	r2, r1, r8
 8007b46:	1414      	asrs	r4, r2, #16
 8007b48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b4c:	b292      	uxth	r2, r2
 8007b4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b52:	f84e 2b04 	str.w	r2, [lr], #4
 8007b56:	1421      	asrs	r1, r4, #16
 8007b58:	e7e0      	b.n	8007b1c <__mdiff+0xc8>
 8007b5a:	3f01      	subs	r7, #1
 8007b5c:	e7ea      	b.n	8007b34 <__mdiff+0xe0>
 8007b5e:	bf00      	nop
 8007b60:	08008864 	.word	0x08008864
 8007b64:	08008875 	.word	0x08008875

08007b68 <__d2b>:
 8007b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b6c:	460f      	mov	r7, r1
 8007b6e:	2101      	movs	r1, #1
 8007b70:	ec59 8b10 	vmov	r8, r9, d0
 8007b74:	4616      	mov	r6, r2
 8007b76:	f7ff fcd5 	bl	8007524 <_Balloc>
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	b930      	cbnz	r0, 8007b8c <__d2b+0x24>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <__d2b+0xac>)
 8007b82:	4825      	ldr	r0, [pc, #148]	; (8007c18 <__d2b+0xb0>)
 8007b84:	f240 310f 	movw	r1, #783	; 0x30f
 8007b88:	f000 fa86 	bl	8008098 <__assert_func>
 8007b8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b94:	bb2d      	cbnz	r5, 8007be2 <__d2b+0x7a>
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	f1b8 0300 	subs.w	r3, r8, #0
 8007b9c:	d026      	beq.n	8007bec <__d2b+0x84>
 8007b9e:	4668      	mov	r0, sp
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	f7ff fd87 	bl	80076b4 <__lo0bits>
 8007ba6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007baa:	b1e8      	cbz	r0, 8007be8 <__d2b+0x80>
 8007bac:	f1c0 0320 	rsb	r3, r0, #32
 8007bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	40c2      	lsrs	r2, r0
 8007bb8:	6163      	str	r3, [r4, #20]
 8007bba:	9201      	str	r2, [sp, #4]
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	61a3      	str	r3, [r4, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf14      	ite	ne
 8007bc4:	2202      	movne	r2, #2
 8007bc6:	2201      	moveq	r2, #1
 8007bc8:	6122      	str	r2, [r4, #16]
 8007bca:	b1bd      	cbz	r5, 8007bfc <__d2b+0x94>
 8007bcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bd0:	4405      	add	r5, r0
 8007bd2:	603d      	str	r5, [r7, #0]
 8007bd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bd8:	6030      	str	r0, [r6, #0]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	b003      	add	sp, #12
 8007bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007be6:	e7d6      	b.n	8007b96 <__d2b+0x2e>
 8007be8:	6161      	str	r1, [r4, #20]
 8007bea:	e7e7      	b.n	8007bbc <__d2b+0x54>
 8007bec:	a801      	add	r0, sp, #4
 8007bee:	f7ff fd61 	bl	80076b4 <__lo0bits>
 8007bf2:	9b01      	ldr	r3, [sp, #4]
 8007bf4:	6163      	str	r3, [r4, #20]
 8007bf6:	3020      	adds	r0, #32
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	e7e5      	b.n	8007bc8 <__d2b+0x60>
 8007bfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c04:	6038      	str	r0, [r7, #0]
 8007c06:	6918      	ldr	r0, [r3, #16]
 8007c08:	f7ff fd34 	bl	8007674 <__hi0bits>
 8007c0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c10:	e7e2      	b.n	8007bd8 <__d2b+0x70>
 8007c12:	bf00      	nop
 8007c14:	08008864 	.word	0x08008864
 8007c18:	08008875 	.word	0x08008875

08007c1c <__ssputs_r>:
 8007c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c20:	688e      	ldr	r6, [r1, #8]
 8007c22:	461f      	mov	r7, r3
 8007c24:	42be      	cmp	r6, r7
 8007c26:	680b      	ldr	r3, [r1, #0]
 8007c28:	4682      	mov	sl, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	4690      	mov	r8, r2
 8007c2e:	d82c      	bhi.n	8007c8a <__ssputs_r+0x6e>
 8007c30:	898a      	ldrh	r2, [r1, #12]
 8007c32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c36:	d026      	beq.n	8007c86 <__ssputs_r+0x6a>
 8007c38:	6965      	ldr	r5, [r4, #20]
 8007c3a:	6909      	ldr	r1, [r1, #16]
 8007c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c40:	eba3 0901 	sub.w	r9, r3, r1
 8007c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c48:	1c7b      	adds	r3, r7, #1
 8007c4a:	444b      	add	r3, r9
 8007c4c:	106d      	asrs	r5, r5, #1
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	bf38      	it	cc
 8007c52:	461d      	movcc	r5, r3
 8007c54:	0553      	lsls	r3, r2, #21
 8007c56:	d527      	bpl.n	8007ca8 <__ssputs_r+0x8c>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7ff fbd7 	bl	800740c <_malloc_r>
 8007c5e:	4606      	mov	r6, r0
 8007c60:	b360      	cbz	r0, 8007cbc <__ssputs_r+0xa0>
 8007c62:	6921      	ldr	r1, [r4, #16]
 8007c64:	464a      	mov	r2, r9
 8007c66:	f000 fa09 	bl	800807c <memcpy>
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c74:	81a3      	strh	r3, [r4, #12]
 8007c76:	6126      	str	r6, [r4, #16]
 8007c78:	6165      	str	r5, [r4, #20]
 8007c7a:	444e      	add	r6, r9
 8007c7c:	eba5 0509 	sub.w	r5, r5, r9
 8007c80:	6026      	str	r6, [r4, #0]
 8007c82:	60a5      	str	r5, [r4, #8]
 8007c84:	463e      	mov	r6, r7
 8007c86:	42be      	cmp	r6, r7
 8007c88:	d900      	bls.n	8007c8c <__ssputs_r+0x70>
 8007c8a:	463e      	mov	r6, r7
 8007c8c:	6820      	ldr	r0, [r4, #0]
 8007c8e:	4632      	mov	r2, r6
 8007c90:	4641      	mov	r1, r8
 8007c92:	f000 f9c9 	bl	8008028 <memmove>
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	1b9b      	subs	r3, r3, r6
 8007c9a:	60a3      	str	r3, [r4, #8]
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	4433      	add	r3, r6
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca8:	462a      	mov	r2, r5
 8007caa:	f000 fa3b 	bl	8008124 <_realloc_r>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d1e0      	bne.n	8007c76 <__ssputs_r+0x5a>
 8007cb4:	6921      	ldr	r1, [r4, #16]
 8007cb6:	4650      	mov	r0, sl
 8007cb8:	f7ff fb34 	bl	8007324 <_free_r>
 8007cbc:	230c      	movs	r3, #12
 8007cbe:	f8ca 3000 	str.w	r3, [sl]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cce:	e7e9      	b.n	8007ca4 <__ssputs_r+0x88>

08007cd0 <_svfiprintf_r>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	4698      	mov	r8, r3
 8007cd6:	898b      	ldrh	r3, [r1, #12]
 8007cd8:	061b      	lsls	r3, r3, #24
 8007cda:	b09d      	sub	sp, #116	; 0x74
 8007cdc:	4607      	mov	r7, r0
 8007cde:	460d      	mov	r5, r1
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	d50e      	bpl.n	8007d02 <_svfiprintf_r+0x32>
 8007ce4:	690b      	ldr	r3, [r1, #16]
 8007ce6:	b963      	cbnz	r3, 8007d02 <_svfiprintf_r+0x32>
 8007ce8:	2140      	movs	r1, #64	; 0x40
 8007cea:	f7ff fb8f 	bl	800740c <_malloc_r>
 8007cee:	6028      	str	r0, [r5, #0]
 8007cf0:	6128      	str	r0, [r5, #16]
 8007cf2:	b920      	cbnz	r0, 8007cfe <_svfiprintf_r+0x2e>
 8007cf4:	230c      	movs	r3, #12
 8007cf6:	603b      	str	r3, [r7, #0]
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cfc:	e0d0      	b.n	8007ea0 <_svfiprintf_r+0x1d0>
 8007cfe:	2340      	movs	r3, #64	; 0x40
 8007d00:	616b      	str	r3, [r5, #20]
 8007d02:	2300      	movs	r3, #0
 8007d04:	9309      	str	r3, [sp, #36]	; 0x24
 8007d06:	2320      	movs	r3, #32
 8007d08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d10:	2330      	movs	r3, #48	; 0x30
 8007d12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007eb8 <_svfiprintf_r+0x1e8>
 8007d16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d1a:	f04f 0901 	mov.w	r9, #1
 8007d1e:	4623      	mov	r3, r4
 8007d20:	469a      	mov	sl, r3
 8007d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d26:	b10a      	cbz	r2, 8007d2c <_svfiprintf_r+0x5c>
 8007d28:	2a25      	cmp	r2, #37	; 0x25
 8007d2a:	d1f9      	bne.n	8007d20 <_svfiprintf_r+0x50>
 8007d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d30:	d00b      	beq.n	8007d4a <_svfiprintf_r+0x7a>
 8007d32:	465b      	mov	r3, fp
 8007d34:	4622      	mov	r2, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	4638      	mov	r0, r7
 8007d3a:	f7ff ff6f 	bl	8007c1c <__ssputs_r>
 8007d3e:	3001      	adds	r0, #1
 8007d40:	f000 80a9 	beq.w	8007e96 <_svfiprintf_r+0x1c6>
 8007d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d46:	445a      	add	r2, fp
 8007d48:	9209      	str	r2, [sp, #36]	; 0x24
 8007d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80a1 	beq.w	8007e96 <_svfiprintf_r+0x1c6>
 8007d54:	2300      	movs	r3, #0
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d5e:	f10a 0a01 	add.w	sl, sl, #1
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	9307      	str	r3, [sp, #28]
 8007d66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d6c:	4654      	mov	r4, sl
 8007d6e:	2205      	movs	r2, #5
 8007d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d74:	4850      	ldr	r0, [pc, #320]	; (8007eb8 <_svfiprintf_r+0x1e8>)
 8007d76:	f7f8 fa3b 	bl	80001f0 <memchr>
 8007d7a:	9a04      	ldr	r2, [sp, #16]
 8007d7c:	b9d8      	cbnz	r0, 8007db6 <_svfiprintf_r+0xe6>
 8007d7e:	06d0      	lsls	r0, r2, #27
 8007d80:	bf44      	itt	mi
 8007d82:	2320      	movmi	r3, #32
 8007d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d88:	0711      	lsls	r1, r2, #28
 8007d8a:	bf44      	itt	mi
 8007d8c:	232b      	movmi	r3, #43	; 0x2b
 8007d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d92:	f89a 3000 	ldrb.w	r3, [sl]
 8007d96:	2b2a      	cmp	r3, #42	; 0x2a
 8007d98:	d015      	beq.n	8007dc6 <_svfiprintf_r+0xf6>
 8007d9a:	9a07      	ldr	r2, [sp, #28]
 8007d9c:	4654      	mov	r4, sl
 8007d9e:	2000      	movs	r0, #0
 8007da0:	f04f 0c0a 	mov.w	ip, #10
 8007da4:	4621      	mov	r1, r4
 8007da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007daa:	3b30      	subs	r3, #48	; 0x30
 8007dac:	2b09      	cmp	r3, #9
 8007dae:	d94d      	bls.n	8007e4c <_svfiprintf_r+0x17c>
 8007db0:	b1b0      	cbz	r0, 8007de0 <_svfiprintf_r+0x110>
 8007db2:	9207      	str	r2, [sp, #28]
 8007db4:	e014      	b.n	8007de0 <_svfiprintf_r+0x110>
 8007db6:	eba0 0308 	sub.w	r3, r0, r8
 8007dba:	fa09 f303 	lsl.w	r3, r9, r3
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	46a2      	mov	sl, r4
 8007dc4:	e7d2      	b.n	8007d6c <_svfiprintf_r+0x9c>
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	1d19      	adds	r1, r3, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	9103      	str	r1, [sp, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfbb      	ittet	lt
 8007dd2:	425b      	neglt	r3, r3
 8007dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd8:	9307      	strge	r3, [sp, #28]
 8007dda:	9307      	strlt	r3, [sp, #28]
 8007ddc:	bfb8      	it	lt
 8007dde:	9204      	strlt	r2, [sp, #16]
 8007de0:	7823      	ldrb	r3, [r4, #0]
 8007de2:	2b2e      	cmp	r3, #46	; 0x2e
 8007de4:	d10c      	bne.n	8007e00 <_svfiprintf_r+0x130>
 8007de6:	7863      	ldrb	r3, [r4, #1]
 8007de8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dea:	d134      	bne.n	8007e56 <_svfiprintf_r+0x186>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	1d1a      	adds	r2, r3, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	9203      	str	r2, [sp, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bfb8      	it	lt
 8007df8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007dfc:	3402      	adds	r4, #2
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ec8 <_svfiprintf_r+0x1f8>
 8007e04:	7821      	ldrb	r1, [r4, #0]
 8007e06:	2203      	movs	r2, #3
 8007e08:	4650      	mov	r0, sl
 8007e0a:	f7f8 f9f1 	bl	80001f0 <memchr>
 8007e0e:	b138      	cbz	r0, 8007e20 <_svfiprintf_r+0x150>
 8007e10:	9b04      	ldr	r3, [sp, #16]
 8007e12:	eba0 000a 	sub.w	r0, r0, sl
 8007e16:	2240      	movs	r2, #64	; 0x40
 8007e18:	4082      	lsls	r2, r0
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	3401      	adds	r4, #1
 8007e1e:	9304      	str	r3, [sp, #16]
 8007e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e24:	4825      	ldr	r0, [pc, #148]	; (8007ebc <_svfiprintf_r+0x1ec>)
 8007e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e2a:	2206      	movs	r2, #6
 8007e2c:	f7f8 f9e0 	bl	80001f0 <memchr>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d038      	beq.n	8007ea6 <_svfiprintf_r+0x1d6>
 8007e34:	4b22      	ldr	r3, [pc, #136]	; (8007ec0 <_svfiprintf_r+0x1f0>)
 8007e36:	bb1b      	cbnz	r3, 8007e80 <_svfiprintf_r+0x1b0>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	3307      	adds	r3, #7
 8007e3c:	f023 0307 	bic.w	r3, r3, #7
 8007e40:	3308      	adds	r3, #8
 8007e42:	9303      	str	r3, [sp, #12]
 8007e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e46:	4433      	add	r3, r6
 8007e48:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4a:	e768      	b.n	8007d1e <_svfiprintf_r+0x4e>
 8007e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e50:	460c      	mov	r4, r1
 8007e52:	2001      	movs	r0, #1
 8007e54:	e7a6      	b.n	8007da4 <_svfiprintf_r+0xd4>
 8007e56:	2300      	movs	r3, #0
 8007e58:	3401      	adds	r4, #1
 8007e5a:	9305      	str	r3, [sp, #20]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	f04f 0c0a 	mov.w	ip, #10
 8007e62:	4620      	mov	r0, r4
 8007e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e68:	3a30      	subs	r2, #48	; 0x30
 8007e6a:	2a09      	cmp	r2, #9
 8007e6c:	d903      	bls.n	8007e76 <_svfiprintf_r+0x1a6>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0c6      	beq.n	8007e00 <_svfiprintf_r+0x130>
 8007e72:	9105      	str	r1, [sp, #20]
 8007e74:	e7c4      	b.n	8007e00 <_svfiprintf_r+0x130>
 8007e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e7f0      	b.n	8007e62 <_svfiprintf_r+0x192>
 8007e80:	ab03      	add	r3, sp, #12
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	462a      	mov	r2, r5
 8007e86:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <_svfiprintf_r+0x1f4>)
 8007e88:	a904      	add	r1, sp, #16
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	f7fd fe64 	bl	8005b58 <_printf_float>
 8007e90:	1c42      	adds	r2, r0, #1
 8007e92:	4606      	mov	r6, r0
 8007e94:	d1d6      	bne.n	8007e44 <_svfiprintf_r+0x174>
 8007e96:	89ab      	ldrh	r3, [r5, #12]
 8007e98:	065b      	lsls	r3, r3, #25
 8007e9a:	f53f af2d 	bmi.w	8007cf8 <_svfiprintf_r+0x28>
 8007e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ea0:	b01d      	add	sp, #116	; 0x74
 8007ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea6:	ab03      	add	r3, sp, #12
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	462a      	mov	r2, r5
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <_svfiprintf_r+0x1f4>)
 8007eae:	a904      	add	r1, sp, #16
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7fe f8f5 	bl	80060a0 <_printf_i>
 8007eb6:	e7eb      	b.n	8007e90 <_svfiprintf_r+0x1c0>
 8007eb8:	080089cc 	.word	0x080089cc
 8007ebc:	080089d6 	.word	0x080089d6
 8007ec0:	08005b59 	.word	0x08005b59
 8007ec4:	08007c1d 	.word	0x08007c1d
 8007ec8:	080089d2 	.word	0x080089d2

08007ecc <__sflush_r>:
 8007ecc:	898a      	ldrh	r2, [r1, #12]
 8007ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	0710      	lsls	r0, r2, #28
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	d458      	bmi.n	8007f8c <__sflush_r+0xc0>
 8007eda:	684b      	ldr	r3, [r1, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dc05      	bgt.n	8007eec <__sflush_r+0x20>
 8007ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dc02      	bgt.n	8007eec <__sflush_r+0x20>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eee:	2e00      	cmp	r6, #0
 8007ef0:	d0f9      	beq.n	8007ee6 <__sflush_r+0x1a>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ef8:	682f      	ldr	r7, [r5, #0]
 8007efa:	6a21      	ldr	r1, [r4, #32]
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	d032      	beq.n	8007f66 <__sflush_r+0x9a>
 8007f00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	075a      	lsls	r2, r3, #29
 8007f06:	d505      	bpl.n	8007f14 <__sflush_r+0x48>
 8007f08:	6863      	ldr	r3, [r4, #4]
 8007f0a:	1ac0      	subs	r0, r0, r3
 8007f0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f0e:	b10b      	cbz	r3, 8007f14 <__sflush_r+0x48>
 8007f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f12:	1ac0      	subs	r0, r0, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	4602      	mov	r2, r0
 8007f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f1a:	6a21      	ldr	r1, [r4, #32]
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	47b0      	blx	r6
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	d106      	bne.n	8007f34 <__sflush_r+0x68>
 8007f26:	6829      	ldr	r1, [r5, #0]
 8007f28:	291d      	cmp	r1, #29
 8007f2a:	d82b      	bhi.n	8007f84 <__sflush_r+0xb8>
 8007f2c:	4a29      	ldr	r2, [pc, #164]	; (8007fd4 <__sflush_r+0x108>)
 8007f2e:	410a      	asrs	r2, r1
 8007f30:	07d6      	lsls	r6, r2, #31
 8007f32:	d427      	bmi.n	8007f84 <__sflush_r+0xb8>
 8007f34:	2200      	movs	r2, #0
 8007f36:	6062      	str	r2, [r4, #4]
 8007f38:	04d9      	lsls	r1, r3, #19
 8007f3a:	6922      	ldr	r2, [r4, #16]
 8007f3c:	6022      	str	r2, [r4, #0]
 8007f3e:	d504      	bpl.n	8007f4a <__sflush_r+0x7e>
 8007f40:	1c42      	adds	r2, r0, #1
 8007f42:	d101      	bne.n	8007f48 <__sflush_r+0x7c>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	b903      	cbnz	r3, 8007f4a <__sflush_r+0x7e>
 8007f48:	6560      	str	r0, [r4, #84]	; 0x54
 8007f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f4c:	602f      	str	r7, [r5, #0]
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	d0c9      	beq.n	8007ee6 <__sflush_r+0x1a>
 8007f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f56:	4299      	cmp	r1, r3
 8007f58:	d002      	beq.n	8007f60 <__sflush_r+0x94>
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f7ff f9e2 	bl	8007324 <_free_r>
 8007f60:	2000      	movs	r0, #0
 8007f62:	6360      	str	r0, [r4, #52]	; 0x34
 8007f64:	e7c0      	b.n	8007ee8 <__sflush_r+0x1c>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b0      	blx	r6
 8007f6c:	1c41      	adds	r1, r0, #1
 8007f6e:	d1c8      	bne.n	8007f02 <__sflush_r+0x36>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0c5      	beq.n	8007f02 <__sflush_r+0x36>
 8007f76:	2b1d      	cmp	r3, #29
 8007f78:	d001      	beq.n	8007f7e <__sflush_r+0xb2>
 8007f7a:	2b16      	cmp	r3, #22
 8007f7c:	d101      	bne.n	8007f82 <__sflush_r+0xb6>
 8007f7e:	602f      	str	r7, [r5, #0]
 8007f80:	e7b1      	b.n	8007ee6 <__sflush_r+0x1a>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	e7ad      	b.n	8007ee8 <__sflush_r+0x1c>
 8007f8c:	690f      	ldr	r7, [r1, #16]
 8007f8e:	2f00      	cmp	r7, #0
 8007f90:	d0a9      	beq.n	8007ee6 <__sflush_r+0x1a>
 8007f92:	0793      	lsls	r3, r2, #30
 8007f94:	680e      	ldr	r6, [r1, #0]
 8007f96:	bf08      	it	eq
 8007f98:	694b      	ldreq	r3, [r1, #20]
 8007f9a:	600f      	str	r7, [r1, #0]
 8007f9c:	bf18      	it	ne
 8007f9e:	2300      	movne	r3, #0
 8007fa0:	eba6 0807 	sub.w	r8, r6, r7
 8007fa4:	608b      	str	r3, [r1, #8]
 8007fa6:	f1b8 0f00 	cmp.w	r8, #0
 8007faa:	dd9c      	ble.n	8007ee6 <__sflush_r+0x1a>
 8007fac:	6a21      	ldr	r1, [r4, #32]
 8007fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fb0:	4643      	mov	r3, r8
 8007fb2:	463a      	mov	r2, r7
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b0      	blx	r6
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	dc06      	bgt.n	8007fca <__sflush_r+0xfe>
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc8:	e78e      	b.n	8007ee8 <__sflush_r+0x1c>
 8007fca:	4407      	add	r7, r0
 8007fcc:	eba8 0800 	sub.w	r8, r8, r0
 8007fd0:	e7e9      	b.n	8007fa6 <__sflush_r+0xda>
 8007fd2:	bf00      	nop
 8007fd4:	dfbffffe 	.word	0xdfbffffe

08007fd8 <_fflush_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	690b      	ldr	r3, [r1, #16]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	b913      	cbnz	r3, 8007fe8 <_fflush_r+0x10>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	b118      	cbz	r0, 8007ff2 <_fflush_r+0x1a>
 8007fea:	6a03      	ldr	r3, [r0, #32]
 8007fec:	b90b      	cbnz	r3, 8007ff2 <_fflush_r+0x1a>
 8007fee:	f7fe fa05 	bl	80063fc <__sinit>
 8007ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f3      	beq.n	8007fe2 <_fflush_r+0xa>
 8007ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ffc:	07d0      	lsls	r0, r2, #31
 8007ffe:	d404      	bmi.n	800800a <_fflush_r+0x32>
 8008000:	0599      	lsls	r1, r3, #22
 8008002:	d402      	bmi.n	800800a <_fflush_r+0x32>
 8008004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008006:	f7fe fb10 	bl	800662a <__retarget_lock_acquire_recursive>
 800800a:	4628      	mov	r0, r5
 800800c:	4621      	mov	r1, r4
 800800e:	f7ff ff5d 	bl	8007ecc <__sflush_r>
 8008012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008014:	07da      	lsls	r2, r3, #31
 8008016:	4605      	mov	r5, r0
 8008018:	d4e4      	bmi.n	8007fe4 <_fflush_r+0xc>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	059b      	lsls	r3, r3, #22
 800801e:	d4e1      	bmi.n	8007fe4 <_fflush_r+0xc>
 8008020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008022:	f7fe fb03 	bl	800662c <__retarget_lock_release_recursive>
 8008026:	e7dd      	b.n	8007fe4 <_fflush_r+0xc>

08008028 <memmove>:
 8008028:	4288      	cmp	r0, r1
 800802a:	b510      	push	{r4, lr}
 800802c:	eb01 0402 	add.w	r4, r1, r2
 8008030:	d902      	bls.n	8008038 <memmove+0x10>
 8008032:	4284      	cmp	r4, r0
 8008034:	4623      	mov	r3, r4
 8008036:	d807      	bhi.n	8008048 <memmove+0x20>
 8008038:	1e43      	subs	r3, r0, #1
 800803a:	42a1      	cmp	r1, r4
 800803c:	d008      	beq.n	8008050 <memmove+0x28>
 800803e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008046:	e7f8      	b.n	800803a <memmove+0x12>
 8008048:	4402      	add	r2, r0
 800804a:	4601      	mov	r1, r0
 800804c:	428a      	cmp	r2, r1
 800804e:	d100      	bne.n	8008052 <memmove+0x2a>
 8008050:	bd10      	pop	{r4, pc}
 8008052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800805a:	e7f7      	b.n	800804c <memmove+0x24>

0800805c <_sbrk_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4d06      	ldr	r5, [pc, #24]	; (8008078 <_sbrk_r+0x1c>)
 8008060:	2300      	movs	r3, #0
 8008062:	4604      	mov	r4, r0
 8008064:	4608      	mov	r0, r1
 8008066:	602b      	str	r3, [r5, #0]
 8008068:	f7f9 fd06 	bl	8001a78 <_sbrk>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_sbrk_r+0x1a>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	b103      	cbz	r3, 8008076 <_sbrk_r+0x1a>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	20000b54 	.word	0x20000b54

0800807c <memcpy>:
 800807c:	440a      	add	r2, r1
 800807e:	4291      	cmp	r1, r2
 8008080:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008084:	d100      	bne.n	8008088 <memcpy+0xc>
 8008086:	4770      	bx	lr
 8008088:	b510      	push	{r4, lr}
 800808a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800808e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008092:	4291      	cmp	r1, r2
 8008094:	d1f9      	bne.n	800808a <memcpy+0xe>
 8008096:	bd10      	pop	{r4, pc}

08008098 <__assert_func>:
 8008098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800809a:	4614      	mov	r4, r2
 800809c:	461a      	mov	r2, r3
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <__assert_func+0x2c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4605      	mov	r5, r0
 80080a4:	68d8      	ldr	r0, [r3, #12]
 80080a6:	b14c      	cbz	r4, 80080bc <__assert_func+0x24>
 80080a8:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <__assert_func+0x30>)
 80080aa:	9100      	str	r1, [sp, #0]
 80080ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080b0:	4906      	ldr	r1, [pc, #24]	; (80080cc <__assert_func+0x34>)
 80080b2:	462b      	mov	r3, r5
 80080b4:	f000 f872 	bl	800819c <fiprintf>
 80080b8:	f000 f882 	bl	80081c0 <abort>
 80080bc:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <__assert_func+0x38>)
 80080be:	461c      	mov	r4, r3
 80080c0:	e7f3      	b.n	80080aa <__assert_func+0x12>
 80080c2:	bf00      	nop
 80080c4:	20000064 	.word	0x20000064
 80080c8:	080089e7 	.word	0x080089e7
 80080cc:	080089f4 	.word	0x080089f4
 80080d0:	08008a22 	.word	0x08008a22

080080d4 <_calloc_r>:
 80080d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080d6:	fba1 2402 	umull	r2, r4, r1, r2
 80080da:	b94c      	cbnz	r4, 80080f0 <_calloc_r+0x1c>
 80080dc:	4611      	mov	r1, r2
 80080de:	9201      	str	r2, [sp, #4]
 80080e0:	f7ff f994 	bl	800740c <_malloc_r>
 80080e4:	9a01      	ldr	r2, [sp, #4]
 80080e6:	4605      	mov	r5, r0
 80080e8:	b930      	cbnz	r0, 80080f8 <_calloc_r+0x24>
 80080ea:	4628      	mov	r0, r5
 80080ec:	b003      	add	sp, #12
 80080ee:	bd30      	pop	{r4, r5, pc}
 80080f0:	220c      	movs	r2, #12
 80080f2:	6002      	str	r2, [r0, #0]
 80080f4:	2500      	movs	r5, #0
 80080f6:	e7f8      	b.n	80080ea <_calloc_r+0x16>
 80080f8:	4621      	mov	r1, r4
 80080fa:	f7fe fa18 	bl	800652e <memset>
 80080fe:	e7f4      	b.n	80080ea <_calloc_r+0x16>

08008100 <__ascii_mbtowc>:
 8008100:	b082      	sub	sp, #8
 8008102:	b901      	cbnz	r1, 8008106 <__ascii_mbtowc+0x6>
 8008104:	a901      	add	r1, sp, #4
 8008106:	b142      	cbz	r2, 800811a <__ascii_mbtowc+0x1a>
 8008108:	b14b      	cbz	r3, 800811e <__ascii_mbtowc+0x1e>
 800810a:	7813      	ldrb	r3, [r2, #0]
 800810c:	600b      	str	r3, [r1, #0]
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	1e10      	subs	r0, r2, #0
 8008112:	bf18      	it	ne
 8008114:	2001      	movne	r0, #1
 8008116:	b002      	add	sp, #8
 8008118:	4770      	bx	lr
 800811a:	4610      	mov	r0, r2
 800811c:	e7fb      	b.n	8008116 <__ascii_mbtowc+0x16>
 800811e:	f06f 0001 	mvn.w	r0, #1
 8008122:	e7f8      	b.n	8008116 <__ascii_mbtowc+0x16>

08008124 <_realloc_r>:
 8008124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008128:	4680      	mov	r8, r0
 800812a:	4614      	mov	r4, r2
 800812c:	460e      	mov	r6, r1
 800812e:	b921      	cbnz	r1, 800813a <_realloc_r+0x16>
 8008130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008134:	4611      	mov	r1, r2
 8008136:	f7ff b969 	b.w	800740c <_malloc_r>
 800813a:	b92a      	cbnz	r2, 8008148 <_realloc_r+0x24>
 800813c:	f7ff f8f2 	bl	8007324 <_free_r>
 8008140:	4625      	mov	r5, r4
 8008142:	4628      	mov	r0, r5
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	f000 f841 	bl	80081ce <_malloc_usable_size_r>
 800814c:	4284      	cmp	r4, r0
 800814e:	4607      	mov	r7, r0
 8008150:	d802      	bhi.n	8008158 <_realloc_r+0x34>
 8008152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008156:	d812      	bhi.n	800817e <_realloc_r+0x5a>
 8008158:	4621      	mov	r1, r4
 800815a:	4640      	mov	r0, r8
 800815c:	f7ff f956 	bl	800740c <_malloc_r>
 8008160:	4605      	mov	r5, r0
 8008162:	2800      	cmp	r0, #0
 8008164:	d0ed      	beq.n	8008142 <_realloc_r+0x1e>
 8008166:	42bc      	cmp	r4, r7
 8008168:	4622      	mov	r2, r4
 800816a:	4631      	mov	r1, r6
 800816c:	bf28      	it	cs
 800816e:	463a      	movcs	r2, r7
 8008170:	f7ff ff84 	bl	800807c <memcpy>
 8008174:	4631      	mov	r1, r6
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff f8d4 	bl	8007324 <_free_r>
 800817c:	e7e1      	b.n	8008142 <_realloc_r+0x1e>
 800817e:	4635      	mov	r5, r6
 8008180:	e7df      	b.n	8008142 <_realloc_r+0x1e>

08008182 <__ascii_wctomb>:
 8008182:	b149      	cbz	r1, 8008198 <__ascii_wctomb+0x16>
 8008184:	2aff      	cmp	r2, #255	; 0xff
 8008186:	bf85      	ittet	hi
 8008188:	238a      	movhi	r3, #138	; 0x8a
 800818a:	6003      	strhi	r3, [r0, #0]
 800818c:	700a      	strbls	r2, [r1, #0]
 800818e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008192:	bf98      	it	ls
 8008194:	2001      	movls	r0, #1
 8008196:	4770      	bx	lr
 8008198:	4608      	mov	r0, r1
 800819a:	4770      	bx	lr

0800819c <fiprintf>:
 800819c:	b40e      	push	{r1, r2, r3}
 800819e:	b503      	push	{r0, r1, lr}
 80081a0:	4601      	mov	r1, r0
 80081a2:	ab03      	add	r3, sp, #12
 80081a4:	4805      	ldr	r0, [pc, #20]	; (80081bc <fiprintf+0x20>)
 80081a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081aa:	6800      	ldr	r0, [r0, #0]
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	f000 f83f 	bl	8008230 <_vfiprintf_r>
 80081b2:	b002      	add	sp, #8
 80081b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081b8:	b003      	add	sp, #12
 80081ba:	4770      	bx	lr
 80081bc:	20000064 	.word	0x20000064

080081c0 <abort>:
 80081c0:	b508      	push	{r3, lr}
 80081c2:	2006      	movs	r0, #6
 80081c4:	f000 fa0c 	bl	80085e0 <raise>
 80081c8:	2001      	movs	r0, #1
 80081ca:	f7f9 fbdd 	bl	8001988 <_exit>

080081ce <_malloc_usable_size_r>:
 80081ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d2:	1f18      	subs	r0, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bfbc      	itt	lt
 80081d8:	580b      	ldrlt	r3, [r1, r0]
 80081da:	18c0      	addlt	r0, r0, r3
 80081dc:	4770      	bx	lr

080081de <__sfputc_r>:
 80081de:	6893      	ldr	r3, [r2, #8]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	b410      	push	{r4}
 80081e6:	6093      	str	r3, [r2, #8]
 80081e8:	da08      	bge.n	80081fc <__sfputc_r+0x1e>
 80081ea:	6994      	ldr	r4, [r2, #24]
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	db01      	blt.n	80081f4 <__sfputc_r+0x16>
 80081f0:	290a      	cmp	r1, #10
 80081f2:	d103      	bne.n	80081fc <__sfputc_r+0x1e>
 80081f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081f8:	f000 b934 	b.w	8008464 <__swbuf_r>
 80081fc:	6813      	ldr	r3, [r2, #0]
 80081fe:	1c58      	adds	r0, r3, #1
 8008200:	6010      	str	r0, [r2, #0]
 8008202:	7019      	strb	r1, [r3, #0]
 8008204:	4608      	mov	r0, r1
 8008206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800820a:	4770      	bx	lr

0800820c <__sfputs_r>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	4606      	mov	r6, r0
 8008210:	460f      	mov	r7, r1
 8008212:	4614      	mov	r4, r2
 8008214:	18d5      	adds	r5, r2, r3
 8008216:	42ac      	cmp	r4, r5
 8008218:	d101      	bne.n	800821e <__sfputs_r+0x12>
 800821a:	2000      	movs	r0, #0
 800821c:	e007      	b.n	800822e <__sfputs_r+0x22>
 800821e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008222:	463a      	mov	r2, r7
 8008224:	4630      	mov	r0, r6
 8008226:	f7ff ffda 	bl	80081de <__sfputc_r>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	d1f3      	bne.n	8008216 <__sfputs_r+0xa>
 800822e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008230 <_vfiprintf_r>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	460d      	mov	r5, r1
 8008236:	b09d      	sub	sp, #116	; 0x74
 8008238:	4614      	mov	r4, r2
 800823a:	4698      	mov	r8, r3
 800823c:	4606      	mov	r6, r0
 800823e:	b118      	cbz	r0, 8008248 <_vfiprintf_r+0x18>
 8008240:	6a03      	ldr	r3, [r0, #32]
 8008242:	b90b      	cbnz	r3, 8008248 <_vfiprintf_r+0x18>
 8008244:	f7fe f8da 	bl	80063fc <__sinit>
 8008248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800824a:	07d9      	lsls	r1, r3, #31
 800824c:	d405      	bmi.n	800825a <_vfiprintf_r+0x2a>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	059a      	lsls	r2, r3, #22
 8008252:	d402      	bmi.n	800825a <_vfiprintf_r+0x2a>
 8008254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008256:	f7fe f9e8 	bl	800662a <__retarget_lock_acquire_recursive>
 800825a:	89ab      	ldrh	r3, [r5, #12]
 800825c:	071b      	lsls	r3, r3, #28
 800825e:	d501      	bpl.n	8008264 <_vfiprintf_r+0x34>
 8008260:	692b      	ldr	r3, [r5, #16]
 8008262:	b99b      	cbnz	r3, 800828c <_vfiprintf_r+0x5c>
 8008264:	4629      	mov	r1, r5
 8008266:	4630      	mov	r0, r6
 8008268:	f000 f93a 	bl	80084e0 <__swsetup_r>
 800826c:	b170      	cbz	r0, 800828c <_vfiprintf_r+0x5c>
 800826e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008270:	07dc      	lsls	r4, r3, #31
 8008272:	d504      	bpl.n	800827e <_vfiprintf_r+0x4e>
 8008274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008278:	b01d      	add	sp, #116	; 0x74
 800827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827e:	89ab      	ldrh	r3, [r5, #12]
 8008280:	0598      	lsls	r0, r3, #22
 8008282:	d4f7      	bmi.n	8008274 <_vfiprintf_r+0x44>
 8008284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008286:	f7fe f9d1 	bl	800662c <__retarget_lock_release_recursive>
 800828a:	e7f3      	b.n	8008274 <_vfiprintf_r+0x44>
 800828c:	2300      	movs	r3, #0
 800828e:	9309      	str	r3, [sp, #36]	; 0x24
 8008290:	2320      	movs	r3, #32
 8008292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008296:	f8cd 800c 	str.w	r8, [sp, #12]
 800829a:	2330      	movs	r3, #48	; 0x30
 800829c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008450 <_vfiprintf_r+0x220>
 80082a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082a4:	f04f 0901 	mov.w	r9, #1
 80082a8:	4623      	mov	r3, r4
 80082aa:	469a      	mov	sl, r3
 80082ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b0:	b10a      	cbz	r2, 80082b6 <_vfiprintf_r+0x86>
 80082b2:	2a25      	cmp	r2, #37	; 0x25
 80082b4:	d1f9      	bne.n	80082aa <_vfiprintf_r+0x7a>
 80082b6:	ebba 0b04 	subs.w	fp, sl, r4
 80082ba:	d00b      	beq.n	80082d4 <_vfiprintf_r+0xa4>
 80082bc:	465b      	mov	r3, fp
 80082be:	4622      	mov	r2, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ffa2 	bl	800820c <__sfputs_r>
 80082c8:	3001      	adds	r0, #1
 80082ca:	f000 80a9 	beq.w	8008420 <_vfiprintf_r+0x1f0>
 80082ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d0:	445a      	add	r2, fp
 80082d2:	9209      	str	r2, [sp, #36]	; 0x24
 80082d4:	f89a 3000 	ldrb.w	r3, [sl]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 80a1 	beq.w	8008420 <_vfiprintf_r+0x1f0>
 80082de:	2300      	movs	r3, #0
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082e8:	f10a 0a01 	add.w	sl, sl, #1
 80082ec:	9304      	str	r3, [sp, #16]
 80082ee:	9307      	str	r3, [sp, #28]
 80082f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082f4:	931a      	str	r3, [sp, #104]	; 0x68
 80082f6:	4654      	mov	r4, sl
 80082f8:	2205      	movs	r2, #5
 80082fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fe:	4854      	ldr	r0, [pc, #336]	; (8008450 <_vfiprintf_r+0x220>)
 8008300:	f7f7 ff76 	bl	80001f0 <memchr>
 8008304:	9a04      	ldr	r2, [sp, #16]
 8008306:	b9d8      	cbnz	r0, 8008340 <_vfiprintf_r+0x110>
 8008308:	06d1      	lsls	r1, r2, #27
 800830a:	bf44      	itt	mi
 800830c:	2320      	movmi	r3, #32
 800830e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008312:	0713      	lsls	r3, r2, #28
 8008314:	bf44      	itt	mi
 8008316:	232b      	movmi	r3, #43	; 0x2b
 8008318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831c:	f89a 3000 	ldrb.w	r3, [sl]
 8008320:	2b2a      	cmp	r3, #42	; 0x2a
 8008322:	d015      	beq.n	8008350 <_vfiprintf_r+0x120>
 8008324:	9a07      	ldr	r2, [sp, #28]
 8008326:	4654      	mov	r4, sl
 8008328:	2000      	movs	r0, #0
 800832a:	f04f 0c0a 	mov.w	ip, #10
 800832e:	4621      	mov	r1, r4
 8008330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008334:	3b30      	subs	r3, #48	; 0x30
 8008336:	2b09      	cmp	r3, #9
 8008338:	d94d      	bls.n	80083d6 <_vfiprintf_r+0x1a6>
 800833a:	b1b0      	cbz	r0, 800836a <_vfiprintf_r+0x13a>
 800833c:	9207      	str	r2, [sp, #28]
 800833e:	e014      	b.n	800836a <_vfiprintf_r+0x13a>
 8008340:	eba0 0308 	sub.w	r3, r0, r8
 8008344:	fa09 f303 	lsl.w	r3, r9, r3
 8008348:	4313      	orrs	r3, r2
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	46a2      	mov	sl, r4
 800834e:	e7d2      	b.n	80082f6 <_vfiprintf_r+0xc6>
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	1d19      	adds	r1, r3, #4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	9103      	str	r1, [sp, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	bfbb      	ittet	lt
 800835c:	425b      	neglt	r3, r3
 800835e:	f042 0202 	orrlt.w	r2, r2, #2
 8008362:	9307      	strge	r3, [sp, #28]
 8008364:	9307      	strlt	r3, [sp, #28]
 8008366:	bfb8      	it	lt
 8008368:	9204      	strlt	r2, [sp, #16]
 800836a:	7823      	ldrb	r3, [r4, #0]
 800836c:	2b2e      	cmp	r3, #46	; 0x2e
 800836e:	d10c      	bne.n	800838a <_vfiprintf_r+0x15a>
 8008370:	7863      	ldrb	r3, [r4, #1]
 8008372:	2b2a      	cmp	r3, #42	; 0x2a
 8008374:	d134      	bne.n	80083e0 <_vfiprintf_r+0x1b0>
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	1d1a      	adds	r2, r3, #4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	9203      	str	r2, [sp, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	bfb8      	it	lt
 8008382:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008386:	3402      	adds	r4, #2
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008460 <_vfiprintf_r+0x230>
 800838e:	7821      	ldrb	r1, [r4, #0]
 8008390:	2203      	movs	r2, #3
 8008392:	4650      	mov	r0, sl
 8008394:	f7f7 ff2c 	bl	80001f0 <memchr>
 8008398:	b138      	cbz	r0, 80083aa <_vfiprintf_r+0x17a>
 800839a:	9b04      	ldr	r3, [sp, #16]
 800839c:	eba0 000a 	sub.w	r0, r0, sl
 80083a0:	2240      	movs	r2, #64	; 0x40
 80083a2:	4082      	lsls	r2, r0
 80083a4:	4313      	orrs	r3, r2
 80083a6:	3401      	adds	r4, #1
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ae:	4829      	ldr	r0, [pc, #164]	; (8008454 <_vfiprintf_r+0x224>)
 80083b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083b4:	2206      	movs	r2, #6
 80083b6:	f7f7 ff1b 	bl	80001f0 <memchr>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d03f      	beq.n	800843e <_vfiprintf_r+0x20e>
 80083be:	4b26      	ldr	r3, [pc, #152]	; (8008458 <_vfiprintf_r+0x228>)
 80083c0:	bb1b      	cbnz	r3, 800840a <_vfiprintf_r+0x1da>
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	3307      	adds	r3, #7
 80083c6:	f023 0307 	bic.w	r3, r3, #7
 80083ca:	3308      	adds	r3, #8
 80083cc:	9303      	str	r3, [sp, #12]
 80083ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d0:	443b      	add	r3, r7
 80083d2:	9309      	str	r3, [sp, #36]	; 0x24
 80083d4:	e768      	b.n	80082a8 <_vfiprintf_r+0x78>
 80083d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80083da:	460c      	mov	r4, r1
 80083dc:	2001      	movs	r0, #1
 80083de:	e7a6      	b.n	800832e <_vfiprintf_r+0xfe>
 80083e0:	2300      	movs	r3, #0
 80083e2:	3401      	adds	r4, #1
 80083e4:	9305      	str	r3, [sp, #20]
 80083e6:	4619      	mov	r1, r3
 80083e8:	f04f 0c0a 	mov.w	ip, #10
 80083ec:	4620      	mov	r0, r4
 80083ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f2:	3a30      	subs	r2, #48	; 0x30
 80083f4:	2a09      	cmp	r2, #9
 80083f6:	d903      	bls.n	8008400 <_vfiprintf_r+0x1d0>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0c6      	beq.n	800838a <_vfiprintf_r+0x15a>
 80083fc:	9105      	str	r1, [sp, #20]
 80083fe:	e7c4      	b.n	800838a <_vfiprintf_r+0x15a>
 8008400:	fb0c 2101 	mla	r1, ip, r1, r2
 8008404:	4604      	mov	r4, r0
 8008406:	2301      	movs	r3, #1
 8008408:	e7f0      	b.n	80083ec <_vfiprintf_r+0x1bc>
 800840a:	ab03      	add	r3, sp, #12
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	462a      	mov	r2, r5
 8008410:	4b12      	ldr	r3, [pc, #72]	; (800845c <_vfiprintf_r+0x22c>)
 8008412:	a904      	add	r1, sp, #16
 8008414:	4630      	mov	r0, r6
 8008416:	f7fd fb9f 	bl	8005b58 <_printf_float>
 800841a:	4607      	mov	r7, r0
 800841c:	1c78      	adds	r0, r7, #1
 800841e:	d1d6      	bne.n	80083ce <_vfiprintf_r+0x19e>
 8008420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008422:	07d9      	lsls	r1, r3, #31
 8008424:	d405      	bmi.n	8008432 <_vfiprintf_r+0x202>
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	059a      	lsls	r2, r3, #22
 800842a:	d402      	bmi.n	8008432 <_vfiprintf_r+0x202>
 800842c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800842e:	f7fe f8fd 	bl	800662c <__retarget_lock_release_recursive>
 8008432:	89ab      	ldrh	r3, [r5, #12]
 8008434:	065b      	lsls	r3, r3, #25
 8008436:	f53f af1d 	bmi.w	8008274 <_vfiprintf_r+0x44>
 800843a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800843c:	e71c      	b.n	8008278 <_vfiprintf_r+0x48>
 800843e:	ab03      	add	r3, sp, #12
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	462a      	mov	r2, r5
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <_vfiprintf_r+0x22c>)
 8008446:	a904      	add	r1, sp, #16
 8008448:	4630      	mov	r0, r6
 800844a:	f7fd fe29 	bl	80060a0 <_printf_i>
 800844e:	e7e4      	b.n	800841a <_vfiprintf_r+0x1ea>
 8008450:	080089cc 	.word	0x080089cc
 8008454:	080089d6 	.word	0x080089d6
 8008458:	08005b59 	.word	0x08005b59
 800845c:	0800820d 	.word	0x0800820d
 8008460:	080089d2 	.word	0x080089d2

08008464 <__swbuf_r>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	460e      	mov	r6, r1
 8008468:	4614      	mov	r4, r2
 800846a:	4605      	mov	r5, r0
 800846c:	b118      	cbz	r0, 8008476 <__swbuf_r+0x12>
 800846e:	6a03      	ldr	r3, [r0, #32]
 8008470:	b90b      	cbnz	r3, 8008476 <__swbuf_r+0x12>
 8008472:	f7fd ffc3 	bl	80063fc <__sinit>
 8008476:	69a3      	ldr	r3, [r4, #24]
 8008478:	60a3      	str	r3, [r4, #8]
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	071a      	lsls	r2, r3, #28
 800847e:	d525      	bpl.n	80084cc <__swbuf_r+0x68>
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	b31b      	cbz	r3, 80084cc <__swbuf_r+0x68>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	6922      	ldr	r2, [r4, #16]
 8008488:	1a98      	subs	r0, r3, r2
 800848a:	6963      	ldr	r3, [r4, #20]
 800848c:	b2f6      	uxtb	r6, r6
 800848e:	4283      	cmp	r3, r0
 8008490:	4637      	mov	r7, r6
 8008492:	dc04      	bgt.n	800849e <__swbuf_r+0x3a>
 8008494:	4621      	mov	r1, r4
 8008496:	4628      	mov	r0, r5
 8008498:	f7ff fd9e 	bl	8007fd8 <_fflush_r>
 800849c:	b9e0      	cbnz	r0, 80084d8 <__swbuf_r+0x74>
 800849e:	68a3      	ldr	r3, [r4, #8]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	60a3      	str	r3, [r4, #8]
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	6022      	str	r2, [r4, #0]
 80084aa:	701e      	strb	r6, [r3, #0]
 80084ac:	6962      	ldr	r2, [r4, #20]
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d004      	beq.n	80084be <__swbuf_r+0x5a>
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	07db      	lsls	r3, r3, #31
 80084b8:	d506      	bpl.n	80084c8 <__swbuf_r+0x64>
 80084ba:	2e0a      	cmp	r6, #10
 80084bc:	d104      	bne.n	80084c8 <__swbuf_r+0x64>
 80084be:	4621      	mov	r1, r4
 80084c0:	4628      	mov	r0, r5
 80084c2:	f7ff fd89 	bl	8007fd8 <_fflush_r>
 80084c6:	b938      	cbnz	r0, 80084d8 <__swbuf_r+0x74>
 80084c8:	4638      	mov	r0, r7
 80084ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084cc:	4621      	mov	r1, r4
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f806 	bl	80084e0 <__swsetup_r>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d0d5      	beq.n	8008484 <__swbuf_r+0x20>
 80084d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80084dc:	e7f4      	b.n	80084c8 <__swbuf_r+0x64>
	...

080084e0 <__swsetup_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4b2a      	ldr	r3, [pc, #168]	; (800858c <__swsetup_r+0xac>)
 80084e4:	4605      	mov	r5, r0
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	460c      	mov	r4, r1
 80084ea:	b118      	cbz	r0, 80084f4 <__swsetup_r+0x14>
 80084ec:	6a03      	ldr	r3, [r0, #32]
 80084ee:	b90b      	cbnz	r3, 80084f4 <__swsetup_r+0x14>
 80084f0:	f7fd ff84 	bl	80063fc <__sinit>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084fa:	0718      	lsls	r0, r3, #28
 80084fc:	d422      	bmi.n	8008544 <__swsetup_r+0x64>
 80084fe:	06d9      	lsls	r1, r3, #27
 8008500:	d407      	bmi.n	8008512 <__swsetup_r+0x32>
 8008502:	2309      	movs	r3, #9
 8008504:	602b      	str	r3, [r5, #0]
 8008506:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008510:	e034      	b.n	800857c <__swsetup_r+0x9c>
 8008512:	0758      	lsls	r0, r3, #29
 8008514:	d512      	bpl.n	800853c <__swsetup_r+0x5c>
 8008516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008518:	b141      	cbz	r1, 800852c <__swsetup_r+0x4c>
 800851a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800851e:	4299      	cmp	r1, r3
 8008520:	d002      	beq.n	8008528 <__swsetup_r+0x48>
 8008522:	4628      	mov	r0, r5
 8008524:	f7fe fefe 	bl	8007324 <_free_r>
 8008528:	2300      	movs	r3, #0
 800852a:	6363      	str	r3, [r4, #52]	; 0x34
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	2300      	movs	r3, #0
 8008536:	6063      	str	r3, [r4, #4]
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f043 0308 	orr.w	r3, r3, #8
 8008542:	81a3      	strh	r3, [r4, #12]
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	b94b      	cbnz	r3, 800855c <__swsetup_r+0x7c>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800854e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008552:	d003      	beq.n	800855c <__swsetup_r+0x7c>
 8008554:	4621      	mov	r1, r4
 8008556:	4628      	mov	r0, r5
 8008558:	f000 f884 	bl	8008664 <__smakebuf_r>
 800855c:	89a0      	ldrh	r0, [r4, #12]
 800855e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008562:	f010 0301 	ands.w	r3, r0, #1
 8008566:	d00a      	beq.n	800857e <__swsetup_r+0x9e>
 8008568:	2300      	movs	r3, #0
 800856a:	60a3      	str	r3, [r4, #8]
 800856c:	6963      	ldr	r3, [r4, #20]
 800856e:	425b      	negs	r3, r3
 8008570:	61a3      	str	r3, [r4, #24]
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	b943      	cbnz	r3, 8008588 <__swsetup_r+0xa8>
 8008576:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800857a:	d1c4      	bne.n	8008506 <__swsetup_r+0x26>
 800857c:	bd38      	pop	{r3, r4, r5, pc}
 800857e:	0781      	lsls	r1, r0, #30
 8008580:	bf58      	it	pl
 8008582:	6963      	ldrpl	r3, [r4, #20]
 8008584:	60a3      	str	r3, [r4, #8]
 8008586:	e7f4      	b.n	8008572 <__swsetup_r+0x92>
 8008588:	2000      	movs	r0, #0
 800858a:	e7f7      	b.n	800857c <__swsetup_r+0x9c>
 800858c:	20000064 	.word	0x20000064

08008590 <_raise_r>:
 8008590:	291f      	cmp	r1, #31
 8008592:	b538      	push	{r3, r4, r5, lr}
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	d904      	bls.n	80085a4 <_raise_r+0x14>
 800859a:	2316      	movs	r3, #22
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085a6:	b112      	cbz	r2, 80085ae <_raise_r+0x1e>
 80085a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085ac:	b94b      	cbnz	r3, 80085c2 <_raise_r+0x32>
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 f830 	bl	8008614 <_getpid_r>
 80085b4:	462a      	mov	r2, r5
 80085b6:	4601      	mov	r1, r0
 80085b8:	4620      	mov	r0, r4
 80085ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085be:	f000 b817 	b.w	80085f0 <_kill_r>
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d00a      	beq.n	80085dc <_raise_r+0x4c>
 80085c6:	1c59      	adds	r1, r3, #1
 80085c8:	d103      	bne.n	80085d2 <_raise_r+0x42>
 80085ca:	2316      	movs	r3, #22
 80085cc:	6003      	str	r3, [r0, #0]
 80085ce:	2001      	movs	r0, #1
 80085d0:	e7e7      	b.n	80085a2 <_raise_r+0x12>
 80085d2:	2400      	movs	r4, #0
 80085d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085d8:	4628      	mov	r0, r5
 80085da:	4798      	blx	r3
 80085dc:	2000      	movs	r0, #0
 80085de:	e7e0      	b.n	80085a2 <_raise_r+0x12>

080085e0 <raise>:
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <raise+0xc>)
 80085e2:	4601      	mov	r1, r0
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	f7ff bfd3 	b.w	8008590 <_raise_r>
 80085ea:	bf00      	nop
 80085ec:	20000064 	.word	0x20000064

080085f0 <_kill_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d07      	ldr	r5, [pc, #28]	; (8008610 <_kill_r+0x20>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	f7f9 f9b3 	bl	8001968 <_kill>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	d102      	bne.n	800860c <_kill_r+0x1c>
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	b103      	cbz	r3, 800860c <_kill_r+0x1c>
 800860a:	6023      	str	r3, [r4, #0]
 800860c:	bd38      	pop	{r3, r4, r5, pc}
 800860e:	bf00      	nop
 8008610:	20000b54 	.word	0x20000b54

08008614 <_getpid_r>:
 8008614:	f7f9 b9a0 	b.w	8001958 <_getpid>

08008618 <__swhatbuf_r>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	460c      	mov	r4, r1
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	2900      	cmp	r1, #0
 8008622:	b096      	sub	sp, #88	; 0x58
 8008624:	4615      	mov	r5, r2
 8008626:	461e      	mov	r6, r3
 8008628:	da0d      	bge.n	8008646 <__swhatbuf_r+0x2e>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008630:	f04f 0100 	mov.w	r1, #0
 8008634:	bf0c      	ite	eq
 8008636:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800863a:	2340      	movne	r3, #64	; 0x40
 800863c:	2000      	movs	r0, #0
 800863e:	6031      	str	r1, [r6, #0]
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	b016      	add	sp, #88	; 0x58
 8008644:	bd70      	pop	{r4, r5, r6, pc}
 8008646:	466a      	mov	r2, sp
 8008648:	f000 f848 	bl	80086dc <_fstat_r>
 800864c:	2800      	cmp	r0, #0
 800864e:	dbec      	blt.n	800862a <__swhatbuf_r+0x12>
 8008650:	9901      	ldr	r1, [sp, #4]
 8008652:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008656:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800865a:	4259      	negs	r1, r3
 800865c:	4159      	adcs	r1, r3
 800865e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008662:	e7eb      	b.n	800863c <__swhatbuf_r+0x24>

08008664 <__smakebuf_r>:
 8008664:	898b      	ldrh	r3, [r1, #12]
 8008666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008668:	079d      	lsls	r5, r3, #30
 800866a:	4606      	mov	r6, r0
 800866c:	460c      	mov	r4, r1
 800866e:	d507      	bpl.n	8008680 <__smakebuf_r+0x1c>
 8008670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	6123      	str	r3, [r4, #16]
 8008678:	2301      	movs	r3, #1
 800867a:	6163      	str	r3, [r4, #20]
 800867c:	b002      	add	sp, #8
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	ab01      	add	r3, sp, #4
 8008682:	466a      	mov	r2, sp
 8008684:	f7ff ffc8 	bl	8008618 <__swhatbuf_r>
 8008688:	9900      	ldr	r1, [sp, #0]
 800868a:	4605      	mov	r5, r0
 800868c:	4630      	mov	r0, r6
 800868e:	f7fe febd 	bl	800740c <_malloc_r>
 8008692:	b948      	cbnz	r0, 80086a8 <__smakebuf_r+0x44>
 8008694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008698:	059a      	lsls	r2, r3, #22
 800869a:	d4ef      	bmi.n	800867c <__smakebuf_r+0x18>
 800869c:	f023 0303 	bic.w	r3, r3, #3
 80086a0:	f043 0302 	orr.w	r3, r3, #2
 80086a4:	81a3      	strh	r3, [r4, #12]
 80086a6:	e7e3      	b.n	8008670 <__smakebuf_r+0xc>
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	6020      	str	r0, [r4, #0]
 80086ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b0:	81a3      	strh	r3, [r4, #12]
 80086b2:	9b00      	ldr	r3, [sp, #0]
 80086b4:	6163      	str	r3, [r4, #20]
 80086b6:	9b01      	ldr	r3, [sp, #4]
 80086b8:	6120      	str	r0, [r4, #16]
 80086ba:	b15b      	cbz	r3, 80086d4 <__smakebuf_r+0x70>
 80086bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c0:	4630      	mov	r0, r6
 80086c2:	f000 f81d 	bl	8008700 <_isatty_r>
 80086c6:	b128      	cbz	r0, 80086d4 <__smakebuf_r+0x70>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	431d      	orrs	r5, r3
 80086d8:	81a5      	strh	r5, [r4, #12]
 80086da:	e7cf      	b.n	800867c <__smakebuf_r+0x18>

080086dc <_fstat_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d07      	ldr	r5, [pc, #28]	; (80086fc <_fstat_r+0x20>)
 80086e0:	2300      	movs	r3, #0
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	f7f9 f99c 	bl	8001a26 <_fstat>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d102      	bne.n	80086f8 <_fstat_r+0x1c>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	b103      	cbz	r3, 80086f8 <_fstat_r+0x1c>
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
 80086fa:	bf00      	nop
 80086fc:	20000b54 	.word	0x20000b54

08008700 <_isatty_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4d06      	ldr	r5, [pc, #24]	; (800871c <_isatty_r+0x1c>)
 8008704:	2300      	movs	r3, #0
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	f7f9 f99b 	bl	8001a46 <_isatty>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_isatty_r+0x1a>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_isatty_r+0x1a>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	20000b54 	.word	0x20000b54

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
