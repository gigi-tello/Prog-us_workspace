
TP-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08008990  08008990  00018990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d7c  08008d7c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d7c  08008d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d84  08008d84  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000990  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b64  20000b64  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014468  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035fd  00000000  00000000  000346af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a0  00000000  00000000  00037cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d7e  00000000  00000000  00038e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000298a9  00000000  00000000  00039bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000190af  00000000  00000000  00063477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee353  00000000  00000000  0007c526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000592c  00000000  00000000  0016a87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001701a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008978 	.word	0x08008978

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008978 	.word	0x08008978

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <MX_ADC1_Init+0xa0>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <MX_ADC1_Init+0xa4>)
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc6:	480e      	ldr	r0, [pc, #56]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fc8:	f001 fa8c 	bl	80024e4 <HAL_ADC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fd2:	f000 fbdf 	bl	8001794 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fe8:	f001 fc5e 	bl	80028a8 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ff2:	f000 fbcf 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200001f0 	.word	0x200001f0
 8001004:	40012000 	.word	0x40012000
 8001008:	0f000001 	.word	0x0f000001

0800100c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_ADC_MspInit+0x7c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d127      	bne.n	800107e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_ADC_MspInit+0x80>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001066:	2308      	movs	r3, #8
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_ADC_MspInit+0x84>)
 800107a:	f002 fa51 	bl	8003520 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40012000 	.word	0x40012000
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000

08001094 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_ETH_Init+0x84>)
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <MX_ETH_Init+0x88>)
 800109c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_ETH_Init+0x8c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_ETH_Init+0x8c>)
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_ETH_Init+0x8c>)
 80010ac:	22e1      	movs	r2, #225	; 0xe1
 80010ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_ETH_Init+0x8c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_ETH_Init+0x8c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_ETH_Init+0x8c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_ETH_Init+0x84>)
 80010c4:	4a16      	ldr	r2, [pc, #88]	; (8001120 <MX_ETH_Init+0x8c>)
 80010c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_ETH_Init+0x84>)
 80010ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_ETH_Init+0x84>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <MX_ETH_Init+0x90>)
 80010d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_ETH_Init+0x84>)
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <MX_ETH_Init+0x94>)
 80010da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_ETH_Init+0x84>)
 80010de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_ETH_Init+0x84>)
 80010e6:	f001 fef3 	bl	8002ed0 <HAL_ETH_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010f0:	f000 fb50 	bl	8001794 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010f4:	2238      	movs	r2, #56	; 0x38
 80010f6:	2100      	movs	r1, #0
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_ETH_Init+0x98>)
 80010fa:	f005 fb44 	bl	8006786 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_ETH_Init+0x98>)
 8001100:	2221      	movs	r2, #33	; 0x21
 8001102:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_ETH_Init+0x98>)
 8001106:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800110a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_ETH_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200003b0 	.word	0x200003b0
 800111c:	40028000 	.word	0x40028000
 8001120:	20000460 	.word	0x20000460
 8001124:	200002d8 	.word	0x200002d8
 8001128:	20000238 	.word	0x20000238
 800112c:	20000378 	.word	0x20000378

08001130 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a55      	ldr	r2, [pc, #340]	; (80012a4 <HAL_ETH_MspInit+0x174>)
 800114e:	4293      	cmp	r3, r2
 8001150:	f040 80a4 	bne.w	800129c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	623b      	str	r3, [r7, #32]
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800117a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a44      	ldr	r2, [pc, #272]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a3d      	ldr	r2, [pc, #244]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a36      	ldr	r2, [pc, #216]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001218:	2332      	movs	r3, #50	; 0x32
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001228:	230b      	movs	r3, #11
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	481e      	ldr	r0, [pc, #120]	; (80012ac <HAL_ETH_MspInit+0x17c>)
 8001234:	f002 f974 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001238:	2386      	movs	r3, #134	; 0x86
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001248:	230b      	movs	r3, #11
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	4817      	ldr	r0, [pc, #92]	; (80012b0 <HAL_ETH_MspInit+0x180>)
 8001254:	f002 f964 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126a:	230b      	movs	r3, #11
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <HAL_ETH_MspInit+0x184>)
 8001276:	f002 f953 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800127a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128c:	230b      	movs	r3, #11
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <HAL_ETH_MspInit+0x188>)
 8001298:	f002 f942 	bl	8003520 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800129c:	bf00      	nop
 800129e:	3738      	adds	r7, #56	; 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40028000 	.word	0x40028000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40021800 	.word	0x40021800

080012bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
 80012d6:	4b89      	ldr	r3, [pc, #548]	; (80014fc <MX_GPIO_Init+0x240>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a88      	ldr	r2, [pc, #544]	; (80014fc <MX_GPIO_Init+0x240>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b86      	ldr	r3, [pc, #536]	; (80014fc <MX_GPIO_Init+0x240>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	623b      	str	r3, [r7, #32]
 80012ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	4b82      	ldr	r3, [pc, #520]	; (80014fc <MX_GPIO_Init+0x240>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a81      	ldr	r2, [pc, #516]	; (80014fc <MX_GPIO_Init+0x240>)
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <MX_GPIO_Init+0x240>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b7b      	ldr	r3, [pc, #492]	; (80014fc <MX_GPIO_Init+0x240>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <MX_GPIO_Init+0x240>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b78      	ldr	r3, [pc, #480]	; (80014fc <MX_GPIO_Init+0x240>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b74      	ldr	r3, [pc, #464]	; (80014fc <MX_GPIO_Init+0x240>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a73      	ldr	r2, [pc, #460]	; (80014fc <MX_GPIO_Init+0x240>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b71      	ldr	r3, [pc, #452]	; (80014fc <MX_GPIO_Init+0x240>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <MX_GPIO_Init+0x240>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a6c      	ldr	r2, [pc, #432]	; (80014fc <MX_GPIO_Init+0x240>)
 800134c:	f043 0320 	orr.w	r3, r3, #32
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <MX_GPIO_Init+0x240>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b66      	ldr	r3, [pc, #408]	; (80014fc <MX_GPIO_Init+0x240>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <MX_GPIO_Init+0x240>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b63      	ldr	r3, [pc, #396]	; (80014fc <MX_GPIO_Init+0x240>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <MX_GPIO_Init+0x240>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a5e      	ldr	r2, [pc, #376]	; (80014fc <MX_GPIO_Init+0x240>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <MX_GPIO_Init+0x240>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b58      	ldr	r3, [pc, #352]	; (80014fc <MX_GPIO_Init+0x240>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a57      	ldr	r2, [pc, #348]	; (80014fc <MX_GPIO_Init+0x240>)
 80013a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b55      	ldr	r3, [pc, #340]	; (80014fc <MX_GPIO_Init+0x240>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	4852      	ldr	r0, [pc, #328]	; (8001500 <MX_GPIO_Init+0x244>)
 80013b8:	f002 fa5e 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f244 0181 	movw	r1, #16513	; 0x4081
 80013c2:	4850      	ldr	r0, [pc, #320]	; (8001504 <MX_GPIO_Init+0x248>)
 80013c4:	f002 fa58 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80013ce:	484e      	ldr	r0, [pc, #312]	; (8001508 <MX_GPIO_Init+0x24c>)
 80013d0:	f002 fa52 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80013da:	484c      	ldr	r0, [pc, #304]	; (800150c <MX_GPIO_Init+0x250>)
 80013dc:	f002 fa4c 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	484a      	ldr	r0, [pc, #296]	; (8001510 <MX_GPIO_Init+0x254>)
 80013e8:	f002 fa46 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2140      	movs	r1, #64	; 0x40
 80013f0:	4848      	ldr	r0, [pc, #288]	; (8001514 <MX_GPIO_Init+0x258>)
 80013f2:	f002 fa41 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4842      	ldr	r0, [pc, #264]	; (8001518 <MX_GPIO_Init+0x25c>)
 800140e:	f002 f887 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4835      	ldr	r0, [pc, #212]	; (8001500 <MX_GPIO_Init+0x244>)
 800142a:	f002 f879 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800142e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	482f      	ldr	r0, [pc, #188]	; (8001504 <MX_GPIO_Init+0x248>)
 8001448:	f002 f86a 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800144c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4828      	ldr	r0, [pc, #160]	; (8001508 <MX_GPIO_Init+0x24c>)
 8001466:	f002 f85b 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800146a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4822      	ldr	r0, [pc, #136]	; (800150c <MX_GPIO_Init+0x250>)
 8001484:	f002 f84c 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	481c      	ldr	r0, [pc, #112]	; (8001510 <MX_GPIO_Init+0x254>)
 800149e:	f002 f83f 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4815      	ldr	r0, [pc, #84]	; (8001510 <MX_GPIO_Init+0x254>)
 80014bc:	f002 f830 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014c0:	2340      	movs	r3, #64	; 0x40
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	480f      	ldr	r0, [pc, #60]	; (8001514 <MX_GPIO_Init+0x258>)
 80014d8:	f002 f822 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <MX_GPIO_Init+0x258>)
 80014f0:	f002 f816 	bl	8003520 <HAL_GPIO_Init>

}
 80014f4:	bf00      	nop
 80014f6:	3738      	adds	r7, #56	; 0x38
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40021400 	.word	0x40021400
 800150c:	40021000 	.word	0x40021000
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021800 	.word	0x40021800
 8001518:	40020800 	.word	0x40020800

0800151c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_I2C1_Init+0x74>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <MX_I2C1_Init+0x78>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_I2C1_Init+0x74>)
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <MX_I2C1_Init+0x7c>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_I2C1_Init+0x74>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2C1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_I2C1_Init+0x74>)
 800155a:	f002 f9a7 	bl	80038ac <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 f916 	bl	8001794 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001568:	2100      	movs	r1, #0
 800156a:	4809      	ldr	r0, [pc, #36]	; (8001590 <MX_I2C1_Init+0x74>)
 800156c:	f002 ff8c 	bl	8004488 <HAL_I2CEx_ConfigAnalogFilter>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001576:	f000 f90d 	bl	8001794 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800157a:	2100      	movs	r1, #0
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_I2C1_Init+0x74>)
 800157e:	f002 ffbf 	bl	8004500 <HAL_I2CEx_ConfigDigitalFilter>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001588:	f000 f904 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000468 	.word	0x20000468
 8001594:	40005400 	.word	0x40005400
 8001598:	000186a0 	.word	0x000186a0

0800159c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_I2C_MspInit+0x84>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12c      	bne.n	8001618 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e0:	2312      	movs	r3, #18
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ec:	2304      	movs	r3, #4
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	480c      	ldr	r0, [pc, #48]	; (8001628 <HAL_I2C_MspInit+0x8c>)
 80015f8:	f001 ff92 	bl	8003520 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_I2C_MspInit+0x88>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_I2C_MspInit+0x88>)
 8001606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_I2C_MspInit+0x88>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40005400 	.word	0x40005400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020400 	.word	0x40020400

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001632:	f000 fec1 	bl	80023b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001636:	f000 f843 	bl	80016c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f7ff fe3f 	bl	80012bc <MX_GPIO_Init>
  MX_ETH_Init();
 800163e:	f7ff fd29 	bl	8001094 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001642:	f000 fb05 	bl	8001c50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001646:	f000 fb75 	bl	8001d34 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800164a:	f7ff ff67 	bl	800151c <MX_I2C1_Init>
  MX_ADC1_Init();
 800164e:	f7ff fc89 	bl	8000f64 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001652:	2064      	movs	r0, #100	; 0x64
 8001654:	f000 ff22 	bl	800249c <HAL_Delay>

  lcd_init();
 8001658:	f000 fca7 	bl	8001faa <lcd_init>

    char mensaje[] = "Hola";
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <main+0x88>)
 800165e:	463b      	mov	r3, r7
 8001660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001664:	6018      	str	r0, [r3, #0]
 8001666:	3304      	adds	r3, #4
 8001668:	7019      	strb	r1, [r3, #0]
    lcd_enviar_cadena(mensaje);
 800166a:	463b      	mov	r3, r7
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fcd9 	bl	8002024 <lcd_enviar_cadena>
    lcd_pos_cursor(1,5);
 8001672:	2105      	movs	r1, #5
 8001674:	2001      	movs	r0, #1
 8001676:	f000 fd07 	bl	8002088 <lcd_pos_cursor>
    lcd_enviar_cadena("mundo");
 800167a:	480f      	ldr	r0, [pc, #60]	; (80016b8 <main+0x8c>)
 800167c:	f000 fcd2 	bl	8002024 <lcd_enviar_cadena>
    HAL_Delay(500);
 8001680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001684:	f000 ff0a 	bl	800249c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	  // HAL_GPIO_TogglePin(TEST_PORT, TEST_PIN);

    	switch(mostrar_pantalla){
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <main+0x90>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d00c      	beq.n	80016aa <main+0x7e>
 8001690:	2b02      	cmp	r3, #2
 8001692:	dc0d      	bgt.n	80016b0 <main+0x84>
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <main+0x72>
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <main+0x78>
    		break;
    	case PANTALLA_TEMP:
    		pant_temp();
    		break;
    	default:
    		break;
 800169c:	e008      	b.n	80016b0 <main+0x84>
    		pant_opciones();
 800169e:	f000 f87f 	bl	80017a0 <pant_opciones>
    		break;
 80016a2:	e006      	b.n	80016b2 <main+0x86>
    		pant_fecha();
 80016a4:	f000 f8fe 	bl	80018a4 <pant_fecha>
    		break;
 80016a8:	e003      	b.n	80016b2 <main+0x86>
    		pant_temp();
 80016aa:	f000 f945 	bl	8001938 <pant_temp>
    		break;
 80016ae:	e000      	b.n	80016b2 <main+0x86>
    		break;
 80016b0:	bf00      	nop
    	switch(mostrar_pantalla){
 80016b2:	e7e9      	b.n	8001688 <main+0x5c>
 80016b4:	08008998 	.word	0x08008998
 80016b8:	08008990 	.word	0x08008990
 80016bc:	200004bc 	.word	0x200004bc

080016c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b094      	sub	sp, #80	; 0x50
 80016c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0320 	add.w	r3, r7, #32
 80016ca:	2230      	movs	r2, #48	; 0x30
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 f859 	bl	8006786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <SystemClock_Config+0xcc>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	4a27      	ldr	r2, [pc, #156]	; (800178c <SystemClock_Config+0xcc>)
 80016ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f2:	6413      	str	r3, [r2, #64]	; 0x40
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <SystemClock_Config+0xcc>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <SystemClock_Config+0xd0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <SystemClock_Config+0xd0>)
 800170a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <SystemClock_Config+0xd0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171c:	2301      	movs	r3, #1
 800171e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001730:	2304      	movs	r3, #4
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001734:	23a8      	movs	r3, #168	; 0xa8
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001738:	2302      	movs	r3, #2
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800173c:	2307      	movs	r3, #7
 800173e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	4618      	mov	r0, r3
 8001746:	f003 f837 	bl	80047b8 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001750:	f000 f820 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001754:	230f      	movs	r3, #15
 8001756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2105      	movs	r1, #5
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fa98 	bl	8004ca8 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800177e:	f000 f809 	bl	8001794 <Error_Handler>
  }
}
 8001782:	bf00      	nop
 8001784:	3750      	adds	r7, #80	; 0x50
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179c:	e7fe      	b.n	800179c <Error_Handler+0x8>
	...

080017a0 <pant_opciones>:
 *  seleccionada.
 *  Implementa un debounce simple para evitar el rebote de los botones del keypad
 *
 */

void pant_opciones(void){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
    /*

    */
	bool_t opcion_seleccionada = false; 	//Flag para cambiar de pantalla
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]
	bool_t lectura_boton_habilitada = true;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75bb      	strb	r3, [r7, #22]

	uint8_t boton = BOT_NINGUNO; 				//Botón presionado
 80017ae:	2300      	movs	r3, #0
 80017b0:	757b      	strb	r3, [r7, #21]
	uint8_t pos_cursor = OPCION_MOSTRAR_FECHA; 	//Posición del cursor
 80017b2:	2300      	movs	r3, #0
 80017b4:	753b      	strb	r3, [r7, #20]

    tick_t tiempo_debounce_btn = 100;
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	613b      	str	r3, [r7, #16]
    delay_t btn_delay={           //Inicializo la estructura del delay
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	2300      	movs	r3, #0
 80017c4:	733b      	strb	r3, [r7, #12]
            .startTime = 0,
            .duration = 0,
            .running = false
    };

	delayInit(&btn_delay, tiempo_debounce_btn);
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fb82 	bl	8001ed4 <delayInit>

	lcd_borrar();
 80017d0:	f000 fc7a 	bl	80020c8 <lcd_borrar>
	lcd_pos_cursor(0, 1);
 80017d4:	2101      	movs	r1, #1
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 fc56 	bl	8002088 <lcd_pos_cursor>
    lcd_enviar_cadena(MSJ_MOSTRAR_FECHA);
 80017dc:	482e      	ldr	r0, [pc, #184]	; (8001898 <pant_opciones+0xf8>)
 80017de:	f000 fc21 	bl	8002024 <lcd_enviar_cadena>
    lcd_pos_cursor(1, 1);
 80017e2:	2101      	movs	r1, #1
 80017e4:	2001      	movs	r0, #1
 80017e6:	f000 fc4f 	bl	8002088 <lcd_pos_cursor>
    lcd_enviar_cadena(MSJ_MOSTRAR_TEMP);
 80017ea:	482c      	ldr	r0, [pc, #176]	; (800189c <pant_opciones+0xfc>)
 80017ec:	f000 fc1a 	bl	8002024 <lcd_enviar_cadena>
	pant_fila_cursor(pos_cursor);
 80017f0:	7d3b      	ldrb	r3, [r7, #20]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f8da 	bl	80019ac <pant_fila_cursor>

    while(opcion_seleccionada == false){
 80017f8:	e042      	b.n	8001880 <pant_opciones+0xe0>
        if(delayRead(&btn_delay)){    			//Debounce - Cuando se cumple
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fb7b 	bl	8001ef8 <delayRead>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <pant_opciones+0x6c>
        	lectura_boton_habilitada = true;	//el tiempo, habilito el botón
 8001808:	2301      	movs	r3, #1
 800180a:	75bb      	strb	r3, [r7, #22]
        }

        if(lectura_boton_habilitada){
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <pant_opciones+0x7a>
        	boton = obtener_boton_presionado();
 8001812:	f000 fba3 	bl	8001f5c <obtener_boton_presionado>
 8001816:	4603      	mov	r3, r0
 8001818:	757b      	strb	r3, [r7, #21]
        }

    	switch (boton){
 800181a:	7d7b      	ldrb	r3, [r7, #21]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d006      	beq.n	800182e <pant_opciones+0x8e>
 8001820:	2b03      	cmp	r3, #3
 8001822:	dc2c      	bgt.n	800187e <pant_opciones+0xde>
 8001824:	2b01      	cmp	r3, #1
 8001826:	d01a      	beq.n	800185e <pant_opciones+0xbe>
 8001828:	2b02      	cmp	r3, #2
 800182a:	d00c      	beq.n	8001846 <pant_opciones+0xa6>
 800182c:	e027      	b.n	800187e <pant_opciones+0xde>
    	case BOT_ABAJO :
    		if(pos_cursor == OPCION_MOSTRAR_FECHA){
 800182e:	7d3b      	ldrb	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d125      	bne.n	8001880 <pant_opciones+0xe0>
    			pos_cursor = OPCION_MOSTRAR_TEMP;
 8001834:	2301      	movs	r3, #1
 8001836:	753b      	strb	r3, [r7, #20]
    			pant_fila_cursor(pos_cursor);
 8001838:	7d3b      	ldrb	r3, [r7, #20]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f8b6 	bl	80019ac <pant_fila_cursor>
    			lectura_boton_habilitada = false;
 8001840:	2300      	movs	r3, #0
 8001842:	75bb      	strb	r3, [r7, #22]
    		}
    		break;
 8001844:	e01c      	b.n	8001880 <pant_opciones+0xe0>
    	case BOT_ARRIBA :
    		if(pos_cursor == OPCION_MOSTRAR_TEMP){
 8001846:	7d3b      	ldrb	r3, [r7, #20]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d119      	bne.n	8001880 <pant_opciones+0xe0>
    			pos_cursor = OPCION_MOSTRAR_FECHA;
 800184c:	2300      	movs	r3, #0
 800184e:	753b      	strb	r3, [r7, #20]
    			pant_fila_cursor(pos_cursor);
 8001850:	7d3b      	ldrb	r3, [r7, #20]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f8aa 	bl	80019ac <pant_fila_cursor>
    			lectura_boton_habilitada = false;
 8001858:	2300      	movs	r3, #0
 800185a:	75bb      	strb	r3, [r7, #22]
    		}
    		break;
 800185c:	e010      	b.n	8001880 <pant_opciones+0xe0>
    	case BOT_ADELANTE :
    		if(pos_cursor == OPCION_MOSTRAR_FECHA){
 800185e:	7d3b      	ldrb	r3, [r7, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <pant_opciones+0xcc>
    			mostrar_pantalla = PANTALLA_FECHA;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <pant_opciones+0x100>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e005      	b.n	8001878 <pant_opciones+0xd8>
    		}
    		else if(pos_cursor == OPCION_MOSTRAR_TEMP){
 800186c:	7d3b      	ldrb	r3, [r7, #20]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d102      	bne.n	8001878 <pant_opciones+0xd8>
    			mostrar_pantalla = PANTALLA_TEMP;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <pant_opciones+0x100>)
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
    		}
    		opcion_seleccionada = true;
 8001878:	2301      	movs	r3, #1
 800187a:	75fb      	strb	r3, [r7, #23]
    		break;
 800187c:	e000      	b.n	8001880 <pant_opciones+0xe0>
    	default:
    		break;
 800187e:	bf00      	nop
    while(opcion_seleccionada == false){
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	f083 0301 	eor.w	r3, r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1b6      	bne.n	80017fa <pant_opciones+0x5a>
    	}

    }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	080089a0 	.word	0x080089a0
 800189c:	080089b0 	.word	0x080089b0
 80018a0:	200004bc 	.word	0x200004bc

080018a4 <pant_fecha>:
 *		----------------
 *
 * 	El botón ATRAS vuelve al menú principal.
 *
 */
void pant_fecha(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0

	char fecha[LARGO_CADENA_FECHA] = "";
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	711a      	strb	r2, [r3, #4]
	char hora[LARGO_CADENA_HORA] =  "";
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	2300      	movs	r3, #0
 80018be:	813b      	strh	r3, [r7, #8]
	bool_t boton_presionado = false;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
	uint8_t boton = BOT_NINGUNO;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75bb      	strb	r3, [r7, #22]

	obtener_fecha(fecha);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fcf1 	bl	80022b4 <obtener_fecha>
	obtener_hora(hora);
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fd07 	bl	80022e8 <obtener_hora>

    lcd_borrar();
 80018da:	f000 fbf5 	bl	80020c8 <lcd_borrar>
    lcd_pos_cursor(0, 4);
 80018de:	2104      	movs	r1, #4
 80018e0:	2000      	movs	r0, #0
 80018e2:	f000 fbd1 	bl	8002088 <lcd_pos_cursor>
    lcd_enviar_cadena(fecha);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fb9a 	bl	8002024 <lcd_enviar_cadena>

    lcd_pos_cursor(1, 5);
 80018f0:	2105      	movs	r1, #5
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 fbc8 	bl	8002088 <lcd_pos_cursor>
    lcd_enviar_cadena(hora);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fb92 	bl	8002024 <lcd_enviar_cadena>

    while(boton_presionado == false){
 8001900:	e00d      	b.n	800191e <pant_fecha+0x7a>
    	boton = obtener_boton_presionado();
 8001902:	f000 fb2b 	bl	8001f5c <obtener_boton_presionado>
 8001906:	4603      	mov	r3, r0
 8001908:	75bb      	strb	r3, [r7, #22]

        switch (boton){
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d105      	bne.n	800191c <pant_fecha+0x78>
            case BOT_ATRAS:
            	mostrar_pantalla = PANTALLA_OPCIONES;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <pant_fecha+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
            	boton_presionado = true;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
                break;
 800191a:	e000      	b.n	800191e <pant_fecha+0x7a>
            default:
                break;
 800191c:	bf00      	nop
    while(boton_presionado == false){
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	f083 0301 	eor.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1eb      	bne.n	8001902 <pant_fecha+0x5e>
        }

    }

}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200004bc 	.word	0x200004bc

08001938 <pant_temp>:
 *		----------------
 *
 * 	El botón ATRAS vuelve al menú principal.
 *
 */
void pant_temp(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
    char cad_temperatura[LARGO_CADENA_TEMP] = "";
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	f8c3 2007 	str.w	r2, [r3, #7]
	bool_t boton_presionado = false;
 8001950:	2300      	movs	r3, #0
 8001952:	75fb      	strb	r3, [r7, #23]
	uint8_t boton = BOT_NINGUNO;
 8001954:	2300      	movs	r3, #0
 8001956:	75bb      	strb	r3, [r7, #22]

    obtener_temp(cad_temperatura);
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fd14 	bl	8002388 <obtener_temp>

    lcd_borrar();
 8001960:	f000 fbb2 	bl	80020c8 <lcd_borrar>
    lcd_pos_cursor(0, 0);
 8001964:	2100      	movs	r1, #0
 8001966:	2000      	movs	r0, #0
 8001968:	f000 fb8e 	bl	8002088 <lcd_pos_cursor>
    lcd_enviar_cadena(cad_temperatura);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fb58 	bl	8002024 <lcd_enviar_cadena>

    while(boton_presionado == false){
 8001974:	e00d      	b.n	8001992 <pant_temp+0x5a>
    	boton = obtener_boton_presionado();
 8001976:	f000 faf1 	bl	8001f5c <obtener_boton_presionado>
 800197a:	4603      	mov	r3, r0
 800197c:	75bb      	strb	r3, [r7, #22]

        switch (boton){
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d105      	bne.n	8001990 <pant_temp+0x58>
            case BOT_ATRAS:
            	mostrar_pantalla = PANTALLA_OPCIONES;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <pant_temp+0x70>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
            	boton_presionado = true;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
                break;
 800198e:	e000      	b.n	8001992 <pant_temp+0x5a>
            default:
                break;
 8001990:	bf00      	nop
    while(boton_presionado == false){
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1eb      	bne.n	8001976 <pant_temp+0x3e>
        }

    }

}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200004bc 	.word	0x200004bc

080019ac <pant_fila_cursor>:
 *	de la otra opción, y lo dibuja en la correspondiente.
 *
 * \param opcion La opción marcada
 *
 */
void pant_fila_cursor(uint8_t opcion){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
    switch (opcion){
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <pant_fila_cursor+0x16>
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d005      	beq.n	80019cc <pant_fila_cursor+0x20>
 80019c0:	e009      	b.n	80019d6 <pant_fila_cursor+0x2a>
        case OPCION_MOSTRAR_FECHA:
        	lcd_pos_cursor(OPCION_MOSTRAR_TEMP, 0);
 80019c2:	2100      	movs	r1, #0
 80019c4:	2001      	movs	r0, #1
 80019c6:	f000 fb5f 	bl	8002088 <lcd_pos_cursor>
            break;
 80019ca:	e004      	b.n	80019d6 <pant_fila_cursor+0x2a>
        case OPCION_MOSTRAR_TEMP:
        	lcd_pos_cursor(OPCION_MOSTRAR_FECHA, 0);
 80019cc:	2100      	movs	r1, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 fb5a 	bl	8002088 <lcd_pos_cursor>
            break;
 80019d4:	bf00      	nop
    }
    lcd_enviar_cadena(" ");
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <pant_fila_cursor+0x48>)
 80019d8:	f000 fb24 	bl	8002024 <lcd_enviar_cadena>
    lcd_pos_cursor(opcion, 0);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fb51 	bl	8002088 <lcd_pos_cursor>
    lcd_enviar_cadena(CARACTER_CURSOR);
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <pant_fila_cursor+0x4c>)
 80019e8:	f000 fb1c 	bl	8002024 <lcd_enviar_cadena>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	080089c0 	.word	0x080089c0
 80019f8:	080089c4 	.word	0x080089c4

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a98:	f000 fce0 	bl	800245c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_kill>:

int _kill(int pid, int sig)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aba:	f004 feb7 	bl	800682c <__errno>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2216      	movs	r2, #22
 8001ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_exit>:

void _exit (int status)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffe7 	bl	8001ab0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ae2:	e7fe      	b.n	8001ae2 <_exit+0x12>

08001ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e00a      	b.n	8001b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af6:	f3af 8000 	nop.w
 8001afa:	4601      	mov	r1, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	b2ca      	uxtb	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf0      	blt.n	8001af6 <_read+0x12>
  }

  return len;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e009      	b.n	8001b44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbf1      	blt.n	8001b30 <_write+0x12>
  }
  return len;
 8001b4c:	687b      	ldr	r3, [r7, #4]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_close>:

int _close(int file)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_isatty>:

int _isatty(int file)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f004 fe1c 	bl	800682c <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20030000 	.word	0x20030000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	200004c0 	.word	0x200004c0
 8001c28:	20000b68 	.word	0x20000b68

08001c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_USART3_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c88:	f003 fa2e 	bl	80050e8 <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c92:	f7ff fd7f 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200004c4 	.word	0x200004c4
 8001ca0:	40004800 	.word	0x40004800

08001ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12c      	bne.n	8001d20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d10:	2307      	movs	r3, #7
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_UART_MspInit+0x8c>)
 8001d1c:	f001 fc00 	bl	8003520 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40004800 	.word	0x40004800
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020c00 	.word	0x40020c00

08001d34 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d42:	2204      	movs	r2, #4
 8001d44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d48:	2202      	movs	r2, #2
 8001d4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d78:	f002 fc01 	bl	800457e <HAL_PCD_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d82:	f7ff fd07 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000508 	.word	0x20000508

08001d90 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db0:	d13f      	bne.n	8001e32 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001de0:	230a      	movs	r3, #10
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4815      	ldr	r0, [pc, #84]	; (8001e40 <HAL_PCD_MspInit+0xb0>)
 8001dec:	f001 fb98 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	480e      	ldr	r0, [pc, #56]	; (8001e40 <HAL_PCD_MspInit+0xb0>)
 8001e06:	f001 fb8b 	bl	8003520 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	6353      	str	r3, [r2, #52]	; 0x34
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000

08001e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4a:	490e      	ldr	r1, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e60:	4c0b      	ldr	r4, [pc, #44]	; (8001e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e6e:	f7ff fedd 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e72:	f004 fce1 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e76:	f7ff fbd9 	bl	800162c <main>
  bx  lr    
 8001e7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e88:	08008d8c 	.word	0x08008d8c
  ldr r2, =_sbss
 8001e8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e90:	20000b64 	.word	0x20000b64

08001e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC_IRQHandler>
	...

08001e98 <leer_adc>:
/**
 * \brief Lee el valor del ADC
 *
 * \return El valor leído
 */
uint32_t leer_adc(void){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
	// ADC_HandleTypeDef hadc;
	uint32_t valor = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <leer_adc+0x38>)
 8001ea4:	f000 fb62 	bl	800256c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <leer_adc+0x38>)
 8001eae:	f000 fc62 	bl	8002776 <HAL_ADC_PollForConversion>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <leer_adc+0x28>
		valor = HAL_ADC_GetValue(&hadc1);
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <leer_adc+0x38>)
 8001eba:	f000 fce7 	bl	800288c <HAL_ADC_GetValue>
 8001ebe:	6078      	str	r0, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <leer_adc+0x38>)
 8001ec2:	f000 fc25 	bl	8002710 <HAL_ADC_Stop>

	return valor;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200001f0 	.word	0x200001f0

08001ed4 <delayInit>:

/*
 * Carga el valor de duración del retardo en la estructura delay
 * Inicializa delay.running en false
 * */
void delayInit( delay_t * delay, tick_t duration ){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	bool running_init_state = false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]

	delayWrite(delay, duration);
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f82b 	bl	8001f40 <delayWrite>
	delay->running = running_init_state;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	721a      	strb	r2, [r3, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <delayRead>:
/*
 * Verifica el estado del flag running y devuelve un valor booleano que indica
 * si el tiempo se cumplió o no.
 * 	false: toma la marca de tiempo y cambia running a ‘true’
 * 	true: hacer la cuenta para saber si el tiempo del retardo se cumplió o no*/
bool_t delayRead( delay_t * delay ){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	if(delay->running){
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7a1b      	ldrb	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <delayRead+0x2e>
		if ((HAL_GetTick() - delay->startTime) >= delay->duration){
 8001f08:	f000 fabc 	bl	8002484 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d30c      	bcc.n	8001f36 <delayRead+0x3e>
			delay->running = false;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	721a      	strb	r2, [r3, #8]
			return true;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e008      	b.n	8001f38 <delayRead+0x40>
		}
	} else {
		delay->startTime = HAL_GetTick();
 8001f26:	f000 faad 	bl	8002484 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	721a      	strb	r2, [r3, #8]
	}
	return false;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <delayWrite>:

/*Permite cambiar el tiempo de duración de un delay existente*/
void delayWrite( delay_t * delay, tick_t duration ){
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <obtener_boton_presionado>:
 *  que cambia según el pulsador que se presiona. La salida está conectada a A0.
 *
 * \return El botón presionado.
 */

uint8_t obtener_boton_presionado(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
    uint8_t boton = BOT_NINGUNO;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
    uint32_t req = leer_adc();
 8001f66:	f7ff ff97 	bl	8001e98 <leer_adc>
 8001f6a:	6038      	str	r0, [r7, #0]

    if (req < LIMITE_BOT_ADELANTE) {
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b31      	cmp	r3, #49	; 0x31
 8001f70:	d802      	bhi.n	8001f78 <obtener_boton_presionado+0x1c>
        boton = BOT_ADELANTE;
 8001f72:	2301      	movs	r3, #1
 8001f74:	71fb      	strb	r3, [r7, #7]
 8001f76:	e013      	b.n	8001fa0 <obtener_boton_presionado+0x44>
    } else if (req < LIMITE_BOT_ARRIBA) {
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2bf9      	cmp	r3, #249	; 0xf9
 8001f7c:	d802      	bhi.n	8001f84 <obtener_boton_presionado+0x28>
        boton = BOT_ARRIBA;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	e00d      	b.n	8001fa0 <obtener_boton_presionado+0x44>
    } else if (req < LIMITE_BOT_ABAJO) {
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f8a:	d202      	bcs.n	8001f92 <obtener_boton_presionado+0x36>
        boton = BOT_ABAJO;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	e006      	b.n	8001fa0 <obtener_boton_presionado+0x44>
    } else if (req < LIMITE_BOT_ATRAS) {
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f240 3215 	movw	r2, #789	; 0x315
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d801      	bhi.n	8001fa0 <obtener_boton_presionado+0x44>
        boton = BOT_ATRAS;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	71fb      	strb	r3, [r7, #7]
    }

    return boton;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <lcd_init>:
  ******************************************************************************
  **/

#include "API_lcd.h"

void lcd_init (void){
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
//	  HAL_Delay(25);
//	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 0);
//	  HAL_Delay(10);

    // Inicialización para 4 bit
    HAL_Delay(50);  // Esperar >40ms
 8001fae:	2032      	movs	r0, #50	; 0x32
 8001fb0:	f000 fa74 	bl	800249c <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001fb4:	2030      	movs	r0, #48	; 0x30
 8001fb6:	f000 f8e9 	bl	800218c <lcd_enviar_comando>

    HAL_Delay(5);  // Esperar >4.1ms
 8001fba:	2005      	movs	r0, #5
 8001fbc:	f000 fa6e 	bl	800249c <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001fc0:	2030      	movs	r0, #48	; 0x30
 8001fc2:	f000 f8e3 	bl	800218c <lcd_enviar_comando>
    HAL_Delay(1);  // Esperar >100us
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f000 fa68 	bl	800249c <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 8001fcc:	2030      	movs	r0, #48	; 0x30
 8001fce:	f000 f8dd 	bl	800218c <lcd_enviar_comando>
    HAL_Delay(10);
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f000 fa62 	bl	800249c <HAL_Delay>
    lcd_enviar_comando (MODO_4BIT);
 8001fd8:	2020      	movs	r0, #32
 8001fda:	f000 f8d7 	bl	800218c <lcd_enviar_comando>
    HAL_Delay(10);
 8001fde:	200a      	movs	r0, #10
 8001fe0:	f000 fa5c 	bl	800249c <HAL_Delay>

  // dislay initialisation
    lcd_enviar_comando (FUNCTION_SET); // FDL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001fe4:	2028      	movs	r0, #40	; 0x28
 8001fe6:	f000 f8d1 	bl	800218c <lcd_enviar_comando>
    HAL_Delay(1);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f000 fa56 	bl	800249c <HAL_Delay>
    lcd_enviar_comando (LCD_OFF); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001ff0:	2008      	movs	r0, #8
 8001ff2:	f000 f8cb 	bl	800218c <lcd_enviar_comando>
    HAL_Delay(1);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f000 fa50 	bl	800249c <HAL_Delay>
    lcd_enviar_comando (CLEAR_LCD);  // clear display
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f000 f8c5 	bl	800218c <lcd_enviar_comando>
    HAL_Delay(1);
 8002002:	2001      	movs	r0, #1
 8002004:	f000 fa4a 	bl	800249c <HAL_Delay>
    HAL_Delay(1);
 8002008:	2001      	movs	r0, #1
 800200a:	f000 fa47 	bl	800249c <HAL_Delay>
    lcd_enviar_comando (ENTRY_MODE_SET); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800200e:	2006      	movs	r0, #6
 8002010:	f000 f8bc 	bl	800218c <lcd_enviar_comando>
    HAL_Delay(1);
 8002014:	2001      	movs	r0, #1
 8002016:	f000 fa41 	bl	800249c <HAL_Delay>
    lcd_enviar_comando (BLINK_CURSOR); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800201a:	200c      	movs	r0, #12
 800201c:	f000 f8b6 	bl	800218c <lcd_enviar_comando>

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <lcd_enviar_cadena>:
//    data_t[1] = data_u|0x09;  //en=0, rs=1
//    data_t[2] = data_l|0x0D;  //en=1, rs=1
//    data_t[3] = data_l|0x09;  //en=0, rs=1
//    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
//}
void lcd_enviar_cadena (char *str){
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	  HAL_Delay(10);
 800202c:	200a      	movs	r0, #10
 800202e:	f000 fa35 	bl	800249c <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2140      	movs	r1, #64	; 0x40
 8002036:	4813      	ldr	r0, [pc, #76]	; (8002084 <lcd_enviar_cadena+0x60>)
 8002038:	f001 fc1e 	bl	8003878 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 fa2d 	bl	800249c <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 1);
 8002042:	2201      	movs	r2, #1
 8002044:	2140      	movs	r1, #64	; 0x40
 8002046:	480f      	ldr	r0, [pc, #60]	; (8002084 <lcd_enviar_cadena+0x60>)
 8002048:	f001 fc16 	bl	8003878 <HAL_GPIO_WritePin>
	  HAL_Delay(25);
 800204c:	2019      	movs	r0, #25
 800204e:	f000 fa25 	bl	800249c <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2140      	movs	r1, #64	; 0x40
 8002056:	480b      	ldr	r0, [pc, #44]	; (8002084 <lcd_enviar_cadena+0x60>)
 8002058:	f001 fc0e 	bl	8003878 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 800205c:	200a      	movs	r0, #10
 800205e:	f000 fa1d 	bl	800249c <HAL_Delay>
    while (*str) lcd_enviar_dato (*str++);
 8002062:	e006      	b.n	8002072 <lcd_enviar_cadena+0x4e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f8a7 	bl	80021c0 <lcd_enviar_dato>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f4      	bne.n	8002064 <lcd_enviar_cadena+0x40>
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40020000 	.word	0x40020000

08002088 <lcd_pos_cursor>:

void lcd_pos_cursor(uint8_t fil, uint8_t col){
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	460a      	mov	r2, r1
 8002092:	71fb      	strb	r3, [r7, #7]
 8002094:	4613      	mov	r3, r2
 8002096:	71bb      	strb	r3, [r7, #6]
    switch (fil){
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <lcd_pos_cursor+0x1c>
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d005      	beq.n	80020ae <lcd_pos_cursor+0x26>
 80020a2:	e009      	b.n	80020b8 <lcd_pos_cursor+0x30>
        case 0:
            col |= 0x80;
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020aa:	71bb      	strb	r3, [r7, #6]
            break;
 80020ac:	e004      	b.n	80020b8 <lcd_pos_cursor+0x30>
        case 1:
            col |= 0xC0;
 80020ae:	79bb      	ldrb	r3, [r7, #6]
 80020b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80020b4:	71bb      	strb	r3, [r7, #6]
            break;
 80020b6:	bf00      	nop
    }
    lcd_enviar_comando(col);
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f866 	bl	800218c <lcd_enviar_comando>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <lcd_borrar>:

void lcd_borrar(void){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	lcd_enviar_comando(CLEAR_LCD);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f000 f85d 	bl	800218c <lcd_enviar_comando>
    HAL_Delay(5);
 80020d2:	2005      	movs	r0, #5
 80020d4:	f000 f9e2 	bl	800249c <HAL_Delay>

}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <lcd_enviar>:

 void lcd_enviar(char data, int rs) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs);  // rs = 1 for data, rs=0 for command
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f2:	4823      	ldr	r0, [pc, #140]	; (8002180 <lcd_enviar+0xa4>)
 80020f4:	f001 fbc0 	bl	8003878 <HAL_GPIO_WritePin>
    /* write the data to the respective pin */
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, ((data>>3)&0x01));
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	08db      	lsrs	r3, r3, #3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210a:	481d      	ldr	r0, [pc, #116]	; (8002180 <lcd_enviar+0xa4>)
 800210c:	f001 fbb4 	bl	8003878 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, ((data>>2)&0x01));
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002122:	4818      	ldr	r0, [pc, #96]	; (8002184 <lcd_enviar+0xa8>)
 8002124:	f001 fba8 	bl	8003878 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, ((data>>1)&0x01));
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800213a:	4812      	ldr	r0, [pc, #72]	; (8002184 <lcd_enviar+0xa8>)
 800213c:	f001 fb9c 	bl	8003878 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, ((data>>0)&0x01));
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <lcd_enviar+0xa4>)
 8002150:	f001 fb92 	bl	8003878 <HAL_GPIO_WritePin>
    /* Toggle EN PIN to send the data
     * if the HCLK > 100 MHz, use the  20 us delay
     * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
     */
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 8002154:	2201      	movs	r2, #1
 8002156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215a:	480b      	ldr	r0, [pc, #44]	; (8002188 <lcd_enviar+0xac>)
 800215c:	f001 fb8c 	bl	8003878 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002160:	200a      	movs	r0, #10
 8002162:	f000 f99b 	bl	800249c <HAL_Delay>
//  delay (20);
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800216c:	4806      	ldr	r0, [pc, #24]	; (8002188 <lcd_enviar+0xac>)
 800216e:	f001 fb83 	bl	8003878 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002172:	200a      	movs	r0, #10
 8002174:	f000 f992 	bl	800249c <HAL_Delay>
//  delay (20);
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021400 	.word	0x40021400
 8002184:	40021000 	.word	0x40021000
 8002188:	40020c00 	.word	0x40020c00

0800218c <lcd_enviar_comando>:

 void lcd_enviar_comando (char cmd)
 {
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
     char datatosend;
     /* send upper nibble first */
     datatosend = ((cmd>>4)&0x0f);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	73fb      	strb	r3, [r7, #15]
     lcd_enviar(datatosend,0);  // RS must be while sending command
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff9b 	bl	80020dc <lcd_enviar>
     /* send Lower Nibble */
     datatosend = ((cmd)&0x0f);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	73fb      	strb	r3, [r7, #15]
     lcd_enviar(datatosend, 0);
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff92 	bl	80020dc <lcd_enviar>
 }
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <lcd_enviar_dato>:

 void lcd_enviar_dato (char data)
 {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
     char datatosend;

     /* send higher nibble */
     datatosend = ((data>>4)&0x0f);
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	73fb      	strb	r3, [r7, #15]
     lcd_enviar(datatosend, 1);  // rs =1 for sending data
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff81 	bl	80020dc <lcd_enviar>
     /* send Lower nibble */
     datatosend = ((data)&0x0f);
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	73fb      	strb	r3, [r7, #15]
     lcd_enviar(datatosend, 1);
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	2101      	movs	r1, #1
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff78 	bl	80020dc <lcd_enviar>
 }
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <bcd2dec>:
uint8_t dec2bcd(int val){
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convierte de bcd a decimal
// Multiplica al nibble alto por 10, y le suma el nibble bajo
static uint8_t bcd2dec(uint8_t bcd){
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  int dec = ((bcd & 0xF0) >> 4) * 10 + (bcd & 0x0F);
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	461a      	mov	r2, r3
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  return dec;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	b2db      	uxtb	r3, r3
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <leer_fecha_hora>:

dateTime_t leer_fecha_hora(void){
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af04      	add	r7, sp, #16
 8002232:	6078      	str	r0, [r7, #4]
	dateTime_t dato;
	uint8_t dato_leido[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, MEM_REG, 1, dato_leido, CANT_REG_FH, RTC_TIMEOUT);
 8002234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	2307      	movs	r3, #7
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	f107 0308 	add.w	r3, r7, #8
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	2200      	movs	r2, #0
 8002248:	21d0      	movs	r1, #208	; 0xd0
 800224a:	4819      	ldr	r0, [pc, #100]	; (80022b0 <leer_fecha_hora+0x84>)
 800224c:	f001 fc72 	bl	8003b34 <HAL_I2C_Mem_Read>

	dato.seg = bcd2dec(dato_leido[0]);
 8002250:	7a3b      	ldrb	r3, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ffce 	bl	80021f4 <bcd2dec>
 8002258:	4603      	mov	r3, r0
 800225a:	757b      	strb	r3, [r7, #21]
	dato.min = bcd2dec(dato_leido[1]);
 800225c:	7a7b      	ldrb	r3, [r7, #9]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ffc8 	bl	80021f4 <bcd2dec>
 8002264:	4603      	mov	r3, r0
 8002266:	753b      	strb	r3, [r7, #20]
	dato.hora = bcd2dec(dato_leido[2]);
 8002268:	7abb      	ldrb	r3, [r7, #10]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ffc2 	bl	80021f4 <bcd2dec>
 8002270:	4603      	mov	r3, r0
 8002272:	74fb      	strb	r3, [r7, #19]
	//dato_leido[3] corresponde al día de la semana
	dato.dia = bcd2dec(dato_leido[4]);
 8002274:	7b3b      	ldrb	r3, [r7, #12]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ffbc 	bl	80021f4 <bcd2dec>
 800227c:	4603      	mov	r3, r0
 800227e:	74bb      	strb	r3, [r7, #18]
	dato.mes = bcd2dec(dato_leido[5]);
 8002280:	7b7b      	ldrb	r3, [r7, #13]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ffb6 	bl	80021f4 <bcd2dec>
 8002288:	4603      	mov	r3, r0
 800228a:	747b      	strb	r3, [r7, #17]
	dato.anio = bcd2dec(dato_leido[6]);
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ffb0 	bl	80021f4 <bcd2dec>
 8002294:	4603      	mov	r3, r0
 8002296:	743b      	strb	r3, [r7, #16]

	return dato;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	461a      	mov	r2, r3
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	6010      	str	r0, [r2, #0]
 80022a4:	889b      	ldrh	r3, [r3, #4]
 80022a6:	8093      	strh	r3, [r2, #4]
}
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000468 	.word	0x20000468

080022b4 <obtener_fecha>:
/**
 * \brief Genera una cadena para mostrar la fecha.
 *
 * \param char* temp El puntero a la cadena.
 */
void obtener_fecha(char* fecha){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	6078      	str	r0, [r7, #4]

	dateTime_t fecha_hora = leer_fecha_hora();
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ffb3 	bl	800222c <leer_fecha_hora>

	sprintf(fecha, FORMATO_FECHA, fecha_hora.dia, fecha_hora.mes, fecha_hora.anio);
 80022c6:	7abb      	ldrb	r3, [r7, #10]
 80022c8:	461a      	mov	r2, r3
 80022ca:	7a7b      	ldrb	r3, [r7, #9]
 80022cc:	4619      	mov	r1, r3
 80022ce:	7a3b      	ldrb	r3, [r7, #8]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	460b      	mov	r3, r1
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <obtener_fecha+0x30>)
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f004 f9f2 	bl	80066c0 <siprintf>
	return;
 80022dc:	bf00      	nop
}
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	080089c8 	.word	0x080089c8

080022e8 <obtener_hora>:
/**
 * \brief Genera una cadena para mostrar la hora.
 *
 * \param char* temp El puntero a la cadena.
 */
void obtener_hora(char* hora){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	dateTime_t fecha_hora = leer_fecha_hora();
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff99 	bl	800222c <leer_fecha_hora>

	sprintf(hora, FORMATO_HORA, fecha_hora.hora, fecha_hora.min);
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	461a      	mov	r2, r3
 80022fe:	7b3b      	ldrb	r3, [r7, #12]
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <obtener_hora+0x28>)
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f004 f9dc 	bl	80066c0 <siprintf>
	return;
 8002308:	bf00      	nop
}
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	080089d8 	.word	0x080089d8

08002314 <leer_temp>:
 * En 0x11 está la parte entera del valor, y en 0x12 la parte decimal.
 * La resolución es 0.25gC por eso la parte decimal se divide por 4
 *
 * \return La temperatura sensada.
 */
temp_t leer_temp (void){
 8002314:	b5b0      	push	{r4, r5, r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af04      	add	r7, sp, #16
	uint8_t temp[2];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, TEMP_REG, 1, temp, CANT_REG_TEMP, RTC_TIMEOUT);
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2302      	movs	r3, #2
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2301      	movs	r3, #1
 800232a:	2211      	movs	r2, #17
 800232c:	21d0      	movs	r1, #208	; 0xd0
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <leer_temp+0x6c>)
 8002330:	f001 fc00 	bl	8003b34 <HAL_I2C_Mem_Read>

	return ((temp[0])+(temp[1]>>6)*0.25);
 8002334:	793b      	ldrb	r3, [r7, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f904 	bl	8000544 <__aeabi_i2d>
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
 8002340:	797b      	ldrb	r3, [r7, #5]
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8fc 	bl	8000544 <__aeabi_i2d>
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <leer_temp+0x70>)
 8002352:	f7fe f961 	bl	8000618 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4620      	mov	r0, r4
 800235c:	4629      	mov	r1, r5
 800235e:	f7fd ffa5 	bl	80002ac <__adddf3>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fc2d 	bl	8000bc8 <__aeabi_d2f>
 800236e:	4603      	mov	r3, r0
 8002370:	ee07 3a90 	vmov	s15, r3
}
 8002374:	eeb0 0a67 	vmov.f32	s0, s15
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bdb0      	pop	{r4, r5, r7, pc}
 800237e:	bf00      	nop
 8002380:	20000468 	.word	0x20000468
 8002384:	3fd00000 	.word	0x3fd00000

08002388 <obtener_temp>:
/**
 * \brief Genera una cadena para mostrar la temperatura.
 *
 * \param char* temp El puntero a la cadena.
 */
void obtener_temp(char* temp){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	temp_t temperatura = leer_temp();
 8002390:	f7ff ffc0 	bl	8002314 <leer_temp>
 8002394:	ed87 0a03 	vstr	s0, [r7, #12]

	sprintf(temp, FORMATO_TEMP, temperatura);
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7fe f8e5 	bl	8000568 <__aeabi_f2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4904      	ldr	r1, [pc, #16]	; (80023b4 <obtener_temp+0x2c>)
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f004 f98b 	bl	80066c0 <siprintf>
	return;
 80023aa:	bf00      	nop
}
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	080089e4 	.word	0x080089e4

080023b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <HAL_Init+0x40>)
 80023c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <HAL_Init+0x40>)
 80023ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_Init+0x40>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_Init+0x40>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 fd41 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f000 f808 	bl	80023fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ec:	f7ff fb06 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023c00 	.word	0x40023c00

080023fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_InitTick+0x54>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_InitTick+0x58>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002412:	fbb3 f3f1 	udiv	r3, r3, r1
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fd4b 	bl	8002eb6 <HAL_SYSTICK_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00e      	b.n	8002448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b0f      	cmp	r3, #15
 800242e:	d80a      	bhi.n	8002446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002430:	2200      	movs	r2, #0
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002438:	f000 fd21 	bl	8002e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800243c:	4a06      	ldr	r2, [pc, #24]	; (8002458 <HAL_InitTick+0x5c>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000000 	.word	0x20000000
 8002454:	20000008 	.word	0x20000008
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x20>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x24>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_IncTick+0x24>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000008 	.word	0x20000008
 8002480:	20000a14 	.word	0x20000a14

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_GetTick+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000a14 	.word	0x20000a14

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff ffee 	bl	8002484 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b4:	d005      	beq.n	80024c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_Delay+0x44>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024c2:	bf00      	nop
 80024c4:	f7ff ffde 	bl	8002484 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d8f7      	bhi.n	80024c4 <HAL_Delay+0x28>
  {
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000008 	.word	0x20000008

080024e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e033      	b.n	8002562 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe fd82 	bl	800100c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800252a:	f023 0302 	bic.w	r3, r3, #2
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fae8 	bl	8002b0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
 8002552:	e001      	b.n	8002558 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Start+0x1a>
 8002582:	2302      	movs	r3, #2
 8002584:	e0b2      	b.n	80026ec <HAL_ADC_Start+0x180>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d018      	beq.n	80025ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ac:	4b52      	ldr	r3, [pc, #328]	; (80026f8 <HAL_ADC_Start+0x18c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_ADC_Start+0x190>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0c9a      	lsrs	r2, r3, #18
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025c0:	e002      	b.n	80025c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f9      	bne.n	80025c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d17a      	bne.n	80026d2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002606:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261a:	d106      	bne.n	800262a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	f023 0206 	bic.w	r2, r3, #6
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	645a      	str	r2, [r3, #68]	; 0x44
 8002628:	e002      	b.n	8002630 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002638:	4b31      	ldr	r3, [pc, #196]	; (8002700 <HAL_ADC_Start+0x194>)
 800263a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002644:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2b00      	cmp	r3, #0
 8002650:	d12a      	bne.n	80026a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <HAL_ADC_Start+0x198>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d015      	beq.n	8002688 <HAL_ADC_Start+0x11c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_ADC_Start+0x19c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d105      	bne.n	8002672 <HAL_ADC_Start+0x106>
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_ADC_Start+0x194>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a25      	ldr	r2, [pc, #148]	; (800270c <HAL_ADC_Start+0x1a0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d136      	bne.n	80026ea <HAL_ADC_Start+0x17e>
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_ADC_Start+0x194>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d130      	bne.n	80026ea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d129      	bne.n	80026ea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	e020      	b.n	80026ea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a15      	ldr	r2, [pc, #84]	; (8002704 <HAL_ADC_Start+0x198>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d11b      	bne.n	80026ea <HAL_ADC_Start+0x17e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d114      	bne.n	80026ea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	e00b      	b.n	80026ea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	20000000 	.word	0x20000000
 80026fc:	431bde83 	.word	0x431bde83
 8002700:	40012300 	.word	0x40012300
 8002704:	40012000 	.word	0x40012000
 8002708:	40012100 	.word	0x40012100
 800270c:	40012200 	.word	0x40012200

08002710 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Stop+0x16>
 8002722:	2302      	movs	r3, #2
 8002724:	e021      	b.n	800276a <HAL_ADC_Stop+0x5a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002792:	d113      	bne.n	80027bc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800279e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a2:	d10b      	bne.n	80027bc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e063      	b.n	8002884 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80027bc:	f7ff fe62 	bl	8002484 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027c2:	e021      	b.n	8002808 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ca:	d01d      	beq.n	8002808 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_ADC_PollForConversion+0x6c>
 80027d2:	f7ff fe57 	bl	8002484 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d212      	bcs.n	8002808 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d00b      	beq.n	8002808 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0204 	orr.w	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e03d      	b.n	8002884 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d1d6      	bne.n	80027c4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f06f 0212 	mvn.w	r2, #18
 800281e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d123      	bne.n	8002882 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11f      	bne.n	8002882 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800285a:	2b00      	cmp	r3, #0
 800285c:	d111      	bne.n	8002882 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1c>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e113      	b.n	8002aec <HAL_ADC_ConfigChannel+0x244>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d925      	bls.n	8002920 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68d9      	ldr	r1, [r3, #12]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	3b1e      	subs	r3, #30
 80028ea:	2207      	movs	r2, #7
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68d9      	ldr	r1, [r3, #12]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	4603      	mov	r3, r0
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4403      	add	r3, r0
 8002912:	3b1e      	subs	r3, #30
 8002914:	409a      	lsls	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e022      	b.n	8002966 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	2207      	movs	r2, #7
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	4618      	mov	r0, r3
 8002956:	4603      	mov	r3, r0
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4403      	add	r3, r0
 800295c:	409a      	lsls	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d824      	bhi.n	80029b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	3b05      	subs	r3, #5
 8002980:	221f      	movs	r2, #31
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	400a      	ands	r2, r1
 800298e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b05      	subs	r3, #5
 80029aa:	fa00 f203 	lsl.w	r2, r0, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
 80029b6:	e04c      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d824      	bhi.n	8002a0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b23      	subs	r3, #35	; 0x23
 80029d2:	221f      	movs	r2, #31
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43da      	mvns	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	400a      	ands	r2, r1
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	3b23      	subs	r3, #35	; 0x23
 80029fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
 8002a08:	e023      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b41      	subs	r3, #65	; 0x41
 8002a1c:	221f      	movs	r2, #31
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	400a      	ands	r2, r1
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	3b41      	subs	r3, #65	; 0x41
 8002a46:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_ADC_ConfigChannel+0x250>)
 8002a54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_ADC_ConfigChannel+0x254>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10f      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1d8>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b12      	cmp	r3, #18
 8002a66:	d10b      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_ADC_ConfigChannel+0x254>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12b      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_ADC_ConfigChannel+0x258>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x1f4>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b11      	cmp	r3, #17
 8002a9a:	d122      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_ADC_ConfigChannel+0x258>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d111      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_ADC_ConfigChannel+0x25c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <HAL_ADC_ConfigChannel+0x260>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	0c9a      	lsrs	r2, r3, #18
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012300 	.word	0x40012300
 8002afc:	40012000 	.word	0x40012000
 8002b00:	10000012 	.word	0x10000012
 8002b04:	20000000 	.word	0x20000000
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b14:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <ADC_Init+0x1f0>)
 8002b16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	021a      	lsls	r2, r3, #8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <ADC_Init+0x1f4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	e00f      	b.n	8002c0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0202 	bic.w	r2, r2, #2
 8002c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7e1b      	ldrb	r3, [r3, #24]
 8002c24:	005a      	lsls	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01b      	beq.n	8002c70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	3b01      	subs	r3, #1
 8002c64:	035a      	lsls	r2, r3, #13
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	e007      	b.n	8002c80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	051a      	lsls	r2, r3, #20
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6899      	ldr	r1, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc2:	025a      	lsls	r2, r3, #9
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	029a      	lsls	r2, r3, #10
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40012300 	.word	0x40012300
 8002d00:	0f000001 	.word	0x0f000001

08002d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60d3      	str	r3, [r2, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	; (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	; (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
         );
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d301      	bcc.n	8002e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00f      	b.n	8002e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <SysTick_Config+0x40>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e42:	210f      	movs	r1, #15
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e48:	f7ff ff8e 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <SysTick_Config+0x40>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SysTick_Config+0x40>)
 8002e54:	2207      	movs	r2, #7
 8002e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff47 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e90:	f7ff ff5c 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f7ff ff8e 	bl	8002dbc <NVIC_EncodePriority>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff5d 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ffb0 	bl	8002e24 <SysTick_Config>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e06c      	b.n	8002fbc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2223      	movs	r2, #35	; 0x23
 8002ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fe f91b 	bl	8001130 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_ETH_Init+0xf4>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a30      	ldr	r2, [pc, #192]	; (8002fc4 <HAL_ETH_Init+0xf4>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b2e      	ldr	r3, [pc, #184]	; (8002fc4 <HAL_ETH_Init+0xf4>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_ETH_Init+0xf8>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <HAL_ETH_Init+0xf8>)
 8002f1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f20:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f22:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <HAL_ETH_Init+0xf8>)
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4927      	ldr	r1, [pc, #156]	; (8002fc8 <HAL_ETH_Init+0xf8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002f30:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <HAL_ETH_Init+0xf8>)
 8002f32:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f4c:	f7ff fa9a 	bl	8002484 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002f52:	e011      	b.n	8002f78 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002f54:	f7ff fa96 	bl	8002484 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f62:	d909      	bls.n	8002f78 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2204      	movs	r2, #4
 8002f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	22e0      	movs	r2, #224	; 0xe0
 8002f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e021      	b.n	8002fbc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e4      	bne.n	8002f54 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f958 	bl	8003240 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f9ff 	bl	8003394 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fa55 	bl	8003446 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f9bd 	bl	8003324 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40013800 	.word	0x40013800

08002fcc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4b51      	ldr	r3, [pc, #324]	; (8003128 <ETH_SetMACConfig+0x15c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	7c1b      	ldrb	r3, [r3, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <ETH_SetMACConfig+0x28>
 8002fee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ff2:	e000      	b.n	8002ff6 <ETH_SetMACConfig+0x2a>
 8002ff4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	7c5b      	ldrb	r3, [r3, #17]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <ETH_SetMACConfig+0x38>
 8002ffe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003002:	e000      	b.n	8003006 <ETH_SetMACConfig+0x3a>
 8003004:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003006:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800300c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	7fdb      	ldrb	r3, [r3, #31]
 8003012:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003014:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800301a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	7f92      	ldrb	r2, [r2, #30]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d102      	bne.n	800302a <ETH_SetMACConfig+0x5e>
 8003024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003028:	e000      	b.n	800302c <ETH_SetMACConfig+0x60>
 800302a:	2200      	movs	r2, #0
                        macconf->Speed |
 800302c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	7f1b      	ldrb	r3, [r3, #28]
 8003032:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003034:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800303a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	791b      	ldrb	r3, [r3, #4]
 8003040:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003042:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	f892 2020 	ldrb.w	r2, [r2, #32]
 800304a:	2a00      	cmp	r2, #0
 800304c:	d102      	bne.n	8003054 <ETH_SetMACConfig+0x88>
 800304e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003052:	e000      	b.n	8003056 <ETH_SetMACConfig+0x8a>
 8003054:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003056:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	7bdb      	ldrb	r3, [r3, #15]
 800305c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800305e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003064:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800306c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800306e:	4313      	orrs	r3, r2
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003086:	2001      	movs	r0, #1
 8003088:	f7ff fa08 	bl	800249c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80030a2:	4013      	ands	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80030b2:	2a00      	cmp	r2, #0
 80030b4:	d101      	bne.n	80030ba <ETH_SetMACConfig+0xee>
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	e000      	b.n	80030bc <ETH_SetMACConfig+0xf0>
 80030ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80030ca:	2a01      	cmp	r2, #1
 80030cc:	d101      	bne.n	80030d2 <ETH_SetMACConfig+0x106>
 80030ce:	2208      	movs	r2, #8
 80030d0:	e000      	b.n	80030d4 <ETH_SetMACConfig+0x108>
 80030d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80030d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80030dc:	2a01      	cmp	r2, #1
 80030de:	d101      	bne.n	80030e4 <ETH_SetMACConfig+0x118>
 80030e0:	2204      	movs	r2, #4
 80030e2:	e000      	b.n	80030e6 <ETH_SetMACConfig+0x11a>
 80030e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80030ee:	2a01      	cmp	r2, #1
 80030f0:	d101      	bne.n	80030f6 <ETH_SetMACConfig+0x12a>
 80030f2:	2202      	movs	r2, #2
 80030f4:	e000      	b.n	80030f8 <ETH_SetMACConfig+0x12c>
 80030f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030f8:	4313      	orrs	r3, r2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003110:	2001      	movs	r0, #1
 8003112:	f7ff f9c3 	bl	800249c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	619a      	str	r2, [r3, #24]
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	ff20810f 	.word	0xff20810f

0800312c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <ETH_SetDMAConfig+0x110>)
 8003146:	4013      	ands	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7b1b      	ldrb	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <ETH_SetDMAConfig+0x2c>
 8003152:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003156:	e000      	b.n	800315a <ETH_SetDMAConfig+0x2e>
 8003158:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	7b5b      	ldrb	r3, [r3, #13]
 800315e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003160:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	7f52      	ldrb	r2, [r2, #29]
 8003166:	2a00      	cmp	r2, #0
 8003168:	d102      	bne.n	8003170 <ETH_SetDMAConfig+0x44>
 800316a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800316e:	e000      	b.n	8003172 <ETH_SetDMAConfig+0x46>
 8003170:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003172:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	7b9b      	ldrb	r3, [r3, #14]
 8003178:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800317a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003180:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	7f1b      	ldrb	r3, [r3, #28]
 8003186:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003188:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	7f9b      	ldrb	r3, [r3, #30]
 800318e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003190:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003196:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031a0:	4313      	orrs	r3, r2
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b0:	461a      	mov	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031c2:	2001      	movs	r0, #1
 80031c4:	f7ff f96a 	bl	800249c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d0:	461a      	mov	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	791b      	ldrb	r3, [r3, #4]
 80031da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80031e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80031f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003204:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800320e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003212:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003220:	2001      	movs	r0, #1
 8003222:	f7ff f93b 	bl	800249c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	f8de3f23 	.word	0xf8de3f23

08003240 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0a6      	sub	sp, #152	; 0x98
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003254:	2300      	movs	r3, #0
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800327c:	2300      	movs	r3, #0
 800327e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003286:	2300      	movs	r3, #0
 8003288:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80032a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032a6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80032a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fe86 	bl	8002fcc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003300:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003310:	f107 0308 	add.w	r3, r7, #8
 8003314:	4619      	mov	r1, r3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff08 	bl	800312c <ETH_SetDMAConfig>
}
 800331c:	bf00      	nop
 800331e:	3798      	adds	r7, #152	; 0x98
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3305      	adds	r3, #5
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	3204      	adds	r2, #4
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <ETH_MACAddressConfig+0x68>)
 8003346:	4413      	add	r3, r2
 8003348:	461a      	mov	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3303      	adds	r3, #3
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	061a      	lsls	r2, r3, #24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3302      	adds	r3, #2
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3301      	adds	r3, #1
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	4313      	orrs	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <ETH_MACAddressConfig+0x6c>)
 8003376:	4413      	add	r3, r2
 8003378:	461a      	mov	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	6013      	str	r3, [r2, #0]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40028040 	.word	0x40028040
 8003390:	40028044 	.word	0x40028044

08003394 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e03e      	b.n	8003420 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68d9      	ldr	r1, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	3206      	adds	r2, #6
 80033d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d80c      	bhi.n	8003404 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68d9      	ldr	r1, [r3, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	461a      	mov	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e004      	b.n	800340e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	461a      	mov	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3301      	adds	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d9bd      	bls.n	80033a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003438:	611a      	str	r2, [r3, #16]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e046      	b.n	80034e2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6919      	ldr	r1, [r3, #16]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003490:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003498:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	3212      	adds	r2, #18
 80034ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d80c      	bhi.n	80034d2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6919      	ldr	r1, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60da      	str	r2, [r3, #12]
 80034d0:	e004      	b.n	80034dc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3301      	adds	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d9b5      	bls.n	8003454 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003512:	60da      	str	r2, [r3, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	e177      	b.n	800382c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800353c:	2201      	movs	r2, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	f040 8166 	bne.w	8003826 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d005      	beq.n	8003572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356e:	2b02      	cmp	r3, #2
 8003570:	d130      	bne.n	80035d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 0201 	and.w	r2, r3, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d017      	beq.n	8003610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d123      	bne.n	8003664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	220f      	movs	r2, #15
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	08da      	lsrs	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3208      	adds	r2, #8
 800365e:	69b9      	ldr	r1, [r7, #24]
 8003660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	2203      	movs	r2, #3
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0203 	and.w	r2, r3, #3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80c0 	beq.w	8003826 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_GPIO_Init+0x324>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a65      	ldr	r2, [pc, #404]	; (8003844 <HAL_GPIO_Init+0x324>)
 80036b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_GPIO_Init+0x324>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c2:	4a61      	ldr	r2, [pc, #388]	; (8003848 <HAL_GPIO_Init+0x328>)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_GPIO_Init+0x32c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d037      	beq.n	800375e <HAL_GPIO_Init+0x23e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a57      	ldr	r2, [pc, #348]	; (8003850 <HAL_GPIO_Init+0x330>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d031      	beq.n	800375a <HAL_GPIO_Init+0x23a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a56      	ldr	r2, [pc, #344]	; (8003854 <HAL_GPIO_Init+0x334>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02b      	beq.n	8003756 <HAL_GPIO_Init+0x236>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a55      	ldr	r2, [pc, #340]	; (8003858 <HAL_GPIO_Init+0x338>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d025      	beq.n	8003752 <HAL_GPIO_Init+0x232>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a54      	ldr	r2, [pc, #336]	; (800385c <HAL_GPIO_Init+0x33c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01f      	beq.n	800374e <HAL_GPIO_Init+0x22e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a53      	ldr	r2, [pc, #332]	; (8003860 <HAL_GPIO_Init+0x340>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d019      	beq.n	800374a <HAL_GPIO_Init+0x22a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a52      	ldr	r2, [pc, #328]	; (8003864 <HAL_GPIO_Init+0x344>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0x226>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a51      	ldr	r2, [pc, #324]	; (8003868 <HAL_GPIO_Init+0x348>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00d      	beq.n	8003742 <HAL_GPIO_Init+0x222>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a50      	ldr	r2, [pc, #320]	; (800386c <HAL_GPIO_Init+0x34c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x21e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4f      	ldr	r2, [pc, #316]	; (8003870 <HAL_GPIO_Init+0x350>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_GPIO_Init+0x21a>
 8003736:	2309      	movs	r3, #9
 8003738:	e012      	b.n	8003760 <HAL_GPIO_Init+0x240>
 800373a:	230a      	movs	r3, #10
 800373c:	e010      	b.n	8003760 <HAL_GPIO_Init+0x240>
 800373e:	2308      	movs	r3, #8
 8003740:	e00e      	b.n	8003760 <HAL_GPIO_Init+0x240>
 8003742:	2307      	movs	r3, #7
 8003744:	e00c      	b.n	8003760 <HAL_GPIO_Init+0x240>
 8003746:	2306      	movs	r3, #6
 8003748:	e00a      	b.n	8003760 <HAL_GPIO_Init+0x240>
 800374a:	2305      	movs	r3, #5
 800374c:	e008      	b.n	8003760 <HAL_GPIO_Init+0x240>
 800374e:	2304      	movs	r3, #4
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x240>
 8003752:	2303      	movs	r3, #3
 8003754:	e004      	b.n	8003760 <HAL_GPIO_Init+0x240>
 8003756:	2302      	movs	r3, #2
 8003758:	e002      	b.n	8003760 <HAL_GPIO_Init+0x240>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_GPIO_Init+0x240>
 800375e:	2300      	movs	r3, #0
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	f002 0203 	and.w	r2, r2, #3
 8003766:	0092      	lsls	r2, r2, #2
 8003768:	4093      	lsls	r3, r2
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003770:	4935      	ldr	r1, [pc, #212]	; (8003848 <HAL_GPIO_Init+0x328>)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_GPIO_Init+0x354>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037a2:	4a34      	ldr	r2, [pc, #208]	; (8003874 <HAL_GPIO_Init+0x354>)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_GPIO_Init+0x354>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037cc:	4a29      	ldr	r2, [pc, #164]	; (8003874 <HAL_GPIO_Init+0x354>)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037d2:	4b28      	ldr	r3, [pc, #160]	; (8003874 <HAL_GPIO_Init+0x354>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <HAL_GPIO_Init+0x354>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_GPIO_Init+0x354>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_GPIO_Init+0x354>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3301      	adds	r3, #1
 800382a:	61fb      	str	r3, [r7, #28]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	f67f ae84 	bls.w	800353c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	40013800 	.word	0x40013800
 800384c:	40020000 	.word	0x40020000
 8003850:	40020400 	.word	0x40020400
 8003854:	40020800 	.word	0x40020800
 8003858:	40020c00 	.word	0x40020c00
 800385c:	40021000 	.word	0x40021000
 8003860:	40021400 	.word	0x40021400
 8003864:	40021800 	.word	0x40021800
 8003868:	40021c00 	.word	0x40021c00
 800386c:	40022000 	.word	0x40022000
 8003870:	40022400 	.word	0x40022400
 8003874:	40013c00 	.word	0x40013c00

08003878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]
 8003884:	4613      	mov	r3, r2
 8003886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003888:	787b      	ldrb	r3, [r7, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800388e:	887a      	ldrh	r2, [r7, #2]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003894:	e003      	b.n	800389e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	041a      	lsls	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	619a      	str	r2, [r3, #24]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e12b      	b.n	8003b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd fe62 	bl	800159c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	; 0x24
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800390e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003910:	f001 fbc2 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8003914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a81      	ldr	r2, [pc, #516]	; (8003b20 <HAL_I2C_Init+0x274>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d807      	bhi.n	8003930 <HAL_I2C_Init+0x84>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a80      	ldr	r2, [pc, #512]	; (8003b24 <HAL_I2C_Init+0x278>)
 8003924:	4293      	cmp	r3, r2
 8003926:	bf94      	ite	ls
 8003928:	2301      	movls	r3, #1
 800392a:	2300      	movhi	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e006      	b.n	800393e <HAL_I2C_Init+0x92>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a7d      	ldr	r2, [pc, #500]	; (8003b28 <HAL_I2C_Init+0x27c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0e7      	b.n	8003b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a78      	ldr	r2, [pc, #480]	; (8003b2c <HAL_I2C_Init+0x280>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0c9b      	lsrs	r3, r3, #18
 8003950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a6a      	ldr	r2, [pc, #424]	; (8003b20 <HAL_I2C_Init+0x274>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <HAL_I2C_Init+0xd4>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3301      	adds	r3, #1
 800397e:	e009      	b.n	8003994 <HAL_I2C_Init+0xe8>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	4a69      	ldr	r2, [pc, #420]	; (8003b30 <HAL_I2C_Init+0x284>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	3301      	adds	r3, #1
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	430b      	orrs	r3, r1
 800399a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	495c      	ldr	r1, [pc, #368]	; (8003b20 <HAL_I2C_Init+0x274>)
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d819      	bhi.n	80039e8 <HAL_I2C_Init+0x13c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e59      	subs	r1, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039c8:	400b      	ands	r3, r1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_I2C_Init+0x138>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e59      	subs	r1, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	e051      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 80039e4:	2304      	movs	r3, #4
 80039e6:	e04f      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d111      	bne.n	8003a14 <HAL_I2C_Init+0x168>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e58      	subs	r0, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	440b      	add	r3, r1
 80039fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e012      	b.n	8003a3a <HAL_I2C_Init+0x18e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1e58      	subs	r0, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	0099      	lsls	r1, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Init+0x196>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e022      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10e      	bne.n	8003a68 <HAL_I2C_Init+0x1bc>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e58      	subs	r0, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	440b      	add	r3, r1
 8003a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a66:	e00f      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	6809      	ldr	r1, [r1, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6911      	ldr	r1, [r2, #16]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	4311      	orrs	r1, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	000186a0 	.word	0x000186a0
 8003b24:	001e847f 	.word	0x001e847f
 8003b28:	003d08ff 	.word	0x003d08ff
 8003b2c:	431bde83 	.word	0x431bde83
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	; 0x30
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	460b      	mov	r3, r1
 8003b48:	813b      	strh	r3, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b4e:	f7fe fc99 	bl	8002484 <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	f040 8208 	bne.w	8003f72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2319      	movs	r3, #25
 8003b68:	2201      	movs	r2, #1
 8003b6a:	497b      	ldr	r1, [pc, #492]	; (8003d58 <HAL_I2C_Mem_Read+0x224>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 faef 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e1fb      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Mem_Read+0x56>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e1f4      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d007      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2222      	movs	r2, #34	; 0x22
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a5b      	ldr	r2, [pc, #364]	; (8003d5c <HAL_I2C_Mem_Read+0x228>)
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bf2:	88f8      	ldrh	r0, [r7, #6]
 8003bf4:	893a      	ldrh	r2, [r7, #8]
 8003bf6:	8979      	ldrh	r1, [r7, #10]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f9bc 	bl	8003f80 <I2C_RequestMemoryRead>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e1b0      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d113      	bne.n	8003c42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e184      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d11b      	bne.n	8003c82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e164      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d11b      	bne.n	8003cc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	e144      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cd8:	e138      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	f200 80f1 	bhi.w	8003ec6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d123      	bne.n	8003d34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fb44 	bl	800437e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e139      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d32:	e10b      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d14e      	bne.n	8003dda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d42:	2200      	movs	r2, #0
 8003d44:	4906      	ldr	r1, [pc, #24]	; (8003d60 <HAL_I2C_Mem_Read+0x22c>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fa02 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e10e      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
 8003d56:	bf00      	nop
 8003d58:	00100002 	.word	0x00100002
 8003d5c:	ffff0000 	.word	0xffff0000
 8003d60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd8:	e0b8      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	2200      	movs	r2, #0
 8003de2:	4966      	ldr	r1, [pc, #408]	; (8003f7c <HAL_I2C_Mem_Read+0x448>)
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f9b3 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0bf      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	494f      	ldr	r1, [pc, #316]	; (8003f7c <HAL_I2C_Mem_Read+0x448>)
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f985 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e091      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ec4:	e042      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fa57 	bl	800437e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e04c      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d118      	bne.n	8003f4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f aec2 	bne.w	8003cda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	00010004 	.word	0x00010004

08003f80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	817b      	strh	r3, [r7, #10]
 8003f92:	460b      	mov	r3, r1
 8003f94:	813b      	strh	r3, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f8c2 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe0:	d103      	bne.n	8003fea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0aa      	b.n	8004144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fee:	897b      	ldrh	r3, [r7, #10]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	4952      	ldr	r1, [pc, #328]	; (800414c <I2C_RequestMemoryRead+0x1cc>)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f8fa 	bl	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e097      	b.n	8004144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	6a39      	ldr	r1, [r7, #32]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f964 	bl	80042fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b04      	cmp	r3, #4
 8004040:	d107      	bne.n	8004052 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e076      	b.n	8004144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800405c:	893b      	ldrh	r3, [r7, #8]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	e021      	b.n	80040ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004068:	893b      	ldrh	r3, [r7, #8]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	b29b      	uxth	r3, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	6a39      	ldr	r1, [r7, #32]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f93e 	bl	80042fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b04      	cmp	r3, #4
 800408c:	d107      	bne.n	800409e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e050      	b.n	8004144 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a2:	893b      	ldrh	r3, [r7, #8]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	6a39      	ldr	r1, [r7, #32]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f923 	bl	80042fc <I2C_WaitOnTXEFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d107      	bne.n	80040d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e035      	b.n	8004144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f82b 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410e:	d103      	bne.n	8004118 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e013      	b.n	8004144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800411c:	897b      	ldrh	r3, [r7, #10]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	6a3a      	ldr	r2, [r7, #32]
 8004130:	4906      	ldr	r1, [pc, #24]	; (800414c <I2C_RequestMemoryRead+0x1cc>)
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f863 	bl	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	00010002 	.word	0x00010002

08004150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004160:	e025      	b.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004168:	d021      	beq.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fe f98b 	bl	8002484 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d116      	bne.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e023      	b.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10d      	bne.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4013      	ands	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	e00c      	b.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d0b6      	beq.n	8004162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420c:	e051      	b.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421c:	d123      	bne.n	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004236:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e046      	b.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426c:	d021      	beq.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fe f909 	bl	8002484 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e020      	b.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10c      	bne.n	80042d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e00b      	b.n	80042ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	43da      	mvns	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d18d      	bne.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004308:	e02d      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f88d 	bl	800442a <I2C_IsAcknowledgeFailed>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e02d      	b.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004320:	d021      	beq.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fe f8af 	bl	8002484 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d116      	bne.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e007      	b.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d1ca      	bne.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800438a:	e042      	b.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b10      	cmp	r3, #16
 8004398:	d119      	bne.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f06f 0210 	mvn.w	r2, #16
 80043a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e029      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe f859 	bl	8002484 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e007      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d1b5      	bne.n	800438c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d11b      	bne.n	800447a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800444a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d129      	bne.n	80044f2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2224      	movs	r2, #36	; 0x24
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0210 	bic.w	r2, r2, #16
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b20      	cmp	r3, #32
 8004518:	d12a      	bne.n	8004570 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2224      	movs	r2, #36	; 0x24
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0201 	bic.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800453a:	89fb      	ldrh	r3, [r7, #14]
 800453c:	f023 030f 	bic.w	r3, r3, #15
 8004540:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	b29a      	uxth	r2, r3
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	4313      	orrs	r3, r2
 800454a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	89fa      	ldrh	r2, [r7, #14]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800457e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004580:	b08f      	sub	sp, #60	; 0x3c
 8004582:	af0a      	add	r7, sp, #40	; 0x28
 8004584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e10f      	b.n	80047b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd fbf0 	bl	8001d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2203      	movs	r2, #3
 80045b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 f8ad 	bl	800572e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	687e      	ldr	r6, [r7, #4]
 80045dc:	466d      	mov	r5, sp
 80045de:	f106 0410 	add.w	r4, r6, #16
 80045e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80045f2:	1d33      	adds	r3, r6, #4
 80045f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045f6:	6838      	ldr	r0, [r7, #0]
 80045f8:	f001 f838 	bl	800566c <USB_CoreInit>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0d0      	b.n	80047b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f001 f89b 	bl	8005750 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	e04a      	b.n	80046b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	333d      	adds	r3, #61	; 0x3d
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	333c      	adds	r3, #60	; 0x3c
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	b298      	uxth	r0, r3
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	3344      	adds	r3, #68	; 0x44
 800465c:	4602      	mov	r2, r0
 800465e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3340      	adds	r3, #64	; 0x40
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3348      	adds	r3, #72	; 0x48
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	334c      	adds	r3, #76	; 0x4c
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	3354      	adds	r3, #84	; 0x54
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	3301      	adds	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	7bfa      	ldrb	r2, [r7, #15]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d3af      	bcc.n	8004620 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e044      	b.n	8004750 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	3301      	adds	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	7bfa      	ldrb	r2, [r7, #15]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d3b5      	bcc.n	80046c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	687e      	ldr	r6, [r7, #4]
 8004762:	466d      	mov	r5, sp
 8004764:	f106 0410 	add.w	r4, r6, #16
 8004768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800476c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004774:	e885 0003 	stmia.w	r5, {r0, r1}
 8004778:	1d33      	adds	r3, r6, #4
 800477a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800477c:	6838      	ldr	r0, [r7, #0]
 800477e:	f001 f833 	bl	80057e8 <USB_DevInit>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e00d      	b.n	80047b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f9fe 	bl	8005baa <USB_DevDisconnect>

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e267      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d075      	beq.n	80048c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047d6:	4b88      	ldr	r3, [pc, #544]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d00c      	beq.n	80047fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e2:	4b85      	ldr	r3, [pc, #532]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d112      	bne.n	8004814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ee:	4b82      	ldr	r3, [pc, #520]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047fa:	d10b      	bne.n	8004814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	4b7e      	ldr	r3, [pc, #504]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d05b      	beq.n	80048c0 <HAL_RCC_OscConfig+0x108>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d157      	bne.n	80048c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e242      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d106      	bne.n	800482c <HAL_RCC_OscConfig+0x74>
 800481e:	4b76      	ldr	r3, [pc, #472]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e01d      	b.n	8004868 <HAL_RCC_OscConfig+0xb0>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x98>
 8004836:	4b70      	ldr	r3, [pc, #448]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6f      	ldr	r2, [pc, #444]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b6d      	ldr	r3, [pc, #436]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a6c      	ldr	r2, [pc, #432]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0xb0>
 8004850:	4b69      	ldr	r3, [pc, #420]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a68      	ldr	r2, [pc, #416]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a65      	ldr	r2, [pc, #404]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d013      	beq.n	8004898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fd fe08 	bl	8002484 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004878:	f7fd fe04 	bl	8002484 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e207      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488a:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0xc0>
 8004896:	e014      	b.n	80048c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fd fdf4 	bl	8002484 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fd fdf0 	bl	8002484 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e1f3      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b2:	4b51      	ldr	r3, [pc, #324]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0xe8>
 80048be:	e000      	b.n	80048c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d063      	beq.n	8004996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ce:	4b4a      	ldr	r3, [pc, #296]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048da:	4b47      	ldr	r3, [pc, #284]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d11c      	bne.n	8004920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e6:	4b44      	ldr	r3, [pc, #272]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d116      	bne.n	8004920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f2:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_RCC_OscConfig+0x152>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d001      	beq.n	800490a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e1c7      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4937      	ldr	r1, [pc, #220]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491e:	e03a      	b.n	8004996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004928:	4b34      	ldr	r3, [pc, #208]	; (80049fc <HAL_RCC_OscConfig+0x244>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fd fda9 	bl	8002484 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004936:	f7fd fda5 	bl	8002484 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e1a8      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4925      	ldr	r1, [pc, #148]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 8004964:	4313      	orrs	r3, r2
 8004966:	600b      	str	r3, [r1, #0]
 8004968:	e015      	b.n	8004996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496a:	4b24      	ldr	r3, [pc, #144]	; (80049fc <HAL_RCC_OscConfig+0x244>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd fd88 	bl	8002484 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004978:	f7fd fd84 	bl	8002484 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e187      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498a:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d036      	beq.n	8004a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <HAL_RCC_OscConfig+0x248>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fd fd68 	bl	8002484 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b8:	f7fd fd64 	bl	8002484 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e167      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_OscConfig+0x240>)
 80049cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x200>
 80049d6:	e01b      	b.n	8004a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d8:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_OscConfig+0x248>)
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7fd fd51 	bl	8002484 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e4:	e00e      	b.n	8004a04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e6:	f7fd fd4d 	bl	8002484 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d907      	bls.n	8004a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e150      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
 80049f8:	40023800 	.word	0x40023800
 80049fc:	42470000 	.word	0x42470000
 8004a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a04:	4b88      	ldr	r3, [pc, #544]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ea      	bne.n	80049e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8097 	beq.w	8004b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a22:	4b81      	ldr	r3, [pc, #516]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	4b7d      	ldr	r3, [pc, #500]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a7c      	ldr	r2, [pc, #496]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3e:	4b7a      	ldr	r3, [pc, #488]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4e:	4b77      	ldr	r3, [pc, #476]	; (8004c2c <HAL_RCC_OscConfig+0x474>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d118      	bne.n	8004a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a5a:	4b74      	ldr	r3, [pc, #464]	; (8004c2c <HAL_RCC_OscConfig+0x474>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a73      	ldr	r2, [pc, #460]	; (8004c2c <HAL_RCC_OscConfig+0x474>)
 8004a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a66:	f7fd fd0d 	bl	8002484 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6e:	f7fd fd09 	bl	8002484 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e10c      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	4b6a      	ldr	r3, [pc, #424]	; (8004c2c <HAL_RCC_OscConfig+0x474>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x2ea>
 8004a94:	4b64      	ldr	r3, [pc, #400]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a63      	ldr	r2, [pc, #396]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa0:	e01c      	b.n	8004adc <HAL_RCC_OscConfig+0x324>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x30c>
 8004aaa:	4b5f      	ldr	r3, [pc, #380]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4a5e      	ldr	r2, [pc, #376]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab6:	4b5c      	ldr	r3, [pc, #368]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	4a5b      	ldr	r2, [pc, #364]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac2:	e00b      	b.n	8004adc <HAL_RCC_OscConfig+0x324>
 8004ac4:	4b58      	ldr	r3, [pc, #352]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	4a57      	ldr	r2, [pc, #348]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad0:	4b55      	ldr	r3, [pc, #340]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	4a54      	ldr	r2, [pc, #336]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004ad6:	f023 0304 	bic.w	r3, r3, #4
 8004ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d015      	beq.n	8004b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae4:	f7fd fcce 	bl	8002484 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aec:	f7fd fcca 	bl	8002484 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e0cb      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b02:	4b49      	ldr	r3, [pc, #292]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0ee      	beq.n	8004aec <HAL_RCC_OscConfig+0x334>
 8004b0e:	e014      	b.n	8004b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b10:	f7fd fcb8 	bl	8002484 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fd fcb4 	bl	8002484 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e0b5      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2e:	4b3e      	ldr	r3, [pc, #248]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1ee      	bne.n	8004b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b40:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	4a38      	ldr	r2, [pc, #224]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80a1 	beq.w	8004c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b56:	4b34      	ldr	r3, [pc, #208]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d05c      	beq.n	8004c1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d141      	bne.n	8004bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <HAL_RCC_OscConfig+0x478>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b70:	f7fd fc88 	bl	8002484 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fd fc84 	bl	8002484 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e087      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8a:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	019b      	lsls	r3, r3, #6
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	491b      	ldr	r1, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <HAL_RCC_OscConfig+0x478>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fd fc5d 	bl	8002484 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fd fc59 	bl	8002484 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e05c      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x416>
 8004bec:	e054      	b.n	8004c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <HAL_RCC_OscConfig+0x478>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fc46 	bl	8002484 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fd fc42 	bl	8002484 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e045      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCC_OscConfig+0x470>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x444>
 8004c1a:	e03d      	b.n	8004c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e038      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_RCC_OscConfig+0x4ec>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d028      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d121      	bne.n	8004c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d11a      	bne.n	8004c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d111      	bne.n	8004c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d107      	bne.n	8004c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d001      	beq.n	8004c98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800

08004ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0cc      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b68      	ldr	r3, [pc, #416]	; (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d90c      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b65      	ldr	r3, [pc, #404]	; (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd2:	4b63      	ldr	r3, [pc, #396]	; (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0b8      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d020      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cfc:	4b59      	ldr	r3, [pc, #356]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4a58      	ldr	r2, [pc, #352]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d14:	4b53      	ldr	r3, [pc, #332]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4a52      	ldr	r2, [pc, #328]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d20:	4b50      	ldr	r3, [pc, #320]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	494d      	ldr	r1, [pc, #308]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d044      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	4b47      	ldr	r3, [pc, #284]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d119      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e07f      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d003      	beq.n	8004d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d107      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d66:	4b3f      	ldr	r3, [pc, #252]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e06f      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d76:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e067      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d86:	4b37      	ldr	r3, [pc, #220]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f023 0203 	bic.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4934      	ldr	r1, [pc, #208]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d98:	f7fd fb74 	bl	8002484 <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da0:	f7fd fb70 	bl	8002484 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e04f      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	4b2b      	ldr	r3, [pc, #172]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 020c 	and.w	r2, r3, #12
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d1eb      	bne.n	8004da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d20c      	bcs.n	8004df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e032      	b.n	8004e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfc:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4916      	ldr	r1, [pc, #88]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	490e      	ldr	r1, [pc, #56]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e2e:	f000 f821 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004e32:	4602      	mov	r2, r0
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	490a      	ldr	r1, [pc, #40]	; (8004e68 <HAL_RCC_ClockConfig+0x1c0>)
 8004e40:	5ccb      	ldrb	r3, [r1, r3]
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd fad4 	bl	80023fc <HAL_InitTick>

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023c00 	.word	0x40023c00
 8004e64:	40023800 	.word	0x40023800
 8004e68:	080089f4 	.word	0x080089f4
 8004e6c:	20000000 	.word	0x20000000
 8004e70:	20000004 	.word	0x20000004

08004e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e78:	b094      	sub	sp, #80	; 0x50
 8004e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e80:	2300      	movs	r3, #0
 8004e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e84:	2300      	movs	r3, #0
 8004e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e8c:	4b79      	ldr	r3, [pc, #484]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d00d      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	f200 80e1 	bhi.w	8005060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d003      	beq.n	8004eae <HAL_RCC_GetSysClockFreq+0x3a>
 8004ea6:	e0db      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea8:	4b73      	ldr	r3, [pc, #460]	; (8005078 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004eac:	e0db      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eae:	4b73      	ldr	r3, [pc, #460]	; (800507c <HAL_RCC_GetSysClockFreq+0x208>)
 8004eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb2:	e0d8      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb4:	4b6f      	ldr	r3, [pc, #444]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ebe:	4b6d      	ldr	r3, [pc, #436]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d063      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eca:	4b6a      	ldr	r3, [pc, #424]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004edc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ede:	2300      	movs	r3, #0
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	462b      	mov	r3, r5
 8004eea:	f04f 0000 	mov.w	r0, #0
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	0159      	lsls	r1, r3, #5
 8004ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef8:	0150      	lsls	r0, r2, #5
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4621      	mov	r1, r4
 8004f00:	1a51      	subs	r1, r2, r1
 8004f02:	6139      	str	r1, [r7, #16]
 8004f04:	4629      	mov	r1, r5
 8004f06:	eb63 0301 	sbc.w	r3, r3, r1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f18:	4659      	mov	r1, fp
 8004f1a:	018b      	lsls	r3, r1, #6
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f22:	4651      	mov	r1, sl
 8004f24:	018a      	lsls	r2, r1, #6
 8004f26:	4651      	mov	r1, sl
 8004f28:	ebb2 0801 	subs.w	r8, r2, r1
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f46:	4690      	mov	r8, r2
 8004f48:	4699      	mov	r9, r3
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	eb18 0303 	adds.w	r3, r8, r3
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	462b      	mov	r3, r5
 8004f54:	eb49 0303 	adc.w	r3, r9, r3
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f66:	4629      	mov	r1, r5
 8004f68:	024b      	lsls	r3, r1, #9
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f70:	4621      	mov	r1, r4
 8004f72:	024a      	lsls	r2, r1, #9
 8004f74:	4610      	mov	r0, r2
 8004f76:	4619      	mov	r1, r3
 8004f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f84:	f7fb fe70 	bl	8000c68 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	e058      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f92:	4b38      	ldr	r3, [pc, #224]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fac:	4642      	mov	r2, r8
 8004fae:	464b      	mov	r3, r9
 8004fb0:	f04f 0000 	mov.w	r0, #0
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	0159      	lsls	r1, r3, #5
 8004fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fbe:	0150      	lsls	r0, r2, #5
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8004fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	00eb      	lsls	r3, r5, #3
 8004ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffa:	00e2      	lsls	r2, r4, #3
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	461d      	mov	r5, r3
 8005000:	4643      	mov	r3, r8
 8005002:	18e3      	adds	r3, r4, r3
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	464b      	mov	r3, r9
 8005008:	eb45 0303 	adc.w	r3, r5, r3
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800501a:	4629      	mov	r1, r5
 800501c:	028b      	lsls	r3, r1, #10
 800501e:	4621      	mov	r1, r4
 8005020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005024:	4621      	mov	r1, r4
 8005026:	028a      	lsls	r2, r1, #10
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502e:	2200      	movs	r2, #0
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	61fa      	str	r2, [r7, #28]
 8005034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005038:	f7fb fe16 	bl	8000c68 <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4613      	mov	r3, r2
 8005042:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_GetSysClockFreq+0x200>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	3301      	adds	r3, #1
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800505e:	e002      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <HAL_RCC_GetSysClockFreq+0x204>)
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005068:	4618      	mov	r0, r3
 800506a:	3750      	adds	r7, #80	; 0x50
 800506c:	46bd      	mov	sp, r7
 800506e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	00f42400 	.word	0x00f42400
 800507c:	007a1200 	.word	0x007a1200

08005080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_RCC_GetHCLKFreq+0x14>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000000 	.word	0x20000000

08005098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800509c:	f7ff fff0 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	0a9b      	lsrs	r3, r3, #10
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4903      	ldr	r1, [pc, #12]	; (80050bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40023800 	.word	0x40023800
 80050bc:	08008a04 	.word	0x08008a04

080050c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050c4:	f7ff ffdc 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	0b5b      	lsrs	r3, r3, #13
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	4903      	ldr	r1, [pc, #12]	; (80050e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d6:	5ccb      	ldrb	r3, [r1, r3]
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40023800 	.word	0x40023800
 80050e4:	08008a04 	.word	0x08008a04

080050e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e03f      	b.n	800517a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc fdc8 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2224      	movs	r2, #36	; 0x24
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800512a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f829 	bl	8005184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695a      	ldr	r2, [r3, #20]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005188:	b0c0      	sub	sp, #256	; 0x100
 800518a:	af00      	add	r7, sp, #0
 800518c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	68d9      	ldr	r1, [r3, #12]
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	ea40 0301 	orr.w	r3, r0, r1
 80051ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051dc:	f021 010c 	bic.w	r1, r1, #12
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ea:	430b      	orrs	r3, r1
 80051ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fe:	6999      	ldr	r1, [r3, #24]
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	ea40 0301 	orr.w	r3, r0, r1
 800520a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b8f      	ldr	r3, [pc, #572]	; (8005450 <UART_SetConfig+0x2cc>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d005      	beq.n	8005224 <UART_SetConfig+0xa0>
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b8d      	ldr	r3, [pc, #564]	; (8005454 <UART_SetConfig+0x2d0>)
 8005220:	429a      	cmp	r2, r3
 8005222:	d104      	bne.n	800522e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005224:	f7ff ff4c 	bl	80050c0 <HAL_RCC_GetPCLK2Freq>
 8005228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800522c:	e003      	b.n	8005236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800522e:	f7ff ff33 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8005232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005240:	f040 810c 	bne.w	800545c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005248:	2200      	movs	r2, #0
 800524a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800524e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005256:	4622      	mov	r2, r4
 8005258:	462b      	mov	r3, r5
 800525a:	1891      	adds	r1, r2, r2
 800525c:	65b9      	str	r1, [r7, #88]	; 0x58
 800525e:	415b      	adcs	r3, r3
 8005260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005266:	4621      	mov	r1, r4
 8005268:	eb12 0801 	adds.w	r8, r2, r1
 800526c:	4629      	mov	r1, r5
 800526e:	eb43 0901 	adc.w	r9, r3, r1
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800527e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005286:	4690      	mov	r8, r2
 8005288:	4699      	mov	r9, r3
 800528a:	4623      	mov	r3, r4
 800528c:	eb18 0303 	adds.w	r3, r8, r3
 8005290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005294:	462b      	mov	r3, r5
 8005296:	eb49 0303 	adc.w	r3, r9, r3
 800529a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052b2:	460b      	mov	r3, r1
 80052b4:	18db      	adds	r3, r3, r3
 80052b6:	653b      	str	r3, [r7, #80]	; 0x50
 80052b8:	4613      	mov	r3, r2
 80052ba:	eb42 0303 	adc.w	r3, r2, r3
 80052be:	657b      	str	r3, [r7, #84]	; 0x54
 80052c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052c8:	f7fb fcce 	bl	8000c68 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4b61      	ldr	r3, [pc, #388]	; (8005458 <UART_SetConfig+0x2d4>)
 80052d2:	fba3 2302 	umull	r2, r3, r3, r2
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	011c      	lsls	r4, r3, #4
 80052da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80052f4:	415b      	adcs	r3, r3
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052fc:	4641      	mov	r1, r8
 80052fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005302:	4649      	mov	r1, r9
 8005304:	eb43 0b01 	adc.w	fp, r3, r1
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800531c:	4692      	mov	sl, r2
 800531e:	469b      	mov	fp, r3
 8005320:	4643      	mov	r3, r8
 8005322:	eb1a 0303 	adds.w	r3, sl, r3
 8005326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800532a:	464b      	mov	r3, r9
 800532c:	eb4b 0303 	adc.w	r3, fp, r3
 8005330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005348:	460b      	mov	r3, r1
 800534a:	18db      	adds	r3, r3, r3
 800534c:	643b      	str	r3, [r7, #64]	; 0x40
 800534e:	4613      	mov	r3, r2
 8005350:	eb42 0303 	adc.w	r3, r2, r3
 8005354:	647b      	str	r3, [r7, #68]	; 0x44
 8005356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800535a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800535e:	f7fb fc83 	bl	8000c68 <__aeabi_uldivmod>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4611      	mov	r1, r2
 8005368:	4b3b      	ldr	r3, [pc, #236]	; (8005458 <UART_SetConfig+0x2d4>)
 800536a:	fba3 2301 	umull	r2, r3, r3, r1
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	2264      	movs	r2, #100	; 0x64
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	1acb      	subs	r3, r1, r3
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800537e:	4b36      	ldr	r3, [pc, #216]	; (8005458 <UART_SetConfig+0x2d4>)
 8005380:	fba3 2302 	umull	r2, r3, r3, r2
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800538c:	441c      	add	r4, r3
 800538e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005392:	2200      	movs	r2, #0
 8005394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800539c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	1891      	adds	r1, r2, r2
 80053a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053a8:	415b      	adcs	r3, r3
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053b0:	4641      	mov	r1, r8
 80053b2:	1851      	adds	r1, r2, r1
 80053b4:	6339      	str	r1, [r7, #48]	; 0x30
 80053b6:	4649      	mov	r1, r9
 80053b8:	414b      	adcs	r3, r1
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053c8:	4659      	mov	r1, fp
 80053ca:	00cb      	lsls	r3, r1, #3
 80053cc:	4651      	mov	r1, sl
 80053ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d2:	4651      	mov	r1, sl
 80053d4:	00ca      	lsls	r2, r1, #3
 80053d6:	4610      	mov	r0, r2
 80053d8:	4619      	mov	r1, r3
 80053da:	4603      	mov	r3, r0
 80053dc:	4642      	mov	r2, r8
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053e4:	464b      	mov	r3, r9
 80053e6:	460a      	mov	r2, r1
 80053e8:	eb42 0303 	adc.w	r3, r2, r3
 80053ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005404:	460b      	mov	r3, r1
 8005406:	18db      	adds	r3, r3, r3
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
 800540a:	4613      	mov	r3, r2
 800540c:	eb42 0303 	adc.w	r3, r2, r3
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800541a:	f7fb fc25 	bl	8000c68 <__aeabi_uldivmod>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <UART_SetConfig+0x2d4>)
 8005424:	fba3 1302 	umull	r1, r3, r3, r2
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	2164      	movs	r1, #100	; 0x64
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	3332      	adds	r3, #50	; 0x32
 8005436:	4a08      	ldr	r2, [pc, #32]	; (8005458 <UART_SetConfig+0x2d4>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	f003 0207 	and.w	r2, r3, #7
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4422      	add	r2, r4
 800544a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800544c:	e106      	b.n	800565c <UART_SetConfig+0x4d8>
 800544e:	bf00      	nop
 8005450:	40011000 	.word	0x40011000
 8005454:	40011400 	.word	0x40011400
 8005458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800545c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005460:	2200      	movs	r2, #0
 8005462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800546a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	1891      	adds	r1, r2, r2
 8005474:	6239      	str	r1, [r7, #32]
 8005476:	415b      	adcs	r3, r3
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800547e:	4641      	mov	r1, r8
 8005480:	1854      	adds	r4, r2, r1
 8005482:	4649      	mov	r1, r9
 8005484:	eb43 0501 	adc.w	r5, r3, r1
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	00eb      	lsls	r3, r5, #3
 8005492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005496:	00e2      	lsls	r2, r4, #3
 8005498:	4614      	mov	r4, r2
 800549a:	461d      	mov	r5, r3
 800549c:	4643      	mov	r3, r8
 800549e:	18e3      	adds	r3, r4, r3
 80054a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054a4:	464b      	mov	r3, r9
 80054a6:	eb45 0303 	adc.w	r3, r5, r3
 80054aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054ca:	4629      	mov	r1, r5
 80054cc:	008b      	lsls	r3, r1, #2
 80054ce:	4621      	mov	r1, r4
 80054d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d4:	4621      	mov	r1, r4
 80054d6:	008a      	lsls	r2, r1, #2
 80054d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054dc:	f7fb fbc4 	bl	8000c68 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4b60      	ldr	r3, [pc, #384]	; (8005668 <UART_SetConfig+0x4e4>)
 80054e6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	011c      	lsls	r4, r3, #4
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005500:	4642      	mov	r2, r8
 8005502:	464b      	mov	r3, r9
 8005504:	1891      	adds	r1, r2, r2
 8005506:	61b9      	str	r1, [r7, #24]
 8005508:	415b      	adcs	r3, r3
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005510:	4641      	mov	r1, r8
 8005512:	1851      	adds	r1, r2, r1
 8005514:	6139      	str	r1, [r7, #16]
 8005516:	4649      	mov	r1, r9
 8005518:	414b      	adcs	r3, r1
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005528:	4659      	mov	r1, fp
 800552a:	00cb      	lsls	r3, r1, #3
 800552c:	4651      	mov	r1, sl
 800552e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005532:	4651      	mov	r1, sl
 8005534:	00ca      	lsls	r2, r1, #3
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	4603      	mov	r3, r0
 800553c:	4642      	mov	r2, r8
 800553e:	189b      	adds	r3, r3, r2
 8005540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005544:	464b      	mov	r3, r9
 8005546:	460a      	mov	r2, r1
 8005548:	eb42 0303 	adc.w	r3, r2, r3
 800554c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	67bb      	str	r3, [r7, #120]	; 0x78
 800555a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005568:	4649      	mov	r1, r9
 800556a:	008b      	lsls	r3, r1, #2
 800556c:	4641      	mov	r1, r8
 800556e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005572:	4641      	mov	r1, r8
 8005574:	008a      	lsls	r2, r1, #2
 8005576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800557a:	f7fb fb75 	bl	8000c68 <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4611      	mov	r1, r2
 8005584:	4b38      	ldr	r3, [pc, #224]	; (8005668 <UART_SetConfig+0x4e4>)
 8005586:	fba3 2301 	umull	r2, r3, r3, r1
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	2264      	movs	r2, #100	; 0x64
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	1acb      	subs	r3, r1, r3
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	3332      	adds	r3, #50	; 0x32
 8005598:	4a33      	ldr	r2, [pc, #204]	; (8005668 <UART_SetConfig+0x4e4>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055a4:	441c      	add	r4, r3
 80055a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055aa:	2200      	movs	r2, #0
 80055ac:	673b      	str	r3, [r7, #112]	; 0x70
 80055ae:	677a      	str	r2, [r7, #116]	; 0x74
 80055b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	1891      	adds	r1, r2, r2
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	415b      	adcs	r3, r3
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055c4:	4641      	mov	r1, r8
 80055c6:	1851      	adds	r1, r2, r1
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	4649      	mov	r1, r9
 80055cc:	414b      	adcs	r3, r1
 80055ce:	607b      	str	r3, [r7, #4]
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055dc:	4659      	mov	r1, fp
 80055de:	00cb      	lsls	r3, r1, #3
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e6:	4651      	mov	r1, sl
 80055e8:	00ca      	lsls	r2, r1, #3
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	4642      	mov	r2, r8
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f6:	464b      	mov	r3, r9
 80055f8:	460a      	mov	r2, r1
 80055fa:	eb42 0303 	adc.w	r3, r2, r3
 80055fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	663b      	str	r3, [r7, #96]	; 0x60
 800560a:	667a      	str	r2, [r7, #100]	; 0x64
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005618:	4649      	mov	r1, r9
 800561a:	008b      	lsls	r3, r1, #2
 800561c:	4641      	mov	r1, r8
 800561e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005622:	4641      	mov	r1, r8
 8005624:	008a      	lsls	r2, r1, #2
 8005626:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800562a:	f7fb fb1d 	bl	8000c68 <__aeabi_uldivmod>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <UART_SetConfig+0x4e4>)
 8005634:	fba3 1302 	umull	r1, r3, r3, r2
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	2164      	movs	r1, #100	; 0x64
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	3332      	adds	r3, #50	; 0x32
 8005646:	4a08      	ldr	r2, [pc, #32]	; (8005668 <UART_SetConfig+0x4e4>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	f003 020f 	and.w	r2, r3, #15
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4422      	add	r2, r4
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bf00      	nop
 800565e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005662:	46bd      	mov	sp, r7
 8005664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005668:	51eb851f 	.word	0x51eb851f

0800566c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800566c:	b084      	sub	sp, #16
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	f107 001c 	add.w	r0, r7, #28
 800567a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2b01      	cmp	r3, #1
 8005682:	d122      	bne.n	80056ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d105      	bne.n	80056be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 faa2 	bl	8005c08 <USB_CoreReset>
 80056c4:	4603      	mov	r3, r0
 80056c6:	73fb      	strb	r3, [r7, #15]
 80056c8:	e01a      	b.n	8005700 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa96 	bl	8005c08 <USB_CoreReset>
 80056dc:	4603      	mov	r3, r0
 80056de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
 80056f2:	e005      	b.n	8005700 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10b      	bne.n	800571e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f043 0206 	orr.w	r2, r3, #6
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800572a:	b004      	add	sp, #16
 800572c:	4770      	bx	lr

0800572e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f023 0201 	bic.w	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d115      	bne.n	800579e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800577e:	2001      	movs	r0, #1
 8005780:	f7fc fe8c 	bl	800249c <HAL_Delay>
      ms++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa2e 	bl	8005bec <USB_GetMode>
 8005790:	4603      	mov	r3, r0
 8005792:	2b01      	cmp	r3, #1
 8005794:	d01e      	beq.n	80057d4 <USB_SetCurrentMode+0x84>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b31      	cmp	r3, #49	; 0x31
 800579a:	d9f0      	bls.n	800577e <USB_SetCurrentMode+0x2e>
 800579c:	e01a      	b.n	80057d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d115      	bne.n	80057d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7fc fe73 	bl	800249c <HAL_Delay>
      ms++;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa15 	bl	8005bec <USB_GetMode>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <USB_SetCurrentMode+0x84>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b31      	cmp	r3, #49	; 0x31
 80057cc:	d9f0      	bls.n	80057b0 <USB_SetCurrentMode+0x60>
 80057ce:	e001      	b.n	80057d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e005      	b.n	80057e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b32      	cmp	r3, #50	; 0x32
 80057d8:	d101      	bne.n	80057de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057e8:	b084      	sub	sp, #16
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e009      	b.n	800581c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3340      	adds	r3, #64	; 0x40
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	2200      	movs	r2, #0
 8005814:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3301      	adds	r3, #1
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b0e      	cmp	r3, #14
 8005820:	d9f2      	bls.n	8005808 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11c      	bne.n	8005862 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005836:	f043 0302 	orr.w	r3, r3, #2
 800583a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
 8005860:	e00b      	b.n	800587a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005880:	461a      	mov	r2, r3
 8005882:	2300      	movs	r3, #0
 8005884:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588c:	4619      	mov	r1, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005894:	461a      	mov	r2, r3
 8005896:	680b      	ldr	r3, [r1, #0]
 8005898:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	2b01      	cmp	r3, #1
 800589e:	d10c      	bne.n	80058ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058a6:	2100      	movs	r1, #0
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f965 	bl	8005b78 <USB_SetDevSpeed>
 80058ae:	e008      	b.n	80058c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058b0:	2101      	movs	r1, #1
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f960 	bl	8005b78 <USB_SetDevSpeed>
 80058b8:	e003      	b.n	80058c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058ba:	2103      	movs	r1, #3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f95b 	bl	8005b78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058c2:	2110      	movs	r1, #16
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f8f3 	bl	8005ab0 <USB_FlushTxFifo>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f91f 	bl	8005b18 <USB_FlushRxFifo>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	461a      	mov	r2, r3
 80058ec:	2300      	movs	r3, #0
 80058ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f6:	461a      	mov	r2, r3
 80058f8:	2300      	movs	r3, #0
 80058fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	461a      	mov	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	e043      	b.n	8005996 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005924:	d118      	bne.n	8005958 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	461a      	mov	r2, r3
 800593a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	e013      	b.n	800596a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594e:	461a      	mov	r2, r3
 8005950:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e008      	b.n	800596a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005964:	461a      	mov	r2, r3
 8005966:	2300      	movs	r3, #0
 8005968:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	461a      	mov	r2, r3
 8005978:	2300      	movs	r3, #0
 800597a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	461a      	mov	r2, r3
 800598a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800598e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	3301      	adds	r3, #1
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	429a      	cmp	r2, r3
 800599c:	d3b7      	bcc.n	800590e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	e043      	b.n	8005a2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ba:	d118      	bne.n	80059ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	461a      	mov	r2, r3
 80059d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	e013      	b.n	8005a00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	461a      	mov	r2, r3
 80059e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	e008      	b.n	8005a00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	461a      	mov	r2, r3
 80059fc:	2300      	movs	r3, #0
 80059fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d3b7      	bcc.n	80059a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f043 0210 	orr.w	r2, r3, #16
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <USB_DevInit+0x2c4>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f043 0208 	orr.w	r2, r3, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a94:	f043 0304 	orr.w	r3, r3, #4
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aa8:	b004      	add	sp, #16
 8005aaa:	4770      	bx	lr
 8005aac:	803c3800 	.word	0x803c3800

08005ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <USB_FlushTxFifo+0x64>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e01b      	b.n	8005b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	daf2      	bge.n	8005abe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	019b      	lsls	r3, r3, #6
 8005ae0:	f043 0220 	orr.w	r2, r3, #32
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a08      	ldr	r2, [pc, #32]	; (8005b14 <USB_FlushTxFifo+0x64>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e006      	b.n	8005b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d0f0      	beq.n	8005ae8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	00030d40 	.word	0x00030d40

08005b18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a11      	ldr	r2, [pc, #68]	; (8005b74 <USB_FlushRxFifo+0x5c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e018      	b.n	8005b68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	daf2      	bge.n	8005b24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2210      	movs	r2, #16
 8005b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <USB_FlushRxFifo+0x5c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e006      	b.n	8005b68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d0f0      	beq.n	8005b48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	00030d40 	.word	0x00030d40

08005b78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd8:	f043 0302 	orr.w	r3, r3, #2
 8005bdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <USB_CoreReset+0x64>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e01b      	b.n	8005c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	daf2      	bge.n	8005c14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f043 0201 	orr.w	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <USB_CoreReset+0x64>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d901      	bls.n	8005c50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e006      	b.n	8005c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d0f0      	beq.n	8005c3e <USB_CoreReset+0x36>

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	00030d40 	.word	0x00030d40

08005c70 <__cvt>:
 8005c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	ec55 4b10 	vmov	r4, r5, d0
 8005c78:	2d00      	cmp	r5, #0
 8005c7a:	460e      	mov	r6, r1
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	462b      	mov	r3, r5
 8005c80:	bfbb      	ittet	lt
 8005c82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c86:	461d      	movlt	r5, r3
 8005c88:	2300      	movge	r3, #0
 8005c8a:	232d      	movlt	r3, #45	; 0x2d
 8005c8c:	700b      	strb	r3, [r1, #0]
 8005c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c94:	4691      	mov	r9, r2
 8005c96:	f023 0820 	bic.w	r8, r3, #32
 8005c9a:	bfbc      	itt	lt
 8005c9c:	4622      	movlt	r2, r4
 8005c9e:	4614      	movlt	r4, r2
 8005ca0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ca4:	d005      	beq.n	8005cb2 <__cvt+0x42>
 8005ca6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005caa:	d100      	bne.n	8005cae <__cvt+0x3e>
 8005cac:	3601      	adds	r6, #1
 8005cae:	2102      	movs	r1, #2
 8005cb0:	e000      	b.n	8005cb4 <__cvt+0x44>
 8005cb2:	2103      	movs	r1, #3
 8005cb4:	ab03      	add	r3, sp, #12
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	ab02      	add	r3, sp, #8
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	ec45 4b10 	vmov	d0, r4, r5
 8005cc0:	4653      	mov	r3, sl
 8005cc2:	4632      	mov	r2, r6
 8005cc4:	f000 fe68 	bl	8006998 <_dtoa_r>
 8005cc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ccc:	4607      	mov	r7, r0
 8005cce:	d102      	bne.n	8005cd6 <__cvt+0x66>
 8005cd0:	f019 0f01 	tst.w	r9, #1
 8005cd4:	d022      	beq.n	8005d1c <__cvt+0xac>
 8005cd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cda:	eb07 0906 	add.w	r9, r7, r6
 8005cde:	d110      	bne.n	8005d02 <__cvt+0x92>
 8005ce0:	783b      	ldrb	r3, [r7, #0]
 8005ce2:	2b30      	cmp	r3, #48	; 0x30
 8005ce4:	d10a      	bne.n	8005cfc <__cvt+0x8c>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4620      	mov	r0, r4
 8005cec:	4629      	mov	r1, r5
 8005cee:	f7fa fefb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cf2:	b918      	cbnz	r0, 8005cfc <__cvt+0x8c>
 8005cf4:	f1c6 0601 	rsb	r6, r6, #1
 8005cf8:	f8ca 6000 	str.w	r6, [sl]
 8005cfc:	f8da 3000 	ldr.w	r3, [sl]
 8005d00:	4499      	add	r9, r3
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	4620      	mov	r0, r4
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f7fa feed 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d0e:	b108      	cbz	r0, 8005d14 <__cvt+0xa4>
 8005d10:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d14:	2230      	movs	r2, #48	; 0x30
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	454b      	cmp	r3, r9
 8005d1a:	d307      	bcc.n	8005d2c <__cvt+0xbc>
 8005d1c:	9b03      	ldr	r3, [sp, #12]
 8005d1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d20:	1bdb      	subs	r3, r3, r7
 8005d22:	4638      	mov	r0, r7
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	b004      	add	sp, #16
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	1c59      	adds	r1, r3, #1
 8005d2e:	9103      	str	r1, [sp, #12]
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e7f0      	b.n	8005d16 <__cvt+0xa6>

08005d34 <__exponent>:
 8005d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d36:	4603      	mov	r3, r0
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	bfb8      	it	lt
 8005d3c:	4249      	neglt	r1, r1
 8005d3e:	f803 2b02 	strb.w	r2, [r3], #2
 8005d42:	bfb4      	ite	lt
 8005d44:	222d      	movlt	r2, #45	; 0x2d
 8005d46:	222b      	movge	r2, #43	; 0x2b
 8005d48:	2909      	cmp	r1, #9
 8005d4a:	7042      	strb	r2, [r0, #1]
 8005d4c:	dd2a      	ble.n	8005da4 <__exponent+0x70>
 8005d4e:	f10d 0207 	add.w	r2, sp, #7
 8005d52:	4617      	mov	r7, r2
 8005d54:	260a      	movs	r6, #10
 8005d56:	4694      	mov	ip, r2
 8005d58:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d5c:	fb06 1415 	mls	r4, r6, r5, r1
 8005d60:	3430      	adds	r4, #48	; 0x30
 8005d62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d66:	460c      	mov	r4, r1
 8005d68:	2c63      	cmp	r4, #99	; 0x63
 8005d6a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005d6e:	4629      	mov	r1, r5
 8005d70:	dcf1      	bgt.n	8005d56 <__exponent+0x22>
 8005d72:	3130      	adds	r1, #48	; 0x30
 8005d74:	f1ac 0402 	sub.w	r4, ip, #2
 8005d78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d7c:	1c41      	adds	r1, r0, #1
 8005d7e:	4622      	mov	r2, r4
 8005d80:	42ba      	cmp	r2, r7
 8005d82:	d30a      	bcc.n	8005d9a <__exponent+0x66>
 8005d84:	f10d 0209 	add.w	r2, sp, #9
 8005d88:	eba2 020c 	sub.w	r2, r2, ip
 8005d8c:	42bc      	cmp	r4, r7
 8005d8e:	bf88      	it	hi
 8005d90:	2200      	movhi	r2, #0
 8005d92:	4413      	add	r3, r2
 8005d94:	1a18      	subs	r0, r3, r0
 8005d96:	b003      	add	sp, #12
 8005d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005d9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005da2:	e7ed      	b.n	8005d80 <__exponent+0x4c>
 8005da4:	2330      	movs	r3, #48	; 0x30
 8005da6:	3130      	adds	r1, #48	; 0x30
 8005da8:	7083      	strb	r3, [r0, #2]
 8005daa:	70c1      	strb	r1, [r0, #3]
 8005dac:	1d03      	adds	r3, r0, #4
 8005dae:	e7f1      	b.n	8005d94 <__exponent+0x60>

08005db0 <_printf_float>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	ed2d 8b02 	vpush	{d8}
 8005db8:	b08d      	sub	sp, #52	; 0x34
 8005dba:	460c      	mov	r4, r1
 8005dbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005dc0:	4616      	mov	r6, r2
 8005dc2:	461f      	mov	r7, r3
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	f000 fce7 	bl	8006798 <_localeconv_r>
 8005dca:	f8d0 a000 	ldr.w	sl, [r0]
 8005dce:	4650      	mov	r0, sl
 8005dd0:	f7fa fa5e 	bl	8000290 <strlen>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	9305      	str	r3, [sp, #20]
 8005ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8005de0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005de4:	3307      	adds	r3, #7
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	f103 0208 	add.w	r2, r3, #8
 8005dee:	f8c8 2000 	str.w	r2, [r8]
 8005df2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005df6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dfa:	9307      	str	r3, [sp, #28]
 8005dfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e00:	ee08 0a10 	vmov	s16, r0
 8005e04:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e0c:	4b9e      	ldr	r3, [pc, #632]	; (8006088 <_printf_float+0x2d8>)
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e12:	f7fa fe9b 	bl	8000b4c <__aeabi_dcmpun>
 8005e16:	bb88      	cbnz	r0, 8005e7c <_printf_float+0xcc>
 8005e18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e1c:	4b9a      	ldr	r3, [pc, #616]	; (8006088 <_printf_float+0x2d8>)
 8005e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e22:	f7fa fe75 	bl	8000b10 <__aeabi_dcmple>
 8005e26:	bb48      	cbnz	r0, 8005e7c <_printf_float+0xcc>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	4649      	mov	r1, r9
 8005e30:	f7fa fe64 	bl	8000afc <__aeabi_dcmplt>
 8005e34:	b110      	cbz	r0, 8005e3c <_printf_float+0x8c>
 8005e36:	232d      	movs	r3, #45	; 0x2d
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3c:	4a93      	ldr	r2, [pc, #588]	; (800608c <_printf_float+0x2dc>)
 8005e3e:	4b94      	ldr	r3, [pc, #592]	; (8006090 <_printf_float+0x2e0>)
 8005e40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e44:	bf94      	ite	ls
 8005e46:	4690      	movls	r8, r2
 8005e48:	4698      	movhi	r8, r3
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	9b05      	ldr	r3, [sp, #20]
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	f04f 0900 	mov.w	r9, #0
 8005e5a:	9700      	str	r7, [sp, #0]
 8005e5c:	4633      	mov	r3, r6
 8005e5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e60:	4621      	mov	r1, r4
 8005e62:	4628      	mov	r0, r5
 8005e64:	f000 f9da 	bl	800621c <_printf_common>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f040 8090 	bne.w	8005f8e <_printf_float+0x1de>
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e72:	b00d      	add	sp, #52	; 0x34
 8005e74:	ecbd 8b02 	vpop	{d8}
 8005e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	464b      	mov	r3, r9
 8005e80:	4640      	mov	r0, r8
 8005e82:	4649      	mov	r1, r9
 8005e84:	f7fa fe62 	bl	8000b4c <__aeabi_dcmpun>
 8005e88:	b140      	cbz	r0, 8005e9c <_printf_float+0xec>
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bfbc      	itt	lt
 8005e90:	232d      	movlt	r3, #45	; 0x2d
 8005e92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e96:	4a7f      	ldr	r2, [pc, #508]	; (8006094 <_printf_float+0x2e4>)
 8005e98:	4b7f      	ldr	r3, [pc, #508]	; (8006098 <_printf_float+0x2e8>)
 8005e9a:	e7d1      	b.n	8005e40 <_printf_float+0x90>
 8005e9c:	6863      	ldr	r3, [r4, #4]
 8005e9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ea2:	9206      	str	r2, [sp, #24]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	d13f      	bne.n	8005f28 <_printf_float+0x178>
 8005ea8:	2306      	movs	r3, #6
 8005eaa:	6063      	str	r3, [r4, #4]
 8005eac:	9b05      	ldr	r3, [sp, #20]
 8005eae:	6861      	ldr	r1, [r4, #4]
 8005eb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9303      	str	r3, [sp, #12]
 8005eb8:	ab0a      	add	r3, sp, #40	; 0x28
 8005eba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ebe:	ab09      	add	r3, sp, #36	; 0x24
 8005ec0:	ec49 8b10 	vmov	d0, r8, r9
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	6022      	str	r2, [r4, #0]
 8005ec8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f7ff fecf 	bl	8005c70 <__cvt>
 8005ed2:	9b06      	ldr	r3, [sp, #24]
 8005ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed6:	2b47      	cmp	r3, #71	; 0x47
 8005ed8:	4680      	mov	r8, r0
 8005eda:	d108      	bne.n	8005eee <_printf_float+0x13e>
 8005edc:	1cc8      	adds	r0, r1, #3
 8005ede:	db02      	blt.n	8005ee6 <_printf_float+0x136>
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	dd41      	ble.n	8005f6a <_printf_float+0x1ba>
 8005ee6:	f1ab 0302 	sub.w	r3, fp, #2
 8005eea:	fa5f fb83 	uxtb.w	fp, r3
 8005eee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ef2:	d820      	bhi.n	8005f36 <_printf_float+0x186>
 8005ef4:	3901      	subs	r1, #1
 8005ef6:	465a      	mov	r2, fp
 8005ef8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005efc:	9109      	str	r1, [sp, #36]	; 0x24
 8005efe:	f7ff ff19 	bl	8005d34 <__exponent>
 8005f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f04:	1813      	adds	r3, r2, r0
 8005f06:	2a01      	cmp	r2, #1
 8005f08:	4681      	mov	r9, r0
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	dc02      	bgt.n	8005f14 <_printf_float+0x164>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	07d2      	lsls	r2, r2, #31
 8005f12:	d501      	bpl.n	8005f18 <_printf_float+0x168>
 8005f14:	3301      	adds	r3, #1
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d09c      	beq.n	8005e5a <_printf_float+0xaa>
 8005f20:	232d      	movs	r3, #45	; 0x2d
 8005f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f26:	e798      	b.n	8005e5a <_printf_float+0xaa>
 8005f28:	9a06      	ldr	r2, [sp, #24]
 8005f2a:	2a47      	cmp	r2, #71	; 0x47
 8005f2c:	d1be      	bne.n	8005eac <_printf_float+0xfc>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1bc      	bne.n	8005eac <_printf_float+0xfc>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e7b9      	b.n	8005eaa <_printf_float+0xfa>
 8005f36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f3a:	d118      	bne.n	8005f6e <_printf_float+0x1be>
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	dd0b      	ble.n	8005f5a <_printf_float+0x1aa>
 8005f42:	6121      	str	r1, [r4, #16]
 8005f44:	b913      	cbnz	r3, 8005f4c <_printf_float+0x19c>
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	07d0      	lsls	r0, r2, #31
 8005f4a:	d502      	bpl.n	8005f52 <_printf_float+0x1a2>
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	440b      	add	r3, r1
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f54:	f04f 0900 	mov.w	r9, #0
 8005f58:	e7de      	b.n	8005f18 <_printf_float+0x168>
 8005f5a:	b913      	cbnz	r3, 8005f62 <_printf_float+0x1b2>
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	07d2      	lsls	r2, r2, #31
 8005f60:	d501      	bpl.n	8005f66 <_printf_float+0x1b6>
 8005f62:	3302      	adds	r3, #2
 8005f64:	e7f4      	b.n	8005f50 <_printf_float+0x1a0>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e7f2      	b.n	8005f50 <_printf_float+0x1a0>
 8005f6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f70:	4299      	cmp	r1, r3
 8005f72:	db05      	blt.n	8005f80 <_printf_float+0x1d0>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	6121      	str	r1, [r4, #16]
 8005f78:	07d8      	lsls	r0, r3, #31
 8005f7a:	d5ea      	bpl.n	8005f52 <_printf_float+0x1a2>
 8005f7c:	1c4b      	adds	r3, r1, #1
 8005f7e:	e7e7      	b.n	8005f50 <_printf_float+0x1a0>
 8005f80:	2900      	cmp	r1, #0
 8005f82:	bfd4      	ite	le
 8005f84:	f1c1 0202 	rsble	r2, r1, #2
 8005f88:	2201      	movgt	r2, #1
 8005f8a:	4413      	add	r3, r2
 8005f8c:	e7e0      	b.n	8005f50 <_printf_float+0x1a0>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	055a      	lsls	r2, r3, #21
 8005f92:	d407      	bmi.n	8005fa4 <_printf_float+0x1f4>
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	4642      	mov	r2, r8
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d12c      	bne.n	8005ffc <_printf_float+0x24c>
 8005fa2:	e764      	b.n	8005e6e <_printf_float+0xbe>
 8005fa4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fa8:	f240 80e0 	bls.w	800616c <_printf_float+0x3bc>
 8005fac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f7fa fd98 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d034      	beq.n	8006026 <_printf_float+0x276>
 8005fbc:	4a37      	ldr	r2, [pc, #220]	; (800609c <_printf_float+0x2ec>)
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f43f af51 	beq.w	8005e6e <_printf_float+0xbe>
 8005fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	db02      	blt.n	8005fda <_printf_float+0x22a>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	07d8      	lsls	r0, r3, #31
 8005fd8:	d510      	bpl.n	8005ffc <_printf_float+0x24c>
 8005fda:	ee18 3a10 	vmov	r3, s16
 8005fde:	4652      	mov	r2, sl
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	f43f af41 	beq.w	8005e6e <_printf_float+0xbe>
 8005fec:	f04f 0800 	mov.w	r8, #0
 8005ff0:	f104 091a 	add.w	r9, r4, #26
 8005ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	4543      	cmp	r3, r8
 8005ffa:	dc09      	bgt.n	8006010 <_printf_float+0x260>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	079b      	lsls	r3, r3, #30
 8006000:	f100 8107 	bmi.w	8006212 <_printf_float+0x462>
 8006004:	68e0      	ldr	r0, [r4, #12]
 8006006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006008:	4298      	cmp	r0, r3
 800600a:	bfb8      	it	lt
 800600c:	4618      	movlt	r0, r3
 800600e:	e730      	b.n	8005e72 <_printf_float+0xc2>
 8006010:	2301      	movs	r3, #1
 8006012:	464a      	mov	r2, r9
 8006014:	4631      	mov	r1, r6
 8006016:	4628      	mov	r0, r5
 8006018:	47b8      	blx	r7
 800601a:	3001      	adds	r0, #1
 800601c:	f43f af27 	beq.w	8005e6e <_printf_float+0xbe>
 8006020:	f108 0801 	add.w	r8, r8, #1
 8006024:	e7e6      	b.n	8005ff4 <_printf_float+0x244>
 8006026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	dc39      	bgt.n	80060a0 <_printf_float+0x2f0>
 800602c:	4a1b      	ldr	r2, [pc, #108]	; (800609c <_printf_float+0x2ec>)
 800602e:	2301      	movs	r3, #1
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f af19 	beq.w	8005e6e <_printf_float+0xbe>
 800603c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006040:	4313      	orrs	r3, r2
 8006042:	d102      	bne.n	800604a <_printf_float+0x29a>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	07d9      	lsls	r1, r3, #31
 8006048:	d5d8      	bpl.n	8005ffc <_printf_float+0x24c>
 800604a:	ee18 3a10 	vmov	r3, s16
 800604e:	4652      	mov	r2, sl
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f af09 	beq.w	8005e6e <_printf_float+0xbe>
 800605c:	f04f 0900 	mov.w	r9, #0
 8006060:	f104 0a1a 	add.w	sl, r4, #26
 8006064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006066:	425b      	negs	r3, r3
 8006068:	454b      	cmp	r3, r9
 800606a:	dc01      	bgt.n	8006070 <_printf_float+0x2c0>
 800606c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606e:	e792      	b.n	8005f96 <_printf_float+0x1e6>
 8006070:	2301      	movs	r3, #1
 8006072:	4652      	mov	r2, sl
 8006074:	4631      	mov	r1, r6
 8006076:	4628      	mov	r0, r5
 8006078:	47b8      	blx	r7
 800607a:	3001      	adds	r0, #1
 800607c:	f43f aef7 	beq.w	8005e6e <_printf_float+0xbe>
 8006080:	f109 0901 	add.w	r9, r9, #1
 8006084:	e7ee      	b.n	8006064 <_printf_float+0x2b4>
 8006086:	bf00      	nop
 8006088:	7fefffff 	.word	0x7fefffff
 800608c:	08008a0c 	.word	0x08008a0c
 8006090:	08008a10 	.word	0x08008a10
 8006094:	08008a14 	.word	0x08008a14
 8006098:	08008a18 	.word	0x08008a18
 800609c:	08008a1c 	.word	0x08008a1c
 80060a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060a4:	429a      	cmp	r2, r3
 80060a6:	bfa8      	it	ge
 80060a8:	461a      	movge	r2, r3
 80060aa:	2a00      	cmp	r2, #0
 80060ac:	4691      	mov	r9, r2
 80060ae:	dc37      	bgt.n	8006120 <_printf_float+0x370>
 80060b0:	f04f 0b00 	mov.w	fp, #0
 80060b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060b8:	f104 021a 	add.w	r2, r4, #26
 80060bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	eba3 0309 	sub.w	r3, r3, r9
 80060c4:	455b      	cmp	r3, fp
 80060c6:	dc33      	bgt.n	8006130 <_printf_float+0x380>
 80060c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060cc:	429a      	cmp	r2, r3
 80060ce:	db3b      	blt.n	8006148 <_printf_float+0x398>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	07da      	lsls	r2, r3, #31
 80060d4:	d438      	bmi.n	8006148 <_printf_float+0x398>
 80060d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060da:	eba2 0903 	sub.w	r9, r2, r3
 80060de:	9b05      	ldr	r3, [sp, #20]
 80060e0:	1ad2      	subs	r2, r2, r3
 80060e2:	4591      	cmp	r9, r2
 80060e4:	bfa8      	it	ge
 80060e6:	4691      	movge	r9, r2
 80060e8:	f1b9 0f00 	cmp.w	r9, #0
 80060ec:	dc35      	bgt.n	800615a <_printf_float+0x3aa>
 80060ee:	f04f 0800 	mov.w	r8, #0
 80060f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060f6:	f104 0a1a 	add.w	sl, r4, #26
 80060fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	eba3 0309 	sub.w	r3, r3, r9
 8006104:	4543      	cmp	r3, r8
 8006106:	f77f af79 	ble.w	8005ffc <_printf_float+0x24c>
 800610a:	2301      	movs	r3, #1
 800610c:	4652      	mov	r2, sl
 800610e:	4631      	mov	r1, r6
 8006110:	4628      	mov	r0, r5
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	f43f aeaa 	beq.w	8005e6e <_printf_float+0xbe>
 800611a:	f108 0801 	add.w	r8, r8, #1
 800611e:	e7ec      	b.n	80060fa <_printf_float+0x34a>
 8006120:	4613      	mov	r3, r2
 8006122:	4631      	mov	r1, r6
 8006124:	4642      	mov	r2, r8
 8006126:	4628      	mov	r0, r5
 8006128:	47b8      	blx	r7
 800612a:	3001      	adds	r0, #1
 800612c:	d1c0      	bne.n	80060b0 <_printf_float+0x300>
 800612e:	e69e      	b.n	8005e6e <_printf_float+0xbe>
 8006130:	2301      	movs	r3, #1
 8006132:	4631      	mov	r1, r6
 8006134:	4628      	mov	r0, r5
 8006136:	9205      	str	r2, [sp, #20]
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	f43f ae97 	beq.w	8005e6e <_printf_float+0xbe>
 8006140:	9a05      	ldr	r2, [sp, #20]
 8006142:	f10b 0b01 	add.w	fp, fp, #1
 8006146:	e7b9      	b.n	80060bc <_printf_float+0x30c>
 8006148:	ee18 3a10 	vmov	r3, s16
 800614c:	4652      	mov	r2, sl
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	d1be      	bne.n	80060d6 <_printf_float+0x326>
 8006158:	e689      	b.n	8005e6e <_printf_float+0xbe>
 800615a:	9a05      	ldr	r2, [sp, #20]
 800615c:	464b      	mov	r3, r9
 800615e:	4442      	add	r2, r8
 8006160:	4631      	mov	r1, r6
 8006162:	4628      	mov	r0, r5
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	d1c1      	bne.n	80060ee <_printf_float+0x33e>
 800616a:	e680      	b.n	8005e6e <_printf_float+0xbe>
 800616c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800616e:	2a01      	cmp	r2, #1
 8006170:	dc01      	bgt.n	8006176 <_printf_float+0x3c6>
 8006172:	07db      	lsls	r3, r3, #31
 8006174:	d53a      	bpl.n	80061ec <_printf_float+0x43c>
 8006176:	2301      	movs	r3, #1
 8006178:	4642      	mov	r2, r8
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	f43f ae74 	beq.w	8005e6e <_printf_float+0xbe>
 8006186:	ee18 3a10 	vmov	r3, s16
 800618a:	4652      	mov	r2, sl
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	f43f ae6b 	beq.w	8005e6e <_printf_float+0xbe>
 8006198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800619c:	2200      	movs	r2, #0
 800619e:	2300      	movs	r3, #0
 80061a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80061a4:	f7fa fca0 	bl	8000ae8 <__aeabi_dcmpeq>
 80061a8:	b9d8      	cbnz	r0, 80061e2 <_printf_float+0x432>
 80061aa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80061ae:	f108 0201 	add.w	r2, r8, #1
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	d10e      	bne.n	80061da <_printf_float+0x42a>
 80061bc:	e657      	b.n	8005e6e <_printf_float+0xbe>
 80061be:	2301      	movs	r3, #1
 80061c0:	4652      	mov	r2, sl
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f ae50 	beq.w	8005e6e <_printf_float+0xbe>
 80061ce:	f108 0801 	add.w	r8, r8, #1
 80061d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d4:	3b01      	subs	r3, #1
 80061d6:	4543      	cmp	r3, r8
 80061d8:	dcf1      	bgt.n	80061be <_printf_float+0x40e>
 80061da:	464b      	mov	r3, r9
 80061dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061e0:	e6da      	b.n	8005f98 <_printf_float+0x1e8>
 80061e2:	f04f 0800 	mov.w	r8, #0
 80061e6:	f104 0a1a 	add.w	sl, r4, #26
 80061ea:	e7f2      	b.n	80061d2 <_printf_float+0x422>
 80061ec:	2301      	movs	r3, #1
 80061ee:	4642      	mov	r2, r8
 80061f0:	e7df      	b.n	80061b2 <_printf_float+0x402>
 80061f2:	2301      	movs	r3, #1
 80061f4:	464a      	mov	r2, r9
 80061f6:	4631      	mov	r1, r6
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b8      	blx	r7
 80061fc:	3001      	adds	r0, #1
 80061fe:	f43f ae36 	beq.w	8005e6e <_printf_float+0xbe>
 8006202:	f108 0801 	add.w	r8, r8, #1
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800620a:	1a5b      	subs	r3, r3, r1
 800620c:	4543      	cmp	r3, r8
 800620e:	dcf0      	bgt.n	80061f2 <_printf_float+0x442>
 8006210:	e6f8      	b.n	8006004 <_printf_float+0x254>
 8006212:	f04f 0800 	mov.w	r8, #0
 8006216:	f104 0919 	add.w	r9, r4, #25
 800621a:	e7f4      	b.n	8006206 <_printf_float+0x456>

0800621c <_printf_common>:
 800621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006220:	4616      	mov	r6, r2
 8006222:	4699      	mov	r9, r3
 8006224:	688a      	ldr	r2, [r1, #8]
 8006226:	690b      	ldr	r3, [r1, #16]
 8006228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800622c:	4293      	cmp	r3, r2
 800622e:	bfb8      	it	lt
 8006230:	4613      	movlt	r3, r2
 8006232:	6033      	str	r3, [r6, #0]
 8006234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006238:	4607      	mov	r7, r0
 800623a:	460c      	mov	r4, r1
 800623c:	b10a      	cbz	r2, 8006242 <_printf_common+0x26>
 800623e:	3301      	adds	r3, #1
 8006240:	6033      	str	r3, [r6, #0]
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	0699      	lsls	r1, r3, #26
 8006246:	bf42      	ittt	mi
 8006248:	6833      	ldrmi	r3, [r6, #0]
 800624a:	3302      	addmi	r3, #2
 800624c:	6033      	strmi	r3, [r6, #0]
 800624e:	6825      	ldr	r5, [r4, #0]
 8006250:	f015 0506 	ands.w	r5, r5, #6
 8006254:	d106      	bne.n	8006264 <_printf_common+0x48>
 8006256:	f104 0a19 	add.w	sl, r4, #25
 800625a:	68e3      	ldr	r3, [r4, #12]
 800625c:	6832      	ldr	r2, [r6, #0]
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	42ab      	cmp	r3, r5
 8006262:	dc26      	bgt.n	80062b2 <_printf_common+0x96>
 8006264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006268:	1e13      	subs	r3, r2, #0
 800626a:	6822      	ldr	r2, [r4, #0]
 800626c:	bf18      	it	ne
 800626e:	2301      	movne	r3, #1
 8006270:	0692      	lsls	r2, r2, #26
 8006272:	d42b      	bmi.n	80062cc <_printf_common+0xb0>
 8006274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006278:	4649      	mov	r1, r9
 800627a:	4638      	mov	r0, r7
 800627c:	47c0      	blx	r8
 800627e:	3001      	adds	r0, #1
 8006280:	d01e      	beq.n	80062c0 <_printf_common+0xa4>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	6922      	ldr	r2, [r4, #16]
 8006286:	f003 0306 	and.w	r3, r3, #6
 800628a:	2b04      	cmp	r3, #4
 800628c:	bf02      	ittt	eq
 800628e:	68e5      	ldreq	r5, [r4, #12]
 8006290:	6833      	ldreq	r3, [r6, #0]
 8006292:	1aed      	subeq	r5, r5, r3
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	bf0c      	ite	eq
 8006298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800629c:	2500      	movne	r5, #0
 800629e:	4293      	cmp	r3, r2
 80062a0:	bfc4      	itt	gt
 80062a2:	1a9b      	subgt	r3, r3, r2
 80062a4:	18ed      	addgt	r5, r5, r3
 80062a6:	2600      	movs	r6, #0
 80062a8:	341a      	adds	r4, #26
 80062aa:	42b5      	cmp	r5, r6
 80062ac:	d11a      	bne.n	80062e4 <_printf_common+0xc8>
 80062ae:	2000      	movs	r0, #0
 80062b0:	e008      	b.n	80062c4 <_printf_common+0xa8>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4652      	mov	r2, sl
 80062b6:	4649      	mov	r1, r9
 80062b8:	4638      	mov	r0, r7
 80062ba:	47c0      	blx	r8
 80062bc:	3001      	adds	r0, #1
 80062be:	d103      	bne.n	80062c8 <_printf_common+0xac>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c8:	3501      	adds	r5, #1
 80062ca:	e7c6      	b.n	800625a <_printf_common+0x3e>
 80062cc:	18e1      	adds	r1, r4, r3
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	2030      	movs	r0, #48	; 0x30
 80062d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062d6:	4422      	add	r2, r4
 80062d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062e0:	3302      	adds	r3, #2
 80062e2:	e7c7      	b.n	8006274 <_printf_common+0x58>
 80062e4:	2301      	movs	r3, #1
 80062e6:	4622      	mov	r2, r4
 80062e8:	4649      	mov	r1, r9
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c0      	blx	r8
 80062ee:	3001      	adds	r0, #1
 80062f0:	d0e6      	beq.n	80062c0 <_printf_common+0xa4>
 80062f2:	3601      	adds	r6, #1
 80062f4:	e7d9      	b.n	80062aa <_printf_common+0x8e>
	...

080062f8 <_printf_i>:
 80062f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062fc:	7e0f      	ldrb	r7, [r1, #24]
 80062fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006300:	2f78      	cmp	r7, #120	; 0x78
 8006302:	4691      	mov	r9, r2
 8006304:	4680      	mov	r8, r0
 8006306:	460c      	mov	r4, r1
 8006308:	469a      	mov	sl, r3
 800630a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800630e:	d807      	bhi.n	8006320 <_printf_i+0x28>
 8006310:	2f62      	cmp	r7, #98	; 0x62
 8006312:	d80a      	bhi.n	800632a <_printf_i+0x32>
 8006314:	2f00      	cmp	r7, #0
 8006316:	f000 80d4 	beq.w	80064c2 <_printf_i+0x1ca>
 800631a:	2f58      	cmp	r7, #88	; 0x58
 800631c:	f000 80c0 	beq.w	80064a0 <_printf_i+0x1a8>
 8006320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006328:	e03a      	b.n	80063a0 <_printf_i+0xa8>
 800632a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800632e:	2b15      	cmp	r3, #21
 8006330:	d8f6      	bhi.n	8006320 <_printf_i+0x28>
 8006332:	a101      	add	r1, pc, #4	; (adr r1, 8006338 <_printf_i+0x40>)
 8006334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006338:	08006391 	.word	0x08006391
 800633c:	080063a5 	.word	0x080063a5
 8006340:	08006321 	.word	0x08006321
 8006344:	08006321 	.word	0x08006321
 8006348:	08006321 	.word	0x08006321
 800634c:	08006321 	.word	0x08006321
 8006350:	080063a5 	.word	0x080063a5
 8006354:	08006321 	.word	0x08006321
 8006358:	08006321 	.word	0x08006321
 800635c:	08006321 	.word	0x08006321
 8006360:	08006321 	.word	0x08006321
 8006364:	080064a9 	.word	0x080064a9
 8006368:	080063d1 	.word	0x080063d1
 800636c:	08006463 	.word	0x08006463
 8006370:	08006321 	.word	0x08006321
 8006374:	08006321 	.word	0x08006321
 8006378:	080064cb 	.word	0x080064cb
 800637c:	08006321 	.word	0x08006321
 8006380:	080063d1 	.word	0x080063d1
 8006384:	08006321 	.word	0x08006321
 8006388:	08006321 	.word	0x08006321
 800638c:	0800646b 	.word	0x0800646b
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	1d1a      	adds	r2, r3, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	602a      	str	r2, [r5, #0]
 8006398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800639c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063a0:	2301      	movs	r3, #1
 80063a2:	e09f      	b.n	80064e4 <_printf_i+0x1ec>
 80063a4:	6820      	ldr	r0, [r4, #0]
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	0607      	lsls	r7, r0, #24
 80063aa:	f103 0104 	add.w	r1, r3, #4
 80063ae:	6029      	str	r1, [r5, #0]
 80063b0:	d501      	bpl.n	80063b6 <_printf_i+0xbe>
 80063b2:	681e      	ldr	r6, [r3, #0]
 80063b4:	e003      	b.n	80063be <_printf_i+0xc6>
 80063b6:	0646      	lsls	r6, r0, #25
 80063b8:	d5fb      	bpl.n	80063b2 <_printf_i+0xba>
 80063ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063be:	2e00      	cmp	r6, #0
 80063c0:	da03      	bge.n	80063ca <_printf_i+0xd2>
 80063c2:	232d      	movs	r3, #45	; 0x2d
 80063c4:	4276      	negs	r6, r6
 80063c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ca:	485a      	ldr	r0, [pc, #360]	; (8006534 <_printf_i+0x23c>)
 80063cc:	230a      	movs	r3, #10
 80063ce:	e012      	b.n	80063f6 <_printf_i+0xfe>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	6820      	ldr	r0, [r4, #0]
 80063d4:	1d19      	adds	r1, r3, #4
 80063d6:	6029      	str	r1, [r5, #0]
 80063d8:	0605      	lsls	r5, r0, #24
 80063da:	d501      	bpl.n	80063e0 <_printf_i+0xe8>
 80063dc:	681e      	ldr	r6, [r3, #0]
 80063de:	e002      	b.n	80063e6 <_printf_i+0xee>
 80063e0:	0641      	lsls	r1, r0, #25
 80063e2:	d5fb      	bpl.n	80063dc <_printf_i+0xe4>
 80063e4:	881e      	ldrh	r6, [r3, #0]
 80063e6:	4853      	ldr	r0, [pc, #332]	; (8006534 <_printf_i+0x23c>)
 80063e8:	2f6f      	cmp	r7, #111	; 0x6f
 80063ea:	bf0c      	ite	eq
 80063ec:	2308      	moveq	r3, #8
 80063ee:	230a      	movne	r3, #10
 80063f0:	2100      	movs	r1, #0
 80063f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063f6:	6865      	ldr	r5, [r4, #4]
 80063f8:	60a5      	str	r5, [r4, #8]
 80063fa:	2d00      	cmp	r5, #0
 80063fc:	bfa2      	ittt	ge
 80063fe:	6821      	ldrge	r1, [r4, #0]
 8006400:	f021 0104 	bicge.w	r1, r1, #4
 8006404:	6021      	strge	r1, [r4, #0]
 8006406:	b90e      	cbnz	r6, 800640c <_printf_i+0x114>
 8006408:	2d00      	cmp	r5, #0
 800640a:	d04b      	beq.n	80064a4 <_printf_i+0x1ac>
 800640c:	4615      	mov	r5, r2
 800640e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006412:	fb03 6711 	mls	r7, r3, r1, r6
 8006416:	5dc7      	ldrb	r7, [r0, r7]
 8006418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800641c:	4637      	mov	r7, r6
 800641e:	42bb      	cmp	r3, r7
 8006420:	460e      	mov	r6, r1
 8006422:	d9f4      	bls.n	800640e <_printf_i+0x116>
 8006424:	2b08      	cmp	r3, #8
 8006426:	d10b      	bne.n	8006440 <_printf_i+0x148>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	07de      	lsls	r6, r3, #31
 800642c:	d508      	bpl.n	8006440 <_printf_i+0x148>
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	6861      	ldr	r1, [r4, #4]
 8006432:	4299      	cmp	r1, r3
 8006434:	bfde      	ittt	le
 8006436:	2330      	movle	r3, #48	; 0x30
 8006438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800643c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006440:	1b52      	subs	r2, r2, r5
 8006442:	6122      	str	r2, [r4, #16]
 8006444:	f8cd a000 	str.w	sl, [sp]
 8006448:	464b      	mov	r3, r9
 800644a:	aa03      	add	r2, sp, #12
 800644c:	4621      	mov	r1, r4
 800644e:	4640      	mov	r0, r8
 8006450:	f7ff fee4 	bl	800621c <_printf_common>
 8006454:	3001      	adds	r0, #1
 8006456:	d14a      	bne.n	80064ee <_printf_i+0x1f6>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800645c:	b004      	add	sp, #16
 800645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	f043 0320 	orr.w	r3, r3, #32
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	4833      	ldr	r0, [pc, #204]	; (8006538 <_printf_i+0x240>)
 800646c:	2778      	movs	r7, #120	; 0x78
 800646e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	6829      	ldr	r1, [r5, #0]
 8006476:	061f      	lsls	r7, r3, #24
 8006478:	f851 6b04 	ldr.w	r6, [r1], #4
 800647c:	d402      	bmi.n	8006484 <_printf_i+0x18c>
 800647e:	065f      	lsls	r7, r3, #25
 8006480:	bf48      	it	mi
 8006482:	b2b6      	uxthmi	r6, r6
 8006484:	07df      	lsls	r7, r3, #31
 8006486:	bf48      	it	mi
 8006488:	f043 0320 	orrmi.w	r3, r3, #32
 800648c:	6029      	str	r1, [r5, #0]
 800648e:	bf48      	it	mi
 8006490:	6023      	strmi	r3, [r4, #0]
 8006492:	b91e      	cbnz	r6, 800649c <_printf_i+0x1a4>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	f023 0320 	bic.w	r3, r3, #32
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	2310      	movs	r3, #16
 800649e:	e7a7      	b.n	80063f0 <_printf_i+0xf8>
 80064a0:	4824      	ldr	r0, [pc, #144]	; (8006534 <_printf_i+0x23c>)
 80064a2:	e7e4      	b.n	800646e <_printf_i+0x176>
 80064a4:	4615      	mov	r5, r2
 80064a6:	e7bd      	b.n	8006424 <_printf_i+0x12c>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	6826      	ldr	r6, [r4, #0]
 80064ac:	6961      	ldr	r1, [r4, #20]
 80064ae:	1d18      	adds	r0, r3, #4
 80064b0:	6028      	str	r0, [r5, #0]
 80064b2:	0635      	lsls	r5, r6, #24
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	d501      	bpl.n	80064bc <_printf_i+0x1c4>
 80064b8:	6019      	str	r1, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <_printf_i+0x1ca>
 80064bc:	0670      	lsls	r0, r6, #25
 80064be:	d5fb      	bpl.n	80064b8 <_printf_i+0x1c0>
 80064c0:	8019      	strh	r1, [r3, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	6123      	str	r3, [r4, #16]
 80064c6:	4615      	mov	r5, r2
 80064c8:	e7bc      	b.n	8006444 <_printf_i+0x14c>
 80064ca:	682b      	ldr	r3, [r5, #0]
 80064cc:	1d1a      	adds	r2, r3, #4
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	681d      	ldr	r5, [r3, #0]
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	2100      	movs	r1, #0
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7f9 fe8a 	bl	80001f0 <memchr>
 80064dc:	b108      	cbz	r0, 80064e2 <_printf_i+0x1ea>
 80064de:	1b40      	subs	r0, r0, r5
 80064e0:	6060      	str	r0, [r4, #4]
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	2300      	movs	r3, #0
 80064e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ec:	e7aa      	b.n	8006444 <_printf_i+0x14c>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	462a      	mov	r2, r5
 80064f2:	4649      	mov	r1, r9
 80064f4:	4640      	mov	r0, r8
 80064f6:	47d0      	blx	sl
 80064f8:	3001      	adds	r0, #1
 80064fa:	d0ad      	beq.n	8006458 <_printf_i+0x160>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	079b      	lsls	r3, r3, #30
 8006500:	d413      	bmi.n	800652a <_printf_i+0x232>
 8006502:	68e0      	ldr	r0, [r4, #12]
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	4298      	cmp	r0, r3
 8006508:	bfb8      	it	lt
 800650a:	4618      	movlt	r0, r3
 800650c:	e7a6      	b.n	800645c <_printf_i+0x164>
 800650e:	2301      	movs	r3, #1
 8006510:	4632      	mov	r2, r6
 8006512:	4649      	mov	r1, r9
 8006514:	4640      	mov	r0, r8
 8006516:	47d0      	blx	sl
 8006518:	3001      	adds	r0, #1
 800651a:	d09d      	beq.n	8006458 <_printf_i+0x160>
 800651c:	3501      	adds	r5, #1
 800651e:	68e3      	ldr	r3, [r4, #12]
 8006520:	9903      	ldr	r1, [sp, #12]
 8006522:	1a5b      	subs	r3, r3, r1
 8006524:	42ab      	cmp	r3, r5
 8006526:	dcf2      	bgt.n	800650e <_printf_i+0x216>
 8006528:	e7eb      	b.n	8006502 <_printf_i+0x20a>
 800652a:	2500      	movs	r5, #0
 800652c:	f104 0619 	add.w	r6, r4, #25
 8006530:	e7f5      	b.n	800651e <_printf_i+0x226>
 8006532:	bf00      	nop
 8006534:	08008a1e 	.word	0x08008a1e
 8006538:	08008a2f 	.word	0x08008a2f

0800653c <std>:
 800653c:	2300      	movs	r3, #0
 800653e:	b510      	push	{r4, lr}
 8006540:	4604      	mov	r4, r0
 8006542:	e9c0 3300 	strd	r3, r3, [r0]
 8006546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800654a:	6083      	str	r3, [r0, #8]
 800654c:	8181      	strh	r1, [r0, #12]
 800654e:	6643      	str	r3, [r0, #100]	; 0x64
 8006550:	81c2      	strh	r2, [r0, #14]
 8006552:	6183      	str	r3, [r0, #24]
 8006554:	4619      	mov	r1, r3
 8006556:	2208      	movs	r2, #8
 8006558:	305c      	adds	r0, #92	; 0x5c
 800655a:	f000 f914 	bl	8006786 <memset>
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <std+0x58>)
 8006560:	6263      	str	r3, [r4, #36]	; 0x24
 8006562:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <std+0x5c>)
 8006564:	62a3      	str	r3, [r4, #40]	; 0x28
 8006566:	4b0d      	ldr	r3, [pc, #52]	; (800659c <std+0x60>)
 8006568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800656a:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <std+0x64>)
 800656c:	6323      	str	r3, [r4, #48]	; 0x30
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <std+0x68>)
 8006570:	6224      	str	r4, [r4, #32]
 8006572:	429c      	cmp	r4, r3
 8006574:	d006      	beq.n	8006584 <std+0x48>
 8006576:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800657a:	4294      	cmp	r4, r2
 800657c:	d002      	beq.n	8006584 <std+0x48>
 800657e:	33d0      	adds	r3, #208	; 0xd0
 8006580:	429c      	cmp	r4, r3
 8006582:	d105      	bne.n	8006590 <std+0x54>
 8006584:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658c:	f000 b978 	b.w	8006880 <__retarget_lock_init_recursive>
 8006590:	bd10      	pop	{r4, pc}
 8006592:	bf00      	nop
 8006594:	08006701 	.word	0x08006701
 8006598:	08006723 	.word	0x08006723
 800659c:	0800675b 	.word	0x0800675b
 80065a0:	0800677f 	.word	0x0800677f
 80065a4:	20000a18 	.word	0x20000a18

080065a8 <stdio_exit_handler>:
 80065a8:	4a02      	ldr	r2, [pc, #8]	; (80065b4 <stdio_exit_handler+0xc>)
 80065aa:	4903      	ldr	r1, [pc, #12]	; (80065b8 <stdio_exit_handler+0x10>)
 80065ac:	4803      	ldr	r0, [pc, #12]	; (80065bc <stdio_exit_handler+0x14>)
 80065ae:	f000 b869 	b.w	8006684 <_fwalk_sglue>
 80065b2:	bf00      	nop
 80065b4:	2000000c 	.word	0x2000000c
 80065b8:	08008231 	.word	0x08008231
 80065bc:	20000018 	.word	0x20000018

080065c0 <cleanup_stdio>:
 80065c0:	6841      	ldr	r1, [r0, #4]
 80065c2:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <cleanup_stdio+0x34>)
 80065c4:	4299      	cmp	r1, r3
 80065c6:	b510      	push	{r4, lr}
 80065c8:	4604      	mov	r4, r0
 80065ca:	d001      	beq.n	80065d0 <cleanup_stdio+0x10>
 80065cc:	f001 fe30 	bl	8008230 <_fflush_r>
 80065d0:	68a1      	ldr	r1, [r4, #8]
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <cleanup_stdio+0x38>)
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d002      	beq.n	80065de <cleanup_stdio+0x1e>
 80065d8:	4620      	mov	r0, r4
 80065da:	f001 fe29 	bl	8008230 <_fflush_r>
 80065de:	68e1      	ldr	r1, [r4, #12]
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <cleanup_stdio+0x3c>)
 80065e2:	4299      	cmp	r1, r3
 80065e4:	d004      	beq.n	80065f0 <cleanup_stdio+0x30>
 80065e6:	4620      	mov	r0, r4
 80065e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ec:	f001 be20 	b.w	8008230 <_fflush_r>
 80065f0:	bd10      	pop	{r4, pc}
 80065f2:	bf00      	nop
 80065f4:	20000a18 	.word	0x20000a18
 80065f8:	20000a80 	.word	0x20000a80
 80065fc:	20000ae8 	.word	0x20000ae8

08006600 <global_stdio_init.part.0>:
 8006600:	b510      	push	{r4, lr}
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <global_stdio_init.part.0+0x30>)
 8006604:	4c0b      	ldr	r4, [pc, #44]	; (8006634 <global_stdio_init.part.0+0x34>)
 8006606:	4a0c      	ldr	r2, [pc, #48]	; (8006638 <global_stdio_init.part.0+0x38>)
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	4620      	mov	r0, r4
 800660c:	2200      	movs	r2, #0
 800660e:	2104      	movs	r1, #4
 8006610:	f7ff ff94 	bl	800653c <std>
 8006614:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006618:	2201      	movs	r2, #1
 800661a:	2109      	movs	r1, #9
 800661c:	f7ff ff8e 	bl	800653c <std>
 8006620:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006624:	2202      	movs	r2, #2
 8006626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662a:	2112      	movs	r1, #18
 800662c:	f7ff bf86 	b.w	800653c <std>
 8006630:	20000b50 	.word	0x20000b50
 8006634:	20000a18 	.word	0x20000a18
 8006638:	080065a9 	.word	0x080065a9

0800663c <__sfp_lock_acquire>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__sfp_lock_acquire+0x8>)
 800663e:	f000 b920 	b.w	8006882 <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	20000b59 	.word	0x20000b59

08006648 <__sfp_lock_release>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__sfp_lock_release+0x8>)
 800664a:	f000 b91b 	b.w	8006884 <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	20000b59 	.word	0x20000b59

08006654 <__sinit>:
 8006654:	b510      	push	{r4, lr}
 8006656:	4604      	mov	r4, r0
 8006658:	f7ff fff0 	bl	800663c <__sfp_lock_acquire>
 800665c:	6a23      	ldr	r3, [r4, #32]
 800665e:	b11b      	cbz	r3, 8006668 <__sinit+0x14>
 8006660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006664:	f7ff bff0 	b.w	8006648 <__sfp_lock_release>
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <__sinit+0x28>)
 800666a:	6223      	str	r3, [r4, #32]
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <__sinit+0x2c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f5      	bne.n	8006660 <__sinit+0xc>
 8006674:	f7ff ffc4 	bl	8006600 <global_stdio_init.part.0>
 8006678:	e7f2      	b.n	8006660 <__sinit+0xc>
 800667a:	bf00      	nop
 800667c:	080065c1 	.word	0x080065c1
 8006680:	20000b50 	.word	0x20000b50

08006684 <_fwalk_sglue>:
 8006684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006688:	4607      	mov	r7, r0
 800668a:	4688      	mov	r8, r1
 800668c:	4614      	mov	r4, r2
 800668e:	2600      	movs	r6, #0
 8006690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006694:	f1b9 0901 	subs.w	r9, r9, #1
 8006698:	d505      	bpl.n	80066a6 <_fwalk_sglue+0x22>
 800669a:	6824      	ldr	r4, [r4, #0]
 800669c:	2c00      	cmp	r4, #0
 800669e:	d1f7      	bne.n	8006690 <_fwalk_sglue+0xc>
 80066a0:	4630      	mov	r0, r6
 80066a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d907      	bls.n	80066bc <_fwalk_sglue+0x38>
 80066ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066b0:	3301      	adds	r3, #1
 80066b2:	d003      	beq.n	80066bc <_fwalk_sglue+0x38>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4638      	mov	r0, r7
 80066b8:	47c0      	blx	r8
 80066ba:	4306      	orrs	r6, r0
 80066bc:	3568      	adds	r5, #104	; 0x68
 80066be:	e7e9      	b.n	8006694 <_fwalk_sglue+0x10>

080066c0 <siprintf>:
 80066c0:	b40e      	push	{r1, r2, r3}
 80066c2:	b500      	push	{lr}
 80066c4:	b09c      	sub	sp, #112	; 0x70
 80066c6:	ab1d      	add	r3, sp, #116	; 0x74
 80066c8:	9002      	str	r0, [sp, #8]
 80066ca:	9006      	str	r0, [sp, #24]
 80066cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066d0:	4809      	ldr	r0, [pc, #36]	; (80066f8 <siprintf+0x38>)
 80066d2:	9107      	str	r1, [sp, #28]
 80066d4:	9104      	str	r1, [sp, #16]
 80066d6:	4909      	ldr	r1, [pc, #36]	; (80066fc <siprintf+0x3c>)
 80066d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066dc:	9105      	str	r1, [sp, #20]
 80066de:	6800      	ldr	r0, [r0, #0]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	a902      	add	r1, sp, #8
 80066e4:	f001 fc20 	bl	8007f28 <_svfiprintf_r>
 80066e8:	9b02      	ldr	r3, [sp, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	b01c      	add	sp, #112	; 0x70
 80066f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066f4:	b003      	add	sp, #12
 80066f6:	4770      	bx	lr
 80066f8:	20000064 	.word	0x20000064
 80066fc:	ffff0208 	.word	0xffff0208

08006700 <__sread>:
 8006700:	b510      	push	{r4, lr}
 8006702:	460c      	mov	r4, r1
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	f000 f86c 	bl	80067e4 <_read_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	bfab      	itete	ge
 8006710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006712:	89a3      	ldrhlt	r3, [r4, #12]
 8006714:	181b      	addge	r3, r3, r0
 8006716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800671a:	bfac      	ite	ge
 800671c:	6563      	strge	r3, [r4, #84]	; 0x54
 800671e:	81a3      	strhlt	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__swrite>:
 8006722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	461f      	mov	r7, r3
 8006728:	898b      	ldrh	r3, [r1, #12]
 800672a:	05db      	lsls	r3, r3, #23
 800672c:	4605      	mov	r5, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4616      	mov	r6, r2
 8006732:	d505      	bpl.n	8006740 <__swrite+0x1e>
 8006734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006738:	2302      	movs	r3, #2
 800673a:	2200      	movs	r2, #0
 800673c:	f000 f840 	bl	80067c0 <_lseek_r>
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	4632      	mov	r2, r6
 800674e:	463b      	mov	r3, r7
 8006750:	4628      	mov	r0, r5
 8006752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	f000 b857 	b.w	8006808 <_write_r>

0800675a <__sseek>:
 800675a:	b510      	push	{r4, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006762:	f000 f82d 	bl	80067c0 <_lseek_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	bf15      	itete	ne
 800676c:	6560      	strne	r0, [r4, #84]	; 0x54
 800676e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006776:	81a3      	strheq	r3, [r4, #12]
 8006778:	bf18      	it	ne
 800677a:	81a3      	strhne	r3, [r4, #12]
 800677c:	bd10      	pop	{r4, pc}

0800677e <__sclose>:
 800677e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006782:	f000 b80d 	b.w	80067a0 <_close_r>

08006786 <memset>:
 8006786:	4402      	add	r2, r0
 8006788:	4603      	mov	r3, r0
 800678a:	4293      	cmp	r3, r2
 800678c:	d100      	bne.n	8006790 <memset+0xa>
 800678e:	4770      	bx	lr
 8006790:	f803 1b01 	strb.w	r1, [r3], #1
 8006794:	e7f9      	b.n	800678a <memset+0x4>
	...

08006798 <_localeconv_r>:
 8006798:	4800      	ldr	r0, [pc, #0]	; (800679c <_localeconv_r+0x4>)
 800679a:	4770      	bx	lr
 800679c:	20000158 	.word	0x20000158

080067a0 <_close_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4d06      	ldr	r5, [pc, #24]	; (80067bc <_close_r+0x1c>)
 80067a4:	2300      	movs	r3, #0
 80067a6:	4604      	mov	r4, r0
 80067a8:	4608      	mov	r0, r1
 80067aa:	602b      	str	r3, [r5, #0]
 80067ac:	f7fb f9d3 	bl	8001b56 <_close>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d102      	bne.n	80067ba <_close_r+0x1a>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b103      	cbz	r3, 80067ba <_close_r+0x1a>
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	bd38      	pop	{r3, r4, r5, pc}
 80067bc:	20000b54 	.word	0x20000b54

080067c0 <_lseek_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4d07      	ldr	r5, [pc, #28]	; (80067e0 <_lseek_r+0x20>)
 80067c4:	4604      	mov	r4, r0
 80067c6:	4608      	mov	r0, r1
 80067c8:	4611      	mov	r1, r2
 80067ca:	2200      	movs	r2, #0
 80067cc:	602a      	str	r2, [r5, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	f7fb f9e8 	bl	8001ba4 <_lseek>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d102      	bne.n	80067de <_lseek_r+0x1e>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	b103      	cbz	r3, 80067de <_lseek_r+0x1e>
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	20000b54 	.word	0x20000b54

080067e4 <_read_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d07      	ldr	r5, [pc, #28]	; (8006804 <_read_r+0x20>)
 80067e8:	4604      	mov	r4, r0
 80067ea:	4608      	mov	r0, r1
 80067ec:	4611      	mov	r1, r2
 80067ee:	2200      	movs	r2, #0
 80067f0:	602a      	str	r2, [r5, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f7fb f976 	bl	8001ae4 <_read>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d102      	bne.n	8006802 <_read_r+0x1e>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	b103      	cbz	r3, 8006802 <_read_r+0x1e>
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	20000b54 	.word	0x20000b54

08006808 <_write_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d07      	ldr	r5, [pc, #28]	; (8006828 <_write_r+0x20>)
 800680c:	4604      	mov	r4, r0
 800680e:	4608      	mov	r0, r1
 8006810:	4611      	mov	r1, r2
 8006812:	2200      	movs	r2, #0
 8006814:	602a      	str	r2, [r5, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	f7fb f981 	bl	8001b1e <_write>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d102      	bne.n	8006826 <_write_r+0x1e>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	b103      	cbz	r3, 8006826 <_write_r+0x1e>
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	20000b54 	.word	0x20000b54

0800682c <__errno>:
 800682c:	4b01      	ldr	r3, [pc, #4]	; (8006834 <__errno+0x8>)
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000064 	.word	0x20000064

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4d0d      	ldr	r5, [pc, #52]	; (8006870 <__libc_init_array+0x38>)
 800683c:	4c0d      	ldr	r4, [pc, #52]	; (8006874 <__libc_init_array+0x3c>)
 800683e:	1b64      	subs	r4, r4, r5
 8006840:	10a4      	asrs	r4, r4, #2
 8006842:	2600      	movs	r6, #0
 8006844:	42a6      	cmp	r6, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	4d0b      	ldr	r5, [pc, #44]	; (8006878 <__libc_init_array+0x40>)
 800684a:	4c0c      	ldr	r4, [pc, #48]	; (800687c <__libc_init_array+0x44>)
 800684c:	f002 f894 	bl	8008978 <_init>
 8006850:	1b64      	subs	r4, r4, r5
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	2600      	movs	r6, #0
 8006856:	42a6      	cmp	r6, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006860:	4798      	blx	r3
 8006862:	3601      	adds	r6, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	f855 3b04 	ldr.w	r3, [r5], #4
 800686a:	4798      	blx	r3
 800686c:	3601      	adds	r6, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	08008d84 	.word	0x08008d84
 8006874:	08008d84 	.word	0x08008d84
 8006878:	08008d84 	.word	0x08008d84
 800687c:	08008d88 	.word	0x08008d88

08006880 <__retarget_lock_init_recursive>:
 8006880:	4770      	bx	lr

08006882 <__retarget_lock_acquire_recursive>:
 8006882:	4770      	bx	lr

08006884 <__retarget_lock_release_recursive>:
 8006884:	4770      	bx	lr

08006886 <quorem>:
 8006886:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	6903      	ldr	r3, [r0, #16]
 800688c:	690c      	ldr	r4, [r1, #16]
 800688e:	42a3      	cmp	r3, r4
 8006890:	4607      	mov	r7, r0
 8006892:	db7e      	blt.n	8006992 <quorem+0x10c>
 8006894:	3c01      	subs	r4, #1
 8006896:	f101 0814 	add.w	r8, r1, #20
 800689a:	f100 0514 	add.w	r5, r0, #20
 800689e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ac:	3301      	adds	r3, #1
 80068ae:	429a      	cmp	r2, r3
 80068b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80068bc:	d331      	bcc.n	8006922 <quorem+0x9c>
 80068be:	f04f 0e00 	mov.w	lr, #0
 80068c2:	4640      	mov	r0, r8
 80068c4:	46ac      	mov	ip, r5
 80068c6:	46f2      	mov	sl, lr
 80068c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80068cc:	b293      	uxth	r3, r2
 80068ce:	fb06 e303 	mla	r3, r6, r3, lr
 80068d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068d6:	0c1a      	lsrs	r2, r3, #16
 80068d8:	b29b      	uxth	r3, r3
 80068da:	ebaa 0303 	sub.w	r3, sl, r3
 80068de:	f8dc a000 	ldr.w	sl, [ip]
 80068e2:	fa13 f38a 	uxtah	r3, r3, sl
 80068e6:	fb06 220e 	mla	r2, r6, lr, r2
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	9b00      	ldr	r3, [sp, #0]
 80068ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068f2:	b292      	uxth	r2, r2
 80068f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006900:	4581      	cmp	r9, r0
 8006902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006906:	f84c 3b04 	str.w	r3, [ip], #4
 800690a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800690e:	d2db      	bcs.n	80068c8 <quorem+0x42>
 8006910:	f855 300b 	ldr.w	r3, [r5, fp]
 8006914:	b92b      	cbnz	r3, 8006922 <quorem+0x9c>
 8006916:	9b01      	ldr	r3, [sp, #4]
 8006918:	3b04      	subs	r3, #4
 800691a:	429d      	cmp	r5, r3
 800691c:	461a      	mov	r2, r3
 800691e:	d32c      	bcc.n	800697a <quorem+0xf4>
 8006920:	613c      	str	r4, [r7, #16]
 8006922:	4638      	mov	r0, r7
 8006924:	f001 f9a6 	bl	8007c74 <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	db22      	blt.n	8006972 <quorem+0xec>
 800692c:	3601      	adds	r6, #1
 800692e:	4629      	mov	r1, r5
 8006930:	2000      	movs	r0, #0
 8006932:	f858 2b04 	ldr.w	r2, [r8], #4
 8006936:	f8d1 c000 	ldr.w	ip, [r1]
 800693a:	b293      	uxth	r3, r2
 800693c:	1ac3      	subs	r3, r0, r3
 800693e:	0c12      	lsrs	r2, r2, #16
 8006940:	fa13 f38c 	uxtah	r3, r3, ip
 8006944:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006948:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800694c:	b29b      	uxth	r3, r3
 800694e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006952:	45c1      	cmp	r9, r8
 8006954:	f841 3b04 	str.w	r3, [r1], #4
 8006958:	ea4f 4022 	mov.w	r0, r2, asr #16
 800695c:	d2e9      	bcs.n	8006932 <quorem+0xac>
 800695e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006966:	b922      	cbnz	r2, 8006972 <quorem+0xec>
 8006968:	3b04      	subs	r3, #4
 800696a:	429d      	cmp	r5, r3
 800696c:	461a      	mov	r2, r3
 800696e:	d30a      	bcc.n	8006986 <quorem+0x100>
 8006970:	613c      	str	r4, [r7, #16]
 8006972:	4630      	mov	r0, r6
 8006974:	b003      	add	sp, #12
 8006976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697a:	6812      	ldr	r2, [r2, #0]
 800697c:	3b04      	subs	r3, #4
 800697e:	2a00      	cmp	r2, #0
 8006980:	d1ce      	bne.n	8006920 <quorem+0x9a>
 8006982:	3c01      	subs	r4, #1
 8006984:	e7c9      	b.n	800691a <quorem+0x94>
 8006986:	6812      	ldr	r2, [r2, #0]
 8006988:	3b04      	subs	r3, #4
 800698a:	2a00      	cmp	r2, #0
 800698c:	d1f0      	bne.n	8006970 <quorem+0xea>
 800698e:	3c01      	subs	r4, #1
 8006990:	e7eb      	b.n	800696a <quorem+0xe4>
 8006992:	2000      	movs	r0, #0
 8006994:	e7ee      	b.n	8006974 <quorem+0xee>
	...

08006998 <_dtoa_r>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	ed2d 8b04 	vpush	{d8-d9}
 80069a0:	69c5      	ldr	r5, [r0, #28]
 80069a2:	b093      	sub	sp, #76	; 0x4c
 80069a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069a8:	ec57 6b10 	vmov	r6, r7, d0
 80069ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069b0:	9107      	str	r1, [sp, #28]
 80069b2:	4604      	mov	r4, r0
 80069b4:	920a      	str	r2, [sp, #40]	; 0x28
 80069b6:	930d      	str	r3, [sp, #52]	; 0x34
 80069b8:	b975      	cbnz	r5, 80069d8 <_dtoa_r+0x40>
 80069ba:	2010      	movs	r0, #16
 80069bc:	f000 fe2a 	bl	8007614 <malloc>
 80069c0:	4602      	mov	r2, r0
 80069c2:	61e0      	str	r0, [r4, #28]
 80069c4:	b920      	cbnz	r0, 80069d0 <_dtoa_r+0x38>
 80069c6:	4bae      	ldr	r3, [pc, #696]	; (8006c80 <_dtoa_r+0x2e8>)
 80069c8:	21ef      	movs	r1, #239	; 0xef
 80069ca:	48ae      	ldr	r0, [pc, #696]	; (8006c84 <_dtoa_r+0x2ec>)
 80069cc:	f001 fc90 	bl	80082f0 <__assert_func>
 80069d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069d4:	6005      	str	r5, [r0, #0]
 80069d6:	60c5      	str	r5, [r0, #12]
 80069d8:	69e3      	ldr	r3, [r4, #28]
 80069da:	6819      	ldr	r1, [r3, #0]
 80069dc:	b151      	cbz	r1, 80069f4 <_dtoa_r+0x5c>
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	604a      	str	r2, [r1, #4]
 80069e2:	2301      	movs	r3, #1
 80069e4:	4093      	lsls	r3, r2
 80069e6:	608b      	str	r3, [r1, #8]
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 ff07 	bl	80077fc <_Bfree>
 80069ee:	69e3      	ldr	r3, [r4, #28]
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	1e3b      	subs	r3, r7, #0
 80069f6:	bfbb      	ittet	lt
 80069f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069fc:	9303      	strlt	r3, [sp, #12]
 80069fe:	2300      	movge	r3, #0
 8006a00:	2201      	movlt	r2, #1
 8006a02:	bfac      	ite	ge
 8006a04:	f8c8 3000 	strge.w	r3, [r8]
 8006a08:	f8c8 2000 	strlt.w	r2, [r8]
 8006a0c:	4b9e      	ldr	r3, [pc, #632]	; (8006c88 <_dtoa_r+0x2f0>)
 8006a0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a12:	ea33 0308 	bics.w	r3, r3, r8
 8006a16:	d11b      	bne.n	8006a50 <_dtoa_r+0xb8>
 8006a18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a24:	4333      	orrs	r3, r6
 8006a26:	f000 8593 	beq.w	8007550 <_dtoa_r+0xbb8>
 8006a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a2c:	b963      	cbnz	r3, 8006a48 <_dtoa_r+0xb0>
 8006a2e:	4b97      	ldr	r3, [pc, #604]	; (8006c8c <_dtoa_r+0x2f4>)
 8006a30:	e027      	b.n	8006a82 <_dtoa_r+0xea>
 8006a32:	4b97      	ldr	r3, [pc, #604]	; (8006c90 <_dtoa_r+0x2f8>)
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	9800      	ldr	r0, [sp, #0]
 8006a3e:	b013      	add	sp, #76	; 0x4c
 8006a40:	ecbd 8b04 	vpop	{d8-d9}
 8006a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a48:	4b90      	ldr	r3, [pc, #576]	; (8006c8c <_dtoa_r+0x2f4>)
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	3303      	adds	r3, #3
 8006a4e:	e7f3      	b.n	8006a38 <_dtoa_r+0xa0>
 8006a50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a54:	2200      	movs	r2, #0
 8006a56:	ec51 0b17 	vmov	r0, r1, d7
 8006a5a:	eeb0 8a47 	vmov.f32	s16, s14
 8006a5e:	eef0 8a67 	vmov.f32	s17, s15
 8006a62:	2300      	movs	r3, #0
 8006a64:	f7fa f840 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a68:	4681      	mov	r9, r0
 8006a6a:	b160      	cbz	r0, 8006a86 <_dtoa_r+0xee>
 8006a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a6e:	2301      	movs	r3, #1
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8568 	beq.w	800754a <_dtoa_r+0xbb2>
 8006a7a:	4b86      	ldr	r3, [pc, #536]	; (8006c94 <_dtoa_r+0x2fc>)
 8006a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	e7da      	b.n	8006a3c <_dtoa_r+0xa4>
 8006a86:	aa10      	add	r2, sp, #64	; 0x40
 8006a88:	a911      	add	r1, sp, #68	; 0x44
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	eeb0 0a48 	vmov.f32	s0, s16
 8006a90:	eef0 0a68 	vmov.f32	s1, s17
 8006a94:	f001 f994 	bl	8007dc0 <__d2b>
 8006a98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	d07f      	beq.n	8006ba2 <_dtoa_r+0x20a>
 8006aa2:	ee18 3a90 	vmov	r3, s17
 8006aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aaa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006aae:	ec51 0b18 	vmov	r0, r1, d8
 8006ab2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006ab6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006aba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006abe:	4619      	mov	r1, r3
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4b75      	ldr	r3, [pc, #468]	; (8006c98 <_dtoa_r+0x300>)
 8006ac4:	f7f9 fbf0 	bl	80002a8 <__aeabi_dsub>
 8006ac8:	a367      	add	r3, pc, #412	; (adr r3, 8006c68 <_dtoa_r+0x2d0>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 fda3 	bl	8000618 <__aeabi_dmul>
 8006ad2:	a367      	add	r3, pc, #412	; (adr r3, 8006c70 <_dtoa_r+0x2d8>)
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f7f9 fbe8 	bl	80002ac <__adddf3>
 8006adc:	4606      	mov	r6, r0
 8006ade:	4628      	mov	r0, r5
 8006ae0:	460f      	mov	r7, r1
 8006ae2:	f7f9 fd2f 	bl	8000544 <__aeabi_i2d>
 8006ae6:	a364      	add	r3, pc, #400	; (adr r3, 8006c78 <_dtoa_r+0x2e0>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f7f9 fd94 	bl	8000618 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	f7f9 fbd8 	bl	80002ac <__adddf3>
 8006afc:	4606      	mov	r6, r0
 8006afe:	460f      	mov	r7, r1
 8006b00:	f7fa f83a 	bl	8000b78 <__aeabi_d2iz>
 8006b04:	2200      	movs	r2, #0
 8006b06:	4683      	mov	fp, r0
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7f9 fff5 	bl	8000afc <__aeabi_dcmplt>
 8006b12:	b148      	cbz	r0, 8006b28 <_dtoa_r+0x190>
 8006b14:	4658      	mov	r0, fp
 8006b16:	f7f9 fd15 	bl	8000544 <__aeabi_i2d>
 8006b1a:	4632      	mov	r2, r6
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	f7f9 ffe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b22:	b908      	cbnz	r0, 8006b28 <_dtoa_r+0x190>
 8006b24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006b28:	f1bb 0f16 	cmp.w	fp, #22
 8006b2c:	d857      	bhi.n	8006bde <_dtoa_r+0x246>
 8006b2e:	4b5b      	ldr	r3, [pc, #364]	; (8006c9c <_dtoa_r+0x304>)
 8006b30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	ec51 0b18 	vmov	r0, r1, d8
 8006b3c:	f7f9 ffde 	bl	8000afc <__aeabi_dcmplt>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d04e      	beq.n	8006be2 <_dtoa_r+0x24a>
 8006b44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006b48:	2300      	movs	r3, #0
 8006b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b4e:	1b5b      	subs	r3, r3, r5
 8006b50:	1e5a      	subs	r2, r3, #1
 8006b52:	bf45      	ittet	mi
 8006b54:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b58:	9305      	strmi	r3, [sp, #20]
 8006b5a:	2300      	movpl	r3, #0
 8006b5c:	2300      	movmi	r3, #0
 8006b5e:	9206      	str	r2, [sp, #24]
 8006b60:	bf54      	ite	pl
 8006b62:	9305      	strpl	r3, [sp, #20]
 8006b64:	9306      	strmi	r3, [sp, #24]
 8006b66:	f1bb 0f00 	cmp.w	fp, #0
 8006b6a:	db3c      	blt.n	8006be6 <_dtoa_r+0x24e>
 8006b6c:	9b06      	ldr	r3, [sp, #24]
 8006b6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b72:	445b      	add	r3, fp
 8006b74:	9306      	str	r3, [sp, #24]
 8006b76:	2300      	movs	r3, #0
 8006b78:	9308      	str	r3, [sp, #32]
 8006b7a:	9b07      	ldr	r3, [sp, #28]
 8006b7c:	2b09      	cmp	r3, #9
 8006b7e:	d868      	bhi.n	8006c52 <_dtoa_r+0x2ba>
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	bfc4      	itt	gt
 8006b84:	3b04      	subgt	r3, #4
 8006b86:	9307      	strgt	r3, [sp, #28]
 8006b88:	9b07      	ldr	r3, [sp, #28]
 8006b8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006b8e:	bfcc      	ite	gt
 8006b90:	2500      	movgt	r5, #0
 8006b92:	2501      	movle	r5, #1
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	f200 8085 	bhi.w	8006ca4 <_dtoa_r+0x30c>
 8006b9a:	e8df f003 	tbb	[pc, r3]
 8006b9e:	3b2e      	.short	0x3b2e
 8006ba0:	5839      	.short	0x5839
 8006ba2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ba6:	441d      	add	r5, r3
 8006ba8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	bfc1      	itttt	gt
 8006bb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006bb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006bbc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006bc0:	bfd6      	itet	le
 8006bc2:	f1c3 0320 	rsble	r3, r3, #32
 8006bc6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bca:	fa06 f003 	lslle.w	r0, r6, r3
 8006bce:	f7f9 fca9 	bl	8000524 <__aeabi_ui2d>
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006bd8:	3d01      	subs	r5, #1
 8006bda:	920e      	str	r2, [sp, #56]	; 0x38
 8006bdc:	e76f      	b.n	8006abe <_dtoa_r+0x126>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e7b3      	b.n	8006b4a <_dtoa_r+0x1b2>
 8006be2:	900c      	str	r0, [sp, #48]	; 0x30
 8006be4:	e7b2      	b.n	8006b4c <_dtoa_r+0x1b4>
 8006be6:	9b05      	ldr	r3, [sp, #20]
 8006be8:	eba3 030b 	sub.w	r3, r3, fp
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	f1cb 0300 	rsb	r3, fp, #0
 8006bf2:	9308      	str	r3, [sp, #32]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf8:	e7bf      	b.n	8006b7a <_dtoa_r+0x1e2>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	dc52      	bgt.n	8006caa <_dtoa_r+0x312>
 8006c04:	2301      	movs	r3, #1
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	9304      	str	r3, [sp, #16]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c0e:	e00b      	b.n	8006c28 <_dtoa_r+0x290>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e7f3      	b.n	8006bfc <_dtoa_r+0x264>
 8006c14:	2300      	movs	r3, #0
 8006c16:	9309      	str	r3, [sp, #36]	; 0x24
 8006c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1a:	445b      	add	r3, fp
 8006c1c:	9301      	str	r3, [sp, #4]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	bfb8      	it	lt
 8006c26:	2301      	movlt	r3, #1
 8006c28:	69e0      	ldr	r0, [r4, #28]
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	f102 0614 	add.w	r6, r2, #20
 8006c32:	429e      	cmp	r6, r3
 8006c34:	d93d      	bls.n	8006cb2 <_dtoa_r+0x31a>
 8006c36:	6041      	str	r1, [r0, #4]
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fd9f 	bl	800777c <_Balloc>
 8006c3e:	9000      	str	r0, [sp, #0]
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d139      	bne.n	8006cb8 <_dtoa_r+0x320>
 8006c44:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <_dtoa_r+0x308>)
 8006c46:	4602      	mov	r2, r0
 8006c48:	f240 11af 	movw	r1, #431	; 0x1af
 8006c4c:	e6bd      	b.n	80069ca <_dtoa_r+0x32>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e7e1      	b.n	8006c16 <_dtoa_r+0x27e>
 8006c52:	2501      	movs	r5, #1
 8006c54:	2300      	movs	r3, #0
 8006c56:	9307      	str	r3, [sp, #28]
 8006c58:	9509      	str	r5, [sp, #36]	; 0x24
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	2200      	movs	r2, #0
 8006c64:	2312      	movs	r3, #18
 8006c66:	e7d1      	b.n	8006c0c <_dtoa_r+0x274>
 8006c68:	636f4361 	.word	0x636f4361
 8006c6c:	3fd287a7 	.word	0x3fd287a7
 8006c70:	8b60c8b3 	.word	0x8b60c8b3
 8006c74:	3fc68a28 	.word	0x3fc68a28
 8006c78:	509f79fb 	.word	0x509f79fb
 8006c7c:	3fd34413 	.word	0x3fd34413
 8006c80:	08008a4d 	.word	0x08008a4d
 8006c84:	08008a64 	.word	0x08008a64
 8006c88:	7ff00000 	.word	0x7ff00000
 8006c8c:	08008a49 	.word	0x08008a49
 8006c90:	08008a40 	.word	0x08008a40
 8006c94:	08008a1d 	.word	0x08008a1d
 8006c98:	3ff80000 	.word	0x3ff80000
 8006c9c:	08008b50 	.word	0x08008b50
 8006ca0:	08008abc 	.word	0x08008abc
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca8:	e7d7      	b.n	8006c5a <_dtoa_r+0x2c2>
 8006caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	9304      	str	r3, [sp, #16]
 8006cb0:	e7ba      	b.n	8006c28 <_dtoa_r+0x290>
 8006cb2:	3101      	adds	r1, #1
 8006cb4:	0052      	lsls	r2, r2, #1
 8006cb6:	e7ba      	b.n	8006c2e <_dtoa_r+0x296>
 8006cb8:	69e3      	ldr	r3, [r4, #28]
 8006cba:	9a00      	ldr	r2, [sp, #0]
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	2b0e      	cmp	r3, #14
 8006cc2:	f200 80a8 	bhi.w	8006e16 <_dtoa_r+0x47e>
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	f000 80a5 	beq.w	8006e16 <_dtoa_r+0x47e>
 8006ccc:	f1bb 0f00 	cmp.w	fp, #0
 8006cd0:	dd38      	ble.n	8006d44 <_dtoa_r+0x3ac>
 8006cd2:	4bc0      	ldr	r3, [pc, #768]	; (8006fd4 <_dtoa_r+0x63c>)
 8006cd4:	f00b 020f 	and.w	r2, fp, #15
 8006cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006ce0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006ce4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006ce8:	d019      	beq.n	8006d1e <_dtoa_r+0x386>
 8006cea:	4bbb      	ldr	r3, [pc, #748]	; (8006fd8 <_dtoa_r+0x640>)
 8006cec:	ec51 0b18 	vmov	r0, r1, d8
 8006cf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cf4:	f7f9 fdba 	bl	800086c <__aeabi_ddiv>
 8006cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cfc:	f008 080f 	and.w	r8, r8, #15
 8006d00:	2503      	movs	r5, #3
 8006d02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006fd8 <_dtoa_r+0x640>
 8006d06:	f1b8 0f00 	cmp.w	r8, #0
 8006d0a:	d10a      	bne.n	8006d22 <_dtoa_r+0x38a>
 8006d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d10:	4632      	mov	r2, r6
 8006d12:	463b      	mov	r3, r7
 8006d14:	f7f9 fdaa 	bl	800086c <__aeabi_ddiv>
 8006d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d1c:	e02b      	b.n	8006d76 <_dtoa_r+0x3de>
 8006d1e:	2502      	movs	r5, #2
 8006d20:	e7ef      	b.n	8006d02 <_dtoa_r+0x36a>
 8006d22:	f018 0f01 	tst.w	r8, #1
 8006d26:	d008      	beq.n	8006d3a <_dtoa_r+0x3a2>
 8006d28:	4630      	mov	r0, r6
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d30:	f7f9 fc72 	bl	8000618 <__aeabi_dmul>
 8006d34:	3501      	adds	r5, #1
 8006d36:	4606      	mov	r6, r0
 8006d38:	460f      	mov	r7, r1
 8006d3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d3e:	f109 0908 	add.w	r9, r9, #8
 8006d42:	e7e0      	b.n	8006d06 <_dtoa_r+0x36e>
 8006d44:	f000 809f 	beq.w	8006e86 <_dtoa_r+0x4ee>
 8006d48:	f1cb 0600 	rsb	r6, fp, #0
 8006d4c:	4ba1      	ldr	r3, [pc, #644]	; (8006fd4 <_dtoa_r+0x63c>)
 8006d4e:	4fa2      	ldr	r7, [pc, #648]	; (8006fd8 <_dtoa_r+0x640>)
 8006d50:	f006 020f 	and.w	r2, r6, #15
 8006d54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	ec51 0b18 	vmov	r0, r1, d8
 8006d60:	f7f9 fc5a 	bl	8000618 <__aeabi_dmul>
 8006d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d68:	1136      	asrs	r6, r6, #4
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2502      	movs	r5, #2
 8006d6e:	2e00      	cmp	r6, #0
 8006d70:	d17e      	bne.n	8006e70 <_dtoa_r+0x4d8>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1d0      	bne.n	8006d18 <_dtoa_r+0x380>
 8006d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8084 	beq.w	8006e8a <_dtoa_r+0x4f2>
 8006d82:	4b96      	ldr	r3, [pc, #600]	; (8006fdc <_dtoa_r+0x644>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	4640      	mov	r0, r8
 8006d88:	4649      	mov	r1, r9
 8006d8a:	f7f9 feb7 	bl	8000afc <__aeabi_dcmplt>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d07b      	beq.n	8006e8a <_dtoa_r+0x4f2>
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d078      	beq.n	8006e8a <_dtoa_r+0x4f2>
 8006d98:	9b01      	ldr	r3, [sp, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dd39      	ble.n	8006e12 <_dtoa_r+0x47a>
 8006d9e:	4b90      	ldr	r3, [pc, #576]	; (8006fe0 <_dtoa_r+0x648>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	4640      	mov	r0, r8
 8006da4:	4649      	mov	r1, r9
 8006da6:	f7f9 fc37 	bl	8000618 <__aeabi_dmul>
 8006daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dae:	9e01      	ldr	r6, [sp, #4]
 8006db0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006db4:	3501      	adds	r5, #1
 8006db6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f7f9 fbc2 	bl	8000544 <__aeabi_i2d>
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	f7f9 fc28 	bl	8000618 <__aeabi_dmul>
 8006dc8:	4b86      	ldr	r3, [pc, #536]	; (8006fe4 <_dtoa_r+0x64c>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f7f9 fa6e 	bl	80002ac <__adddf3>
 8006dd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd8:	9303      	str	r3, [sp, #12]
 8006dda:	2e00      	cmp	r6, #0
 8006ddc:	d158      	bne.n	8006e90 <_dtoa_r+0x4f8>
 8006dde:	4b82      	ldr	r3, [pc, #520]	; (8006fe8 <_dtoa_r+0x650>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 fa5f 	bl	80002a8 <__aeabi_dsub>
 8006dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dee:	4680      	mov	r8, r0
 8006df0:	4689      	mov	r9, r1
 8006df2:	f7f9 fea1 	bl	8000b38 <__aeabi_dcmpgt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f040 8296 	bne.w	8007328 <_dtoa_r+0x990>
 8006dfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e00:	4640      	mov	r0, r8
 8006e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fe78 	bl	8000afc <__aeabi_dcmplt>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	f040 8289 	bne.w	8007324 <_dtoa_r+0x98c>
 8006e12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f2c0 814e 	blt.w	80070ba <_dtoa_r+0x722>
 8006e1e:	f1bb 0f0e 	cmp.w	fp, #14
 8006e22:	f300 814a 	bgt.w	80070ba <_dtoa_r+0x722>
 8006e26:	4b6b      	ldr	r3, [pc, #428]	; (8006fd4 <_dtoa_r+0x63c>)
 8006e28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f280 80dc 	bge.w	8006ff0 <_dtoa_r+0x658>
 8006e38:	9b04      	ldr	r3, [sp, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f300 80d8 	bgt.w	8006ff0 <_dtoa_r+0x658>
 8006e40:	f040 826f 	bne.w	8007322 <_dtoa_r+0x98a>
 8006e44:	4b68      	ldr	r3, [pc, #416]	; (8006fe8 <_dtoa_r+0x650>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	f7f9 fbe4 	bl	8000618 <__aeabi_dmul>
 8006e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e54:	f7f9 fe66 	bl	8000b24 <__aeabi_dcmpge>
 8006e58:	9e04      	ldr	r6, [sp, #16]
 8006e5a:	4637      	mov	r7, r6
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f040 8245 	bne.w	80072ec <_dtoa_r+0x954>
 8006e62:	9d00      	ldr	r5, [sp, #0]
 8006e64:	2331      	movs	r3, #49	; 0x31
 8006e66:	f805 3b01 	strb.w	r3, [r5], #1
 8006e6a:	f10b 0b01 	add.w	fp, fp, #1
 8006e6e:	e241      	b.n	80072f4 <_dtoa_r+0x95c>
 8006e70:	07f2      	lsls	r2, r6, #31
 8006e72:	d505      	bpl.n	8006e80 <_dtoa_r+0x4e8>
 8006e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e78:	f7f9 fbce 	bl	8000618 <__aeabi_dmul>
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	2301      	movs	r3, #1
 8006e80:	1076      	asrs	r6, r6, #1
 8006e82:	3708      	adds	r7, #8
 8006e84:	e773      	b.n	8006d6e <_dtoa_r+0x3d6>
 8006e86:	2502      	movs	r5, #2
 8006e88:	e775      	b.n	8006d76 <_dtoa_r+0x3de>
 8006e8a:	9e04      	ldr	r6, [sp, #16]
 8006e8c:	465f      	mov	r7, fp
 8006e8e:	e792      	b.n	8006db6 <_dtoa_r+0x41e>
 8006e90:	9900      	ldr	r1, [sp, #0]
 8006e92:	4b50      	ldr	r3, [pc, #320]	; (8006fd4 <_dtoa_r+0x63c>)
 8006e94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e98:	4431      	add	r1, r6
 8006e9a:	9102      	str	r1, [sp, #8]
 8006e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e9e:	eeb0 9a47 	vmov.f32	s18, s14
 8006ea2:	eef0 9a67 	vmov.f32	s19, s15
 8006ea6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006eaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	d044      	beq.n	8006f3c <_dtoa_r+0x5a4>
 8006eb2:	494e      	ldr	r1, [pc, #312]	; (8006fec <_dtoa_r+0x654>)
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f7f9 fcd9 	bl	800086c <__aeabi_ddiv>
 8006eba:	ec53 2b19 	vmov	r2, r3, d9
 8006ebe:	f7f9 f9f3 	bl	80002a8 <__aeabi_dsub>
 8006ec2:	9d00      	ldr	r5, [sp, #0]
 8006ec4:	ec41 0b19 	vmov	d9, r0, r1
 8006ec8:	4649      	mov	r1, r9
 8006eca:	4640      	mov	r0, r8
 8006ecc:	f7f9 fe54 	bl	8000b78 <__aeabi_d2iz>
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	f7f9 fb37 	bl	8000544 <__aeabi_i2d>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 f9e3 	bl	80002a8 <__aeabi_dsub>
 8006ee2:	3630      	adds	r6, #48	; 0x30
 8006ee4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ee8:	ec53 2b19 	vmov	r2, r3, d9
 8006eec:	4680      	mov	r8, r0
 8006eee:	4689      	mov	r9, r1
 8006ef0:	f7f9 fe04 	bl	8000afc <__aeabi_dcmplt>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d164      	bne.n	8006fc2 <_dtoa_r+0x62a>
 8006ef8:	4642      	mov	r2, r8
 8006efa:	464b      	mov	r3, r9
 8006efc:	4937      	ldr	r1, [pc, #220]	; (8006fdc <_dtoa_r+0x644>)
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7f9 f9d2 	bl	80002a8 <__aeabi_dsub>
 8006f04:	ec53 2b19 	vmov	r2, r3, d9
 8006f08:	f7f9 fdf8 	bl	8000afc <__aeabi_dcmplt>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f040 80b6 	bne.w	800707e <_dtoa_r+0x6e6>
 8006f12:	9b02      	ldr	r3, [sp, #8]
 8006f14:	429d      	cmp	r5, r3
 8006f16:	f43f af7c 	beq.w	8006e12 <_dtoa_r+0x47a>
 8006f1a:	4b31      	ldr	r3, [pc, #196]	; (8006fe0 <_dtoa_r+0x648>)
 8006f1c:	ec51 0b19 	vmov	r0, r1, d9
 8006f20:	2200      	movs	r2, #0
 8006f22:	f7f9 fb79 	bl	8000618 <__aeabi_dmul>
 8006f26:	4b2e      	ldr	r3, [pc, #184]	; (8006fe0 <_dtoa_r+0x648>)
 8006f28:	ec41 0b19 	vmov	d9, r0, r1
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4640      	mov	r0, r8
 8006f30:	4649      	mov	r1, r9
 8006f32:	f7f9 fb71 	bl	8000618 <__aeabi_dmul>
 8006f36:	4680      	mov	r8, r0
 8006f38:	4689      	mov	r9, r1
 8006f3a:	e7c5      	b.n	8006ec8 <_dtoa_r+0x530>
 8006f3c:	ec51 0b17 	vmov	r0, r1, d7
 8006f40:	f7f9 fb6a 	bl	8000618 <__aeabi_dmul>
 8006f44:	9b02      	ldr	r3, [sp, #8]
 8006f46:	9d00      	ldr	r5, [sp, #0]
 8006f48:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f4a:	ec41 0b19 	vmov	d9, r0, r1
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4640      	mov	r0, r8
 8006f52:	f7f9 fe11 	bl	8000b78 <__aeabi_d2iz>
 8006f56:	4606      	mov	r6, r0
 8006f58:	f7f9 faf4 	bl	8000544 <__aeabi_i2d>
 8006f5c:	3630      	adds	r6, #48	; 0x30
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 f99f 	bl	80002a8 <__aeabi_dsub>
 8006f6a:	f805 6b01 	strb.w	r6, [r5], #1
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	429d      	cmp	r5, r3
 8006f72:	4680      	mov	r8, r0
 8006f74:	4689      	mov	r9, r1
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	d124      	bne.n	8006fc6 <_dtoa_r+0x62e>
 8006f7c:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <_dtoa_r+0x654>)
 8006f7e:	ec51 0b19 	vmov	r0, r1, d9
 8006f82:	f7f9 f993 	bl	80002ac <__adddf3>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	f7f9 fdd3 	bl	8000b38 <__aeabi_dcmpgt>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d173      	bne.n	800707e <_dtoa_r+0x6e6>
 8006f96:	ec53 2b19 	vmov	r2, r3, d9
 8006f9a:	4914      	ldr	r1, [pc, #80]	; (8006fec <_dtoa_r+0x654>)
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f7f9 f983 	bl	80002a8 <__aeabi_dsub>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	f7f9 fda7 	bl	8000afc <__aeabi_dcmplt>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f43f af2f 	beq.w	8006e12 <_dtoa_r+0x47a>
 8006fb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fb6:	1e6b      	subs	r3, r5, #1
 8006fb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fbe:	2b30      	cmp	r3, #48	; 0x30
 8006fc0:	d0f8      	beq.n	8006fb4 <_dtoa_r+0x61c>
 8006fc2:	46bb      	mov	fp, r7
 8006fc4:	e04a      	b.n	800705c <_dtoa_r+0x6c4>
 8006fc6:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <_dtoa_r+0x648>)
 8006fc8:	f7f9 fb26 	bl	8000618 <__aeabi_dmul>
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4689      	mov	r9, r1
 8006fd0:	e7bd      	b.n	8006f4e <_dtoa_r+0x5b6>
 8006fd2:	bf00      	nop
 8006fd4:	08008b50 	.word	0x08008b50
 8006fd8:	08008b28 	.word	0x08008b28
 8006fdc:	3ff00000 	.word	0x3ff00000
 8006fe0:	40240000 	.word	0x40240000
 8006fe4:	401c0000 	.word	0x401c0000
 8006fe8:	40140000 	.word	0x40140000
 8006fec:	3fe00000 	.word	0x3fe00000
 8006ff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ff4:	9d00      	ldr	r5, [sp, #0]
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	f7f9 fc35 	bl	800086c <__aeabi_ddiv>
 8007002:	f7f9 fdb9 	bl	8000b78 <__aeabi_d2iz>
 8007006:	9001      	str	r0, [sp, #4]
 8007008:	f7f9 fa9c 	bl	8000544 <__aeabi_i2d>
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	f7f9 fb02 	bl	8000618 <__aeabi_dmul>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 f944 	bl	80002a8 <__aeabi_dsub>
 8007020:	9e01      	ldr	r6, [sp, #4]
 8007022:	9f04      	ldr	r7, [sp, #16]
 8007024:	3630      	adds	r6, #48	; 0x30
 8007026:	f805 6b01 	strb.w	r6, [r5], #1
 800702a:	9e00      	ldr	r6, [sp, #0]
 800702c:	1bae      	subs	r6, r5, r6
 800702e:	42b7      	cmp	r7, r6
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	d134      	bne.n	80070a0 <_dtoa_r+0x708>
 8007036:	f7f9 f939 	bl	80002ac <__adddf3>
 800703a:	4642      	mov	r2, r8
 800703c:	464b      	mov	r3, r9
 800703e:	4606      	mov	r6, r0
 8007040:	460f      	mov	r7, r1
 8007042:	f7f9 fd79 	bl	8000b38 <__aeabi_dcmpgt>
 8007046:	b9c8      	cbnz	r0, 800707c <_dtoa_r+0x6e4>
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	4630      	mov	r0, r6
 800704e:	4639      	mov	r1, r7
 8007050:	f7f9 fd4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007054:	b110      	cbz	r0, 800705c <_dtoa_r+0x6c4>
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	07db      	lsls	r3, r3, #31
 800705a:	d40f      	bmi.n	800707c <_dtoa_r+0x6e4>
 800705c:	4651      	mov	r1, sl
 800705e:	4620      	mov	r0, r4
 8007060:	f000 fbcc 	bl	80077fc <_Bfree>
 8007064:	2300      	movs	r3, #0
 8007066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007068:	702b      	strb	r3, [r5, #0]
 800706a:	f10b 0301 	add.w	r3, fp, #1
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007072:	2b00      	cmp	r3, #0
 8007074:	f43f ace2 	beq.w	8006a3c <_dtoa_r+0xa4>
 8007078:	601d      	str	r5, [r3, #0]
 800707a:	e4df      	b.n	8006a3c <_dtoa_r+0xa4>
 800707c:	465f      	mov	r7, fp
 800707e:	462b      	mov	r3, r5
 8007080:	461d      	mov	r5, r3
 8007082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007086:	2a39      	cmp	r2, #57	; 0x39
 8007088:	d106      	bne.n	8007098 <_dtoa_r+0x700>
 800708a:	9a00      	ldr	r2, [sp, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d1f7      	bne.n	8007080 <_dtoa_r+0x6e8>
 8007090:	9900      	ldr	r1, [sp, #0]
 8007092:	2230      	movs	r2, #48	; 0x30
 8007094:	3701      	adds	r7, #1
 8007096:	700a      	strb	r2, [r1, #0]
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	3201      	adds	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e790      	b.n	8006fc2 <_dtoa_r+0x62a>
 80070a0:	4ba3      	ldr	r3, [pc, #652]	; (8007330 <_dtoa_r+0x998>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	f7f9 fab8 	bl	8000618 <__aeabi_dmul>
 80070a8:	2200      	movs	r2, #0
 80070aa:	2300      	movs	r3, #0
 80070ac:	4606      	mov	r6, r0
 80070ae:	460f      	mov	r7, r1
 80070b0:	f7f9 fd1a 	bl	8000ae8 <__aeabi_dcmpeq>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d09e      	beq.n	8006ff6 <_dtoa_r+0x65e>
 80070b8:	e7d0      	b.n	800705c <_dtoa_r+0x6c4>
 80070ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070bc:	2a00      	cmp	r2, #0
 80070be:	f000 80ca 	beq.w	8007256 <_dtoa_r+0x8be>
 80070c2:	9a07      	ldr	r2, [sp, #28]
 80070c4:	2a01      	cmp	r2, #1
 80070c6:	f300 80ad 	bgt.w	8007224 <_dtoa_r+0x88c>
 80070ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070cc:	2a00      	cmp	r2, #0
 80070ce:	f000 80a5 	beq.w	800721c <_dtoa_r+0x884>
 80070d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070d6:	9e08      	ldr	r6, [sp, #32]
 80070d8:	9d05      	ldr	r5, [sp, #20]
 80070da:	9a05      	ldr	r2, [sp, #20]
 80070dc:	441a      	add	r2, r3
 80070de:	9205      	str	r2, [sp, #20]
 80070e0:	9a06      	ldr	r2, [sp, #24]
 80070e2:	2101      	movs	r1, #1
 80070e4:	441a      	add	r2, r3
 80070e6:	4620      	mov	r0, r4
 80070e8:	9206      	str	r2, [sp, #24]
 80070ea:	f000 fc3d 	bl	8007968 <__i2b>
 80070ee:	4607      	mov	r7, r0
 80070f0:	b165      	cbz	r5, 800710c <_dtoa_r+0x774>
 80070f2:	9b06      	ldr	r3, [sp, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	dd09      	ble.n	800710c <_dtoa_r+0x774>
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	9a05      	ldr	r2, [sp, #20]
 80070fc:	bfa8      	it	ge
 80070fe:	462b      	movge	r3, r5
 8007100:	1ad2      	subs	r2, r2, r3
 8007102:	9205      	str	r2, [sp, #20]
 8007104:	9a06      	ldr	r2, [sp, #24]
 8007106:	1aed      	subs	r5, r5, r3
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	9306      	str	r3, [sp, #24]
 800710c:	9b08      	ldr	r3, [sp, #32]
 800710e:	b1f3      	cbz	r3, 800714e <_dtoa_r+0x7b6>
 8007110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80a3 	beq.w	800725e <_dtoa_r+0x8c6>
 8007118:	2e00      	cmp	r6, #0
 800711a:	dd10      	ble.n	800713e <_dtoa_r+0x7a6>
 800711c:	4639      	mov	r1, r7
 800711e:	4632      	mov	r2, r6
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fce1 	bl	8007ae8 <__pow5mult>
 8007126:	4652      	mov	r2, sl
 8007128:	4601      	mov	r1, r0
 800712a:	4607      	mov	r7, r0
 800712c:	4620      	mov	r0, r4
 800712e:	f000 fc31 	bl	8007994 <__multiply>
 8007132:	4651      	mov	r1, sl
 8007134:	4680      	mov	r8, r0
 8007136:	4620      	mov	r0, r4
 8007138:	f000 fb60 	bl	80077fc <_Bfree>
 800713c:	46c2      	mov	sl, r8
 800713e:	9b08      	ldr	r3, [sp, #32]
 8007140:	1b9a      	subs	r2, r3, r6
 8007142:	d004      	beq.n	800714e <_dtoa_r+0x7b6>
 8007144:	4651      	mov	r1, sl
 8007146:	4620      	mov	r0, r4
 8007148:	f000 fcce 	bl	8007ae8 <__pow5mult>
 800714c:	4682      	mov	sl, r0
 800714e:	2101      	movs	r1, #1
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fc09 	bl	8007968 <__i2b>
 8007156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007158:	2b00      	cmp	r3, #0
 800715a:	4606      	mov	r6, r0
 800715c:	f340 8081 	ble.w	8007262 <_dtoa_r+0x8ca>
 8007160:	461a      	mov	r2, r3
 8007162:	4601      	mov	r1, r0
 8007164:	4620      	mov	r0, r4
 8007166:	f000 fcbf 	bl	8007ae8 <__pow5mult>
 800716a:	9b07      	ldr	r3, [sp, #28]
 800716c:	2b01      	cmp	r3, #1
 800716e:	4606      	mov	r6, r0
 8007170:	dd7a      	ble.n	8007268 <_dtoa_r+0x8d0>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	6933      	ldr	r3, [r6, #16]
 8007178:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800717c:	6918      	ldr	r0, [r3, #16]
 800717e:	f000 fba5 	bl	80078cc <__hi0bits>
 8007182:	f1c0 0020 	rsb	r0, r0, #32
 8007186:	9b06      	ldr	r3, [sp, #24]
 8007188:	4418      	add	r0, r3
 800718a:	f010 001f 	ands.w	r0, r0, #31
 800718e:	f000 8094 	beq.w	80072ba <_dtoa_r+0x922>
 8007192:	f1c0 0320 	rsb	r3, r0, #32
 8007196:	2b04      	cmp	r3, #4
 8007198:	f340 8085 	ble.w	80072a6 <_dtoa_r+0x90e>
 800719c:	9b05      	ldr	r3, [sp, #20]
 800719e:	f1c0 001c 	rsb	r0, r0, #28
 80071a2:	4403      	add	r3, r0
 80071a4:	9305      	str	r3, [sp, #20]
 80071a6:	9b06      	ldr	r3, [sp, #24]
 80071a8:	4403      	add	r3, r0
 80071aa:	4405      	add	r5, r0
 80071ac:	9306      	str	r3, [sp, #24]
 80071ae:	9b05      	ldr	r3, [sp, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dd05      	ble.n	80071c0 <_dtoa_r+0x828>
 80071b4:	4651      	mov	r1, sl
 80071b6:	461a      	mov	r2, r3
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fcef 	bl	8007b9c <__lshift>
 80071be:	4682      	mov	sl, r0
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dd05      	ble.n	80071d2 <_dtoa_r+0x83a>
 80071c6:	4631      	mov	r1, r6
 80071c8:	461a      	mov	r2, r3
 80071ca:	4620      	mov	r0, r4
 80071cc:	f000 fce6 	bl	8007b9c <__lshift>
 80071d0:	4606      	mov	r6, r0
 80071d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d072      	beq.n	80072be <_dtoa_r+0x926>
 80071d8:	4631      	mov	r1, r6
 80071da:	4650      	mov	r0, sl
 80071dc:	f000 fd4a 	bl	8007c74 <__mcmp>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	da6c      	bge.n	80072be <_dtoa_r+0x926>
 80071e4:	2300      	movs	r3, #0
 80071e6:	4651      	mov	r1, sl
 80071e8:	220a      	movs	r2, #10
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fb28 	bl	8007840 <__multadd>
 80071f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80071f6:	4682      	mov	sl, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 81b0 	beq.w	800755e <_dtoa_r+0xbc6>
 80071fe:	2300      	movs	r3, #0
 8007200:	4639      	mov	r1, r7
 8007202:	220a      	movs	r2, #10
 8007204:	4620      	mov	r0, r4
 8007206:	f000 fb1b 	bl	8007840 <__multadd>
 800720a:	9b01      	ldr	r3, [sp, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	4607      	mov	r7, r0
 8007210:	f300 8096 	bgt.w	8007340 <_dtoa_r+0x9a8>
 8007214:	9b07      	ldr	r3, [sp, #28]
 8007216:	2b02      	cmp	r3, #2
 8007218:	dc59      	bgt.n	80072ce <_dtoa_r+0x936>
 800721a:	e091      	b.n	8007340 <_dtoa_r+0x9a8>
 800721c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800721e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007222:	e758      	b.n	80070d6 <_dtoa_r+0x73e>
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	1e5e      	subs	r6, r3, #1
 8007228:	9b08      	ldr	r3, [sp, #32]
 800722a:	42b3      	cmp	r3, r6
 800722c:	bfbf      	itttt	lt
 800722e:	9b08      	ldrlt	r3, [sp, #32]
 8007230:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007232:	9608      	strlt	r6, [sp, #32]
 8007234:	1af3      	sublt	r3, r6, r3
 8007236:	bfb4      	ite	lt
 8007238:	18d2      	addlt	r2, r2, r3
 800723a:	1b9e      	subge	r6, r3, r6
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	bfbc      	itt	lt
 8007240:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007242:	2600      	movlt	r6, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	bfb7      	itett	lt
 8007248:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800724c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007250:	1a9d      	sublt	r5, r3, r2
 8007252:	2300      	movlt	r3, #0
 8007254:	e741      	b.n	80070da <_dtoa_r+0x742>
 8007256:	9e08      	ldr	r6, [sp, #32]
 8007258:	9d05      	ldr	r5, [sp, #20]
 800725a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800725c:	e748      	b.n	80070f0 <_dtoa_r+0x758>
 800725e:	9a08      	ldr	r2, [sp, #32]
 8007260:	e770      	b.n	8007144 <_dtoa_r+0x7ac>
 8007262:	9b07      	ldr	r3, [sp, #28]
 8007264:	2b01      	cmp	r3, #1
 8007266:	dc19      	bgt.n	800729c <_dtoa_r+0x904>
 8007268:	9b02      	ldr	r3, [sp, #8]
 800726a:	b9bb      	cbnz	r3, 800729c <_dtoa_r+0x904>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007272:	b99b      	cbnz	r3, 800729c <_dtoa_r+0x904>
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800727a:	0d1b      	lsrs	r3, r3, #20
 800727c:	051b      	lsls	r3, r3, #20
 800727e:	b183      	cbz	r3, 80072a2 <_dtoa_r+0x90a>
 8007280:	9b05      	ldr	r3, [sp, #20]
 8007282:	3301      	adds	r3, #1
 8007284:	9305      	str	r3, [sp, #20]
 8007286:	9b06      	ldr	r3, [sp, #24]
 8007288:	3301      	adds	r3, #1
 800728a:	9306      	str	r3, [sp, #24]
 800728c:	f04f 0801 	mov.w	r8, #1
 8007290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007292:	2b00      	cmp	r3, #0
 8007294:	f47f af6f 	bne.w	8007176 <_dtoa_r+0x7de>
 8007298:	2001      	movs	r0, #1
 800729a:	e774      	b.n	8007186 <_dtoa_r+0x7ee>
 800729c:	f04f 0800 	mov.w	r8, #0
 80072a0:	e7f6      	b.n	8007290 <_dtoa_r+0x8f8>
 80072a2:	4698      	mov	r8, r3
 80072a4:	e7f4      	b.n	8007290 <_dtoa_r+0x8f8>
 80072a6:	d082      	beq.n	80071ae <_dtoa_r+0x816>
 80072a8:	9a05      	ldr	r2, [sp, #20]
 80072aa:	331c      	adds	r3, #28
 80072ac:	441a      	add	r2, r3
 80072ae:	9205      	str	r2, [sp, #20]
 80072b0:	9a06      	ldr	r2, [sp, #24]
 80072b2:	441a      	add	r2, r3
 80072b4:	441d      	add	r5, r3
 80072b6:	9206      	str	r2, [sp, #24]
 80072b8:	e779      	b.n	80071ae <_dtoa_r+0x816>
 80072ba:	4603      	mov	r3, r0
 80072bc:	e7f4      	b.n	80072a8 <_dtoa_r+0x910>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	dc37      	bgt.n	8007334 <_dtoa_r+0x99c>
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	dd34      	ble.n	8007334 <_dtoa_r+0x99c>
 80072ca:	9b04      	ldr	r3, [sp, #16]
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	9b01      	ldr	r3, [sp, #4]
 80072d0:	b963      	cbnz	r3, 80072ec <_dtoa_r+0x954>
 80072d2:	4631      	mov	r1, r6
 80072d4:	2205      	movs	r2, #5
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 fab2 	bl	8007840 <__multadd>
 80072dc:	4601      	mov	r1, r0
 80072de:	4606      	mov	r6, r0
 80072e0:	4650      	mov	r0, sl
 80072e2:	f000 fcc7 	bl	8007c74 <__mcmp>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	f73f adbb 	bgt.w	8006e62 <_dtoa_r+0x4ca>
 80072ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ee:	9d00      	ldr	r5, [sp, #0]
 80072f0:	ea6f 0b03 	mvn.w	fp, r3
 80072f4:	f04f 0800 	mov.w	r8, #0
 80072f8:	4631      	mov	r1, r6
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fa7e 	bl	80077fc <_Bfree>
 8007300:	2f00      	cmp	r7, #0
 8007302:	f43f aeab 	beq.w	800705c <_dtoa_r+0x6c4>
 8007306:	f1b8 0f00 	cmp.w	r8, #0
 800730a:	d005      	beq.n	8007318 <_dtoa_r+0x980>
 800730c:	45b8      	cmp	r8, r7
 800730e:	d003      	beq.n	8007318 <_dtoa_r+0x980>
 8007310:	4641      	mov	r1, r8
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fa72 	bl	80077fc <_Bfree>
 8007318:	4639      	mov	r1, r7
 800731a:	4620      	mov	r0, r4
 800731c:	f000 fa6e 	bl	80077fc <_Bfree>
 8007320:	e69c      	b.n	800705c <_dtoa_r+0x6c4>
 8007322:	2600      	movs	r6, #0
 8007324:	4637      	mov	r7, r6
 8007326:	e7e1      	b.n	80072ec <_dtoa_r+0x954>
 8007328:	46bb      	mov	fp, r7
 800732a:	4637      	mov	r7, r6
 800732c:	e599      	b.n	8006e62 <_dtoa_r+0x4ca>
 800732e:	bf00      	nop
 8007330:	40240000 	.word	0x40240000
 8007334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 80c8 	beq.w	80074cc <_dtoa_r+0xb34>
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	2d00      	cmp	r5, #0
 8007342:	dd05      	ble.n	8007350 <_dtoa_r+0x9b8>
 8007344:	4639      	mov	r1, r7
 8007346:	462a      	mov	r2, r5
 8007348:	4620      	mov	r0, r4
 800734a:	f000 fc27 	bl	8007b9c <__lshift>
 800734e:	4607      	mov	r7, r0
 8007350:	f1b8 0f00 	cmp.w	r8, #0
 8007354:	d05b      	beq.n	800740e <_dtoa_r+0xa76>
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4620      	mov	r0, r4
 800735a:	f000 fa0f 	bl	800777c <_Balloc>
 800735e:	4605      	mov	r5, r0
 8007360:	b928      	cbnz	r0, 800736e <_dtoa_r+0x9d6>
 8007362:	4b83      	ldr	r3, [pc, #524]	; (8007570 <_dtoa_r+0xbd8>)
 8007364:	4602      	mov	r2, r0
 8007366:	f240 21ef 	movw	r1, #751	; 0x2ef
 800736a:	f7ff bb2e 	b.w	80069ca <_dtoa_r+0x32>
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	3202      	adds	r2, #2
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	f107 010c 	add.w	r1, r7, #12
 8007378:	300c      	adds	r0, #12
 800737a:	f000 ffab 	bl	80082d4 <memcpy>
 800737e:	2201      	movs	r2, #1
 8007380:	4629      	mov	r1, r5
 8007382:	4620      	mov	r0, r4
 8007384:	f000 fc0a 	bl	8007b9c <__lshift>
 8007388:	9b00      	ldr	r3, [sp, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007392:	4413      	add	r3, r2
 8007394:	9308      	str	r3, [sp, #32]
 8007396:	9b02      	ldr	r3, [sp, #8]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	46b8      	mov	r8, r7
 800739e:	9306      	str	r3, [sp, #24]
 80073a0:	4607      	mov	r7, r0
 80073a2:	9b04      	ldr	r3, [sp, #16]
 80073a4:	4631      	mov	r1, r6
 80073a6:	3b01      	subs	r3, #1
 80073a8:	4650      	mov	r0, sl
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	f7ff fa6b 	bl	8006886 <quorem>
 80073b0:	4641      	mov	r1, r8
 80073b2:	9002      	str	r0, [sp, #8]
 80073b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073b8:	4650      	mov	r0, sl
 80073ba:	f000 fc5b 	bl	8007c74 <__mcmp>
 80073be:	463a      	mov	r2, r7
 80073c0:	9005      	str	r0, [sp, #20]
 80073c2:	4631      	mov	r1, r6
 80073c4:	4620      	mov	r0, r4
 80073c6:	f000 fc71 	bl	8007cac <__mdiff>
 80073ca:	68c2      	ldr	r2, [r0, #12]
 80073cc:	4605      	mov	r5, r0
 80073ce:	bb02      	cbnz	r2, 8007412 <_dtoa_r+0xa7a>
 80073d0:	4601      	mov	r1, r0
 80073d2:	4650      	mov	r0, sl
 80073d4:	f000 fc4e 	bl	8007c74 <__mcmp>
 80073d8:	4602      	mov	r2, r0
 80073da:	4629      	mov	r1, r5
 80073dc:	4620      	mov	r0, r4
 80073de:	9209      	str	r2, [sp, #36]	; 0x24
 80073e0:	f000 fa0c 	bl	80077fc <_Bfree>
 80073e4:	9b07      	ldr	r3, [sp, #28]
 80073e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e8:	9d04      	ldr	r5, [sp, #16]
 80073ea:	ea43 0102 	orr.w	r1, r3, r2
 80073ee:	9b06      	ldr	r3, [sp, #24]
 80073f0:	4319      	orrs	r1, r3
 80073f2:	d110      	bne.n	8007416 <_dtoa_r+0xa7e>
 80073f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073f8:	d029      	beq.n	800744e <_dtoa_r+0xab6>
 80073fa:	9b05      	ldr	r3, [sp, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd02      	ble.n	8007406 <_dtoa_r+0xa6e>
 8007400:	9b02      	ldr	r3, [sp, #8]
 8007402:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	f883 9000 	strb.w	r9, [r3]
 800740c:	e774      	b.n	80072f8 <_dtoa_r+0x960>
 800740e:	4638      	mov	r0, r7
 8007410:	e7ba      	b.n	8007388 <_dtoa_r+0x9f0>
 8007412:	2201      	movs	r2, #1
 8007414:	e7e1      	b.n	80073da <_dtoa_r+0xa42>
 8007416:	9b05      	ldr	r3, [sp, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db04      	blt.n	8007426 <_dtoa_r+0xa8e>
 800741c:	9907      	ldr	r1, [sp, #28]
 800741e:	430b      	orrs	r3, r1
 8007420:	9906      	ldr	r1, [sp, #24]
 8007422:	430b      	orrs	r3, r1
 8007424:	d120      	bne.n	8007468 <_dtoa_r+0xad0>
 8007426:	2a00      	cmp	r2, #0
 8007428:	dded      	ble.n	8007406 <_dtoa_r+0xa6e>
 800742a:	4651      	mov	r1, sl
 800742c:	2201      	movs	r2, #1
 800742e:	4620      	mov	r0, r4
 8007430:	f000 fbb4 	bl	8007b9c <__lshift>
 8007434:	4631      	mov	r1, r6
 8007436:	4682      	mov	sl, r0
 8007438:	f000 fc1c 	bl	8007c74 <__mcmp>
 800743c:	2800      	cmp	r0, #0
 800743e:	dc03      	bgt.n	8007448 <_dtoa_r+0xab0>
 8007440:	d1e1      	bne.n	8007406 <_dtoa_r+0xa6e>
 8007442:	f019 0f01 	tst.w	r9, #1
 8007446:	d0de      	beq.n	8007406 <_dtoa_r+0xa6e>
 8007448:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800744c:	d1d8      	bne.n	8007400 <_dtoa_r+0xa68>
 800744e:	9a01      	ldr	r2, [sp, #4]
 8007450:	2339      	movs	r3, #57	; 0x39
 8007452:	7013      	strb	r3, [r2, #0]
 8007454:	462b      	mov	r3, r5
 8007456:	461d      	mov	r5, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800745e:	2a39      	cmp	r2, #57	; 0x39
 8007460:	d06c      	beq.n	800753c <_dtoa_r+0xba4>
 8007462:	3201      	adds	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	e747      	b.n	80072f8 <_dtoa_r+0x960>
 8007468:	2a00      	cmp	r2, #0
 800746a:	dd07      	ble.n	800747c <_dtoa_r+0xae4>
 800746c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007470:	d0ed      	beq.n	800744e <_dtoa_r+0xab6>
 8007472:	9a01      	ldr	r2, [sp, #4]
 8007474:	f109 0301 	add.w	r3, r9, #1
 8007478:	7013      	strb	r3, [r2, #0]
 800747a:	e73d      	b.n	80072f8 <_dtoa_r+0x960>
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	9a08      	ldr	r2, [sp, #32]
 8007480:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007484:	4293      	cmp	r3, r2
 8007486:	d043      	beq.n	8007510 <_dtoa_r+0xb78>
 8007488:	4651      	mov	r1, sl
 800748a:	2300      	movs	r3, #0
 800748c:	220a      	movs	r2, #10
 800748e:	4620      	mov	r0, r4
 8007490:	f000 f9d6 	bl	8007840 <__multadd>
 8007494:	45b8      	cmp	r8, r7
 8007496:	4682      	mov	sl, r0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	f04f 020a 	mov.w	r2, #10
 80074a0:	4641      	mov	r1, r8
 80074a2:	4620      	mov	r0, r4
 80074a4:	d107      	bne.n	80074b6 <_dtoa_r+0xb1e>
 80074a6:	f000 f9cb 	bl	8007840 <__multadd>
 80074aa:	4680      	mov	r8, r0
 80074ac:	4607      	mov	r7, r0
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	3301      	adds	r3, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	e775      	b.n	80073a2 <_dtoa_r+0xa0a>
 80074b6:	f000 f9c3 	bl	8007840 <__multadd>
 80074ba:	4639      	mov	r1, r7
 80074bc:	4680      	mov	r8, r0
 80074be:	2300      	movs	r3, #0
 80074c0:	220a      	movs	r2, #10
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 f9bc 	bl	8007840 <__multadd>
 80074c8:	4607      	mov	r7, r0
 80074ca:	e7f0      	b.n	80074ae <_dtoa_r+0xb16>
 80074cc:	9b04      	ldr	r3, [sp, #16]
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	9d00      	ldr	r5, [sp, #0]
 80074d2:	4631      	mov	r1, r6
 80074d4:	4650      	mov	r0, sl
 80074d6:	f7ff f9d6 	bl	8006886 <quorem>
 80074da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074de:	9b00      	ldr	r3, [sp, #0]
 80074e0:	f805 9b01 	strb.w	r9, [r5], #1
 80074e4:	1aea      	subs	r2, r5, r3
 80074e6:	9b01      	ldr	r3, [sp, #4]
 80074e8:	4293      	cmp	r3, r2
 80074ea:	dd07      	ble.n	80074fc <_dtoa_r+0xb64>
 80074ec:	4651      	mov	r1, sl
 80074ee:	2300      	movs	r3, #0
 80074f0:	220a      	movs	r2, #10
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 f9a4 	bl	8007840 <__multadd>
 80074f8:	4682      	mov	sl, r0
 80074fa:	e7ea      	b.n	80074d2 <_dtoa_r+0xb3a>
 80074fc:	9b01      	ldr	r3, [sp, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bfc8      	it	gt
 8007502:	461d      	movgt	r5, r3
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	bfd8      	it	le
 8007508:	2501      	movle	r5, #1
 800750a:	441d      	add	r5, r3
 800750c:	f04f 0800 	mov.w	r8, #0
 8007510:	4651      	mov	r1, sl
 8007512:	2201      	movs	r2, #1
 8007514:	4620      	mov	r0, r4
 8007516:	f000 fb41 	bl	8007b9c <__lshift>
 800751a:	4631      	mov	r1, r6
 800751c:	4682      	mov	sl, r0
 800751e:	f000 fba9 	bl	8007c74 <__mcmp>
 8007522:	2800      	cmp	r0, #0
 8007524:	dc96      	bgt.n	8007454 <_dtoa_r+0xabc>
 8007526:	d102      	bne.n	800752e <_dtoa_r+0xb96>
 8007528:	f019 0f01 	tst.w	r9, #1
 800752c:	d192      	bne.n	8007454 <_dtoa_r+0xabc>
 800752e:	462b      	mov	r3, r5
 8007530:	461d      	mov	r5, r3
 8007532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007536:	2a30      	cmp	r2, #48	; 0x30
 8007538:	d0fa      	beq.n	8007530 <_dtoa_r+0xb98>
 800753a:	e6dd      	b.n	80072f8 <_dtoa_r+0x960>
 800753c:	9a00      	ldr	r2, [sp, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d189      	bne.n	8007456 <_dtoa_r+0xabe>
 8007542:	f10b 0b01 	add.w	fp, fp, #1
 8007546:	2331      	movs	r3, #49	; 0x31
 8007548:	e796      	b.n	8007478 <_dtoa_r+0xae0>
 800754a:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <_dtoa_r+0xbdc>)
 800754c:	f7ff ba99 	b.w	8006a82 <_dtoa_r+0xea>
 8007550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007552:	2b00      	cmp	r3, #0
 8007554:	f47f aa6d 	bne.w	8006a32 <_dtoa_r+0x9a>
 8007558:	4b07      	ldr	r3, [pc, #28]	; (8007578 <_dtoa_r+0xbe0>)
 800755a:	f7ff ba92 	b.w	8006a82 <_dtoa_r+0xea>
 800755e:	9b01      	ldr	r3, [sp, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	dcb5      	bgt.n	80074d0 <_dtoa_r+0xb38>
 8007564:	9b07      	ldr	r3, [sp, #28]
 8007566:	2b02      	cmp	r3, #2
 8007568:	f73f aeb1 	bgt.w	80072ce <_dtoa_r+0x936>
 800756c:	e7b0      	b.n	80074d0 <_dtoa_r+0xb38>
 800756e:	bf00      	nop
 8007570:	08008abc 	.word	0x08008abc
 8007574:	08008a1c 	.word	0x08008a1c
 8007578:	08008a40 	.word	0x08008a40

0800757c <_free_r>:
 800757c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800757e:	2900      	cmp	r1, #0
 8007580:	d044      	beq.n	800760c <_free_r+0x90>
 8007582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007586:	9001      	str	r0, [sp, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f1a1 0404 	sub.w	r4, r1, #4
 800758e:	bfb8      	it	lt
 8007590:	18e4      	addlt	r4, r4, r3
 8007592:	f000 f8e7 	bl	8007764 <__malloc_lock>
 8007596:	4a1e      	ldr	r2, [pc, #120]	; (8007610 <_free_r+0x94>)
 8007598:	9801      	ldr	r0, [sp, #4]
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	b933      	cbnz	r3, 80075ac <_free_r+0x30>
 800759e:	6063      	str	r3, [r4, #4]
 80075a0:	6014      	str	r4, [r2, #0]
 80075a2:	b003      	add	sp, #12
 80075a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075a8:	f000 b8e2 	b.w	8007770 <__malloc_unlock>
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d908      	bls.n	80075c2 <_free_r+0x46>
 80075b0:	6825      	ldr	r5, [r4, #0]
 80075b2:	1961      	adds	r1, r4, r5
 80075b4:	428b      	cmp	r3, r1
 80075b6:	bf01      	itttt	eq
 80075b8:	6819      	ldreq	r1, [r3, #0]
 80075ba:	685b      	ldreq	r3, [r3, #4]
 80075bc:	1949      	addeq	r1, r1, r5
 80075be:	6021      	streq	r1, [r4, #0]
 80075c0:	e7ed      	b.n	800759e <_free_r+0x22>
 80075c2:	461a      	mov	r2, r3
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b10b      	cbz	r3, 80075cc <_free_r+0x50>
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d9fa      	bls.n	80075c2 <_free_r+0x46>
 80075cc:	6811      	ldr	r1, [r2, #0]
 80075ce:	1855      	adds	r5, r2, r1
 80075d0:	42a5      	cmp	r5, r4
 80075d2:	d10b      	bne.n	80075ec <_free_r+0x70>
 80075d4:	6824      	ldr	r4, [r4, #0]
 80075d6:	4421      	add	r1, r4
 80075d8:	1854      	adds	r4, r2, r1
 80075da:	42a3      	cmp	r3, r4
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	d1e0      	bne.n	80075a2 <_free_r+0x26>
 80075e0:	681c      	ldr	r4, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	6053      	str	r3, [r2, #4]
 80075e6:	440c      	add	r4, r1
 80075e8:	6014      	str	r4, [r2, #0]
 80075ea:	e7da      	b.n	80075a2 <_free_r+0x26>
 80075ec:	d902      	bls.n	80075f4 <_free_r+0x78>
 80075ee:	230c      	movs	r3, #12
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	e7d6      	b.n	80075a2 <_free_r+0x26>
 80075f4:	6825      	ldr	r5, [r4, #0]
 80075f6:	1961      	adds	r1, r4, r5
 80075f8:	428b      	cmp	r3, r1
 80075fa:	bf04      	itt	eq
 80075fc:	6819      	ldreq	r1, [r3, #0]
 80075fe:	685b      	ldreq	r3, [r3, #4]
 8007600:	6063      	str	r3, [r4, #4]
 8007602:	bf04      	itt	eq
 8007604:	1949      	addeq	r1, r1, r5
 8007606:	6021      	streq	r1, [r4, #0]
 8007608:	6054      	str	r4, [r2, #4]
 800760a:	e7ca      	b.n	80075a2 <_free_r+0x26>
 800760c:	b003      	add	sp, #12
 800760e:	bd30      	pop	{r4, r5, pc}
 8007610:	20000b5c 	.word	0x20000b5c

08007614 <malloc>:
 8007614:	4b02      	ldr	r3, [pc, #8]	; (8007620 <malloc+0xc>)
 8007616:	4601      	mov	r1, r0
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	f000 b823 	b.w	8007664 <_malloc_r>
 800761e:	bf00      	nop
 8007620:	20000064 	.word	0x20000064

08007624 <sbrk_aligned>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	4e0e      	ldr	r6, [pc, #56]	; (8007660 <sbrk_aligned+0x3c>)
 8007628:	460c      	mov	r4, r1
 800762a:	6831      	ldr	r1, [r6, #0]
 800762c:	4605      	mov	r5, r0
 800762e:	b911      	cbnz	r1, 8007636 <sbrk_aligned+0x12>
 8007630:	f000 fe40 	bl	80082b4 <_sbrk_r>
 8007634:	6030      	str	r0, [r6, #0]
 8007636:	4621      	mov	r1, r4
 8007638:	4628      	mov	r0, r5
 800763a:	f000 fe3b 	bl	80082b4 <_sbrk_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d00a      	beq.n	8007658 <sbrk_aligned+0x34>
 8007642:	1cc4      	adds	r4, r0, #3
 8007644:	f024 0403 	bic.w	r4, r4, #3
 8007648:	42a0      	cmp	r0, r4
 800764a:	d007      	beq.n	800765c <sbrk_aligned+0x38>
 800764c:	1a21      	subs	r1, r4, r0
 800764e:	4628      	mov	r0, r5
 8007650:	f000 fe30 	bl	80082b4 <_sbrk_r>
 8007654:	3001      	adds	r0, #1
 8007656:	d101      	bne.n	800765c <sbrk_aligned+0x38>
 8007658:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800765c:	4620      	mov	r0, r4
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	20000b60 	.word	0x20000b60

08007664 <_malloc_r>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	1ccd      	adds	r5, r1, #3
 800766a:	f025 0503 	bic.w	r5, r5, #3
 800766e:	3508      	adds	r5, #8
 8007670:	2d0c      	cmp	r5, #12
 8007672:	bf38      	it	cc
 8007674:	250c      	movcc	r5, #12
 8007676:	2d00      	cmp	r5, #0
 8007678:	4607      	mov	r7, r0
 800767a:	db01      	blt.n	8007680 <_malloc_r+0x1c>
 800767c:	42a9      	cmp	r1, r5
 800767e:	d905      	bls.n	800768c <_malloc_r+0x28>
 8007680:	230c      	movs	r3, #12
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	2600      	movs	r6, #0
 8007686:	4630      	mov	r0, r6
 8007688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007760 <_malloc_r+0xfc>
 8007690:	f000 f868 	bl	8007764 <__malloc_lock>
 8007694:	f8d8 3000 	ldr.w	r3, [r8]
 8007698:	461c      	mov	r4, r3
 800769a:	bb5c      	cbnz	r4, 80076f4 <_malloc_r+0x90>
 800769c:	4629      	mov	r1, r5
 800769e:	4638      	mov	r0, r7
 80076a0:	f7ff ffc0 	bl	8007624 <sbrk_aligned>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	4604      	mov	r4, r0
 80076a8:	d155      	bne.n	8007756 <_malloc_r+0xf2>
 80076aa:	f8d8 4000 	ldr.w	r4, [r8]
 80076ae:	4626      	mov	r6, r4
 80076b0:	2e00      	cmp	r6, #0
 80076b2:	d145      	bne.n	8007740 <_malloc_r+0xdc>
 80076b4:	2c00      	cmp	r4, #0
 80076b6:	d048      	beq.n	800774a <_malloc_r+0xe6>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	4631      	mov	r1, r6
 80076bc:	4638      	mov	r0, r7
 80076be:	eb04 0903 	add.w	r9, r4, r3
 80076c2:	f000 fdf7 	bl	80082b4 <_sbrk_r>
 80076c6:	4581      	cmp	r9, r0
 80076c8:	d13f      	bne.n	800774a <_malloc_r+0xe6>
 80076ca:	6821      	ldr	r1, [r4, #0]
 80076cc:	1a6d      	subs	r5, r5, r1
 80076ce:	4629      	mov	r1, r5
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ffa7 	bl	8007624 <sbrk_aligned>
 80076d6:	3001      	adds	r0, #1
 80076d8:	d037      	beq.n	800774a <_malloc_r+0xe6>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	442b      	add	r3, r5
 80076de:	6023      	str	r3, [r4, #0]
 80076e0:	f8d8 3000 	ldr.w	r3, [r8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d038      	beq.n	800775a <_malloc_r+0xf6>
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	42a2      	cmp	r2, r4
 80076ec:	d12b      	bne.n	8007746 <_malloc_r+0xe2>
 80076ee:	2200      	movs	r2, #0
 80076f0:	605a      	str	r2, [r3, #4]
 80076f2:	e00f      	b.n	8007714 <_malloc_r+0xb0>
 80076f4:	6822      	ldr	r2, [r4, #0]
 80076f6:	1b52      	subs	r2, r2, r5
 80076f8:	d41f      	bmi.n	800773a <_malloc_r+0xd6>
 80076fa:	2a0b      	cmp	r2, #11
 80076fc:	d917      	bls.n	800772e <_malloc_r+0xca>
 80076fe:	1961      	adds	r1, r4, r5
 8007700:	42a3      	cmp	r3, r4
 8007702:	6025      	str	r5, [r4, #0]
 8007704:	bf18      	it	ne
 8007706:	6059      	strne	r1, [r3, #4]
 8007708:	6863      	ldr	r3, [r4, #4]
 800770a:	bf08      	it	eq
 800770c:	f8c8 1000 	streq.w	r1, [r8]
 8007710:	5162      	str	r2, [r4, r5]
 8007712:	604b      	str	r3, [r1, #4]
 8007714:	4638      	mov	r0, r7
 8007716:	f104 060b 	add.w	r6, r4, #11
 800771a:	f000 f829 	bl	8007770 <__malloc_unlock>
 800771e:	f026 0607 	bic.w	r6, r6, #7
 8007722:	1d23      	adds	r3, r4, #4
 8007724:	1af2      	subs	r2, r6, r3
 8007726:	d0ae      	beq.n	8007686 <_malloc_r+0x22>
 8007728:	1b9b      	subs	r3, r3, r6
 800772a:	50a3      	str	r3, [r4, r2]
 800772c:	e7ab      	b.n	8007686 <_malloc_r+0x22>
 800772e:	42a3      	cmp	r3, r4
 8007730:	6862      	ldr	r2, [r4, #4]
 8007732:	d1dd      	bne.n	80076f0 <_malloc_r+0x8c>
 8007734:	f8c8 2000 	str.w	r2, [r8]
 8007738:	e7ec      	b.n	8007714 <_malloc_r+0xb0>
 800773a:	4623      	mov	r3, r4
 800773c:	6864      	ldr	r4, [r4, #4]
 800773e:	e7ac      	b.n	800769a <_malloc_r+0x36>
 8007740:	4634      	mov	r4, r6
 8007742:	6876      	ldr	r6, [r6, #4]
 8007744:	e7b4      	b.n	80076b0 <_malloc_r+0x4c>
 8007746:	4613      	mov	r3, r2
 8007748:	e7cc      	b.n	80076e4 <_malloc_r+0x80>
 800774a:	230c      	movs	r3, #12
 800774c:	603b      	str	r3, [r7, #0]
 800774e:	4638      	mov	r0, r7
 8007750:	f000 f80e 	bl	8007770 <__malloc_unlock>
 8007754:	e797      	b.n	8007686 <_malloc_r+0x22>
 8007756:	6025      	str	r5, [r4, #0]
 8007758:	e7dc      	b.n	8007714 <_malloc_r+0xb0>
 800775a:	605b      	str	r3, [r3, #4]
 800775c:	deff      	udf	#255	; 0xff
 800775e:	bf00      	nop
 8007760:	20000b5c 	.word	0x20000b5c

08007764 <__malloc_lock>:
 8007764:	4801      	ldr	r0, [pc, #4]	; (800776c <__malloc_lock+0x8>)
 8007766:	f7ff b88c 	b.w	8006882 <__retarget_lock_acquire_recursive>
 800776a:	bf00      	nop
 800776c:	20000b58 	.word	0x20000b58

08007770 <__malloc_unlock>:
 8007770:	4801      	ldr	r0, [pc, #4]	; (8007778 <__malloc_unlock+0x8>)
 8007772:	f7ff b887 	b.w	8006884 <__retarget_lock_release_recursive>
 8007776:	bf00      	nop
 8007778:	20000b58 	.word	0x20000b58

0800777c <_Balloc>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	69c6      	ldr	r6, [r0, #28]
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
 8007784:	b976      	cbnz	r6, 80077a4 <_Balloc+0x28>
 8007786:	2010      	movs	r0, #16
 8007788:	f7ff ff44 	bl	8007614 <malloc>
 800778c:	4602      	mov	r2, r0
 800778e:	61e0      	str	r0, [r4, #28]
 8007790:	b920      	cbnz	r0, 800779c <_Balloc+0x20>
 8007792:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <_Balloc+0x78>)
 8007794:	4818      	ldr	r0, [pc, #96]	; (80077f8 <_Balloc+0x7c>)
 8007796:	216b      	movs	r1, #107	; 0x6b
 8007798:	f000 fdaa 	bl	80082f0 <__assert_func>
 800779c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a0:	6006      	str	r6, [r0, #0]
 80077a2:	60c6      	str	r6, [r0, #12]
 80077a4:	69e6      	ldr	r6, [r4, #28]
 80077a6:	68f3      	ldr	r3, [r6, #12]
 80077a8:	b183      	cbz	r3, 80077cc <_Balloc+0x50>
 80077aa:	69e3      	ldr	r3, [r4, #28]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077b2:	b9b8      	cbnz	r0, 80077e4 <_Balloc+0x68>
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f605 	lsl.w	r6, r1, r5
 80077ba:	1d72      	adds	r2, r6, #5
 80077bc:	0092      	lsls	r2, r2, #2
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 fdb4 	bl	800832c <_calloc_r>
 80077c4:	b160      	cbz	r0, 80077e0 <_Balloc+0x64>
 80077c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ca:	e00e      	b.n	80077ea <_Balloc+0x6e>
 80077cc:	2221      	movs	r2, #33	; 0x21
 80077ce:	2104      	movs	r1, #4
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 fdab 	bl	800832c <_calloc_r>
 80077d6:	69e3      	ldr	r3, [r4, #28]
 80077d8:	60f0      	str	r0, [r6, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e4      	bne.n	80077aa <_Balloc+0x2e>
 80077e0:	2000      	movs	r0, #0
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	6802      	ldr	r2, [r0, #0]
 80077e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ea:	2300      	movs	r3, #0
 80077ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f0:	e7f7      	b.n	80077e2 <_Balloc+0x66>
 80077f2:	bf00      	nop
 80077f4:	08008a4d 	.word	0x08008a4d
 80077f8:	08008acd 	.word	0x08008acd

080077fc <_Bfree>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	69c6      	ldr	r6, [r0, #28]
 8007800:	4605      	mov	r5, r0
 8007802:	460c      	mov	r4, r1
 8007804:	b976      	cbnz	r6, 8007824 <_Bfree+0x28>
 8007806:	2010      	movs	r0, #16
 8007808:	f7ff ff04 	bl	8007614 <malloc>
 800780c:	4602      	mov	r2, r0
 800780e:	61e8      	str	r0, [r5, #28]
 8007810:	b920      	cbnz	r0, 800781c <_Bfree+0x20>
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <_Bfree+0x3c>)
 8007814:	4809      	ldr	r0, [pc, #36]	; (800783c <_Bfree+0x40>)
 8007816:	218f      	movs	r1, #143	; 0x8f
 8007818:	f000 fd6a 	bl	80082f0 <__assert_func>
 800781c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007820:	6006      	str	r6, [r0, #0]
 8007822:	60c6      	str	r6, [r0, #12]
 8007824:	b13c      	cbz	r4, 8007836 <_Bfree+0x3a>
 8007826:	69eb      	ldr	r3, [r5, #28]
 8007828:	6862      	ldr	r2, [r4, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007830:	6021      	str	r1, [r4, #0]
 8007832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	08008a4d 	.word	0x08008a4d
 800783c:	08008acd 	.word	0x08008acd

08007840 <__multadd>:
 8007840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	690d      	ldr	r5, [r1, #16]
 8007846:	4607      	mov	r7, r0
 8007848:	460c      	mov	r4, r1
 800784a:	461e      	mov	r6, r3
 800784c:	f101 0c14 	add.w	ip, r1, #20
 8007850:	2000      	movs	r0, #0
 8007852:	f8dc 3000 	ldr.w	r3, [ip]
 8007856:	b299      	uxth	r1, r3
 8007858:	fb02 6101 	mla	r1, r2, r1, r6
 800785c:	0c1e      	lsrs	r6, r3, #16
 800785e:	0c0b      	lsrs	r3, r1, #16
 8007860:	fb02 3306 	mla	r3, r2, r6, r3
 8007864:	b289      	uxth	r1, r1
 8007866:	3001      	adds	r0, #1
 8007868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800786c:	4285      	cmp	r5, r0
 800786e:	f84c 1b04 	str.w	r1, [ip], #4
 8007872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007876:	dcec      	bgt.n	8007852 <__multadd+0x12>
 8007878:	b30e      	cbz	r6, 80078be <__multadd+0x7e>
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	42ab      	cmp	r3, r5
 800787e:	dc19      	bgt.n	80078b4 <__multadd+0x74>
 8007880:	6861      	ldr	r1, [r4, #4]
 8007882:	4638      	mov	r0, r7
 8007884:	3101      	adds	r1, #1
 8007886:	f7ff ff79 	bl	800777c <_Balloc>
 800788a:	4680      	mov	r8, r0
 800788c:	b928      	cbnz	r0, 800789a <__multadd+0x5a>
 800788e:	4602      	mov	r2, r0
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <__multadd+0x84>)
 8007892:	480d      	ldr	r0, [pc, #52]	; (80078c8 <__multadd+0x88>)
 8007894:	21ba      	movs	r1, #186	; 0xba
 8007896:	f000 fd2b 	bl	80082f0 <__assert_func>
 800789a:	6922      	ldr	r2, [r4, #16]
 800789c:	3202      	adds	r2, #2
 800789e:	f104 010c 	add.w	r1, r4, #12
 80078a2:	0092      	lsls	r2, r2, #2
 80078a4:	300c      	adds	r0, #12
 80078a6:	f000 fd15 	bl	80082d4 <memcpy>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ffa5 	bl	80077fc <_Bfree>
 80078b2:	4644      	mov	r4, r8
 80078b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b8:	3501      	adds	r5, #1
 80078ba:	615e      	str	r6, [r3, #20]
 80078bc:	6125      	str	r5, [r4, #16]
 80078be:	4620      	mov	r0, r4
 80078c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c4:	08008abc 	.word	0x08008abc
 80078c8:	08008acd 	.word	0x08008acd

080078cc <__hi0bits>:
 80078cc:	0c03      	lsrs	r3, r0, #16
 80078ce:	041b      	lsls	r3, r3, #16
 80078d0:	b9d3      	cbnz	r3, 8007908 <__hi0bits+0x3c>
 80078d2:	0400      	lsls	r0, r0, #16
 80078d4:	2310      	movs	r3, #16
 80078d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078da:	bf04      	itt	eq
 80078dc:	0200      	lsleq	r0, r0, #8
 80078de:	3308      	addeq	r3, #8
 80078e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078e4:	bf04      	itt	eq
 80078e6:	0100      	lsleq	r0, r0, #4
 80078e8:	3304      	addeq	r3, #4
 80078ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078ee:	bf04      	itt	eq
 80078f0:	0080      	lsleq	r0, r0, #2
 80078f2:	3302      	addeq	r3, #2
 80078f4:	2800      	cmp	r0, #0
 80078f6:	db05      	blt.n	8007904 <__hi0bits+0x38>
 80078f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078fc:	f103 0301 	add.w	r3, r3, #1
 8007900:	bf08      	it	eq
 8007902:	2320      	moveq	r3, #32
 8007904:	4618      	mov	r0, r3
 8007906:	4770      	bx	lr
 8007908:	2300      	movs	r3, #0
 800790a:	e7e4      	b.n	80078d6 <__hi0bits+0xa>

0800790c <__lo0bits>:
 800790c:	6803      	ldr	r3, [r0, #0]
 800790e:	f013 0207 	ands.w	r2, r3, #7
 8007912:	d00c      	beq.n	800792e <__lo0bits+0x22>
 8007914:	07d9      	lsls	r1, r3, #31
 8007916:	d422      	bmi.n	800795e <__lo0bits+0x52>
 8007918:	079a      	lsls	r2, r3, #30
 800791a:	bf49      	itett	mi
 800791c:	085b      	lsrmi	r3, r3, #1
 800791e:	089b      	lsrpl	r3, r3, #2
 8007920:	6003      	strmi	r3, [r0, #0]
 8007922:	2201      	movmi	r2, #1
 8007924:	bf5c      	itt	pl
 8007926:	6003      	strpl	r3, [r0, #0]
 8007928:	2202      	movpl	r2, #2
 800792a:	4610      	mov	r0, r2
 800792c:	4770      	bx	lr
 800792e:	b299      	uxth	r1, r3
 8007930:	b909      	cbnz	r1, 8007936 <__lo0bits+0x2a>
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	2210      	movs	r2, #16
 8007936:	b2d9      	uxtb	r1, r3
 8007938:	b909      	cbnz	r1, 800793e <__lo0bits+0x32>
 800793a:	3208      	adds	r2, #8
 800793c:	0a1b      	lsrs	r3, r3, #8
 800793e:	0719      	lsls	r1, r3, #28
 8007940:	bf04      	itt	eq
 8007942:	091b      	lsreq	r3, r3, #4
 8007944:	3204      	addeq	r2, #4
 8007946:	0799      	lsls	r1, r3, #30
 8007948:	bf04      	itt	eq
 800794a:	089b      	lsreq	r3, r3, #2
 800794c:	3202      	addeq	r2, #2
 800794e:	07d9      	lsls	r1, r3, #31
 8007950:	d403      	bmi.n	800795a <__lo0bits+0x4e>
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	f102 0201 	add.w	r2, r2, #1
 8007958:	d003      	beq.n	8007962 <__lo0bits+0x56>
 800795a:	6003      	str	r3, [r0, #0]
 800795c:	e7e5      	b.n	800792a <__lo0bits+0x1e>
 800795e:	2200      	movs	r2, #0
 8007960:	e7e3      	b.n	800792a <__lo0bits+0x1e>
 8007962:	2220      	movs	r2, #32
 8007964:	e7e1      	b.n	800792a <__lo0bits+0x1e>
	...

08007968 <__i2b>:
 8007968:	b510      	push	{r4, lr}
 800796a:	460c      	mov	r4, r1
 800796c:	2101      	movs	r1, #1
 800796e:	f7ff ff05 	bl	800777c <_Balloc>
 8007972:	4602      	mov	r2, r0
 8007974:	b928      	cbnz	r0, 8007982 <__i2b+0x1a>
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <__i2b+0x24>)
 8007978:	4805      	ldr	r0, [pc, #20]	; (8007990 <__i2b+0x28>)
 800797a:	f240 1145 	movw	r1, #325	; 0x145
 800797e:	f000 fcb7 	bl	80082f0 <__assert_func>
 8007982:	2301      	movs	r3, #1
 8007984:	6144      	str	r4, [r0, #20]
 8007986:	6103      	str	r3, [r0, #16]
 8007988:	bd10      	pop	{r4, pc}
 800798a:	bf00      	nop
 800798c:	08008abc 	.word	0x08008abc
 8007990:	08008acd 	.word	0x08008acd

08007994 <__multiply>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	4691      	mov	r9, r2
 800799a:	690a      	ldr	r2, [r1, #16]
 800799c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	bfb8      	it	lt
 80079a4:	460b      	movlt	r3, r1
 80079a6:	460c      	mov	r4, r1
 80079a8:	bfbc      	itt	lt
 80079aa:	464c      	movlt	r4, r9
 80079ac:	4699      	movlt	r9, r3
 80079ae:	6927      	ldr	r7, [r4, #16]
 80079b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	6861      	ldr	r1, [r4, #4]
 80079b8:	eb07 060a 	add.w	r6, r7, sl
 80079bc:	42b3      	cmp	r3, r6
 80079be:	b085      	sub	sp, #20
 80079c0:	bfb8      	it	lt
 80079c2:	3101      	addlt	r1, #1
 80079c4:	f7ff feda 	bl	800777c <_Balloc>
 80079c8:	b930      	cbnz	r0, 80079d8 <__multiply+0x44>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4b44      	ldr	r3, [pc, #272]	; (8007ae0 <__multiply+0x14c>)
 80079ce:	4845      	ldr	r0, [pc, #276]	; (8007ae4 <__multiply+0x150>)
 80079d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079d4:	f000 fc8c 	bl	80082f0 <__assert_func>
 80079d8:	f100 0514 	add.w	r5, r0, #20
 80079dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079e0:	462b      	mov	r3, r5
 80079e2:	2200      	movs	r2, #0
 80079e4:	4543      	cmp	r3, r8
 80079e6:	d321      	bcc.n	8007a2c <__multiply+0x98>
 80079e8:	f104 0314 	add.w	r3, r4, #20
 80079ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079f0:	f109 0314 	add.w	r3, r9, #20
 80079f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	1b3a      	subs	r2, r7, r4
 80079fc:	3a15      	subs	r2, #21
 80079fe:	f022 0203 	bic.w	r2, r2, #3
 8007a02:	3204      	adds	r2, #4
 8007a04:	f104 0115 	add.w	r1, r4, #21
 8007a08:	428f      	cmp	r7, r1
 8007a0a:	bf38      	it	cc
 8007a0c:	2204      	movcc	r2, #4
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	9a02      	ldr	r2, [sp, #8]
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d80c      	bhi.n	8007a32 <__multiply+0x9e>
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	dd03      	ble.n	8007a24 <__multiply+0x90>
 8007a1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d05b      	beq.n	8007adc <__multiply+0x148>
 8007a24:	6106      	str	r6, [r0, #16]
 8007a26:	b005      	add	sp, #20
 8007a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2c:	f843 2b04 	str.w	r2, [r3], #4
 8007a30:	e7d8      	b.n	80079e4 <__multiply+0x50>
 8007a32:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a36:	f1ba 0f00 	cmp.w	sl, #0
 8007a3a:	d024      	beq.n	8007a86 <__multiply+0xf2>
 8007a3c:	f104 0e14 	add.w	lr, r4, #20
 8007a40:	46a9      	mov	r9, r5
 8007a42:	f04f 0c00 	mov.w	ip, #0
 8007a46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a4a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a4e:	fa1f fb82 	uxth.w	fp, r2
 8007a52:	b289      	uxth	r1, r1
 8007a54:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a60:	4461      	add	r1, ip
 8007a62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a66:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a6e:	b289      	uxth	r1, r1
 8007a70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a74:	4577      	cmp	r7, lr
 8007a76:	f849 1b04 	str.w	r1, [r9], #4
 8007a7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a7e:	d8e2      	bhi.n	8007a46 <__multiply+0xb2>
 8007a80:	9a01      	ldr	r2, [sp, #4]
 8007a82:	f845 c002 	str.w	ip, [r5, r2]
 8007a86:	9a03      	ldr	r2, [sp, #12]
 8007a88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	f1b9 0f00 	cmp.w	r9, #0
 8007a92:	d021      	beq.n	8007ad8 <__multiply+0x144>
 8007a94:	6829      	ldr	r1, [r5, #0]
 8007a96:	f104 0c14 	add.w	ip, r4, #20
 8007a9a:	46ae      	mov	lr, r5
 8007a9c:	f04f 0a00 	mov.w	sl, #0
 8007aa0:	f8bc b000 	ldrh.w	fp, [ip]
 8007aa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007aa8:	fb09 220b 	mla	r2, r9, fp, r2
 8007aac:	4452      	add	r2, sl
 8007aae:	b289      	uxth	r1, r1
 8007ab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ab4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ab8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007abc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ac0:	f8be 1000 	ldrh.w	r1, [lr]
 8007ac4:	fb09 110a 	mla	r1, r9, sl, r1
 8007ac8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007acc:	4567      	cmp	r7, ip
 8007ace:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ad2:	d8e5      	bhi.n	8007aa0 <__multiply+0x10c>
 8007ad4:	9a01      	ldr	r2, [sp, #4]
 8007ad6:	50a9      	str	r1, [r5, r2]
 8007ad8:	3504      	adds	r5, #4
 8007ada:	e799      	b.n	8007a10 <__multiply+0x7c>
 8007adc:	3e01      	subs	r6, #1
 8007ade:	e79b      	b.n	8007a18 <__multiply+0x84>
 8007ae0:	08008abc 	.word	0x08008abc
 8007ae4:	08008acd 	.word	0x08008acd

08007ae8 <__pow5mult>:
 8007ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aec:	4615      	mov	r5, r2
 8007aee:	f012 0203 	ands.w	r2, r2, #3
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	d007      	beq.n	8007b08 <__pow5mult+0x20>
 8007af8:	4c25      	ldr	r4, [pc, #148]	; (8007b90 <__pow5mult+0xa8>)
 8007afa:	3a01      	subs	r2, #1
 8007afc:	2300      	movs	r3, #0
 8007afe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b02:	f7ff fe9d 	bl	8007840 <__multadd>
 8007b06:	4607      	mov	r7, r0
 8007b08:	10ad      	asrs	r5, r5, #2
 8007b0a:	d03d      	beq.n	8007b88 <__pow5mult+0xa0>
 8007b0c:	69f4      	ldr	r4, [r6, #28]
 8007b0e:	b97c      	cbnz	r4, 8007b30 <__pow5mult+0x48>
 8007b10:	2010      	movs	r0, #16
 8007b12:	f7ff fd7f 	bl	8007614 <malloc>
 8007b16:	4602      	mov	r2, r0
 8007b18:	61f0      	str	r0, [r6, #28]
 8007b1a:	b928      	cbnz	r0, 8007b28 <__pow5mult+0x40>
 8007b1c:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <__pow5mult+0xac>)
 8007b1e:	481e      	ldr	r0, [pc, #120]	; (8007b98 <__pow5mult+0xb0>)
 8007b20:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b24:	f000 fbe4 	bl	80082f0 <__assert_func>
 8007b28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b2c:	6004      	str	r4, [r0, #0]
 8007b2e:	60c4      	str	r4, [r0, #12]
 8007b30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b38:	b94c      	cbnz	r4, 8007b4e <__pow5mult+0x66>
 8007b3a:	f240 2171 	movw	r1, #625	; 0x271
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f7ff ff12 	bl	8007968 <__i2b>
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	6003      	str	r3, [r0, #0]
 8007b4e:	f04f 0900 	mov.w	r9, #0
 8007b52:	07eb      	lsls	r3, r5, #31
 8007b54:	d50a      	bpl.n	8007b6c <__pow5mult+0x84>
 8007b56:	4639      	mov	r1, r7
 8007b58:	4622      	mov	r2, r4
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7ff ff1a 	bl	8007994 <__multiply>
 8007b60:	4639      	mov	r1, r7
 8007b62:	4680      	mov	r8, r0
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7ff fe49 	bl	80077fc <_Bfree>
 8007b6a:	4647      	mov	r7, r8
 8007b6c:	106d      	asrs	r5, r5, #1
 8007b6e:	d00b      	beq.n	8007b88 <__pow5mult+0xa0>
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	b938      	cbnz	r0, 8007b84 <__pow5mult+0x9c>
 8007b74:	4622      	mov	r2, r4
 8007b76:	4621      	mov	r1, r4
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff ff0b 	bl	8007994 <__multiply>
 8007b7e:	6020      	str	r0, [r4, #0]
 8007b80:	f8c0 9000 	str.w	r9, [r0]
 8007b84:	4604      	mov	r4, r0
 8007b86:	e7e4      	b.n	8007b52 <__pow5mult+0x6a>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8e:	bf00      	nop
 8007b90:	08008c18 	.word	0x08008c18
 8007b94:	08008a4d 	.word	0x08008a4d
 8007b98:	08008acd 	.word	0x08008acd

08007b9c <__lshift>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	6849      	ldr	r1, [r1, #4]
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007baa:	68a3      	ldr	r3, [r4, #8]
 8007bac:	4607      	mov	r7, r0
 8007bae:	4691      	mov	r9, r2
 8007bb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bb4:	f108 0601 	add.w	r6, r8, #1
 8007bb8:	42b3      	cmp	r3, r6
 8007bba:	db0b      	blt.n	8007bd4 <__lshift+0x38>
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f7ff fddd 	bl	800777c <_Balloc>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	b948      	cbnz	r0, 8007bda <__lshift+0x3e>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	4b28      	ldr	r3, [pc, #160]	; (8007c6c <__lshift+0xd0>)
 8007bca:	4829      	ldr	r0, [pc, #164]	; (8007c70 <__lshift+0xd4>)
 8007bcc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007bd0:	f000 fb8e 	bl	80082f0 <__assert_func>
 8007bd4:	3101      	adds	r1, #1
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	e7ee      	b.n	8007bb8 <__lshift+0x1c>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f100 0114 	add.w	r1, r0, #20
 8007be0:	f100 0210 	add.w	r2, r0, #16
 8007be4:	4618      	mov	r0, r3
 8007be6:	4553      	cmp	r3, sl
 8007be8:	db33      	blt.n	8007c52 <__lshift+0xb6>
 8007bea:	6920      	ldr	r0, [r4, #16]
 8007bec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bf0:	f104 0314 	add.w	r3, r4, #20
 8007bf4:	f019 091f 	ands.w	r9, r9, #31
 8007bf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c00:	d02b      	beq.n	8007c5a <__lshift+0xbe>
 8007c02:	f1c9 0e20 	rsb	lr, r9, #32
 8007c06:	468a      	mov	sl, r1
 8007c08:	2200      	movs	r2, #0
 8007c0a:	6818      	ldr	r0, [r3, #0]
 8007c0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007c10:	4310      	orrs	r0, r2
 8007c12:	f84a 0b04 	str.w	r0, [sl], #4
 8007c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1a:	459c      	cmp	ip, r3
 8007c1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c20:	d8f3      	bhi.n	8007c0a <__lshift+0x6e>
 8007c22:	ebac 0304 	sub.w	r3, ip, r4
 8007c26:	3b15      	subs	r3, #21
 8007c28:	f023 0303 	bic.w	r3, r3, #3
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	f104 0015 	add.w	r0, r4, #21
 8007c32:	4584      	cmp	ip, r0
 8007c34:	bf38      	it	cc
 8007c36:	2304      	movcc	r3, #4
 8007c38:	50ca      	str	r2, [r1, r3]
 8007c3a:	b10a      	cbz	r2, 8007c40 <__lshift+0xa4>
 8007c3c:	f108 0602 	add.w	r6, r8, #2
 8007c40:	3e01      	subs	r6, #1
 8007c42:	4638      	mov	r0, r7
 8007c44:	612e      	str	r6, [r5, #16]
 8007c46:	4621      	mov	r1, r4
 8007c48:	f7ff fdd8 	bl	80077fc <_Bfree>
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c56:	3301      	adds	r3, #1
 8007c58:	e7c5      	b.n	8007be6 <__lshift+0x4a>
 8007c5a:	3904      	subs	r1, #4
 8007c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c60:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c64:	459c      	cmp	ip, r3
 8007c66:	d8f9      	bhi.n	8007c5c <__lshift+0xc0>
 8007c68:	e7ea      	b.n	8007c40 <__lshift+0xa4>
 8007c6a:	bf00      	nop
 8007c6c:	08008abc 	.word	0x08008abc
 8007c70:	08008acd 	.word	0x08008acd

08007c74 <__mcmp>:
 8007c74:	b530      	push	{r4, r5, lr}
 8007c76:	6902      	ldr	r2, [r0, #16]
 8007c78:	690c      	ldr	r4, [r1, #16]
 8007c7a:	1b12      	subs	r2, r2, r4
 8007c7c:	d10e      	bne.n	8007c9c <__mcmp+0x28>
 8007c7e:	f100 0314 	add.w	r3, r0, #20
 8007c82:	3114      	adds	r1, #20
 8007c84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c94:	42a5      	cmp	r5, r4
 8007c96:	d003      	beq.n	8007ca0 <__mcmp+0x2c>
 8007c98:	d305      	bcc.n	8007ca6 <__mcmp+0x32>
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	bd30      	pop	{r4, r5, pc}
 8007ca0:	4283      	cmp	r3, r0
 8007ca2:	d3f3      	bcc.n	8007c8c <__mcmp+0x18>
 8007ca4:	e7fa      	b.n	8007c9c <__mcmp+0x28>
 8007ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007caa:	e7f7      	b.n	8007c9c <__mcmp+0x28>

08007cac <__mdiff>:
 8007cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4690      	mov	r8, r2
 8007cba:	f7ff ffdb 	bl	8007c74 <__mcmp>
 8007cbe:	1e05      	subs	r5, r0, #0
 8007cc0:	d110      	bne.n	8007ce4 <__mdiff+0x38>
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f7ff fd59 	bl	800777c <_Balloc>
 8007cca:	b930      	cbnz	r0, 8007cda <__mdiff+0x2e>
 8007ccc:	4b3a      	ldr	r3, [pc, #232]	; (8007db8 <__mdiff+0x10c>)
 8007cce:	4602      	mov	r2, r0
 8007cd0:	f240 2137 	movw	r1, #567	; 0x237
 8007cd4:	4839      	ldr	r0, [pc, #228]	; (8007dbc <__mdiff+0x110>)
 8007cd6:	f000 fb0b 	bl	80082f0 <__assert_func>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	bfa4      	itt	ge
 8007ce6:	4643      	movge	r3, r8
 8007ce8:	46a0      	movge	r8, r4
 8007cea:	4630      	mov	r0, r6
 8007cec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cf0:	bfa6      	itte	ge
 8007cf2:	461c      	movge	r4, r3
 8007cf4:	2500      	movge	r5, #0
 8007cf6:	2501      	movlt	r5, #1
 8007cf8:	f7ff fd40 	bl	800777c <_Balloc>
 8007cfc:	b920      	cbnz	r0, 8007d08 <__mdiff+0x5c>
 8007cfe:	4b2e      	ldr	r3, [pc, #184]	; (8007db8 <__mdiff+0x10c>)
 8007d00:	4602      	mov	r2, r0
 8007d02:	f240 2145 	movw	r1, #581	; 0x245
 8007d06:	e7e5      	b.n	8007cd4 <__mdiff+0x28>
 8007d08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d0c:	6926      	ldr	r6, [r4, #16]
 8007d0e:	60c5      	str	r5, [r0, #12]
 8007d10:	f104 0914 	add.w	r9, r4, #20
 8007d14:	f108 0514 	add.w	r5, r8, #20
 8007d18:	f100 0e14 	add.w	lr, r0, #20
 8007d1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d24:	f108 0210 	add.w	r2, r8, #16
 8007d28:	46f2      	mov	sl, lr
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d34:	fa11 f88b 	uxtah	r8, r1, fp
 8007d38:	b299      	uxth	r1, r3
 8007d3a:	0c1b      	lsrs	r3, r3, #16
 8007d3c:	eba8 0801 	sub.w	r8, r8, r1
 8007d40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d48:	fa1f f888 	uxth.w	r8, r8
 8007d4c:	1419      	asrs	r1, r3, #16
 8007d4e:	454e      	cmp	r6, r9
 8007d50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d54:	f84a 3b04 	str.w	r3, [sl], #4
 8007d58:	d8e8      	bhi.n	8007d2c <__mdiff+0x80>
 8007d5a:	1b33      	subs	r3, r6, r4
 8007d5c:	3b15      	subs	r3, #21
 8007d5e:	f023 0303 	bic.w	r3, r3, #3
 8007d62:	3304      	adds	r3, #4
 8007d64:	3415      	adds	r4, #21
 8007d66:	42a6      	cmp	r6, r4
 8007d68:	bf38      	it	cc
 8007d6a:	2304      	movcc	r3, #4
 8007d6c:	441d      	add	r5, r3
 8007d6e:	4473      	add	r3, lr
 8007d70:	469e      	mov	lr, r3
 8007d72:	462e      	mov	r6, r5
 8007d74:	4566      	cmp	r6, ip
 8007d76:	d30e      	bcc.n	8007d96 <__mdiff+0xea>
 8007d78:	f10c 0203 	add.w	r2, ip, #3
 8007d7c:	1b52      	subs	r2, r2, r5
 8007d7e:	f022 0203 	bic.w	r2, r2, #3
 8007d82:	3d03      	subs	r5, #3
 8007d84:	45ac      	cmp	ip, r5
 8007d86:	bf38      	it	cc
 8007d88:	2200      	movcc	r2, #0
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d90:	b17a      	cbz	r2, 8007db2 <__mdiff+0x106>
 8007d92:	6107      	str	r7, [r0, #16]
 8007d94:	e7a4      	b.n	8007ce0 <__mdiff+0x34>
 8007d96:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d9a:	fa11 f288 	uxtah	r2, r1, r8
 8007d9e:	1414      	asrs	r4, r2, #16
 8007da0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007da4:	b292      	uxth	r2, r2
 8007da6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007daa:	f84e 2b04 	str.w	r2, [lr], #4
 8007dae:	1421      	asrs	r1, r4, #16
 8007db0:	e7e0      	b.n	8007d74 <__mdiff+0xc8>
 8007db2:	3f01      	subs	r7, #1
 8007db4:	e7ea      	b.n	8007d8c <__mdiff+0xe0>
 8007db6:	bf00      	nop
 8007db8:	08008abc 	.word	0x08008abc
 8007dbc:	08008acd 	.word	0x08008acd

08007dc0 <__d2b>:
 8007dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	ec59 8b10 	vmov	r8, r9, d0
 8007dcc:	4616      	mov	r6, r2
 8007dce:	f7ff fcd5 	bl	800777c <_Balloc>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	b930      	cbnz	r0, 8007de4 <__d2b+0x24>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	4b24      	ldr	r3, [pc, #144]	; (8007e6c <__d2b+0xac>)
 8007dda:	4825      	ldr	r0, [pc, #148]	; (8007e70 <__d2b+0xb0>)
 8007ddc:	f240 310f 	movw	r1, #783	; 0x30f
 8007de0:	f000 fa86 	bl	80082f0 <__assert_func>
 8007de4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dec:	bb2d      	cbnz	r5, 8007e3a <__d2b+0x7a>
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	f1b8 0300 	subs.w	r3, r8, #0
 8007df4:	d026      	beq.n	8007e44 <__d2b+0x84>
 8007df6:	4668      	mov	r0, sp
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	f7ff fd87 	bl	800790c <__lo0bits>
 8007dfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e02:	b1e8      	cbz	r0, 8007e40 <__d2b+0x80>
 8007e04:	f1c0 0320 	rsb	r3, r0, #32
 8007e08:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	40c2      	lsrs	r2, r0
 8007e10:	6163      	str	r3, [r4, #20]
 8007e12:	9201      	str	r2, [sp, #4]
 8007e14:	9b01      	ldr	r3, [sp, #4]
 8007e16:	61a3      	str	r3, [r4, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bf14      	ite	ne
 8007e1c:	2202      	movne	r2, #2
 8007e1e:	2201      	moveq	r2, #1
 8007e20:	6122      	str	r2, [r4, #16]
 8007e22:	b1bd      	cbz	r5, 8007e54 <__d2b+0x94>
 8007e24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e28:	4405      	add	r5, r0
 8007e2a:	603d      	str	r5, [r7, #0]
 8007e2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e30:	6030      	str	r0, [r6, #0]
 8007e32:	4620      	mov	r0, r4
 8007e34:	b003      	add	sp, #12
 8007e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e3e:	e7d6      	b.n	8007dee <__d2b+0x2e>
 8007e40:	6161      	str	r1, [r4, #20]
 8007e42:	e7e7      	b.n	8007e14 <__d2b+0x54>
 8007e44:	a801      	add	r0, sp, #4
 8007e46:	f7ff fd61 	bl	800790c <__lo0bits>
 8007e4a:	9b01      	ldr	r3, [sp, #4]
 8007e4c:	6163      	str	r3, [r4, #20]
 8007e4e:	3020      	adds	r0, #32
 8007e50:	2201      	movs	r2, #1
 8007e52:	e7e5      	b.n	8007e20 <__d2b+0x60>
 8007e54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e5c:	6038      	str	r0, [r7, #0]
 8007e5e:	6918      	ldr	r0, [r3, #16]
 8007e60:	f7ff fd34 	bl	80078cc <__hi0bits>
 8007e64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e68:	e7e2      	b.n	8007e30 <__d2b+0x70>
 8007e6a:	bf00      	nop
 8007e6c:	08008abc 	.word	0x08008abc
 8007e70:	08008acd 	.word	0x08008acd

08007e74 <__ssputs_r>:
 8007e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	688e      	ldr	r6, [r1, #8]
 8007e7a:	461f      	mov	r7, r3
 8007e7c:	42be      	cmp	r6, r7
 8007e7e:	680b      	ldr	r3, [r1, #0]
 8007e80:	4682      	mov	sl, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	4690      	mov	r8, r2
 8007e86:	d82c      	bhi.n	8007ee2 <__ssputs_r+0x6e>
 8007e88:	898a      	ldrh	r2, [r1, #12]
 8007e8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e8e:	d026      	beq.n	8007ede <__ssputs_r+0x6a>
 8007e90:	6965      	ldr	r5, [r4, #20]
 8007e92:	6909      	ldr	r1, [r1, #16]
 8007e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e98:	eba3 0901 	sub.w	r9, r3, r1
 8007e9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ea0:	1c7b      	adds	r3, r7, #1
 8007ea2:	444b      	add	r3, r9
 8007ea4:	106d      	asrs	r5, r5, #1
 8007ea6:	429d      	cmp	r5, r3
 8007ea8:	bf38      	it	cc
 8007eaa:	461d      	movcc	r5, r3
 8007eac:	0553      	lsls	r3, r2, #21
 8007eae:	d527      	bpl.n	8007f00 <__ssputs_r+0x8c>
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7ff fbd7 	bl	8007664 <_malloc_r>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	b360      	cbz	r0, 8007f14 <__ssputs_r+0xa0>
 8007eba:	6921      	ldr	r1, [r4, #16]
 8007ebc:	464a      	mov	r2, r9
 8007ebe:	f000 fa09 	bl	80082d4 <memcpy>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	6126      	str	r6, [r4, #16]
 8007ed0:	6165      	str	r5, [r4, #20]
 8007ed2:	444e      	add	r6, r9
 8007ed4:	eba5 0509 	sub.w	r5, r5, r9
 8007ed8:	6026      	str	r6, [r4, #0]
 8007eda:	60a5      	str	r5, [r4, #8]
 8007edc:	463e      	mov	r6, r7
 8007ede:	42be      	cmp	r6, r7
 8007ee0:	d900      	bls.n	8007ee4 <__ssputs_r+0x70>
 8007ee2:	463e      	mov	r6, r7
 8007ee4:	6820      	ldr	r0, [r4, #0]
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	4641      	mov	r1, r8
 8007eea:	f000 f9c9 	bl	8008280 <memmove>
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	1b9b      	subs	r3, r3, r6
 8007ef2:	60a3      	str	r3, [r4, #8]
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	4433      	add	r3, r6
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	2000      	movs	r0, #0
 8007efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f00:	462a      	mov	r2, r5
 8007f02:	f000 fa3b 	bl	800837c <_realloc_r>
 8007f06:	4606      	mov	r6, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d1e0      	bne.n	8007ece <__ssputs_r+0x5a>
 8007f0c:	6921      	ldr	r1, [r4, #16]
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f7ff fb34 	bl	800757c <_free_r>
 8007f14:	230c      	movs	r3, #12
 8007f16:	f8ca 3000 	str.w	r3, [sl]
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f26:	e7e9      	b.n	8007efc <__ssputs_r+0x88>

08007f28 <_svfiprintf_r>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	898b      	ldrh	r3, [r1, #12]
 8007f30:	061b      	lsls	r3, r3, #24
 8007f32:	b09d      	sub	sp, #116	; 0x74
 8007f34:	4607      	mov	r7, r0
 8007f36:	460d      	mov	r5, r1
 8007f38:	4614      	mov	r4, r2
 8007f3a:	d50e      	bpl.n	8007f5a <_svfiprintf_r+0x32>
 8007f3c:	690b      	ldr	r3, [r1, #16]
 8007f3e:	b963      	cbnz	r3, 8007f5a <_svfiprintf_r+0x32>
 8007f40:	2140      	movs	r1, #64	; 0x40
 8007f42:	f7ff fb8f 	bl	8007664 <_malloc_r>
 8007f46:	6028      	str	r0, [r5, #0]
 8007f48:	6128      	str	r0, [r5, #16]
 8007f4a:	b920      	cbnz	r0, 8007f56 <_svfiprintf_r+0x2e>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f54:	e0d0      	b.n	80080f8 <_svfiprintf_r+0x1d0>
 8007f56:	2340      	movs	r3, #64	; 0x40
 8007f58:	616b      	str	r3, [r5, #20]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5e:	2320      	movs	r3, #32
 8007f60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f64:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f68:	2330      	movs	r3, #48	; 0x30
 8007f6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008110 <_svfiprintf_r+0x1e8>
 8007f6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f72:	f04f 0901 	mov.w	r9, #1
 8007f76:	4623      	mov	r3, r4
 8007f78:	469a      	mov	sl, r3
 8007f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f7e:	b10a      	cbz	r2, 8007f84 <_svfiprintf_r+0x5c>
 8007f80:	2a25      	cmp	r2, #37	; 0x25
 8007f82:	d1f9      	bne.n	8007f78 <_svfiprintf_r+0x50>
 8007f84:	ebba 0b04 	subs.w	fp, sl, r4
 8007f88:	d00b      	beq.n	8007fa2 <_svfiprintf_r+0x7a>
 8007f8a:	465b      	mov	r3, fp
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7ff ff6f 	bl	8007e74 <__ssputs_r>
 8007f96:	3001      	adds	r0, #1
 8007f98:	f000 80a9 	beq.w	80080ee <_svfiprintf_r+0x1c6>
 8007f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f9e:	445a      	add	r2, fp
 8007fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 80a1 	beq.w	80080ee <_svfiprintf_r+0x1c6>
 8007fac:	2300      	movs	r3, #0
 8007fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fb6:	f10a 0a01 	add.w	sl, sl, #1
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	9307      	str	r3, [sp, #28]
 8007fbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fc2:	931a      	str	r3, [sp, #104]	; 0x68
 8007fc4:	4654      	mov	r4, sl
 8007fc6:	2205      	movs	r2, #5
 8007fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fcc:	4850      	ldr	r0, [pc, #320]	; (8008110 <_svfiprintf_r+0x1e8>)
 8007fce:	f7f8 f90f 	bl	80001f0 <memchr>
 8007fd2:	9a04      	ldr	r2, [sp, #16]
 8007fd4:	b9d8      	cbnz	r0, 800800e <_svfiprintf_r+0xe6>
 8007fd6:	06d0      	lsls	r0, r2, #27
 8007fd8:	bf44      	itt	mi
 8007fda:	2320      	movmi	r3, #32
 8007fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe0:	0711      	lsls	r1, r2, #28
 8007fe2:	bf44      	itt	mi
 8007fe4:	232b      	movmi	r3, #43	; 0x2b
 8007fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fea:	f89a 3000 	ldrb.w	r3, [sl]
 8007fee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff0:	d015      	beq.n	800801e <_svfiprintf_r+0xf6>
 8007ff2:	9a07      	ldr	r2, [sp, #28]
 8007ff4:	4654      	mov	r4, sl
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	f04f 0c0a 	mov.w	ip, #10
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008002:	3b30      	subs	r3, #48	; 0x30
 8008004:	2b09      	cmp	r3, #9
 8008006:	d94d      	bls.n	80080a4 <_svfiprintf_r+0x17c>
 8008008:	b1b0      	cbz	r0, 8008038 <_svfiprintf_r+0x110>
 800800a:	9207      	str	r2, [sp, #28]
 800800c:	e014      	b.n	8008038 <_svfiprintf_r+0x110>
 800800e:	eba0 0308 	sub.w	r3, r0, r8
 8008012:	fa09 f303 	lsl.w	r3, r9, r3
 8008016:	4313      	orrs	r3, r2
 8008018:	9304      	str	r3, [sp, #16]
 800801a:	46a2      	mov	sl, r4
 800801c:	e7d2      	b.n	8007fc4 <_svfiprintf_r+0x9c>
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	1d19      	adds	r1, r3, #4
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	9103      	str	r1, [sp, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	bfbb      	ittet	lt
 800802a:	425b      	neglt	r3, r3
 800802c:	f042 0202 	orrlt.w	r2, r2, #2
 8008030:	9307      	strge	r3, [sp, #28]
 8008032:	9307      	strlt	r3, [sp, #28]
 8008034:	bfb8      	it	lt
 8008036:	9204      	strlt	r2, [sp, #16]
 8008038:	7823      	ldrb	r3, [r4, #0]
 800803a:	2b2e      	cmp	r3, #46	; 0x2e
 800803c:	d10c      	bne.n	8008058 <_svfiprintf_r+0x130>
 800803e:	7863      	ldrb	r3, [r4, #1]
 8008040:	2b2a      	cmp	r3, #42	; 0x2a
 8008042:	d134      	bne.n	80080ae <_svfiprintf_r+0x186>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	1d1a      	adds	r2, r3, #4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	9203      	str	r2, [sp, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	bfb8      	it	lt
 8008050:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008054:	3402      	adds	r4, #2
 8008056:	9305      	str	r3, [sp, #20]
 8008058:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008120 <_svfiprintf_r+0x1f8>
 800805c:	7821      	ldrb	r1, [r4, #0]
 800805e:	2203      	movs	r2, #3
 8008060:	4650      	mov	r0, sl
 8008062:	f7f8 f8c5 	bl	80001f0 <memchr>
 8008066:	b138      	cbz	r0, 8008078 <_svfiprintf_r+0x150>
 8008068:	9b04      	ldr	r3, [sp, #16]
 800806a:	eba0 000a 	sub.w	r0, r0, sl
 800806e:	2240      	movs	r2, #64	; 0x40
 8008070:	4082      	lsls	r2, r0
 8008072:	4313      	orrs	r3, r2
 8008074:	3401      	adds	r4, #1
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807c:	4825      	ldr	r0, [pc, #148]	; (8008114 <_svfiprintf_r+0x1ec>)
 800807e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008082:	2206      	movs	r2, #6
 8008084:	f7f8 f8b4 	bl	80001f0 <memchr>
 8008088:	2800      	cmp	r0, #0
 800808a:	d038      	beq.n	80080fe <_svfiprintf_r+0x1d6>
 800808c:	4b22      	ldr	r3, [pc, #136]	; (8008118 <_svfiprintf_r+0x1f0>)
 800808e:	bb1b      	cbnz	r3, 80080d8 <_svfiprintf_r+0x1b0>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	3307      	adds	r3, #7
 8008094:	f023 0307 	bic.w	r3, r3, #7
 8008098:	3308      	adds	r3, #8
 800809a:	9303      	str	r3, [sp, #12]
 800809c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809e:	4433      	add	r3, r6
 80080a0:	9309      	str	r3, [sp, #36]	; 0x24
 80080a2:	e768      	b.n	8007f76 <_svfiprintf_r+0x4e>
 80080a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080a8:	460c      	mov	r4, r1
 80080aa:	2001      	movs	r0, #1
 80080ac:	e7a6      	b.n	8007ffc <_svfiprintf_r+0xd4>
 80080ae:	2300      	movs	r3, #0
 80080b0:	3401      	adds	r4, #1
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	4619      	mov	r1, r3
 80080b6:	f04f 0c0a 	mov.w	ip, #10
 80080ba:	4620      	mov	r0, r4
 80080bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c0:	3a30      	subs	r2, #48	; 0x30
 80080c2:	2a09      	cmp	r2, #9
 80080c4:	d903      	bls.n	80080ce <_svfiprintf_r+0x1a6>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0c6      	beq.n	8008058 <_svfiprintf_r+0x130>
 80080ca:	9105      	str	r1, [sp, #20]
 80080cc:	e7c4      	b.n	8008058 <_svfiprintf_r+0x130>
 80080ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80080d2:	4604      	mov	r4, r0
 80080d4:	2301      	movs	r3, #1
 80080d6:	e7f0      	b.n	80080ba <_svfiprintf_r+0x192>
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	462a      	mov	r2, r5
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <_svfiprintf_r+0x1f4>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	4638      	mov	r0, r7
 80080e4:	f7fd fe64 	bl	8005db0 <_printf_float>
 80080e8:	1c42      	adds	r2, r0, #1
 80080ea:	4606      	mov	r6, r0
 80080ec:	d1d6      	bne.n	800809c <_svfiprintf_r+0x174>
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	065b      	lsls	r3, r3, #25
 80080f2:	f53f af2d 	bmi.w	8007f50 <_svfiprintf_r+0x28>
 80080f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080f8:	b01d      	add	sp, #116	; 0x74
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	ab03      	add	r3, sp, #12
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	462a      	mov	r2, r5
 8008104:	4b05      	ldr	r3, [pc, #20]	; (800811c <_svfiprintf_r+0x1f4>)
 8008106:	a904      	add	r1, sp, #16
 8008108:	4638      	mov	r0, r7
 800810a:	f7fe f8f5 	bl	80062f8 <_printf_i>
 800810e:	e7eb      	b.n	80080e8 <_svfiprintf_r+0x1c0>
 8008110:	08008c24 	.word	0x08008c24
 8008114:	08008c2e 	.word	0x08008c2e
 8008118:	08005db1 	.word	0x08005db1
 800811c:	08007e75 	.word	0x08007e75
 8008120:	08008c2a 	.word	0x08008c2a

08008124 <__sflush_r>:
 8008124:	898a      	ldrh	r2, [r1, #12]
 8008126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812a:	4605      	mov	r5, r0
 800812c:	0710      	lsls	r0, r2, #28
 800812e:	460c      	mov	r4, r1
 8008130:	d458      	bmi.n	80081e4 <__sflush_r+0xc0>
 8008132:	684b      	ldr	r3, [r1, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	dc05      	bgt.n	8008144 <__sflush_r+0x20>
 8008138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	dc02      	bgt.n	8008144 <__sflush_r+0x20>
 800813e:	2000      	movs	r0, #0
 8008140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008146:	2e00      	cmp	r6, #0
 8008148:	d0f9      	beq.n	800813e <__sflush_r+0x1a>
 800814a:	2300      	movs	r3, #0
 800814c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008150:	682f      	ldr	r7, [r5, #0]
 8008152:	6a21      	ldr	r1, [r4, #32]
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	d032      	beq.n	80081be <__sflush_r+0x9a>
 8008158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	075a      	lsls	r2, r3, #29
 800815e:	d505      	bpl.n	800816c <__sflush_r+0x48>
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	1ac0      	subs	r0, r0, r3
 8008164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008166:	b10b      	cbz	r3, 800816c <__sflush_r+0x48>
 8008168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800816a:	1ac0      	subs	r0, r0, r3
 800816c:	2300      	movs	r3, #0
 800816e:	4602      	mov	r2, r0
 8008170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008172:	6a21      	ldr	r1, [r4, #32]
 8008174:	4628      	mov	r0, r5
 8008176:	47b0      	blx	r6
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	d106      	bne.n	800818c <__sflush_r+0x68>
 800817e:	6829      	ldr	r1, [r5, #0]
 8008180:	291d      	cmp	r1, #29
 8008182:	d82b      	bhi.n	80081dc <__sflush_r+0xb8>
 8008184:	4a29      	ldr	r2, [pc, #164]	; (800822c <__sflush_r+0x108>)
 8008186:	410a      	asrs	r2, r1
 8008188:	07d6      	lsls	r6, r2, #31
 800818a:	d427      	bmi.n	80081dc <__sflush_r+0xb8>
 800818c:	2200      	movs	r2, #0
 800818e:	6062      	str	r2, [r4, #4]
 8008190:	04d9      	lsls	r1, r3, #19
 8008192:	6922      	ldr	r2, [r4, #16]
 8008194:	6022      	str	r2, [r4, #0]
 8008196:	d504      	bpl.n	80081a2 <__sflush_r+0x7e>
 8008198:	1c42      	adds	r2, r0, #1
 800819a:	d101      	bne.n	80081a0 <__sflush_r+0x7c>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b903      	cbnz	r3, 80081a2 <__sflush_r+0x7e>
 80081a0:	6560      	str	r0, [r4, #84]	; 0x54
 80081a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a4:	602f      	str	r7, [r5, #0]
 80081a6:	2900      	cmp	r1, #0
 80081a8:	d0c9      	beq.n	800813e <__sflush_r+0x1a>
 80081aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081ae:	4299      	cmp	r1, r3
 80081b0:	d002      	beq.n	80081b8 <__sflush_r+0x94>
 80081b2:	4628      	mov	r0, r5
 80081b4:	f7ff f9e2 	bl	800757c <_free_r>
 80081b8:	2000      	movs	r0, #0
 80081ba:	6360      	str	r0, [r4, #52]	; 0x34
 80081bc:	e7c0      	b.n	8008140 <__sflush_r+0x1c>
 80081be:	2301      	movs	r3, #1
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b0      	blx	r6
 80081c4:	1c41      	adds	r1, r0, #1
 80081c6:	d1c8      	bne.n	800815a <__sflush_r+0x36>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0c5      	beq.n	800815a <__sflush_r+0x36>
 80081ce:	2b1d      	cmp	r3, #29
 80081d0:	d001      	beq.n	80081d6 <__sflush_r+0xb2>
 80081d2:	2b16      	cmp	r3, #22
 80081d4:	d101      	bne.n	80081da <__sflush_r+0xb6>
 80081d6:	602f      	str	r7, [r5, #0]
 80081d8:	e7b1      	b.n	800813e <__sflush_r+0x1a>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	e7ad      	b.n	8008140 <__sflush_r+0x1c>
 80081e4:	690f      	ldr	r7, [r1, #16]
 80081e6:	2f00      	cmp	r7, #0
 80081e8:	d0a9      	beq.n	800813e <__sflush_r+0x1a>
 80081ea:	0793      	lsls	r3, r2, #30
 80081ec:	680e      	ldr	r6, [r1, #0]
 80081ee:	bf08      	it	eq
 80081f0:	694b      	ldreq	r3, [r1, #20]
 80081f2:	600f      	str	r7, [r1, #0]
 80081f4:	bf18      	it	ne
 80081f6:	2300      	movne	r3, #0
 80081f8:	eba6 0807 	sub.w	r8, r6, r7
 80081fc:	608b      	str	r3, [r1, #8]
 80081fe:	f1b8 0f00 	cmp.w	r8, #0
 8008202:	dd9c      	ble.n	800813e <__sflush_r+0x1a>
 8008204:	6a21      	ldr	r1, [r4, #32]
 8008206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008208:	4643      	mov	r3, r8
 800820a:	463a      	mov	r2, r7
 800820c:	4628      	mov	r0, r5
 800820e:	47b0      	blx	r6
 8008210:	2800      	cmp	r0, #0
 8008212:	dc06      	bgt.n	8008222 <__sflush_r+0xfe>
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008220:	e78e      	b.n	8008140 <__sflush_r+0x1c>
 8008222:	4407      	add	r7, r0
 8008224:	eba8 0800 	sub.w	r8, r8, r0
 8008228:	e7e9      	b.n	80081fe <__sflush_r+0xda>
 800822a:	bf00      	nop
 800822c:	dfbffffe 	.word	0xdfbffffe

08008230 <_fflush_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	690b      	ldr	r3, [r1, #16]
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	b913      	cbnz	r3, 8008240 <_fflush_r+0x10>
 800823a:	2500      	movs	r5, #0
 800823c:	4628      	mov	r0, r5
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	b118      	cbz	r0, 800824a <_fflush_r+0x1a>
 8008242:	6a03      	ldr	r3, [r0, #32]
 8008244:	b90b      	cbnz	r3, 800824a <_fflush_r+0x1a>
 8008246:	f7fe fa05 	bl	8006654 <__sinit>
 800824a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0f3      	beq.n	800823a <_fflush_r+0xa>
 8008252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008254:	07d0      	lsls	r0, r2, #31
 8008256:	d404      	bmi.n	8008262 <_fflush_r+0x32>
 8008258:	0599      	lsls	r1, r3, #22
 800825a:	d402      	bmi.n	8008262 <_fflush_r+0x32>
 800825c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825e:	f7fe fb10 	bl	8006882 <__retarget_lock_acquire_recursive>
 8008262:	4628      	mov	r0, r5
 8008264:	4621      	mov	r1, r4
 8008266:	f7ff ff5d 	bl	8008124 <__sflush_r>
 800826a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800826c:	07da      	lsls	r2, r3, #31
 800826e:	4605      	mov	r5, r0
 8008270:	d4e4      	bmi.n	800823c <_fflush_r+0xc>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	059b      	lsls	r3, r3, #22
 8008276:	d4e1      	bmi.n	800823c <_fflush_r+0xc>
 8008278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827a:	f7fe fb03 	bl	8006884 <__retarget_lock_release_recursive>
 800827e:	e7dd      	b.n	800823c <_fflush_r+0xc>

08008280 <memmove>:
 8008280:	4288      	cmp	r0, r1
 8008282:	b510      	push	{r4, lr}
 8008284:	eb01 0402 	add.w	r4, r1, r2
 8008288:	d902      	bls.n	8008290 <memmove+0x10>
 800828a:	4284      	cmp	r4, r0
 800828c:	4623      	mov	r3, r4
 800828e:	d807      	bhi.n	80082a0 <memmove+0x20>
 8008290:	1e43      	subs	r3, r0, #1
 8008292:	42a1      	cmp	r1, r4
 8008294:	d008      	beq.n	80082a8 <memmove+0x28>
 8008296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800829a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829e:	e7f8      	b.n	8008292 <memmove+0x12>
 80082a0:	4402      	add	r2, r0
 80082a2:	4601      	mov	r1, r0
 80082a4:	428a      	cmp	r2, r1
 80082a6:	d100      	bne.n	80082aa <memmove+0x2a>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082b2:	e7f7      	b.n	80082a4 <memmove+0x24>

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	; (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f9 fc7e 	bl	8001bc0 <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	20000b54 	.word	0x20000b54

080082d4 <memcpy>:
 80082d4:	440a      	add	r2, r1
 80082d6:	4291      	cmp	r1, r2
 80082d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082dc:	d100      	bne.n	80082e0 <memcpy+0xc>
 80082de:	4770      	bx	lr
 80082e0:	b510      	push	{r4, lr}
 80082e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ea:	4291      	cmp	r1, r2
 80082ec:	d1f9      	bne.n	80082e2 <memcpy+0xe>
 80082ee:	bd10      	pop	{r4, pc}

080082f0 <__assert_func>:
 80082f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082f2:	4614      	mov	r4, r2
 80082f4:	461a      	mov	r2, r3
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <__assert_func+0x2c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4605      	mov	r5, r0
 80082fc:	68d8      	ldr	r0, [r3, #12]
 80082fe:	b14c      	cbz	r4, 8008314 <__assert_func+0x24>
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <__assert_func+0x30>)
 8008302:	9100      	str	r1, [sp, #0]
 8008304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008308:	4906      	ldr	r1, [pc, #24]	; (8008324 <__assert_func+0x34>)
 800830a:	462b      	mov	r3, r5
 800830c:	f000 f872 	bl	80083f4 <fiprintf>
 8008310:	f000 f882 	bl	8008418 <abort>
 8008314:	4b04      	ldr	r3, [pc, #16]	; (8008328 <__assert_func+0x38>)
 8008316:	461c      	mov	r4, r3
 8008318:	e7f3      	b.n	8008302 <__assert_func+0x12>
 800831a:	bf00      	nop
 800831c:	20000064 	.word	0x20000064
 8008320:	08008c3f 	.word	0x08008c3f
 8008324:	08008c4c 	.word	0x08008c4c
 8008328:	08008c7a 	.word	0x08008c7a

0800832c <_calloc_r>:
 800832c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800832e:	fba1 2402 	umull	r2, r4, r1, r2
 8008332:	b94c      	cbnz	r4, 8008348 <_calloc_r+0x1c>
 8008334:	4611      	mov	r1, r2
 8008336:	9201      	str	r2, [sp, #4]
 8008338:	f7ff f994 	bl	8007664 <_malloc_r>
 800833c:	9a01      	ldr	r2, [sp, #4]
 800833e:	4605      	mov	r5, r0
 8008340:	b930      	cbnz	r0, 8008350 <_calloc_r+0x24>
 8008342:	4628      	mov	r0, r5
 8008344:	b003      	add	sp, #12
 8008346:	bd30      	pop	{r4, r5, pc}
 8008348:	220c      	movs	r2, #12
 800834a:	6002      	str	r2, [r0, #0]
 800834c:	2500      	movs	r5, #0
 800834e:	e7f8      	b.n	8008342 <_calloc_r+0x16>
 8008350:	4621      	mov	r1, r4
 8008352:	f7fe fa18 	bl	8006786 <memset>
 8008356:	e7f4      	b.n	8008342 <_calloc_r+0x16>

08008358 <__ascii_mbtowc>:
 8008358:	b082      	sub	sp, #8
 800835a:	b901      	cbnz	r1, 800835e <__ascii_mbtowc+0x6>
 800835c:	a901      	add	r1, sp, #4
 800835e:	b142      	cbz	r2, 8008372 <__ascii_mbtowc+0x1a>
 8008360:	b14b      	cbz	r3, 8008376 <__ascii_mbtowc+0x1e>
 8008362:	7813      	ldrb	r3, [r2, #0]
 8008364:	600b      	str	r3, [r1, #0]
 8008366:	7812      	ldrb	r2, [r2, #0]
 8008368:	1e10      	subs	r0, r2, #0
 800836a:	bf18      	it	ne
 800836c:	2001      	movne	r0, #1
 800836e:	b002      	add	sp, #8
 8008370:	4770      	bx	lr
 8008372:	4610      	mov	r0, r2
 8008374:	e7fb      	b.n	800836e <__ascii_mbtowc+0x16>
 8008376:	f06f 0001 	mvn.w	r0, #1
 800837a:	e7f8      	b.n	800836e <__ascii_mbtowc+0x16>

0800837c <_realloc_r>:
 800837c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008380:	4680      	mov	r8, r0
 8008382:	4614      	mov	r4, r2
 8008384:	460e      	mov	r6, r1
 8008386:	b921      	cbnz	r1, 8008392 <_realloc_r+0x16>
 8008388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800838c:	4611      	mov	r1, r2
 800838e:	f7ff b969 	b.w	8007664 <_malloc_r>
 8008392:	b92a      	cbnz	r2, 80083a0 <_realloc_r+0x24>
 8008394:	f7ff f8f2 	bl	800757c <_free_r>
 8008398:	4625      	mov	r5, r4
 800839a:	4628      	mov	r0, r5
 800839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a0:	f000 f841 	bl	8008426 <_malloc_usable_size_r>
 80083a4:	4284      	cmp	r4, r0
 80083a6:	4607      	mov	r7, r0
 80083a8:	d802      	bhi.n	80083b0 <_realloc_r+0x34>
 80083aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083ae:	d812      	bhi.n	80083d6 <_realloc_r+0x5a>
 80083b0:	4621      	mov	r1, r4
 80083b2:	4640      	mov	r0, r8
 80083b4:	f7ff f956 	bl	8007664 <_malloc_r>
 80083b8:	4605      	mov	r5, r0
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d0ed      	beq.n	800839a <_realloc_r+0x1e>
 80083be:	42bc      	cmp	r4, r7
 80083c0:	4622      	mov	r2, r4
 80083c2:	4631      	mov	r1, r6
 80083c4:	bf28      	it	cs
 80083c6:	463a      	movcs	r2, r7
 80083c8:	f7ff ff84 	bl	80082d4 <memcpy>
 80083cc:	4631      	mov	r1, r6
 80083ce:	4640      	mov	r0, r8
 80083d0:	f7ff f8d4 	bl	800757c <_free_r>
 80083d4:	e7e1      	b.n	800839a <_realloc_r+0x1e>
 80083d6:	4635      	mov	r5, r6
 80083d8:	e7df      	b.n	800839a <_realloc_r+0x1e>

080083da <__ascii_wctomb>:
 80083da:	b149      	cbz	r1, 80083f0 <__ascii_wctomb+0x16>
 80083dc:	2aff      	cmp	r2, #255	; 0xff
 80083de:	bf85      	ittet	hi
 80083e0:	238a      	movhi	r3, #138	; 0x8a
 80083e2:	6003      	strhi	r3, [r0, #0]
 80083e4:	700a      	strbls	r2, [r1, #0]
 80083e6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80083ea:	bf98      	it	ls
 80083ec:	2001      	movls	r0, #1
 80083ee:	4770      	bx	lr
 80083f0:	4608      	mov	r0, r1
 80083f2:	4770      	bx	lr

080083f4 <fiprintf>:
 80083f4:	b40e      	push	{r1, r2, r3}
 80083f6:	b503      	push	{r0, r1, lr}
 80083f8:	4601      	mov	r1, r0
 80083fa:	ab03      	add	r3, sp, #12
 80083fc:	4805      	ldr	r0, [pc, #20]	; (8008414 <fiprintf+0x20>)
 80083fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008402:	6800      	ldr	r0, [r0, #0]
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	f000 f83f 	bl	8008488 <_vfiprintf_r>
 800840a:	b002      	add	sp, #8
 800840c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008410:	b003      	add	sp, #12
 8008412:	4770      	bx	lr
 8008414:	20000064 	.word	0x20000064

08008418 <abort>:
 8008418:	b508      	push	{r3, lr}
 800841a:	2006      	movs	r0, #6
 800841c:	f000 fa0c 	bl	8008838 <raise>
 8008420:	2001      	movs	r0, #1
 8008422:	f7f9 fb55 	bl	8001ad0 <_exit>

08008426 <_malloc_usable_size_r>:
 8008426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800842a:	1f18      	subs	r0, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	bfbc      	itt	lt
 8008430:	580b      	ldrlt	r3, [r1, r0]
 8008432:	18c0      	addlt	r0, r0, r3
 8008434:	4770      	bx	lr

08008436 <__sfputc_r>:
 8008436:	6893      	ldr	r3, [r2, #8]
 8008438:	3b01      	subs	r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	b410      	push	{r4}
 800843e:	6093      	str	r3, [r2, #8]
 8008440:	da08      	bge.n	8008454 <__sfputc_r+0x1e>
 8008442:	6994      	ldr	r4, [r2, #24]
 8008444:	42a3      	cmp	r3, r4
 8008446:	db01      	blt.n	800844c <__sfputc_r+0x16>
 8008448:	290a      	cmp	r1, #10
 800844a:	d103      	bne.n	8008454 <__sfputc_r+0x1e>
 800844c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008450:	f000 b934 	b.w	80086bc <__swbuf_r>
 8008454:	6813      	ldr	r3, [r2, #0]
 8008456:	1c58      	adds	r0, r3, #1
 8008458:	6010      	str	r0, [r2, #0]
 800845a:	7019      	strb	r1, [r3, #0]
 800845c:	4608      	mov	r0, r1
 800845e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008462:	4770      	bx	lr

08008464 <__sfputs_r>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	4606      	mov	r6, r0
 8008468:	460f      	mov	r7, r1
 800846a:	4614      	mov	r4, r2
 800846c:	18d5      	adds	r5, r2, r3
 800846e:	42ac      	cmp	r4, r5
 8008470:	d101      	bne.n	8008476 <__sfputs_r+0x12>
 8008472:	2000      	movs	r0, #0
 8008474:	e007      	b.n	8008486 <__sfputs_r+0x22>
 8008476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800847a:	463a      	mov	r2, r7
 800847c:	4630      	mov	r0, r6
 800847e:	f7ff ffda 	bl	8008436 <__sfputc_r>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d1f3      	bne.n	800846e <__sfputs_r+0xa>
 8008486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008488 <_vfiprintf_r>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	460d      	mov	r5, r1
 800848e:	b09d      	sub	sp, #116	; 0x74
 8008490:	4614      	mov	r4, r2
 8008492:	4698      	mov	r8, r3
 8008494:	4606      	mov	r6, r0
 8008496:	b118      	cbz	r0, 80084a0 <_vfiprintf_r+0x18>
 8008498:	6a03      	ldr	r3, [r0, #32]
 800849a:	b90b      	cbnz	r3, 80084a0 <_vfiprintf_r+0x18>
 800849c:	f7fe f8da 	bl	8006654 <__sinit>
 80084a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084a2:	07d9      	lsls	r1, r3, #31
 80084a4:	d405      	bmi.n	80084b2 <_vfiprintf_r+0x2a>
 80084a6:	89ab      	ldrh	r3, [r5, #12]
 80084a8:	059a      	lsls	r2, r3, #22
 80084aa:	d402      	bmi.n	80084b2 <_vfiprintf_r+0x2a>
 80084ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ae:	f7fe f9e8 	bl	8006882 <__retarget_lock_acquire_recursive>
 80084b2:	89ab      	ldrh	r3, [r5, #12]
 80084b4:	071b      	lsls	r3, r3, #28
 80084b6:	d501      	bpl.n	80084bc <_vfiprintf_r+0x34>
 80084b8:	692b      	ldr	r3, [r5, #16]
 80084ba:	b99b      	cbnz	r3, 80084e4 <_vfiprintf_r+0x5c>
 80084bc:	4629      	mov	r1, r5
 80084be:	4630      	mov	r0, r6
 80084c0:	f000 f93a 	bl	8008738 <__swsetup_r>
 80084c4:	b170      	cbz	r0, 80084e4 <_vfiprintf_r+0x5c>
 80084c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c8:	07dc      	lsls	r4, r3, #31
 80084ca:	d504      	bpl.n	80084d6 <_vfiprintf_r+0x4e>
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084d0:	b01d      	add	sp, #116	; 0x74
 80084d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d6:	89ab      	ldrh	r3, [r5, #12]
 80084d8:	0598      	lsls	r0, r3, #22
 80084da:	d4f7      	bmi.n	80084cc <_vfiprintf_r+0x44>
 80084dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084de:	f7fe f9d1 	bl	8006884 <__retarget_lock_release_recursive>
 80084e2:	e7f3      	b.n	80084cc <_vfiprintf_r+0x44>
 80084e4:	2300      	movs	r3, #0
 80084e6:	9309      	str	r3, [sp, #36]	; 0x24
 80084e8:	2320      	movs	r3, #32
 80084ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f2:	2330      	movs	r3, #48	; 0x30
 80084f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80086a8 <_vfiprintf_r+0x220>
 80084f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084fc:	f04f 0901 	mov.w	r9, #1
 8008500:	4623      	mov	r3, r4
 8008502:	469a      	mov	sl, r3
 8008504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008508:	b10a      	cbz	r2, 800850e <_vfiprintf_r+0x86>
 800850a:	2a25      	cmp	r2, #37	; 0x25
 800850c:	d1f9      	bne.n	8008502 <_vfiprintf_r+0x7a>
 800850e:	ebba 0b04 	subs.w	fp, sl, r4
 8008512:	d00b      	beq.n	800852c <_vfiprintf_r+0xa4>
 8008514:	465b      	mov	r3, fp
 8008516:	4622      	mov	r2, r4
 8008518:	4629      	mov	r1, r5
 800851a:	4630      	mov	r0, r6
 800851c:	f7ff ffa2 	bl	8008464 <__sfputs_r>
 8008520:	3001      	adds	r0, #1
 8008522:	f000 80a9 	beq.w	8008678 <_vfiprintf_r+0x1f0>
 8008526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008528:	445a      	add	r2, fp
 800852a:	9209      	str	r2, [sp, #36]	; 0x24
 800852c:	f89a 3000 	ldrb.w	r3, [sl]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80a1 	beq.w	8008678 <_vfiprintf_r+0x1f0>
 8008536:	2300      	movs	r3, #0
 8008538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800853c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008540:	f10a 0a01 	add.w	sl, sl, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	9307      	str	r3, [sp, #28]
 8008548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800854c:	931a      	str	r3, [sp, #104]	; 0x68
 800854e:	4654      	mov	r4, sl
 8008550:	2205      	movs	r2, #5
 8008552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008556:	4854      	ldr	r0, [pc, #336]	; (80086a8 <_vfiprintf_r+0x220>)
 8008558:	f7f7 fe4a 	bl	80001f0 <memchr>
 800855c:	9a04      	ldr	r2, [sp, #16]
 800855e:	b9d8      	cbnz	r0, 8008598 <_vfiprintf_r+0x110>
 8008560:	06d1      	lsls	r1, r2, #27
 8008562:	bf44      	itt	mi
 8008564:	2320      	movmi	r3, #32
 8008566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800856a:	0713      	lsls	r3, r2, #28
 800856c:	bf44      	itt	mi
 800856e:	232b      	movmi	r3, #43	; 0x2b
 8008570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008574:	f89a 3000 	ldrb.w	r3, [sl]
 8008578:	2b2a      	cmp	r3, #42	; 0x2a
 800857a:	d015      	beq.n	80085a8 <_vfiprintf_r+0x120>
 800857c:	9a07      	ldr	r2, [sp, #28]
 800857e:	4654      	mov	r4, sl
 8008580:	2000      	movs	r0, #0
 8008582:	f04f 0c0a 	mov.w	ip, #10
 8008586:	4621      	mov	r1, r4
 8008588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858c:	3b30      	subs	r3, #48	; 0x30
 800858e:	2b09      	cmp	r3, #9
 8008590:	d94d      	bls.n	800862e <_vfiprintf_r+0x1a6>
 8008592:	b1b0      	cbz	r0, 80085c2 <_vfiprintf_r+0x13a>
 8008594:	9207      	str	r2, [sp, #28]
 8008596:	e014      	b.n	80085c2 <_vfiprintf_r+0x13a>
 8008598:	eba0 0308 	sub.w	r3, r0, r8
 800859c:	fa09 f303 	lsl.w	r3, r9, r3
 80085a0:	4313      	orrs	r3, r2
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	46a2      	mov	sl, r4
 80085a6:	e7d2      	b.n	800854e <_vfiprintf_r+0xc6>
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	1d19      	adds	r1, r3, #4
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	9103      	str	r1, [sp, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bfbb      	ittet	lt
 80085b4:	425b      	neglt	r3, r3
 80085b6:	f042 0202 	orrlt.w	r2, r2, #2
 80085ba:	9307      	strge	r3, [sp, #28]
 80085bc:	9307      	strlt	r3, [sp, #28]
 80085be:	bfb8      	it	lt
 80085c0:	9204      	strlt	r2, [sp, #16]
 80085c2:	7823      	ldrb	r3, [r4, #0]
 80085c4:	2b2e      	cmp	r3, #46	; 0x2e
 80085c6:	d10c      	bne.n	80085e2 <_vfiprintf_r+0x15a>
 80085c8:	7863      	ldrb	r3, [r4, #1]
 80085ca:	2b2a      	cmp	r3, #42	; 0x2a
 80085cc:	d134      	bne.n	8008638 <_vfiprintf_r+0x1b0>
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	1d1a      	adds	r2, r3, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	9203      	str	r2, [sp, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfb8      	it	lt
 80085da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085de:	3402      	adds	r4, #2
 80085e0:	9305      	str	r3, [sp, #20]
 80085e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80086b8 <_vfiprintf_r+0x230>
 80085e6:	7821      	ldrb	r1, [r4, #0]
 80085e8:	2203      	movs	r2, #3
 80085ea:	4650      	mov	r0, sl
 80085ec:	f7f7 fe00 	bl	80001f0 <memchr>
 80085f0:	b138      	cbz	r0, 8008602 <_vfiprintf_r+0x17a>
 80085f2:	9b04      	ldr	r3, [sp, #16]
 80085f4:	eba0 000a 	sub.w	r0, r0, sl
 80085f8:	2240      	movs	r2, #64	; 0x40
 80085fa:	4082      	lsls	r2, r0
 80085fc:	4313      	orrs	r3, r2
 80085fe:	3401      	adds	r4, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008606:	4829      	ldr	r0, [pc, #164]	; (80086ac <_vfiprintf_r+0x224>)
 8008608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800860c:	2206      	movs	r2, #6
 800860e:	f7f7 fdef 	bl	80001f0 <memchr>
 8008612:	2800      	cmp	r0, #0
 8008614:	d03f      	beq.n	8008696 <_vfiprintf_r+0x20e>
 8008616:	4b26      	ldr	r3, [pc, #152]	; (80086b0 <_vfiprintf_r+0x228>)
 8008618:	bb1b      	cbnz	r3, 8008662 <_vfiprintf_r+0x1da>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	3307      	adds	r3, #7
 800861e:	f023 0307 	bic.w	r3, r3, #7
 8008622:	3308      	adds	r3, #8
 8008624:	9303      	str	r3, [sp, #12]
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	443b      	add	r3, r7
 800862a:	9309      	str	r3, [sp, #36]	; 0x24
 800862c:	e768      	b.n	8008500 <_vfiprintf_r+0x78>
 800862e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008632:	460c      	mov	r4, r1
 8008634:	2001      	movs	r0, #1
 8008636:	e7a6      	b.n	8008586 <_vfiprintf_r+0xfe>
 8008638:	2300      	movs	r3, #0
 800863a:	3401      	adds	r4, #1
 800863c:	9305      	str	r3, [sp, #20]
 800863e:	4619      	mov	r1, r3
 8008640:	f04f 0c0a 	mov.w	ip, #10
 8008644:	4620      	mov	r0, r4
 8008646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800864a:	3a30      	subs	r2, #48	; 0x30
 800864c:	2a09      	cmp	r2, #9
 800864e:	d903      	bls.n	8008658 <_vfiprintf_r+0x1d0>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0c6      	beq.n	80085e2 <_vfiprintf_r+0x15a>
 8008654:	9105      	str	r1, [sp, #20]
 8008656:	e7c4      	b.n	80085e2 <_vfiprintf_r+0x15a>
 8008658:	fb0c 2101 	mla	r1, ip, r1, r2
 800865c:	4604      	mov	r4, r0
 800865e:	2301      	movs	r3, #1
 8008660:	e7f0      	b.n	8008644 <_vfiprintf_r+0x1bc>
 8008662:	ab03      	add	r3, sp, #12
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	462a      	mov	r2, r5
 8008668:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <_vfiprintf_r+0x22c>)
 800866a:	a904      	add	r1, sp, #16
 800866c:	4630      	mov	r0, r6
 800866e:	f7fd fb9f 	bl	8005db0 <_printf_float>
 8008672:	4607      	mov	r7, r0
 8008674:	1c78      	adds	r0, r7, #1
 8008676:	d1d6      	bne.n	8008626 <_vfiprintf_r+0x19e>
 8008678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800867a:	07d9      	lsls	r1, r3, #31
 800867c:	d405      	bmi.n	800868a <_vfiprintf_r+0x202>
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	059a      	lsls	r2, r3, #22
 8008682:	d402      	bmi.n	800868a <_vfiprintf_r+0x202>
 8008684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008686:	f7fe f8fd 	bl	8006884 <__retarget_lock_release_recursive>
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	065b      	lsls	r3, r3, #25
 800868e:	f53f af1d 	bmi.w	80084cc <_vfiprintf_r+0x44>
 8008692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008694:	e71c      	b.n	80084d0 <_vfiprintf_r+0x48>
 8008696:	ab03      	add	r3, sp, #12
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	462a      	mov	r2, r5
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <_vfiprintf_r+0x22c>)
 800869e:	a904      	add	r1, sp, #16
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7fd fe29 	bl	80062f8 <_printf_i>
 80086a6:	e7e4      	b.n	8008672 <_vfiprintf_r+0x1ea>
 80086a8:	08008c24 	.word	0x08008c24
 80086ac:	08008c2e 	.word	0x08008c2e
 80086b0:	08005db1 	.word	0x08005db1
 80086b4:	08008465 	.word	0x08008465
 80086b8:	08008c2a 	.word	0x08008c2a

080086bc <__swbuf_r>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	460e      	mov	r6, r1
 80086c0:	4614      	mov	r4, r2
 80086c2:	4605      	mov	r5, r0
 80086c4:	b118      	cbz	r0, 80086ce <__swbuf_r+0x12>
 80086c6:	6a03      	ldr	r3, [r0, #32]
 80086c8:	b90b      	cbnz	r3, 80086ce <__swbuf_r+0x12>
 80086ca:	f7fd ffc3 	bl	8006654 <__sinit>
 80086ce:	69a3      	ldr	r3, [r4, #24]
 80086d0:	60a3      	str	r3, [r4, #8]
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	071a      	lsls	r2, r3, #28
 80086d6:	d525      	bpl.n	8008724 <__swbuf_r+0x68>
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	b31b      	cbz	r3, 8008724 <__swbuf_r+0x68>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	6922      	ldr	r2, [r4, #16]
 80086e0:	1a98      	subs	r0, r3, r2
 80086e2:	6963      	ldr	r3, [r4, #20]
 80086e4:	b2f6      	uxtb	r6, r6
 80086e6:	4283      	cmp	r3, r0
 80086e8:	4637      	mov	r7, r6
 80086ea:	dc04      	bgt.n	80086f6 <__swbuf_r+0x3a>
 80086ec:	4621      	mov	r1, r4
 80086ee:	4628      	mov	r0, r5
 80086f0:	f7ff fd9e 	bl	8008230 <_fflush_r>
 80086f4:	b9e0      	cbnz	r0, 8008730 <__swbuf_r+0x74>
 80086f6:	68a3      	ldr	r3, [r4, #8]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	60a3      	str	r3, [r4, #8]
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	6022      	str	r2, [r4, #0]
 8008702:	701e      	strb	r6, [r3, #0]
 8008704:	6962      	ldr	r2, [r4, #20]
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	429a      	cmp	r2, r3
 800870a:	d004      	beq.n	8008716 <__swbuf_r+0x5a>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	07db      	lsls	r3, r3, #31
 8008710:	d506      	bpl.n	8008720 <__swbuf_r+0x64>
 8008712:	2e0a      	cmp	r6, #10
 8008714:	d104      	bne.n	8008720 <__swbuf_r+0x64>
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f7ff fd89 	bl	8008230 <_fflush_r>
 800871e:	b938      	cbnz	r0, 8008730 <__swbuf_r+0x74>
 8008720:	4638      	mov	r0, r7
 8008722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008724:	4621      	mov	r1, r4
 8008726:	4628      	mov	r0, r5
 8008728:	f000 f806 	bl	8008738 <__swsetup_r>
 800872c:	2800      	cmp	r0, #0
 800872e:	d0d5      	beq.n	80086dc <__swbuf_r+0x20>
 8008730:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008734:	e7f4      	b.n	8008720 <__swbuf_r+0x64>
	...

08008738 <__swsetup_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4b2a      	ldr	r3, [pc, #168]	; (80087e4 <__swsetup_r+0xac>)
 800873c:	4605      	mov	r5, r0
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	460c      	mov	r4, r1
 8008742:	b118      	cbz	r0, 800874c <__swsetup_r+0x14>
 8008744:	6a03      	ldr	r3, [r0, #32]
 8008746:	b90b      	cbnz	r3, 800874c <__swsetup_r+0x14>
 8008748:	f7fd ff84 	bl	8006654 <__sinit>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008752:	0718      	lsls	r0, r3, #28
 8008754:	d422      	bmi.n	800879c <__swsetup_r+0x64>
 8008756:	06d9      	lsls	r1, r3, #27
 8008758:	d407      	bmi.n	800876a <__swsetup_r+0x32>
 800875a:	2309      	movs	r3, #9
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008768:	e034      	b.n	80087d4 <__swsetup_r+0x9c>
 800876a:	0758      	lsls	r0, r3, #29
 800876c:	d512      	bpl.n	8008794 <__swsetup_r+0x5c>
 800876e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008770:	b141      	cbz	r1, 8008784 <__swsetup_r+0x4c>
 8008772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008776:	4299      	cmp	r1, r3
 8008778:	d002      	beq.n	8008780 <__swsetup_r+0x48>
 800877a:	4628      	mov	r0, r5
 800877c:	f7fe fefe 	bl	800757c <_free_r>
 8008780:	2300      	movs	r3, #0
 8008782:	6363      	str	r3, [r4, #52]	; 0x34
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	2300      	movs	r3, #0
 800878e:	6063      	str	r3, [r4, #4]
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f043 0308 	orr.w	r3, r3, #8
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	b94b      	cbnz	r3, 80087b4 <__swsetup_r+0x7c>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087aa:	d003      	beq.n	80087b4 <__swsetup_r+0x7c>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 f884 	bl	80088bc <__smakebuf_r>
 80087b4:	89a0      	ldrh	r0, [r4, #12]
 80087b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087ba:	f010 0301 	ands.w	r3, r0, #1
 80087be:	d00a      	beq.n	80087d6 <__swsetup_r+0x9e>
 80087c0:	2300      	movs	r3, #0
 80087c2:	60a3      	str	r3, [r4, #8]
 80087c4:	6963      	ldr	r3, [r4, #20]
 80087c6:	425b      	negs	r3, r3
 80087c8:	61a3      	str	r3, [r4, #24]
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	b943      	cbnz	r3, 80087e0 <__swsetup_r+0xa8>
 80087ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087d2:	d1c4      	bne.n	800875e <__swsetup_r+0x26>
 80087d4:	bd38      	pop	{r3, r4, r5, pc}
 80087d6:	0781      	lsls	r1, r0, #30
 80087d8:	bf58      	it	pl
 80087da:	6963      	ldrpl	r3, [r4, #20]
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	e7f4      	b.n	80087ca <__swsetup_r+0x92>
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7f7      	b.n	80087d4 <__swsetup_r+0x9c>
 80087e4:	20000064 	.word	0x20000064

080087e8 <_raise_r>:
 80087e8:	291f      	cmp	r1, #31
 80087ea:	b538      	push	{r3, r4, r5, lr}
 80087ec:	4604      	mov	r4, r0
 80087ee:	460d      	mov	r5, r1
 80087f0:	d904      	bls.n	80087fc <_raise_r+0x14>
 80087f2:	2316      	movs	r3, #22
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80087fe:	b112      	cbz	r2, 8008806 <_raise_r+0x1e>
 8008800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008804:	b94b      	cbnz	r3, 800881a <_raise_r+0x32>
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f830 	bl	800886c <_getpid_r>
 800880c:	462a      	mov	r2, r5
 800880e:	4601      	mov	r1, r0
 8008810:	4620      	mov	r0, r4
 8008812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008816:	f000 b817 	b.w	8008848 <_kill_r>
 800881a:	2b01      	cmp	r3, #1
 800881c:	d00a      	beq.n	8008834 <_raise_r+0x4c>
 800881e:	1c59      	adds	r1, r3, #1
 8008820:	d103      	bne.n	800882a <_raise_r+0x42>
 8008822:	2316      	movs	r3, #22
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	2001      	movs	r0, #1
 8008828:	e7e7      	b.n	80087fa <_raise_r+0x12>
 800882a:	2400      	movs	r4, #0
 800882c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008830:	4628      	mov	r0, r5
 8008832:	4798      	blx	r3
 8008834:	2000      	movs	r0, #0
 8008836:	e7e0      	b.n	80087fa <_raise_r+0x12>

08008838 <raise>:
 8008838:	4b02      	ldr	r3, [pc, #8]	; (8008844 <raise+0xc>)
 800883a:	4601      	mov	r1, r0
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	f7ff bfd3 	b.w	80087e8 <_raise_r>
 8008842:	bf00      	nop
 8008844:	20000064 	.word	0x20000064

08008848 <_kill_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d07      	ldr	r5, [pc, #28]	; (8008868 <_kill_r+0x20>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	4611      	mov	r1, r2
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	f7f9 f92b 	bl	8001ab0 <_kill>
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	d102      	bne.n	8008864 <_kill_r+0x1c>
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	b103      	cbz	r3, 8008864 <_kill_r+0x1c>
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	bd38      	pop	{r3, r4, r5, pc}
 8008866:	bf00      	nop
 8008868:	20000b54 	.word	0x20000b54

0800886c <_getpid_r>:
 800886c:	f7f9 b918 	b.w	8001aa0 <_getpid>

08008870 <__swhatbuf_r>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	460c      	mov	r4, r1
 8008874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008878:	2900      	cmp	r1, #0
 800887a:	b096      	sub	sp, #88	; 0x58
 800887c:	4615      	mov	r5, r2
 800887e:	461e      	mov	r6, r3
 8008880:	da0d      	bge.n	800889e <__swhatbuf_r+0x2e>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008888:	f04f 0100 	mov.w	r1, #0
 800888c:	bf0c      	ite	eq
 800888e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008892:	2340      	movne	r3, #64	; 0x40
 8008894:	2000      	movs	r0, #0
 8008896:	6031      	str	r1, [r6, #0]
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	b016      	add	sp, #88	; 0x58
 800889c:	bd70      	pop	{r4, r5, r6, pc}
 800889e:	466a      	mov	r2, sp
 80088a0:	f000 f848 	bl	8008934 <_fstat_r>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	dbec      	blt.n	8008882 <__swhatbuf_r+0x12>
 80088a8:	9901      	ldr	r1, [sp, #4]
 80088aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80088ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80088b2:	4259      	negs	r1, r3
 80088b4:	4159      	adcs	r1, r3
 80088b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ba:	e7eb      	b.n	8008894 <__swhatbuf_r+0x24>

080088bc <__smakebuf_r>:
 80088bc:	898b      	ldrh	r3, [r1, #12]
 80088be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088c0:	079d      	lsls	r5, r3, #30
 80088c2:	4606      	mov	r6, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	d507      	bpl.n	80088d8 <__smakebuf_r+0x1c>
 80088c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	2301      	movs	r3, #1
 80088d2:	6163      	str	r3, [r4, #20]
 80088d4:	b002      	add	sp, #8
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	ab01      	add	r3, sp, #4
 80088da:	466a      	mov	r2, sp
 80088dc:	f7ff ffc8 	bl	8008870 <__swhatbuf_r>
 80088e0:	9900      	ldr	r1, [sp, #0]
 80088e2:	4605      	mov	r5, r0
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7fe febd 	bl	8007664 <_malloc_r>
 80088ea:	b948      	cbnz	r0, 8008900 <__smakebuf_r+0x44>
 80088ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f0:	059a      	lsls	r2, r3, #22
 80088f2:	d4ef      	bmi.n	80088d4 <__smakebuf_r+0x18>
 80088f4:	f023 0303 	bic.w	r3, r3, #3
 80088f8:	f043 0302 	orr.w	r3, r3, #2
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	e7e3      	b.n	80088c8 <__smakebuf_r+0xc>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	6020      	str	r0, [r4, #0]
 8008904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	9b00      	ldr	r3, [sp, #0]
 800890c:	6163      	str	r3, [r4, #20]
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	6120      	str	r0, [r4, #16]
 8008912:	b15b      	cbz	r3, 800892c <__smakebuf_r+0x70>
 8008914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f81d 	bl	8008958 <_isatty_r>
 800891e:	b128      	cbz	r0, 800892c <__smakebuf_r+0x70>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	f043 0301 	orr.w	r3, r3, #1
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	431d      	orrs	r5, r3
 8008930:	81a5      	strh	r5, [r4, #12]
 8008932:	e7cf      	b.n	80088d4 <__smakebuf_r+0x18>

08008934 <_fstat_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d07      	ldr	r5, [pc, #28]	; (8008954 <_fstat_r+0x20>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	f7f9 f914 	bl	8001b6e <_fstat>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	d102      	bne.n	8008950 <_fstat_r+0x1c>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	b103      	cbz	r3, 8008950 <_fstat_r+0x1c>
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	bd38      	pop	{r3, r4, r5, pc}
 8008952:	bf00      	nop
 8008954:	20000b54 	.word	0x20000b54

08008958 <_isatty_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d06      	ldr	r5, [pc, #24]	; (8008974 <_isatty_r+0x1c>)
 800895c:	2300      	movs	r3, #0
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	602b      	str	r3, [r5, #0]
 8008964:	f7f9 f913 	bl	8001b8e <_isatty>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_isatty_r+0x1a>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_isatty_r+0x1a>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20000b54 	.word	0x20000b54

08008978 <_init>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr

08008984 <_fini>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr
