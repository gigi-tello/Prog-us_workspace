
TP-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008890  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08008a40  08008a40  00018a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e2c  08008e2c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e34  08008e34  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000990  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b64  20000b64  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001447e  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035fd  00000000  00000000  000346c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a0  00000000  00000000  00037cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d7f  00000000  00000000  00038e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000298a9  00000000  00000000  00039be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000190c8  00000000  00000000  00063490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee353  00000000  00000000  0007c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000592c  00000000  00000000  0016a8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001701d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008a28 	.word	0x08008a28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008a28 	.word	0x08008a28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <MX_ADC1_Init+0xa0>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <MX_ADC1_Init+0xa4>)
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc6:	480e      	ldr	r0, [pc, #56]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fc8:	f001 faca 	bl	8002560 <HAL_ADC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fd2:	f000 fbdf 	bl	8001794 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fe8:	f001 fc9c 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ff2:	f000 fbcf 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200001f0 	.word	0x200001f0
 8001004:	40012000 	.word	0x40012000
 8001008:	0f000001 	.word	0x0f000001

0800100c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_ADC_MspInit+0x7c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d127      	bne.n	800107e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_ADC_MspInit+0x80>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001066:	2308      	movs	r3, #8
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_ADC_MspInit+0x84>)
 800107a:	f002 fa8f 	bl	800359c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40012000 	.word	0x40012000
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000

08001094 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_ETH_Init+0x84>)
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <MX_ETH_Init+0x88>)
 800109c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_ETH_Init+0x8c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_ETH_Init+0x8c>)
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_ETH_Init+0x8c>)
 80010ac:	22e1      	movs	r2, #225	; 0xe1
 80010ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_ETH_Init+0x8c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_ETH_Init+0x8c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_ETH_Init+0x8c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_ETH_Init+0x84>)
 80010c4:	4a16      	ldr	r2, [pc, #88]	; (8001120 <MX_ETH_Init+0x8c>)
 80010c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_ETH_Init+0x84>)
 80010ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_ETH_Init+0x84>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <MX_ETH_Init+0x90>)
 80010d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_ETH_Init+0x84>)
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <MX_ETH_Init+0x94>)
 80010da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_ETH_Init+0x84>)
 80010de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_ETH_Init+0x84>)
 80010e6:	f001 ff31 	bl	8002f4c <HAL_ETH_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010f0:	f000 fb50 	bl	8001794 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010f4:	2238      	movs	r2, #56	; 0x38
 80010f6:	2100      	movs	r1, #0
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_ETH_Init+0x98>)
 80010fa:	f005 fb9c 	bl	8006836 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_ETH_Init+0x98>)
 8001100:	2221      	movs	r2, #33	; 0x21
 8001102:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_ETH_Init+0x98>)
 8001106:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800110a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_ETH_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200003b0 	.word	0x200003b0
 800111c:	40028000 	.word	0x40028000
 8001120:	20000460 	.word	0x20000460
 8001124:	200002d8 	.word	0x200002d8
 8001128:	20000238 	.word	0x20000238
 800112c:	20000378 	.word	0x20000378

08001130 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a55      	ldr	r2, [pc, #340]	; (80012a4 <HAL_ETH_MspInit+0x174>)
 800114e:	4293      	cmp	r3, r2
 8001150:	f040 80a4 	bne.w	800129c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	623b      	str	r3, [r7, #32]
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800117a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a44      	ldr	r2, [pc, #272]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a3d      	ldr	r2, [pc, #244]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a36      	ldr	r2, [pc, #216]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 8001206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_ETH_MspInit+0x178>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001218:	2332      	movs	r3, #50	; 0x32
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001228:	230b      	movs	r3, #11
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	481e      	ldr	r0, [pc, #120]	; (80012ac <HAL_ETH_MspInit+0x17c>)
 8001234:	f002 f9b2 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001238:	2386      	movs	r3, #134	; 0x86
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001248:	230b      	movs	r3, #11
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	4817      	ldr	r0, [pc, #92]	; (80012b0 <HAL_ETH_MspInit+0x180>)
 8001254:	f002 f9a2 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126a:	230b      	movs	r3, #11
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <HAL_ETH_MspInit+0x184>)
 8001276:	f002 f991 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800127a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128c:	230b      	movs	r3, #11
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <HAL_ETH_MspInit+0x188>)
 8001298:	f002 f980 	bl	800359c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800129c:	bf00      	nop
 800129e:	3738      	adds	r7, #56	; 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40028000 	.word	0x40028000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40021800 	.word	0x40021800

080012bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
 80012d6:	4b89      	ldr	r3, [pc, #548]	; (80014fc <MX_GPIO_Init+0x240>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a88      	ldr	r2, [pc, #544]	; (80014fc <MX_GPIO_Init+0x240>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b86      	ldr	r3, [pc, #536]	; (80014fc <MX_GPIO_Init+0x240>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	623b      	str	r3, [r7, #32]
 80012ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	4b82      	ldr	r3, [pc, #520]	; (80014fc <MX_GPIO_Init+0x240>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a81      	ldr	r2, [pc, #516]	; (80014fc <MX_GPIO_Init+0x240>)
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <MX_GPIO_Init+0x240>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b7b      	ldr	r3, [pc, #492]	; (80014fc <MX_GPIO_Init+0x240>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <MX_GPIO_Init+0x240>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b78      	ldr	r3, [pc, #480]	; (80014fc <MX_GPIO_Init+0x240>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b74      	ldr	r3, [pc, #464]	; (80014fc <MX_GPIO_Init+0x240>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a73      	ldr	r2, [pc, #460]	; (80014fc <MX_GPIO_Init+0x240>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b71      	ldr	r3, [pc, #452]	; (80014fc <MX_GPIO_Init+0x240>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <MX_GPIO_Init+0x240>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a6c      	ldr	r2, [pc, #432]	; (80014fc <MX_GPIO_Init+0x240>)
 800134c:	f043 0320 	orr.w	r3, r3, #32
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <MX_GPIO_Init+0x240>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b66      	ldr	r3, [pc, #408]	; (80014fc <MX_GPIO_Init+0x240>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <MX_GPIO_Init+0x240>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b63      	ldr	r3, [pc, #396]	; (80014fc <MX_GPIO_Init+0x240>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <MX_GPIO_Init+0x240>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a5e      	ldr	r2, [pc, #376]	; (80014fc <MX_GPIO_Init+0x240>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <MX_GPIO_Init+0x240>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b58      	ldr	r3, [pc, #352]	; (80014fc <MX_GPIO_Init+0x240>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a57      	ldr	r2, [pc, #348]	; (80014fc <MX_GPIO_Init+0x240>)
 80013a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b55      	ldr	r3, [pc, #340]	; (80014fc <MX_GPIO_Init+0x240>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	4852      	ldr	r0, [pc, #328]	; (8001500 <MX_GPIO_Init+0x244>)
 80013b8:	f002 fa9c 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f244 0181 	movw	r1, #16513	; 0x4081
 80013c2:	4850      	ldr	r0, [pc, #320]	; (8001504 <MX_GPIO_Init+0x248>)
 80013c4:	f002 fa96 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80013ce:	484e      	ldr	r0, [pc, #312]	; (8001508 <MX_GPIO_Init+0x24c>)
 80013d0:	f002 fa90 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80013da:	484c      	ldr	r0, [pc, #304]	; (800150c <MX_GPIO_Init+0x250>)
 80013dc:	f002 fa8a 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	484a      	ldr	r0, [pc, #296]	; (8001510 <MX_GPIO_Init+0x254>)
 80013e8:	f002 fa84 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2140      	movs	r1, #64	; 0x40
 80013f0:	4848      	ldr	r0, [pc, #288]	; (8001514 <MX_GPIO_Init+0x258>)
 80013f2:	f002 fa7f 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4842      	ldr	r0, [pc, #264]	; (8001518 <MX_GPIO_Init+0x25c>)
 800140e:	f002 f8c5 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4835      	ldr	r0, [pc, #212]	; (8001500 <MX_GPIO_Init+0x244>)
 800142a:	f002 f8b7 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800142e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	482f      	ldr	r0, [pc, #188]	; (8001504 <MX_GPIO_Init+0x248>)
 8001448:	f002 f8a8 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800144c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4828      	ldr	r0, [pc, #160]	; (8001508 <MX_GPIO_Init+0x24c>)
 8001466:	f002 f899 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800146a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4822      	ldr	r0, [pc, #136]	; (800150c <MX_GPIO_Init+0x250>)
 8001484:	f002 f88a 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	481c      	ldr	r0, [pc, #112]	; (8001510 <MX_GPIO_Init+0x254>)
 800149e:	f002 f87d 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4815      	ldr	r0, [pc, #84]	; (8001510 <MX_GPIO_Init+0x254>)
 80014bc:	f002 f86e 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014c0:	2340      	movs	r3, #64	; 0x40
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	480f      	ldr	r0, [pc, #60]	; (8001514 <MX_GPIO_Init+0x258>)
 80014d8:	f002 f860 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <MX_GPIO_Init+0x258>)
 80014f0:	f002 f854 	bl	800359c <HAL_GPIO_Init>

}
 80014f4:	bf00      	nop
 80014f6:	3738      	adds	r7, #56	; 0x38
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40021400 	.word	0x40021400
 800150c:	40021000 	.word	0x40021000
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021800 	.word	0x40021800
 8001518:	40020800 	.word	0x40020800

0800151c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_I2C1_Init+0x74>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <MX_I2C1_Init+0x78>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_I2C1_Init+0x74>)
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <MX_I2C1_Init+0x7c>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_I2C1_Init+0x74>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2C1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_I2C1_Init+0x74>)
 800155a:	f002 f9ff 	bl	800395c <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 f916 	bl	8001794 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001568:	2100      	movs	r1, #0
 800156a:	4809      	ldr	r0, [pc, #36]	; (8001590 <MX_I2C1_Init+0x74>)
 800156c:	f002 ffe4 	bl	8004538 <HAL_I2CEx_ConfigAnalogFilter>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001576:	f000 f90d 	bl	8001794 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800157a:	2100      	movs	r1, #0
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_I2C1_Init+0x74>)
 800157e:	f003 f817 	bl	80045b0 <HAL_I2CEx_ConfigDigitalFilter>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001588:	f000 f904 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000468 	.word	0x20000468
 8001594:	40005400 	.word	0x40005400
 8001598:	000186a0 	.word	0x000186a0

0800159c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_I2C_MspInit+0x84>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12c      	bne.n	8001618 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_I2C_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e0:	2312      	movs	r3, #18
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ec:	2304      	movs	r3, #4
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	480c      	ldr	r0, [pc, #48]	; (8001628 <HAL_I2C_MspInit+0x8c>)
 80015f8:	f001 ffd0 	bl	800359c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_I2C_MspInit+0x88>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_I2C_MspInit+0x88>)
 8001606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_I2C_MspInit+0x88>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40005400 	.word	0x40005400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020400 	.word	0x40020400

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001632:	f000 feff 	bl	8002434 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 8001636:	f000 fcb9 	bl	8001fac <lcd_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163a:	f000 f841 	bl	80016c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163e:	f7ff fe3d 	bl	80012bc <MX_GPIO_Init>
  MX_ETH_Init();
 8001642:	f7ff fd27 	bl	8001094 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001646:	f000 fb03 	bl	8001c50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800164a:	f000 fb73 	bl	8001d34 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800164e:	f7ff ff65 	bl	800151c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001652:	f7ff fc87 	bl	8000f64 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001656:	2064      	movs	r0, #100	; 0x64
 8001658:	f000 ff5e 	bl	8002518 <HAL_Delay>

    char mensaje[] = "Hola";
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <main+0x88>)
 800165e:	463b      	mov	r3, r7
 8001660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001664:	6018      	str	r0, [r3, #0]
 8001666:	3304      	adds	r3, #4
 8001668:	7019      	strb	r1, [r3, #0]
    lcd_enviar_cadena(mensaje);
 800166a:	463b      	mov	r3, r7
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fd33 	bl	80020d8 <lcd_enviar_cadena>
    lcd_pos_cursor(1,5);
 8001672:	2105      	movs	r1, #5
 8001674:	2001      	movs	r0, #1
 8001676:	f000 fd44 	bl	8002102 <lcd_pos_cursor>
    lcd_enviar_cadena("mundo");
 800167a:	480f      	ldr	r0, [pc, #60]	; (80016b8 <main+0x8c>)
 800167c:	f000 fd2c 	bl	80020d8 <lcd_enviar_cadena>
    HAL_Delay(500);
 8001680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001684:	f000 ff48 	bl	8002518 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	switch(mostrar_pantalla){
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <main+0x90>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d00c      	beq.n	80016aa <main+0x7e>
 8001690:	2b02      	cmp	r3, #2
 8001692:	dc0d      	bgt.n	80016b0 <main+0x84>
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <main+0x72>
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <main+0x78>
    		break;
    	case PANTALLA_TEMP:
    		pant_temp();
    		break;
    	default:
    		break;
 800169c:	e008      	b.n	80016b0 <main+0x84>
    		pant_opciones();
 800169e:	f000 f87f 	bl	80017a0 <pant_opciones>
    		break;
 80016a2:	e006      	b.n	80016b2 <main+0x86>
    		pant_fecha();
 80016a4:	f000 f8fe 	bl	80018a4 <pant_fecha>
    		break;
 80016a8:	e003      	b.n	80016b2 <main+0x86>
    		pant_temp();
 80016aa:	f000 f945 	bl	8001938 <pant_temp>
    		break;
 80016ae:	e000      	b.n	80016b2 <main+0x86>
    		break;
 80016b0:	bf00      	nop
    	switch(mostrar_pantalla){
 80016b2:	e7e9      	b.n	8001688 <main+0x5c>
 80016b4:	08008a48 	.word	0x08008a48
 80016b8:	08008a40 	.word	0x08008a40
 80016bc:	200004bc 	.word	0x200004bc

080016c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b094      	sub	sp, #80	; 0x50
 80016c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0320 	add.w	r3, r7, #32
 80016ca:	2230      	movs	r2, #48	; 0x30
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 f8b1 	bl	8006836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <SystemClock_Config+0xcc>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	4a27      	ldr	r2, [pc, #156]	; (800178c <SystemClock_Config+0xcc>)
 80016ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f2:	6413      	str	r3, [r2, #64]	; 0x40
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <SystemClock_Config+0xcc>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <SystemClock_Config+0xd0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <SystemClock_Config+0xd0>)
 800170a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <SystemClock_Config+0xd0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171c:	2301      	movs	r3, #1
 800171e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001730:	2304      	movs	r3, #4
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001734:	23a8      	movs	r3, #168	; 0xa8
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001738:	2302      	movs	r3, #2
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800173c:	2307      	movs	r3, #7
 800173e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	4618      	mov	r0, r3
 8001746:	f003 f88f 	bl	8004868 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001750:	f000 f820 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001754:	230f      	movs	r3, #15
 8001756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2105      	movs	r1, #5
 8001772:	4618      	mov	r0, r3
 8001774:	f003 faf0 	bl	8004d58 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800177e:	f000 f809 	bl	8001794 <Error_Handler>
  }
}
 8001782:	bf00      	nop
 8001784:	3750      	adds	r7, #80	; 0x50
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179c:	e7fe      	b.n	800179c <Error_Handler+0x8>
	...

080017a0 <pant_opciones>:
 *  seleccionada.
 *  Implementa un debounce simple para evitar el rebote de los botones del keypad
 *
 */

void pant_opciones(void){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
    /*

    */
	bool_t opcion_seleccionada = false; 	//Flag para cambiar de pantalla
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]
	bool_t lectura_boton_habilitada = true;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75bb      	strb	r3, [r7, #22]

	uint8_t boton = BOT_NINGUNO; 				//Botón presionado
 80017ae:	2300      	movs	r3, #0
 80017b0:	757b      	strb	r3, [r7, #21]
	uint8_t pos_cursor = OPCION_MOSTRAR_FECHA; 	//Posición del cursor
 80017b2:	2300      	movs	r3, #0
 80017b4:	753b      	strb	r3, [r7, #20]

    tick_t tiempo_debounce_btn = 100;
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	613b      	str	r3, [r7, #16]
    delay_t btn_delay={           //Inicializo la estructura del delay
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	2300      	movs	r3, #0
 80017c4:	733b      	strb	r3, [r7, #12]
            .startTime = 0,
            .duration = 0,
            .running = false
    };

	delayInit(&btn_delay, tiempo_debounce_btn);
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fb82 	bl	8001ed4 <delayInit>

	lcd_borrar();
 80017d0:	f000 fcb7 	bl	8002142 <lcd_borrar>
	lcd_pos_cursor(0, 1);
 80017d4:	2101      	movs	r1, #1
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 fc93 	bl	8002102 <lcd_pos_cursor>
    lcd_enviar_cadena(MSJ_MOSTRAR_FECHA);
 80017dc:	482e      	ldr	r0, [pc, #184]	; (8001898 <pant_opciones+0xf8>)
 80017de:	f000 fc7b 	bl	80020d8 <lcd_enviar_cadena>
    lcd_pos_cursor(1, 1);
 80017e2:	2101      	movs	r1, #1
 80017e4:	2001      	movs	r0, #1
 80017e6:	f000 fc8c 	bl	8002102 <lcd_pos_cursor>
    lcd_enviar_cadena(MSJ_MOSTRAR_TEMP);
 80017ea:	482c      	ldr	r0, [pc, #176]	; (800189c <pant_opciones+0xfc>)
 80017ec:	f000 fc74 	bl	80020d8 <lcd_enviar_cadena>
	pant_fila_cursor(pos_cursor);
 80017f0:	7d3b      	ldrb	r3, [r7, #20]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f8da 	bl	80019ac <pant_fila_cursor>

    while(opcion_seleccionada == false){
 80017f8:	e042      	b.n	8001880 <pant_opciones+0xe0>
        if(delayRead(&btn_delay)){    			//Debounce - Cuando se cumple
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fb7b 	bl	8001ef8 <delayRead>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <pant_opciones+0x6c>
        	lectura_boton_habilitada = true;	//el tiempo, habilito el botón
 8001808:	2301      	movs	r3, #1
 800180a:	75bb      	strb	r3, [r7, #22]
        }

        if(lectura_boton_habilitada){
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <pant_opciones+0x7a>
        	boton = obtener_boton_presionado();
 8001812:	f000 fba3 	bl	8001f5c <obtener_boton_presionado>
 8001816:	4603      	mov	r3, r0
 8001818:	757b      	strb	r3, [r7, #21]
        }

    	switch (boton){
 800181a:	7d7b      	ldrb	r3, [r7, #21]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d006      	beq.n	800182e <pant_opciones+0x8e>
 8001820:	2b03      	cmp	r3, #3
 8001822:	dc2c      	bgt.n	800187e <pant_opciones+0xde>
 8001824:	2b01      	cmp	r3, #1
 8001826:	d01a      	beq.n	800185e <pant_opciones+0xbe>
 8001828:	2b02      	cmp	r3, #2
 800182a:	d00c      	beq.n	8001846 <pant_opciones+0xa6>
 800182c:	e027      	b.n	800187e <pant_opciones+0xde>
    	case BOT_ABAJO :
    		if(pos_cursor == OPCION_MOSTRAR_FECHA){
 800182e:	7d3b      	ldrb	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d125      	bne.n	8001880 <pant_opciones+0xe0>
    			pos_cursor = OPCION_MOSTRAR_TEMP;
 8001834:	2301      	movs	r3, #1
 8001836:	753b      	strb	r3, [r7, #20]
    			pant_fila_cursor(pos_cursor);
 8001838:	7d3b      	ldrb	r3, [r7, #20]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f8b6 	bl	80019ac <pant_fila_cursor>
    			lectura_boton_habilitada = false;
 8001840:	2300      	movs	r3, #0
 8001842:	75bb      	strb	r3, [r7, #22]
    		}
    		break;
 8001844:	e01c      	b.n	8001880 <pant_opciones+0xe0>
    	case BOT_ARRIBA :
    		if(pos_cursor == OPCION_MOSTRAR_TEMP){
 8001846:	7d3b      	ldrb	r3, [r7, #20]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d119      	bne.n	8001880 <pant_opciones+0xe0>
    			pos_cursor = OPCION_MOSTRAR_FECHA;
 800184c:	2300      	movs	r3, #0
 800184e:	753b      	strb	r3, [r7, #20]
    			pant_fila_cursor(pos_cursor);
 8001850:	7d3b      	ldrb	r3, [r7, #20]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f8aa 	bl	80019ac <pant_fila_cursor>
    			lectura_boton_habilitada = false;
 8001858:	2300      	movs	r3, #0
 800185a:	75bb      	strb	r3, [r7, #22]
    		}
    		break;
 800185c:	e010      	b.n	8001880 <pant_opciones+0xe0>
    	case BOT_ADELANTE :
    		if(pos_cursor == OPCION_MOSTRAR_FECHA){
 800185e:	7d3b      	ldrb	r3, [r7, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <pant_opciones+0xcc>
    			mostrar_pantalla = PANTALLA_FECHA;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <pant_opciones+0x100>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e005      	b.n	8001878 <pant_opciones+0xd8>
    		}
    		else if(pos_cursor == OPCION_MOSTRAR_TEMP){
 800186c:	7d3b      	ldrb	r3, [r7, #20]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d102      	bne.n	8001878 <pant_opciones+0xd8>
    			mostrar_pantalla = PANTALLA_TEMP;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <pant_opciones+0x100>)
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
    		}
    		opcion_seleccionada = true;
 8001878:	2301      	movs	r3, #1
 800187a:	75fb      	strb	r3, [r7, #23]
    		break;
 800187c:	e000      	b.n	8001880 <pant_opciones+0xe0>
    	default:
    		break;
 800187e:	bf00      	nop
    while(opcion_seleccionada == false){
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	f083 0301 	eor.w	r3, r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1b6      	bne.n	80017fa <pant_opciones+0x5a>
    	}

    }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	08008a50 	.word	0x08008a50
 800189c:	08008a60 	.word	0x08008a60
 80018a0:	200004bc 	.word	0x200004bc

080018a4 <pant_fecha>:
 *		----------------
 *
 * 	El botón ATRAS vuelve al menú principal.
 *
 */
void pant_fecha(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0

	char fecha[LARGO_CADENA_FECHA] = "";
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	711a      	strb	r2, [r3, #4]
	char hora[LARGO_CADENA_HORA] =  "";
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	2300      	movs	r3, #0
 80018be:	813b      	strh	r3, [r7, #8]
	bool_t boton_presionado = false;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
	uint8_t boton = BOT_NINGUNO;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75bb      	strb	r3, [r7, #22]

	obtener_fecha(fecha);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fd2f 	bl	8002330 <obtener_fecha>
	obtener_hora(hora);
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fd45 	bl	8002364 <obtener_hora>

    lcd_borrar();
 80018da:	f000 fc32 	bl	8002142 <lcd_borrar>
    lcd_pos_cursor(0, 4);
 80018de:	2104      	movs	r1, #4
 80018e0:	2000      	movs	r0, #0
 80018e2:	f000 fc0e 	bl	8002102 <lcd_pos_cursor>
    lcd_enviar_cadena(fecha);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fbf4 	bl	80020d8 <lcd_enviar_cadena>

    lcd_pos_cursor(1, 5);
 80018f0:	2105      	movs	r1, #5
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 fc05 	bl	8002102 <lcd_pos_cursor>
    lcd_enviar_cadena(hora);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fbec 	bl	80020d8 <lcd_enviar_cadena>

    while(boton_presionado == false){
 8001900:	e00d      	b.n	800191e <pant_fecha+0x7a>
    	boton = obtener_boton_presionado();
 8001902:	f000 fb2b 	bl	8001f5c <obtener_boton_presionado>
 8001906:	4603      	mov	r3, r0
 8001908:	75bb      	strb	r3, [r7, #22]

        switch (boton){
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d105      	bne.n	800191c <pant_fecha+0x78>
            case BOT_ATRAS:
            	mostrar_pantalla = PANTALLA_OPCIONES;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <pant_fecha+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
            	boton_presionado = true;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
                break;
 800191a:	e000      	b.n	800191e <pant_fecha+0x7a>
            default:
                break;
 800191c:	bf00      	nop
    while(boton_presionado == false){
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	f083 0301 	eor.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1eb      	bne.n	8001902 <pant_fecha+0x5e>
        }

    }

}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200004bc 	.word	0x200004bc

08001938 <pant_temp>:
 *		----------------
 *
 * 	El botón ATRAS vuelve al menú principal.
 *
 */
void pant_temp(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
    char cad_temperatura[LARGO_CADENA_TEMP] = "";
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	f8c3 2007 	str.w	r2, [r3, #7]
	bool_t boton_presionado = false;
 8001950:	2300      	movs	r3, #0
 8001952:	75fb      	strb	r3, [r7, #23]
	uint8_t boton = BOT_NINGUNO;
 8001954:	2300      	movs	r3, #0
 8001956:	75bb      	strb	r3, [r7, #22]

    obtener_temp(cad_temperatura);
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fd52 	bl	8002404 <obtener_temp>

    lcd_borrar();
 8001960:	f000 fbef 	bl	8002142 <lcd_borrar>
    lcd_pos_cursor(0, 0);
 8001964:	2100      	movs	r1, #0
 8001966:	2000      	movs	r0, #0
 8001968:	f000 fbcb 	bl	8002102 <lcd_pos_cursor>
    lcd_enviar_cadena(cad_temperatura);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fbb2 	bl	80020d8 <lcd_enviar_cadena>

    while(boton_presionado == false){
 8001974:	e00d      	b.n	8001992 <pant_temp+0x5a>
    	boton = obtener_boton_presionado();
 8001976:	f000 faf1 	bl	8001f5c <obtener_boton_presionado>
 800197a:	4603      	mov	r3, r0
 800197c:	75bb      	strb	r3, [r7, #22]

        switch (boton){
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d105      	bne.n	8001990 <pant_temp+0x58>
            case BOT_ATRAS:
            	mostrar_pantalla = PANTALLA_OPCIONES;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <pant_temp+0x70>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
            	boton_presionado = true;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
                break;
 800198e:	e000      	b.n	8001992 <pant_temp+0x5a>
            default:
                break;
 8001990:	bf00      	nop
    while(boton_presionado == false){
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1eb      	bne.n	8001976 <pant_temp+0x3e>
        }

    }

}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200004bc 	.word	0x200004bc

080019ac <pant_fila_cursor>:
 *	de la otra opción, y lo dibuja en la correspondiente.
 *
 * \param opcion La opción marcada
 *
 */
void pant_fila_cursor(uint8_t opcion){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
    switch (opcion){
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <pant_fila_cursor+0x16>
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d005      	beq.n	80019cc <pant_fila_cursor+0x20>
 80019c0:	e009      	b.n	80019d6 <pant_fila_cursor+0x2a>
        case OPCION_MOSTRAR_FECHA:
        	lcd_pos_cursor(OPCION_MOSTRAR_TEMP, 0);
 80019c2:	2100      	movs	r1, #0
 80019c4:	2001      	movs	r0, #1
 80019c6:	f000 fb9c 	bl	8002102 <lcd_pos_cursor>
            break;
 80019ca:	e004      	b.n	80019d6 <pant_fila_cursor+0x2a>
        case OPCION_MOSTRAR_TEMP:
        	lcd_pos_cursor(OPCION_MOSTRAR_FECHA, 0);
 80019cc:	2100      	movs	r1, #0
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 fb97 	bl	8002102 <lcd_pos_cursor>
            break;
 80019d4:	bf00      	nop
    }
    lcd_enviar_cadena(" ");
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <pant_fila_cursor+0x48>)
 80019d8:	f000 fb7e 	bl	80020d8 <lcd_enviar_cadena>
    lcd_pos_cursor(opcion, 0);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fb8e 	bl	8002102 <lcd_pos_cursor>
    lcd_enviar_cadena(CARACTER_CURSOR);
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <pant_fila_cursor+0x4c>)
 80019e8:	f000 fb76 	bl	80020d8 <lcd_enviar_cadena>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	08008a70 	.word	0x08008a70
 80019f8:	08008a74 	.word	0x08008a74

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a98:	f000 fd1e 	bl	80024d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_kill>:

int _kill(int pid, int sig)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aba:	f004 ff0f 	bl	80068dc <__errno>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2216      	movs	r2, #22
 8001ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_exit>:

void _exit (int status)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffe7 	bl	8001ab0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ae2:	e7fe      	b.n	8001ae2 <_exit+0x12>

08001ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e00a      	b.n	8001b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af6:	f3af 8000 	nop.w
 8001afa:	4601      	mov	r1, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	b2ca      	uxtb	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf0      	blt.n	8001af6 <_read+0x12>
  }

  return len;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e009      	b.n	8001b44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbf1      	blt.n	8001b30 <_write+0x12>
  }
  return len;
 8001b4c:	687b      	ldr	r3, [r7, #4]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_close>:

int _close(int file)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_isatty>:

int _isatty(int file)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f004 fe74 	bl	80068dc <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20030000 	.word	0x20030000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	200004c0 	.word	0x200004c0
 8001c28:	20000b68 	.word	0x20000b68

08001c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_USART3_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c88:	f003 fa86 	bl	8005198 <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c92:	f7ff fd7f 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200004c4 	.word	0x200004c4
 8001ca0:	40004800 	.word	0x40004800

08001ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12c      	bne.n	8001d20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d10:	2307      	movs	r3, #7
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_UART_MspInit+0x8c>)
 8001d1c:	f001 fc3e 	bl	800359c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40004800 	.word	0x40004800
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020c00 	.word	0x40020c00

08001d34 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d42:	2204      	movs	r2, #4
 8001d44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d48:	2202      	movs	r2, #2
 8001d4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d78:	f002 fc59 	bl	800462e <HAL_PCD_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d82:	f7ff fd07 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000508 	.word	0x20000508

08001d90 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db0:	d13f      	bne.n	8001e32 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001de0:	230a      	movs	r3, #10
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4815      	ldr	r0, [pc, #84]	; (8001e40 <HAL_PCD_MspInit+0xb0>)
 8001dec:	f001 fbd6 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	480e      	ldr	r0, [pc, #56]	; (8001e40 <HAL_PCD_MspInit+0xb0>)
 8001e06:	f001 fbc9 	bl	800359c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	6353      	str	r3, [r2, #52]	; 0x34
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_PCD_MspInit+0xac>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000

08001e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4a:	490e      	ldr	r1, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e60:	4c0b      	ldr	r4, [pc, #44]	; (8001e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e6e:	f7ff fedd 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e72:	f004 fd39 	bl	80068e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e76:	f7ff fbd9 	bl	800162c <main>
  bx  lr    
 8001e7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e88:	08008e3c 	.word	0x08008e3c
  ldr r2, =_sbss
 8001e8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e90:	20000b64 	.word	0x20000b64

08001e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC_IRQHandler>
	...

08001e98 <leer_adc>:
/**
 * \brief Lee el valor del ADC
 *
 * \return El valor leído
 */
uint32_t leer_adc(void){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
	// ADC_HandleTypeDef hadc;
	uint32_t valor = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <leer_adc+0x38>)
 8001ea4:	f000 fba0 	bl	80025e8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <leer_adc+0x38>)
 8001eae:	f000 fca0 	bl	80027f2 <HAL_ADC_PollForConversion>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <leer_adc+0x28>
		valor = HAL_ADC_GetValue(&hadc1);
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <leer_adc+0x38>)
 8001eba:	f000 fd25 	bl	8002908 <HAL_ADC_GetValue>
 8001ebe:	6078      	str	r0, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <leer_adc+0x38>)
 8001ec2:	f000 fc63 	bl	800278c <HAL_ADC_Stop>

	return valor;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200001f0 	.word	0x200001f0

08001ed4 <delayInit>:

/*
 * Carga el valor de duración del retardo en la estructura delay
 * Inicializa delay.running en false
 * */
void delayInit( delay_t * delay, tick_t duration ){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	bool running_init_state = false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]

	delayWrite(delay, duration);
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f82b 	bl	8001f40 <delayWrite>
	delay->running = running_init_state;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	721a      	strb	r2, [r3, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <delayRead>:
/*
 * Verifica el estado del flag running y devuelve un valor booleano que indica
 * si el tiempo se cumplió o no.
 * 	false: toma la marca de tiempo y cambia running a ‘true’
 * 	true: hacer la cuenta para saber si el tiempo del retardo se cumplió o no*/
bool_t delayRead( delay_t * delay ){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	if(delay->running){
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7a1b      	ldrb	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <delayRead+0x2e>
		if ((HAL_GetTick() - delay->startTime) >= delay->duration){
 8001f08:	f000 fafa 	bl	8002500 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d30c      	bcc.n	8001f36 <delayRead+0x3e>
			delay->running = false;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	721a      	strb	r2, [r3, #8]
			return true;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e008      	b.n	8001f38 <delayRead+0x40>
		}
	} else {
		delay->startTime = HAL_GetTick();
 8001f26:	f000 faeb 	bl	8002500 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	721a      	strb	r2, [r3, #8]
	}
	return false;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <delayWrite>:

/*Permite cambiar el tiempo de duración de un delay existente*/
void delayWrite( delay_t * delay, tick_t duration ){
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <obtener_boton_presionado>:
 *  que cambia según el pulsador que se presiona. La salida está conectada a A0.
 *
 * \return El botón presionado.
 */

uint8_t obtener_boton_presionado(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
    uint8_t boton = BOT_NINGUNO;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
    uint32_t req = leer_adc();
 8001f66:	f7ff ff97 	bl	8001e98 <leer_adc>
 8001f6a:	6038      	str	r0, [r7, #0]

    if (req < LIMITE_BOT_ADELANTE) {
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b31      	cmp	r3, #49	; 0x31
 8001f70:	d802      	bhi.n	8001f78 <obtener_boton_presionado+0x1c>
        boton = BOT_ADELANTE;
 8001f72:	2301      	movs	r3, #1
 8001f74:	71fb      	strb	r3, [r7, #7]
 8001f76:	e013      	b.n	8001fa0 <obtener_boton_presionado+0x44>
    } else if (req < LIMITE_BOT_ARRIBA) {
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2bf9      	cmp	r3, #249	; 0xf9
 8001f7c:	d802      	bhi.n	8001f84 <obtener_boton_presionado+0x28>
        boton = BOT_ARRIBA;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	e00d      	b.n	8001fa0 <obtener_boton_presionado+0x44>
    } else if (req < LIMITE_BOT_ABAJO) {
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f8a:	d202      	bcs.n	8001f92 <obtener_boton_presionado+0x36>
        boton = BOT_ABAJO;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	e006      	b.n	8001fa0 <obtener_boton_presionado+0x44>
    } else if (req < LIMITE_BOT_ATRAS) {
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f240 3215 	movw	r2, #789	; 0x315
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d801      	bhi.n	8001fa0 <obtener_boton_presionado+0x44>
        boton = BOT_ATRAS;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	71fb      	strb	r3, [r7, #7]
    }

    return boton;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <lcd_init>:
  ******************************************************************************
  **/

#include "API_lcd.h"

void lcd_init (void){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	  HAL_Delay(10);
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	f000 fab1 	bl	8002518 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	4846      	ldr	r0, [pc, #280]	; (80020d4 <lcd_init+0x128>)
 8001fbc:	f001 fc9a 	bl	80038f4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001fc0:	200a      	movs	r0, #10
 8001fc2:	f000 faa9 	bl	8002518 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 1);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2140      	movs	r1, #64	; 0x40
 8001fca:	4842      	ldr	r0, [pc, #264]	; (80020d4 <lcd_init+0x128>)
 8001fcc:	f001 fc92 	bl	80038f4 <HAL_GPIO_WritePin>
	  HAL_Delay(25);
 8001fd0:	2019      	movs	r0, #25
 8001fd2:	f000 faa1 	bl	8002518 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2140      	movs	r1, #64	; 0x40
 8001fda:	483e      	ldr	r0, [pc, #248]	; (80020d4 <lcd_init+0x128>)
 8001fdc:	f001 fc8a 	bl	80038f4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f000 fa99 	bl	8002518 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 1);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2140      	movs	r1, #64	; 0x40
 8001fea:	483a      	ldr	r0, [pc, #232]	; (80020d4 <lcd_init+0x128>)
 8001fec:	f001 fc82 	bl	80038f4 <HAL_GPIO_WritePin>
	  HAL_Delay(25);
 8001ff0:	2019      	movs	r0, #25
 8001ff2:	f000 fa91 	bl	8002518 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2140      	movs	r1, #64	; 0x40
 8001ffa:	4836      	ldr	r0, [pc, #216]	; (80020d4 <lcd_init+0x128>)
 8001ffc:	f001 fc7a 	bl	80038f4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8002000:	200a      	movs	r0, #10
 8002002:	f000 fa89 	bl	8002518 <HAL_Delay>

    // Inicialización para 4 bit
    HAL_Delay(50);  // Esperar >40ms
 8002006:	2032      	movs	r0, #50	; 0x32
 8002008:	f000 fa86 	bl	8002518 <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);
 800200c:	2030      	movs	r0, #48	; 0x30
 800200e:	f000 f8fb 	bl	8002208 <lcd_enviar_comando>
    HAL_GPIO_TogglePin(TEST_PORT, TEST_PIN);
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	482f      	ldr	r0, [pc, #188]	; (80020d4 <lcd_init+0x128>)
 8002016:	f001 fc86 	bl	8003926 <HAL_GPIO_TogglePin>

    HAL_Delay(5);  // Esperar >4.1ms
 800201a:	2005      	movs	r0, #5
 800201c:	f000 fa7c 	bl	8002518 <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);HAL_GPIO_TogglePin(TEST_PORT, TEST_PIN);
 8002020:	2030      	movs	r0, #48	; 0x30
 8002022:	f000 f8f1 	bl	8002208 <lcd_enviar_comando>
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	482a      	ldr	r0, [pc, #168]	; (80020d4 <lcd_init+0x128>)
 800202a:	f001 fc7c 	bl	8003926 <HAL_GPIO_TogglePin>
    HAL_Delay(1);  // Esperar >100us
 800202e:	2001      	movs	r0, #1
 8002030:	f000 fa72 	bl	8002518 <HAL_Delay>
    lcd_enviar_comando (INIT_CMD);HAL_GPIO_TogglePin(TEST_PORT, TEST_PIN);
 8002034:	2030      	movs	r0, #48	; 0x30
 8002036:	f000 f8e7 	bl	8002208 <lcd_enviar_comando>
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	4825      	ldr	r0, [pc, #148]	; (80020d4 <lcd_init+0x128>)
 800203e:	f001 fc72 	bl	8003926 <HAL_GPIO_TogglePin>
    HAL_Delay(10);
 8002042:	200a      	movs	r0, #10
 8002044:	f000 fa68 	bl	8002518 <HAL_Delay>
    lcd_enviar_comando (MODO_4BIT);HAL_GPIO_TogglePin(TEST_PORT, TEST_PIN);
 8002048:	2020      	movs	r0, #32
 800204a:	f000 f8dd 	bl	8002208 <lcd_enviar_comando>
 800204e:	2140      	movs	r1, #64	; 0x40
 8002050:	4820      	ldr	r0, [pc, #128]	; (80020d4 <lcd_init+0x128>)
 8002052:	f001 fc68 	bl	8003926 <HAL_GPIO_TogglePin>
    HAL_Delay(10);
 8002056:	200a      	movs	r0, #10
 8002058:	f000 fa5e 	bl	8002518 <HAL_Delay>

  // dislay initialisation
    lcd_enviar_comando (FUNCTION_SET); // FDL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800205c:	2028      	movs	r0, #40	; 0x28
 800205e:	f000 f8d3 	bl	8002208 <lcd_enviar_comando>
    HAL_Delay(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f000 fa58 	bl	8002518 <HAL_Delay>
    lcd_enviar_comando (LCD_OFF); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002068:	2008      	movs	r0, #8
 800206a:	f000 f8cd 	bl	8002208 <lcd_enviar_comando>
    HAL_Delay(1);
 800206e:	2001      	movs	r0, #1
 8002070:	f000 fa52 	bl	8002518 <HAL_Delay>
    lcd_enviar_comando (CLEAR_LCD);  // clear display
 8002074:	2001      	movs	r0, #1
 8002076:	f000 f8c7 	bl	8002208 <lcd_enviar_comando>
    HAL_Delay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 fa4c 	bl	8002518 <HAL_Delay>
    HAL_Delay(1);
 8002080:	2001      	movs	r0, #1
 8002082:	f000 fa49 	bl	8002518 <HAL_Delay>
    lcd_enviar_comando (ENTRY_MODE_SET); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002086:	2006      	movs	r0, #6
 8002088:	f000 f8be 	bl	8002208 <lcd_enviar_comando>
    HAL_Delay(1);
 800208c:	2001      	movs	r0, #1
 800208e:	f000 fa43 	bl	8002518 <HAL_Delay>
    lcd_enviar_comando (BLINK_CURSOR); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002092:	200c      	movs	r0, #12
 8002094:	f000 f8b8 	bl	8002208 <lcd_enviar_comando>
	  HAL_Delay(10);
 8002098:	200a      	movs	r0, #10
 800209a:	f000 fa3d 	bl	8002518 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2140      	movs	r1, #64	; 0x40
 80020a2:	480c      	ldr	r0, [pc, #48]	; (80020d4 <lcd_init+0x128>)
 80020a4:	f001 fc26 	bl	80038f4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80020a8:	200a      	movs	r0, #10
 80020aa:	f000 fa35 	bl	8002518 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 1);
 80020ae:	2201      	movs	r2, #1
 80020b0:	2140      	movs	r1, #64	; 0x40
 80020b2:	4808      	ldr	r0, [pc, #32]	; (80020d4 <lcd_init+0x128>)
 80020b4:	f001 fc1e 	bl	80038f4 <HAL_GPIO_WritePin>
	  HAL_Delay(25);
 80020b8:	2019      	movs	r0, #25
 80020ba:	f000 fa2d 	bl	8002518 <HAL_Delay>
	  HAL_GPIO_WritePin(TEST_PORT, TEST_PIN, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	4804      	ldr	r0, [pc, #16]	; (80020d4 <lcd_init+0x128>)
 80020c4:	f001 fc16 	bl	80038f4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 fa25 	bl	8002518 <HAL_Delay>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40020000 	.word	0x40020000

080020d8 <lcd_enviar_cadena>:
//    data_t[1] = data_u|0x09;  //en=0, rs=1
//    data_t[2] = data_l|0x0D;  //en=1, rs=1
//    data_t[3] = data_l|0x09;  //en=0, rs=1
//    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
//}
void lcd_enviar_cadena (char *str){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    while (*str) lcd_enviar_dato (*str++);
 80020e0:	e006      	b.n	80020f0 <lcd_enviar_cadena+0x18>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f8a6 	bl	800223c <lcd_enviar_dato>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f4      	bne.n	80020e2 <lcd_enviar_cadena+0xa>
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <lcd_pos_cursor>:

void lcd_pos_cursor(uint8_t fil, uint8_t col){
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	460a      	mov	r2, r1
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	4613      	mov	r3, r2
 8002110:	71bb      	strb	r3, [r7, #6]
    switch (fil){
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <lcd_pos_cursor+0x1c>
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <lcd_pos_cursor+0x26>
 800211c:	e009      	b.n	8002132 <lcd_pos_cursor+0x30>
        case 0:
            col |= 0x80;
 800211e:	79bb      	ldrb	r3, [r7, #6]
 8002120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002124:	71bb      	strb	r3, [r7, #6]
            break;
 8002126:	e004      	b.n	8002132 <lcd_pos_cursor+0x30>
        case 1:
            col |= 0xC0;
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800212e:	71bb      	strb	r3, [r7, #6]
            break;
 8002130:	bf00      	nop
    }
    lcd_enviar_comando(col);
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f867 	bl	8002208 <lcd_enviar_comando>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <lcd_borrar>:

void lcd_borrar(void){
 8002142:	b580      	push	{r7, lr}
 8002144:	af00      	add	r7, sp, #0
	lcd_enviar_comando(CLEAR_LCD);
 8002146:	2001      	movs	r0, #1
 8002148:	f000 f85e 	bl	8002208 <lcd_enviar_comando>
    HAL_Delay(5);
 800214c:	2005      	movs	r0, #5
 800214e:	f000 f9e3 	bl	8002518 <HAL_Delay>

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <lcd_enviar>:

 void lcd_enviar(char data, int rs) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs);  // rs = 1 for data, rs=0 for command
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216e:	4823      	ldr	r0, [pc, #140]	; (80021fc <lcd_enviar+0xa4>)
 8002170:	f001 fbc0 	bl	80038f4 <HAL_GPIO_WritePin>
    /* write the data to the respective pin */
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, ((data>>3)&0x01));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002186:	481d      	ldr	r0, [pc, #116]	; (80021fc <lcd_enviar+0xa4>)
 8002188:	f001 fbb4 	bl	80038f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, ((data>>2)&0x01));
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800219e:	4818      	ldr	r0, [pc, #96]	; (8002200 <lcd_enviar+0xa8>)
 80021a0:	f001 fba8 	bl	80038f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, ((data>>1)&0x01));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b6:	4812      	ldr	r0, [pc, #72]	; (8002200 <lcd_enviar+0xa8>)
 80021b8:	f001 fb9c 	bl	80038f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, ((data>>0)&0x01));
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ca:	480c      	ldr	r0, [pc, #48]	; (80021fc <lcd_enviar+0xa4>)
 80021cc:	f001 fb92 	bl	80038f4 <HAL_GPIO_WritePin>
    /* Toggle EN PIN to send the data
     * if the HCLK > 100 MHz, use the  20 us delay
     * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
     */
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d6:	480b      	ldr	r0, [pc, #44]	; (8002204 <lcd_enviar+0xac>)
 80021d8:	f001 fb8c 	bl	80038f4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 f99b 	bl	8002518 <HAL_Delay>
//  delay (20);
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e8:	4806      	ldr	r0, [pc, #24]	; (8002204 <lcd_enviar+0xac>)
 80021ea:	f001 fb83 	bl	80038f4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 f992 	bl	8002518 <HAL_Delay>
//  delay (20);
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021400 	.word	0x40021400
 8002200:	40021000 	.word	0x40021000
 8002204:	40020c00 	.word	0x40020c00

08002208 <lcd_enviar_comando>:

 void lcd_enviar_comando (char cmd)
 {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
     char datatosend;
     /* send upper nibble first */
     datatosend = ((cmd>>4)&0x0f);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	73fb      	strb	r3, [r7, #15]
     lcd_enviar(datatosend,0);  // RS must be while sending command
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff9b 	bl	8002158 <lcd_enviar>
     /* send Lower Nibble */
     datatosend = ((cmd)&0x0f);
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	73fb      	strb	r3, [r7, #15]
     lcd_enviar(datatosend, 0);
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff92 	bl	8002158 <lcd_enviar>
 }
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <lcd_enviar_dato>:

 void lcd_enviar_dato (char data)
 {
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
     char datatosend;

     /* send higher nibble */
     datatosend = ((data>>4)&0x0f);
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	73fb      	strb	r3, [r7, #15]
     lcd_enviar(datatosend, 1);  // rs =1 for sending data
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff81 	bl	8002158 <lcd_enviar>
     /* send Lower nibble */
     datatosend = ((data)&0x0f);
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	73fb      	strb	r3, [r7, #15]
     lcd_enviar(datatosend, 1);
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2101      	movs	r1, #1
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff78 	bl	8002158 <lcd_enviar>
 }
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <bcd2dec>:
uint8_t dec2bcd(int val){
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convierte de bcd a decimal
// Multiplica al nibble alto por 10, y le suma el nibble bajo
static uint8_t bcd2dec(uint8_t bcd){
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  int dec = ((bcd & 0xF0) >> 4) * 10 + (bcd & 0x0F);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	461a      	mov	r2, r3
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  return dec;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	b2db      	uxtb	r3, r3
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <leer_fecha_hora>:

dateTime_t leer_fecha_hora(void){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af04      	add	r7, sp, #16
 80022ae:	6078      	str	r0, [r7, #4]
	dateTime_t dato;
	uint8_t dato_leido[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, MEM_REG, 1, dato_leido, CANT_REG_FH, RTC_TIMEOUT);
 80022b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	2307      	movs	r3, #7
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	2200      	movs	r2, #0
 80022c4:	21d0      	movs	r1, #208	; 0xd0
 80022c6:	4819      	ldr	r0, [pc, #100]	; (800232c <leer_fecha_hora+0x84>)
 80022c8:	f001 fc8c 	bl	8003be4 <HAL_I2C_Mem_Read>

	dato.seg = bcd2dec(dato_leido[0]);
 80022cc:	7a3b      	ldrb	r3, [r7, #8]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ffce 	bl	8002270 <bcd2dec>
 80022d4:	4603      	mov	r3, r0
 80022d6:	757b      	strb	r3, [r7, #21]
	dato.min = bcd2dec(dato_leido[1]);
 80022d8:	7a7b      	ldrb	r3, [r7, #9]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ffc8 	bl	8002270 <bcd2dec>
 80022e0:	4603      	mov	r3, r0
 80022e2:	753b      	strb	r3, [r7, #20]
	dato.hora = bcd2dec(dato_leido[2]);
 80022e4:	7abb      	ldrb	r3, [r7, #10]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ffc2 	bl	8002270 <bcd2dec>
 80022ec:	4603      	mov	r3, r0
 80022ee:	74fb      	strb	r3, [r7, #19]
	//dato_leido[3] corresponde al día de la semana
	dato.dia = bcd2dec(dato_leido[4]);
 80022f0:	7b3b      	ldrb	r3, [r7, #12]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ffbc 	bl	8002270 <bcd2dec>
 80022f8:	4603      	mov	r3, r0
 80022fa:	74bb      	strb	r3, [r7, #18]
	dato.mes = bcd2dec(dato_leido[5]);
 80022fc:	7b7b      	ldrb	r3, [r7, #13]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ffb6 	bl	8002270 <bcd2dec>
 8002304:	4603      	mov	r3, r0
 8002306:	747b      	strb	r3, [r7, #17]
	dato.anio = bcd2dec(dato_leido[6]);
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ffb0 	bl	8002270 <bcd2dec>
 8002310:	4603      	mov	r3, r0
 8002312:	743b      	strb	r3, [r7, #16]

	return dato;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	461a      	mov	r2, r3
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	6010      	str	r0, [r2, #0]
 8002320:	889b      	ldrh	r3, [r3, #4]
 8002322:	8093      	strh	r3, [r2, #4]
}
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000468 	.word	0x20000468

08002330 <obtener_fecha>:
/**
 * \brief Genera una cadena para mostrar la fecha.
 *
 * \param char* temp El puntero a la cadena.
 */
void obtener_fecha(char* fecha){
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]

	dateTime_t fecha_hora = leer_fecha_hora();
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ffb3 	bl	80022a8 <leer_fecha_hora>

	sprintf(fecha, FORMATO_FECHA, fecha_hora.dia, fecha_hora.mes, fecha_hora.anio);
 8002342:	7abb      	ldrb	r3, [r7, #10]
 8002344:	461a      	mov	r2, r3
 8002346:	7a7b      	ldrb	r3, [r7, #9]
 8002348:	4619      	mov	r1, r3
 800234a:	7a3b      	ldrb	r3, [r7, #8]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	460b      	mov	r3, r1
 8002350:	4903      	ldr	r1, [pc, #12]	; (8002360 <obtener_fecha+0x30>)
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f004 fa0c 	bl	8006770 <siprintf>
	return;
 8002358:	bf00      	nop
}
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	08008a78 	.word	0x08008a78

08002364 <obtener_hora>:
/**
 * \brief Genera una cadena para mostrar la hora.
 *
 * \param char* temp El puntero a la cadena.
 */
void obtener_hora(char* hora){
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	dateTime_t fecha_hora = leer_fecha_hora();
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff99 	bl	80022a8 <leer_fecha_hora>

	sprintf(hora, FORMATO_HORA, fecha_hora.hora, fecha_hora.min);
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	461a      	mov	r2, r3
 800237a:	7b3b      	ldrb	r3, [r7, #12]
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <obtener_hora+0x28>)
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f004 f9f6 	bl	8006770 <siprintf>
	return;
 8002384:	bf00      	nop
}
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	08008a88 	.word	0x08008a88

08002390 <leer_temp>:
 * En 0x11 está la parte entera del valor, y en 0x12 la parte decimal.
 * La resolución es 0.25gC por eso la parte decimal se divide por 4
 *
 * \return La temperatura sensada.
 */
temp_t leer_temp (void){
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af04      	add	r7, sp, #16
	uint8_t temp[2];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, TEMP_REG, 1, temp, CANT_REG_TEMP, RTC_TIMEOUT);
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	2302      	movs	r3, #2
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2301      	movs	r3, #1
 80023a6:	2211      	movs	r2, #17
 80023a8:	21d0      	movs	r1, #208	; 0xd0
 80023aa:	4814      	ldr	r0, [pc, #80]	; (80023fc <leer_temp+0x6c>)
 80023ac:	f001 fc1a 	bl	8003be4 <HAL_I2C_Mem_Read>

	return ((temp[0])+(temp[1]>>6)*0.25);
 80023b0:	793b      	ldrb	r3, [r7, #4]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8c6 	bl	8000544 <__aeabi_i2d>
 80023b8:	4604      	mov	r4, r0
 80023ba:	460d      	mov	r5, r1
 80023bc:	797b      	ldrb	r3, [r7, #5]
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f8be 	bl	8000544 <__aeabi_i2d>
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <leer_temp+0x70>)
 80023ce:	f7fe f923 	bl	8000618 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4620      	mov	r0, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	f7fd ff67 	bl	80002ac <__adddf3>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe fbef 	bl	8000bc8 <__aeabi_d2f>
 80023ea:	4603      	mov	r3, r0
 80023ec:	ee07 3a90 	vmov	s15, r3
}
 80023f0:	eeb0 0a67 	vmov.f32	s0, s15
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdb0      	pop	{r4, r5, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000468 	.word	0x20000468
 8002400:	3fd00000 	.word	0x3fd00000

08002404 <obtener_temp>:
/**
 * \brief Genera una cadena para mostrar la temperatura.
 *
 * \param char* temp El puntero a la cadena.
 */
void obtener_temp(char* temp){
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	temp_t temperatura = leer_temp();
 800240c:	f7ff ffc0 	bl	8002390 <leer_temp>
 8002410:	ed87 0a03 	vstr	s0, [r7, #12]

	sprintf(temp, FORMATO_TEMP, temperatura);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7fe f8a7 	bl	8000568 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4904      	ldr	r1, [pc, #16]	; (8002430 <obtener_temp+0x2c>)
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f004 f9a5 	bl	8006770 <siprintf>
	return;
 8002426:	bf00      	nop
}
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	08008a94 	.word	0x08008a94

08002434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <HAL_Init+0x40>)
 800243e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_Init+0x40>)
 800244a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_Init+0x40>)
 8002456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245c:	2003      	movs	r0, #3
 800245e:	f000 fd41 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002462:	2000      	movs	r0, #0
 8002464:	f000 f808 	bl	8002478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002468:	f7ff fac8 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00

08002478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x54>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x58>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fd4b 	bl	8002f32 <HAL_SYSTICK_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00e      	b.n	80024c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d80a      	bhi.n	80024c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ac:	2200      	movs	r2, #0
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b4:	f000 fd21 	bl	8002efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b8:	4a06      	ldr	r2, [pc, #24]	; (80024d4 <HAL_InitTick+0x5c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x20>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x24>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_IncTick+0x24>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008
 80024fc:	20000a14 	.word	0x20000a14

08002500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return uwTick;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_GetTick+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000a14 	.word	0x20000a14

08002518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff ffee 	bl	8002500 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002530:	d005      	beq.n	800253e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_Delay+0x44>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253e:	bf00      	nop
 8002540:	f7ff ffde 	bl	8002500 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	429a      	cmp	r2, r3
 800254e:	d8f7      	bhi.n	8002540 <HAL_Delay+0x28>
  {
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e033      	b.n	80025de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe fd44 	bl	800100c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025a6:	f023 0302 	bic.w	r3, r3, #2
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fae8 	bl	8002b88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
 80025ce:	e001      	b.n	80025d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Start+0x1a>
 80025fe:	2302      	movs	r3, #2
 8002600:	e0b2      	b.n	8002768 <HAL_ADC_Start+0x180>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d018      	beq.n	800264a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002628:	4b52      	ldr	r3, [pc, #328]	; (8002774 <HAL_ADC_Start+0x18c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_ADC_Start+0x190>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0c9a      	lsrs	r2, r3, #18
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800263c:	e002      	b.n	8002644 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3b01      	subs	r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d17a      	bne.n	800274e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002682:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002696:	d106      	bne.n	80026a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f023 0206 	bic.w	r2, r3, #6
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
 80026a4:	e002      	b.n	80026ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_ADC_Start+0x194>)
 80026b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12a      	bne.n	8002724 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_ADC_Start+0x198>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d015      	beq.n	8002704 <HAL_ADC_Start+0x11c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a29      	ldr	r2, [pc, #164]	; (8002784 <HAL_ADC_Start+0x19c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_Start+0x106>
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_ADC_Start+0x194>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a25      	ldr	r2, [pc, #148]	; (8002788 <HAL_ADC_Start+0x1a0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d136      	bne.n	8002766 <HAL_ADC_Start+0x17e>
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_ADC_Start+0x194>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d130      	bne.n	8002766 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d129      	bne.n	8002766 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	e020      	b.n	8002766 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <HAL_ADC_Start+0x198>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d11b      	bne.n	8002766 <HAL_ADC_Start+0x17e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d114      	bne.n	8002766 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	e00b      	b.n	8002766 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f043 0210 	orr.w	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	20000000 	.word	0x20000000
 8002778:	431bde83 	.word	0x431bde83
 800277c:	40012300 	.word	0x40012300
 8002780:	40012000 	.word	0x40012000
 8002784:	40012100 	.word	0x40012100
 8002788:	40012200 	.word	0x40012200

0800278c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Stop+0x16>
 800279e:	2302      	movs	r3, #2
 80027a0:	e021      	b.n	80027e6 <HAL_ADC_Stop+0x5a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280e:	d113      	bne.n	8002838 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800281a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281e:	d10b      	bne.n	8002838 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e063      	b.n	8002900 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002838:	f7ff fe62 	bl	8002500 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800283e:	e021      	b.n	8002884 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002846:	d01d      	beq.n	8002884 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <HAL_ADC_PollForConversion+0x6c>
 800284e:	f7ff fe57 	bl	8002500 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d212      	bcs.n	8002884 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d00b      	beq.n	8002884 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e03d      	b.n	8002900 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	d1d6      	bne.n	8002840 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f06f 0212 	mvn.w	r2, #18
 800289a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d123      	bne.n	80028fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11f      	bne.n	80028fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d111      	bne.n	80028fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x1c>
 800293c:	2302      	movs	r3, #2
 800293e:	e113      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x244>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b09      	cmp	r3, #9
 800294e:	d925      	bls.n	800299c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68d9      	ldr	r1, [r3, #12]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	3b1e      	subs	r3, #30
 8002966:	2207      	movs	r2, #7
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43da      	mvns	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	400a      	ands	r2, r1
 8002974:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68d9      	ldr	r1, [r3, #12]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	4618      	mov	r0, r3
 8002988:	4603      	mov	r3, r0
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4403      	add	r3, r0
 800298e:	3b1e      	subs	r3, #30
 8002990:	409a      	lsls	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	e022      	b.n	80029e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6919      	ldr	r1, [r3, #16]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	2207      	movs	r2, #7
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	400a      	ands	r2, r1
 80029be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6919      	ldr	r1, [r3, #16]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	4618      	mov	r0, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4403      	add	r3, r0
 80029d8:	409a      	lsls	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d824      	bhi.n	8002a34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	3b05      	subs	r3, #5
 80029fc:	221f      	movs	r2, #31
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	400a      	ands	r2, r1
 8002a0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	3b05      	subs	r3, #5
 8002a26:	fa00 f203 	lsl.w	r2, r0, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
 8002a32:	e04c      	b.n	8002ace <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	d824      	bhi.n	8002a86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b23      	subs	r3, #35	; 0x23
 8002a4e:	221f      	movs	r2, #31
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43da      	mvns	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	3b23      	subs	r3, #35	; 0x23
 8002a78:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
 8002a84:	e023      	b.n	8002ace <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	3b41      	subs	r3, #65	; 0x41
 8002a98:	221f      	movs	r2, #31
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b41      	subs	r3, #65	; 0x41
 8002ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ace:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <HAL_ADC_ConfigChannel+0x250>)
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <HAL_ADC_ConfigChannel+0x254>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10f      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1d8>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b12      	cmp	r3, #18
 8002ae2:	d10b      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <HAL_ADC_ConfigChannel+0x254>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d12b      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x23a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_ADC_ConfigChannel+0x258>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0x1f4>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b11      	cmp	r3, #17
 8002b16:	d122      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <HAL_ADC_ConfigChannel+0x258>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d111      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_ADC_ConfigChannel+0x25c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <HAL_ADC_ConfigChannel+0x260>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9a      	lsrs	r2, r3, #18
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40012300 	.word	0x40012300
 8002b78:	40012000 	.word	0x40012000
 8002b7c:	10000012 	.word	0x10000012
 8002b80:	20000000 	.word	0x20000000
 8002b84:	431bde83 	.word	0x431bde83

08002b88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b90:	4b79      	ldr	r3, [pc, #484]	; (8002d78 <ADC_Init+0x1f0>)
 8002b92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	021a      	lsls	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <ADC_Init+0x1f4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	e00f      	b.n	8002c86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0202 	bic.w	r2, r2, #2
 8002c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ca0:	005a      	lsls	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01b      	beq.n	8002cec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	035a      	lsls	r2, r3, #13
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	e007      	b.n	8002cfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	051a      	lsls	r2, r3, #20
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d3e:	025a      	lsls	r2, r3, #9
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	029a      	lsls	r2, r3, #10
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40012300 	.word	0x40012300
 8002d7c:	0f000001 	.word	0x0f000001

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec4:	f7ff ff8e 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff47 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0c:	f7ff ff5c 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff ff8e 	bl	8002e38 <NVIC_EncodePriority>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff5d 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffb0 	bl	8002ea0 <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06c      	b.n	8003038 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2223      	movs	r2, #35	; 0x23
 8002f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fe f8dd 	bl	8001130 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_ETH_Init+0xf4>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4a30      	ldr	r2, [pc, #192]	; (8003040 <HAL_ETH_Init+0xf4>)
 8002f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f84:	6453      	str	r3, [r2, #68]	; 0x44
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_ETH_Init+0xf4>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <HAL_ETH_Init+0xf8>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <HAL_ETH_Init+0xf8>)
 8002f98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f9c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f9e:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_ETH_Init+0xf8>)
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	4927      	ldr	r1, [pc, #156]	; (8003044 <HAL_ETH_Init+0xf8>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_ETH_Init+0xf8>)
 8002fae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc8:	f7ff fa9a 	bl	8002500 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002fce:	e011      	b.n	8002ff4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002fd0:	f7ff fa96 	bl	8002500 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fde:	d909      	bls.n	8002ff4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	22e0      	movs	r2, #224	; 0xe0
 8002fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e021      	b.n	8003038 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e4      	bne.n	8002fd0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f958 	bl	80032bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9ff 	bl	8003410 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa55 	bl	80034c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	461a      	mov	r2, r3
 800301e:	2100      	movs	r1, #0
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f9bd 	bl	80033a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2210      	movs	r2, #16
 8003032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	40013800 	.word	0x40013800

08003048 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <ETH_SetMACConfig+0x15c>)
 800305e:	4013      	ands	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	7c1b      	ldrb	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <ETH_SetMACConfig+0x28>
 800306a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800306e:	e000      	b.n	8003072 <ETH_SetMACConfig+0x2a>
 8003070:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	7c5b      	ldrb	r3, [r3, #17]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <ETH_SetMACConfig+0x38>
 800307a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800307e:	e000      	b.n	8003082 <ETH_SetMACConfig+0x3a>
 8003080:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003082:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003088:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	7fdb      	ldrb	r3, [r3, #31]
 800308e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003090:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003096:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	7f92      	ldrb	r2, [r2, #30]
 800309c:	2a00      	cmp	r2, #0
 800309e:	d102      	bne.n	80030a6 <ETH_SetMACConfig+0x5e>
 80030a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030a4:	e000      	b.n	80030a8 <ETH_SetMACConfig+0x60>
 80030a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80030a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7f1b      	ldrb	r3, [r3, #28]
 80030ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80030b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80030b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	791b      	ldrb	r3, [r3, #4]
 80030bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80030be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80030c6:	2a00      	cmp	r2, #0
 80030c8:	d102      	bne.n	80030d0 <ETH_SetMACConfig+0x88>
 80030ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ce:	e000      	b.n	80030d2 <ETH_SetMACConfig+0x8a>
 80030d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80030d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	7bdb      	ldrb	r3, [r3, #15]
 80030d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80030da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80030e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030ea:	4313      	orrs	r3, r2
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003102:	2001      	movs	r0, #1
 8003104:	f7ff fa08 	bl	8002518 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800311e:	4013      	ands	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003126:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800312e:	2a00      	cmp	r2, #0
 8003130:	d101      	bne.n	8003136 <ETH_SetMACConfig+0xee>
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	e000      	b.n	8003138 <ETH_SetMACConfig+0xf0>
 8003136:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003138:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800313e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003146:	2a01      	cmp	r2, #1
 8003148:	d101      	bne.n	800314e <ETH_SetMACConfig+0x106>
 800314a:	2208      	movs	r2, #8
 800314c:	e000      	b.n	8003150 <ETH_SetMACConfig+0x108>
 800314e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003150:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003158:	2a01      	cmp	r2, #1
 800315a:	d101      	bne.n	8003160 <ETH_SetMACConfig+0x118>
 800315c:	2204      	movs	r2, #4
 800315e:	e000      	b.n	8003162 <ETH_SetMACConfig+0x11a>
 8003160:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003162:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800316a:	2a01      	cmp	r2, #1
 800316c:	d101      	bne.n	8003172 <ETH_SetMACConfig+0x12a>
 800316e:	2202      	movs	r2, #2
 8003170:	e000      	b.n	8003174 <ETH_SetMACConfig+0x12c>
 8003172:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003174:	4313      	orrs	r3, r2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800318c:	2001      	movs	r0, #1
 800318e:	f7ff f9c3 	bl	8002518 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	619a      	str	r2, [r3, #24]
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	ff20810f 	.word	0xff20810f

080031a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <ETH_SetDMAConfig+0x110>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	7b1b      	ldrb	r3, [r3, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <ETH_SetDMAConfig+0x2c>
 80031ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031d2:	e000      	b.n	80031d6 <ETH_SetDMAConfig+0x2e>
 80031d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	7b5b      	ldrb	r3, [r3, #13]
 80031da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	7f52      	ldrb	r2, [r2, #29]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d102      	bne.n	80031ec <ETH_SetDMAConfig+0x44>
 80031e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031ea:	e000      	b.n	80031ee <ETH_SetDMAConfig+0x46>
 80031ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80031ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	7b9b      	ldrb	r3, [r3, #14]
 80031f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80031f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80031fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	7f1b      	ldrb	r3, [r3, #28]
 8003202:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003204:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7f9b      	ldrb	r3, [r3, #30]
 800320a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800320c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003212:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800321a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800321c:	4313      	orrs	r3, r2
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322c:	461a      	mov	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800323e:	2001      	movs	r0, #1
 8003240:	f7ff f96a 	bl	8002518 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324c:	461a      	mov	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	791b      	ldrb	r3, [r3, #4]
 8003256:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800325c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003262:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003268:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003270:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003272:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800327a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003280:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800328a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800328e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800329c:	2001      	movs	r0, #1
 800329e:	f7ff f93b 	bl	8002518 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	f8de3f23 	.word	0xf8de3f23

080032bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b0a6      	sub	sp, #152	; 0x98
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80032d0:	2300      	movs	r3, #0
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80032f8:	2300      	movs	r3, #0
 80032fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003302:	2300      	movs	r3, #0
 8003304:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003312:	2300      	movs	r3, #0
 8003314:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800331e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003322:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003328:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800332a:	2300      	movs	r3, #0
 800332c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fe86 	bl	8003048 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800333c:	2301      	movs	r3, #1
 800333e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003340:	2301      	movs	r3, #1
 8003342:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800334a:	2301      	movs	r3, #1
 800334c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003368:	2301      	movs	r3, #1
 800336a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800336c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003370:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003376:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800337c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003384:	2300      	movs	r3, #0
 8003386:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff08 	bl	80031a8 <ETH_SetDMAConfig>
}
 8003398:	bf00      	nop
 800339a:	3798      	adds	r7, #152	; 0x98
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3305      	adds	r3, #5
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	3204      	adds	r2, #4
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <ETH_MACAddressConfig+0x68>)
 80033c2:	4413      	add	r3, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3303      	adds	r3, #3
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	061a      	lsls	r2, r3, #24
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3302      	adds	r3, #2
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3301      	adds	r3, #1
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	4313      	orrs	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <ETH_MACAddressConfig+0x6c>)
 80033f2:	4413      	add	r3, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	6013      	str	r3, [r2, #0]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40028040 	.word	0x40028040
 800340c:	40028044 	.word	0x40028044

08003410 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e03e      	b.n	800349c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68d9      	ldr	r1, [r3, #12]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2200      	movs	r2, #0
 800343a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	3206      	adds	r2, #6
 8003450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d80c      	bhi.n	8003480 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68d9      	ldr	r1, [r3, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	461a      	mov	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	e004      	b.n	800348a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3301      	adds	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d9bd      	bls.n	800341e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b4:	611a      	str	r2, [r3, #16]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	e046      	b.n	800355e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6919      	ldr	r1, [r3, #16]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2200      	movs	r2, #0
 80034ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2200      	movs	r2, #0
 80034fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2200      	movs	r2, #0
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800350c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003514:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	3212      	adds	r2, #18
 800352a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d80c      	bhi.n	800354e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6919      	ldr	r1, [r3, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	440b      	add	r3, r1
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	e004      	b.n	8003558 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3301      	adds	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d9b5      	bls.n	80034d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358e:	60da      	str	r2, [r3, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e177      	b.n	80038a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8166 	bne.w	80038a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d005      	beq.n	80035ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d130      	bne.n	8003650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 0201 	and.w	r2, r3, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d017      	beq.n	800368c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d123      	bne.n	80036e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80c0 	beq.w	80038a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <HAL_GPIO_Init+0x324>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4a65      	ldr	r2, [pc, #404]	; (80038c0 <HAL_GPIO_Init+0x324>)
 800372c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003730:	6453      	str	r3, [r2, #68]	; 0x44
 8003732:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <HAL_GPIO_Init+0x324>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800373e:	4a61      	ldr	r2, [pc, #388]	; (80038c4 <HAL_GPIO_Init+0x328>)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	220f      	movs	r2, #15
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <HAL_GPIO_Init+0x32c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d037      	beq.n	80037da <HAL_GPIO_Init+0x23e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a57      	ldr	r2, [pc, #348]	; (80038cc <HAL_GPIO_Init+0x330>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <HAL_GPIO_Init+0x23a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <HAL_GPIO_Init+0x334>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02b      	beq.n	80037d2 <HAL_GPIO_Init+0x236>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a55      	ldr	r2, [pc, #340]	; (80038d4 <HAL_GPIO_Init+0x338>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d025      	beq.n	80037ce <HAL_GPIO_Init+0x232>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a54      	ldr	r2, [pc, #336]	; (80038d8 <HAL_GPIO_Init+0x33c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01f      	beq.n	80037ca <HAL_GPIO_Init+0x22e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a53      	ldr	r2, [pc, #332]	; (80038dc <HAL_GPIO_Init+0x340>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d019      	beq.n	80037c6 <HAL_GPIO_Init+0x22a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_GPIO_Init+0x344>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_GPIO_Init+0x226>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a51      	ldr	r2, [pc, #324]	; (80038e4 <HAL_GPIO_Init+0x348>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00d      	beq.n	80037be <HAL_GPIO_Init+0x222>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a50      	ldr	r2, [pc, #320]	; (80038e8 <HAL_GPIO_Init+0x34c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <HAL_GPIO_Init+0x21e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4f      	ldr	r2, [pc, #316]	; (80038ec <HAL_GPIO_Init+0x350>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_GPIO_Init+0x21a>
 80037b2:	2309      	movs	r3, #9
 80037b4:	e012      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037b6:	230a      	movs	r3, #10
 80037b8:	e010      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ba:	2308      	movs	r3, #8
 80037bc:	e00e      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037be:	2307      	movs	r3, #7
 80037c0:	e00c      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037c2:	2306      	movs	r3, #6
 80037c4:	e00a      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037c6:	2305      	movs	r3, #5
 80037c8:	e008      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ca:	2304      	movs	r3, #4
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ce:	2303      	movs	r3, #3
 80037d0:	e004      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e002      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037da:	2300      	movs	r3, #0
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f002 0203 	and.w	r2, r2, #3
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4093      	lsls	r3, r2
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ec:	4935      	ldr	r1, [pc, #212]	; (80038c4 <HAL_GPIO_Init+0x328>)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_GPIO_Init+0x354>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381e:	4a34      	ldr	r2, [pc, #208]	; (80038f0 <HAL_GPIO_Init+0x354>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <HAL_GPIO_Init+0x354>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003848:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_GPIO_Init+0x354>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_GPIO_Init+0x354>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003872:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <HAL_GPIO_Init+0x354>)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_GPIO_Init+0x354>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_GPIO_Init+0x354>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	f67f ae84 	bls.w	80035b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40020400 	.word	0x40020400
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40020c00 	.word	0x40020c00
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40021400 	.word	0x40021400
 80038e0:	40021800 	.word	0x40021800
 80038e4:	40021c00 	.word	0x40021c00
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40022400 	.word	0x40022400
 80038f0:	40013c00 	.word	0x40013c00

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003938:	887a      	ldrh	r2, [r7, #2]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	041a      	lsls	r2, r3, #16
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	43d9      	mvns	r1, r3
 8003944:	887b      	ldrh	r3, [r7, #2]
 8003946:	400b      	ands	r3, r1
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e12b      	b.n	8003bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fe0a 	bl	800159c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c0:	f001 fbc2 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 80039c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4a81      	ldr	r2, [pc, #516]	; (8003bd0 <HAL_I2C_Init+0x274>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d807      	bhi.n	80039e0 <HAL_I2C_Init+0x84>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a80      	ldr	r2, [pc, #512]	; (8003bd4 <HAL_I2C_Init+0x278>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e006      	b.n	80039ee <HAL_I2C_Init+0x92>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a7d      	ldr	r2, [pc, #500]	; (8003bd8 <HAL_I2C_Init+0x27c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0e7      	b.n	8003bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a78      	ldr	r2, [pc, #480]	; (8003bdc <HAL_I2C_Init+0x280>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0c9b      	lsrs	r3, r3, #18
 8003a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a6a      	ldr	r2, [pc, #424]	; (8003bd0 <HAL_I2C_Init+0x274>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d802      	bhi.n	8003a30 <HAL_I2C_Init+0xd4>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	e009      	b.n	8003a44 <HAL_I2C_Init+0xe8>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	4a69      	ldr	r2, [pc, #420]	; (8003be0 <HAL_I2C_Init+0x284>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	3301      	adds	r3, #1
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	495c      	ldr	r1, [pc, #368]	; (8003bd0 <HAL_I2C_Init+0x274>)
 8003a60:	428b      	cmp	r3, r1
 8003a62:	d819      	bhi.n	8003a98 <HAL_I2C_Init+0x13c>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e59      	subs	r1, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a78:	400b      	ands	r3, r1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_I2C_Init+0x138>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1e59      	subs	r1, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a92:	e051      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003a94:	2304      	movs	r3, #4
 8003a96:	e04f      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d111      	bne.n	8003ac4 <HAL_I2C_Init+0x168>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e58      	subs	r0, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	440b      	add	r3, r1
 8003aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e012      	b.n	8003aea <HAL_I2C_Init+0x18e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e58      	subs	r0, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	0099      	lsls	r1, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Init+0x196>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e022      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10e      	bne.n	8003b18 <HAL_I2C_Init+0x1bc>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e58      	subs	r0, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	440b      	add	r3, r1
 8003b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b16:	e00f      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e58      	subs	r0, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	6809      	ldr	r1, [r1, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6911      	ldr	r1, [r2, #16]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	000186a0 	.word	0x000186a0
 8003bd4:	001e847f 	.word	0x001e847f
 8003bd8:	003d08ff 	.word	0x003d08ff
 8003bdc:	431bde83 	.word	0x431bde83
 8003be0:	10624dd3 	.word	0x10624dd3

08003be4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	; 0x30
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bfe:	f7fe fc7f 	bl	8002500 <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	f040 8208 	bne.w	8004022 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2319      	movs	r3, #25
 8003c18:	2201      	movs	r2, #1
 8003c1a:	497b      	ldr	r1, [pc, #492]	; (8003e08 <HAL_I2C_Mem_Read+0x224>)
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 faef 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e1fb      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x56>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e1f4      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d007      	beq.n	8003c60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2222      	movs	r2, #34	; 0x22
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2240      	movs	r2, #64	; 0x40
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	; (8003e0c <HAL_I2C_Mem_Read+0x228>)
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca2:	88f8      	ldrh	r0, [r7, #6]
 8003ca4:	893a      	ldrh	r2, [r7, #8]
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f9bc 	bl	8004030 <I2C_RequestMemoryRead>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1b0      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e184      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d11b      	bne.n	8003d32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e164      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d11b      	bne.n	8003d72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	e144      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d88:	e138      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	f200 80f1 	bhi.w	8003f76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d123      	bne.n	8003de4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fb44 	bl	800442e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e139      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de2:	e10b      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d14e      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2200      	movs	r2, #0
 8003df4:	4906      	ldr	r1, [pc, #24]	; (8003e10 <HAL_I2C_Mem_Read+0x22c>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fa02 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e10e      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
 8003e06:	bf00      	nop
 8003e08:	00100002 	.word	0x00100002
 8003e0c:	ffff0000 	.word	0xffff0000
 8003e10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e88:	e0b8      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2200      	movs	r2, #0
 8003e92:	4966      	ldr	r1, [pc, #408]	; (800402c <HAL_I2C_Mem_Read+0x448>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f9b3 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0bf      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2200      	movs	r2, #0
 8003eee:	494f      	ldr	r1, [pc, #316]	; (800402c <HAL_I2C_Mem_Read+0x448>)
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f985 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e091      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f74:	e042      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fa57 	bl	800442e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e04c      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d118      	bne.n	8003ffc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	f47f aec2 	bne.w	8003d8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	00010004 	.word	0x00010004

08004030 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004058:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004068:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	2200      	movs	r2, #0
 8004072:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f8c2 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d103      	bne.n	800409a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0aa      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	4952      	ldr	r1, [pc, #328]	; (80041fc <I2C_RequestMemoryRead+0x1cc>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f8fa 	bl	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e097      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	6a39      	ldr	r1, [r7, #32]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f964 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d107      	bne.n	8004102 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004100:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e076      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800410c:	893b      	ldrh	r3, [r7, #8]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]
 8004116:	e021      	b.n	800415c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	b29b      	uxth	r3, r3
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	6a39      	ldr	r1, [r7, #32]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f93e 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	2b04      	cmp	r3, #4
 800413c:	d107      	bne.n	800414e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e050      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004152:	893b      	ldrh	r3, [r7, #8]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	6a39      	ldr	r1, [r7, #32]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f923 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e035      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004196:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2200      	movs	r2, #0
 80041a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f82b 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041be:	d103      	bne.n	80041c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e013      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041cc:	897b      	ldrh	r3, [r7, #10]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	4906      	ldr	r1, [pc, #24]	; (80041fc <I2C_RequestMemoryRead+0x1cc>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f863 	bl	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	00010002 	.word	0x00010002

08004200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004210:	e025      	b.n	800425e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004218:	d021      	beq.n	800425e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421a:	f7fe f971 	bl	8002500 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d116      	bne.n	800425e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e023      	b.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10d      	bne.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	43da      	mvns	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	e00c      	b.n	800429e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	43da      	mvns	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4013      	ands	r3, r2
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d0b6      	beq.n	8004212 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042bc:	e051      	b.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d123      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0204 	orr.w	r2, r3, #4
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e046      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431c:	d021      	beq.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fe f8ef 	bl	8002500 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d116      	bne.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e020      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10c      	bne.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e00b      	b.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	43da      	mvns	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d18d      	bne.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b8:	e02d      	b.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f88d 	bl	80044da <I2C_IsAcknowledgeFailed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e02d      	b.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d0:	d021      	beq.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fe f895 	bl	8002500 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d116      	bne.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f043 0220 	orr.w	r2, r3, #32
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e007      	b.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d1ca      	bne.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800443a:	e042      	b.n	80044c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b10      	cmp	r3, #16
 8004448:	d119      	bne.n	800447e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0210 	mvn.w	r2, #16
 8004452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e029      	b.n	80044d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fe f83f 	bl	8002500 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d116      	bne.n	80044c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e007      	b.n	80044d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d1b5      	bne.n	800443c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f0:	d11b      	bne.n	800452a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f043 0204 	orr.w	r2, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b20      	cmp	r3, #32
 800454c:	d129      	bne.n	80045a2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2224      	movs	r2, #36	; 0x24
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0210 	bic.w	r2, r2, #16
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d12a      	bne.n	8004620 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2224      	movs	r2, #36	; 0x24
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	f023 030f 	bic.w	r3, r3, #15
 80045f0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	89fb      	ldrh	r3, [r7, #14]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	89fa      	ldrh	r2, [r7, #14]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800462e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004630:	b08f      	sub	sp, #60	; 0x3c
 8004632:	af0a      	add	r7, sp, #40	; 0x28
 8004634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e10f      	b.n	8004860 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd fb98 	bl	8001d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2203      	movs	r2, #3
 8004664:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f001 f8ad 	bl	80057de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	687e      	ldr	r6, [r7, #4]
 800468c:	466d      	mov	r5, sp
 800468e:	f106 0410 	add.w	r4, r6, #16
 8004692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800469e:	e885 0003 	stmia.w	r5, {r0, r1}
 80046a2:	1d33      	adds	r3, r6, #4
 80046a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046a6:	6838      	ldr	r0, [r7, #0]
 80046a8:	f001 f838 	bl	800571c <USB_CoreInit>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e0d0      	b.n	8004860 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 f89b 	bl	8005800 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
 80046ce:	e04a      	b.n	8004766 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046d0:	7bfa      	ldrb	r2, [r7, #15]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	333d      	adds	r3, #61	; 0x3d
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	333c      	adds	r3, #60	; 0x3c
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	b298      	uxth	r0, r3
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	3344      	adds	r3, #68	; 0x44
 800470c:	4602      	mov	r2, r0
 800470e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	3340      	adds	r3, #64	; 0x40
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004724:	7bfa      	ldrb	r2, [r7, #15]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	3348      	adds	r3, #72	; 0x48
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	334c      	adds	r3, #76	; 0x4c
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	3354      	adds	r3, #84	; 0x54
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	3301      	adds	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	7bfa      	ldrb	r2, [r7, #15]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	429a      	cmp	r2, r3
 800476e:	d3af      	bcc.n	80046d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004770:	2300      	movs	r3, #0
 8004772:	73fb      	strb	r3, [r7, #15]
 8004774:	e044      	b.n	8004800 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047b8:	7bfa      	ldrb	r2, [r7, #15]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047e4:	7bfa      	ldrb	r2, [r7, #15]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	3301      	adds	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	7bfa      	ldrb	r2, [r7, #15]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d3b5      	bcc.n	8004776 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	687e      	ldr	r6, [r7, #4]
 8004812:	466d      	mov	r5, sp
 8004814:	f106 0410 	add.w	r4, r6, #16
 8004818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800481c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004820:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004824:	e885 0003 	stmia.w	r5, {r0, r1}
 8004828:	1d33      	adds	r3, r6, #4
 800482a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800482c:	6838      	ldr	r0, [r7, #0]
 800482e:	f001 f833 	bl	8005898 <USB_DevInit>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e00d      	b.n	8004860 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f001 f9fe 	bl	8005c5a <USB_DevDisconnect>

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e267      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d075      	beq.n	8004972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004886:	4b88      	ldr	r3, [pc, #544]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d00c      	beq.n	80048ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004892:	4b85      	ldr	r3, [pc, #532]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800489a:	2b08      	cmp	r3, #8
 800489c:	d112      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489e:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048aa:	d10b      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ac:	4b7e      	ldr	r3, [pc, #504]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d05b      	beq.n	8004970 <HAL_RCC_OscConfig+0x108>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d157      	bne.n	8004970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e242      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d106      	bne.n	80048dc <HAL_RCC_OscConfig+0x74>
 80048ce:	4b76      	ldr	r3, [pc, #472]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a75      	ldr	r2, [pc, #468]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e01d      	b.n	8004918 <HAL_RCC_OscConfig+0xb0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x98>
 80048e6:	4b70      	ldr	r3, [pc, #448]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6f      	ldr	r2, [pc, #444]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a6c      	ldr	r2, [pc, #432]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0xb0>
 8004900:	4b69      	ldr	r3, [pc, #420]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a68      	ldr	r2, [pc, #416]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	4b66      	ldr	r3, [pc, #408]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a65      	ldr	r2, [pc, #404]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d013      	beq.n	8004948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fd fdee 	bl	8002500 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004928:	f7fd fdea 	bl	8002500 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	; 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e207      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0xc0>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fd fdda 	bl	8002500 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004950:	f7fd fdd6 	bl	8002500 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e1f3      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	4b51      	ldr	r3, [pc, #324]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0xe8>
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d063      	beq.n	8004a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497e:	4b4a      	ldr	r3, [pc, #296]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004992:	2b08      	cmp	r3, #8
 8004994:	d11c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004996:	4b44      	ldr	r3, [pc, #272]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d116      	bne.n	80049d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_RCC_OscConfig+0x152>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d001      	beq.n	80049ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e1c7      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4937      	ldr	r1, [pc, #220]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ce:	e03a      	b.n	8004a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d8:	4b34      	ldr	r3, [pc, #208]	; (8004aac <HAL_RCC_OscConfig+0x244>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fd fd8f 	bl	8002500 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fd fd8b 	bl	8002500 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e1a8      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4925      	ldr	r1, [pc, #148]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]
 8004a18:	e015      	b.n	8004a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCC_OscConfig+0x244>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fd fd6e 	bl	8002500 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a28:	f7fd fd6a 	bl	8002500 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e187      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d036      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <HAL_RCC_OscConfig+0x248>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fd fd4e 	bl	8002500 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a68:	f7fd fd4a 	bl	8002500 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e167      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x200>
 8004a86:	e01b      	b.n	8004ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_RCC_OscConfig+0x248>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8e:	f7fd fd37 	bl	8002500 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a94:	e00e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a96:	f7fd fd33 	bl	8002500 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d907      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e150      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	42470000 	.word	0x42470000
 8004ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab4:	4b88      	ldr	r3, [pc, #544]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ea      	bne.n	8004a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8097 	beq.w	8004bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ad2:	4b81      	ldr	r3, [pc, #516]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10f      	bne.n	8004afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	4b7d      	ldr	r3, [pc, #500]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	4a7c      	ldr	r2, [pc, #496]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6413      	str	r3, [r2, #64]	; 0x40
 8004aee:	4b7a      	ldr	r3, [pc, #488]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afa:	2301      	movs	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afe:	4b77      	ldr	r3, [pc, #476]	; (8004cdc <HAL_RCC_OscConfig+0x474>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d118      	bne.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b0a:	4b74      	ldr	r3, [pc, #464]	; (8004cdc <HAL_RCC_OscConfig+0x474>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a73      	ldr	r2, [pc, #460]	; (8004cdc <HAL_RCC_OscConfig+0x474>)
 8004b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b16:	f7fd fcf3 	bl	8002500 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1e:	f7fd fcef 	bl	8002500 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e10c      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCC_OscConfig+0x474>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d106      	bne.n	8004b52 <HAL_RCC_OscConfig+0x2ea>
 8004b44:	4b64      	ldr	r3, [pc, #400]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	4a63      	ldr	r2, [pc, #396]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b50:	e01c      	b.n	8004b8c <HAL_RCC_OscConfig+0x324>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x30c>
 8004b5a:	4b5f      	ldr	r3, [pc, #380]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a5e      	ldr	r2, [pc, #376]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b60:	f043 0304 	orr.w	r3, r3, #4
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
 8004b66:	4b5c      	ldr	r3, [pc, #368]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a5b      	ldr	r2, [pc, #364]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0x324>
 8004b74:	4b58      	ldr	r3, [pc, #352]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	4a57      	ldr	r2, [pc, #348]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b80:	4b55      	ldr	r3, [pc, #340]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	4a54      	ldr	r2, [pc, #336]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004b86:	f023 0304 	bic.w	r3, r3, #4
 8004b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d015      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fd fcb4 	bl	8002500 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fd fcb0 	bl	8002500 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0cb      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0ee      	beq.n	8004b9c <HAL_RCC_OscConfig+0x334>
 8004bbe:	e014      	b.n	8004bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc0:	f7fd fc9e 	bl	8002500 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc8:	f7fd fc9a 	bl	8002500 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0b5      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bde:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ee      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d105      	bne.n	8004bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf0:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80a1 	beq.w	8004d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c06:	4b34      	ldr	r3, [pc, #208]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d05c      	beq.n	8004ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d141      	bne.n	8004c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fd fc6e 	bl	8002500 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fd fc6a 	bl	8002500 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e087      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	019b      	lsls	r3, r3, #6
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	491b      	ldr	r1, [pc, #108]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c76:	f7fd fc43 	bl	8002500 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7e:	f7fd fc3f 	bl	8002500 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e05c      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x416>
 8004c9c:	e054      	b.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fd fc2c 	bl	8002500 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fd fc28 	bl	8002500 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e045      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x444>
 8004cca:	e03d      	b.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e038      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_RCC_OscConfig+0x4ec>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d028      	beq.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d121      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d11a      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d111      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40023800 	.word	0x40023800

08004d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0cc      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b68      	ldr	r3, [pc, #416]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d90c      	bls.n	8004d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b65      	ldr	r3, [pc, #404]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d82:	4b63      	ldr	r3, [pc, #396]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0b8      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dac:	4b59      	ldr	r3, [pc, #356]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a58      	ldr	r2, [pc, #352]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc4:	4b53      	ldr	r3, [pc, #332]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a52      	ldr	r2, [pc, #328]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd0:	4b50      	ldr	r3, [pc, #320]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	494d      	ldr	r1, [pc, #308]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d044      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d119      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e07f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d003      	beq.n	8004e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4b3f      	ldr	r3, [pc, #252]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e06f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e26:	4b3b      	ldr	r3, [pc, #236]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e067      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e36:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f023 0203 	bic.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4934      	ldr	r1, [pc, #208]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e48:	f7fd fb5a 	bl	8002500 <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e50:	f7fd fb56 	bl	8002500 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e04f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 020c 	and.w	r2, r3, #12
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d1eb      	bne.n	8004e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d20c      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <HAL_RCC_ClockConfig+0x1b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e032      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4916      	ldr	r1, [pc, #88]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	490e      	ldr	r1, [pc, #56]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ede:	f000 f821 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	490a      	ldr	r1, [pc, #40]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef0:	5ccb      	ldrb	r3, [r1, r3]
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1c8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fd faba 	bl	8002478 <HAL_InitTick>

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023c00 	.word	0x40023c00
 8004f14:	40023800 	.word	0x40023800
 8004f18:	08008aa4 	.word	0x08008aa4
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	20000004 	.word	0x20000004

08004f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f28:	b094      	sub	sp, #80	; 0x50
 8004f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f30:	2300      	movs	r3, #0
 8004f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f34:	2300      	movs	r3, #0
 8004f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f3c:	4b79      	ldr	r3, [pc, #484]	; (8005124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d00d      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0x40>
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	f200 80e1 	bhi.w	8005110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0x34>
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d003      	beq.n	8004f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f56:	e0db      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f58:	4b73      	ldr	r3, [pc, #460]	; (8005128 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f5c:	e0db      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f5e:	4b73      	ldr	r3, [pc, #460]	; (800512c <HAL_RCC_GetSysClockFreq+0x208>)
 8004f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f62:	e0d8      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f64:	4b6f      	ldr	r3, [pc, #444]	; (8005124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f6e:	4b6d      	ldr	r3, [pc, #436]	; (8005124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d063      	beq.n	8005042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7a:	4b6a      	ldr	r3, [pc, #424]	; (8005124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	099b      	lsrs	r3, r3, #6
 8004f80:	2200      	movs	r2, #0
 8004f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8e:	2300      	movs	r3, #0
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
 8004f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f96:	4622      	mov	r2, r4
 8004f98:	462b      	mov	r3, r5
 8004f9a:	f04f 0000 	mov.w	r0, #0
 8004f9e:	f04f 0100 	mov.w	r1, #0
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa8:	0150      	lsls	r0, r2, #5
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4621      	mov	r1, r4
 8004fb0:	1a51      	subs	r1, r2, r1
 8004fb2:	6139      	str	r1, [r7, #16]
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fc8:	4659      	mov	r1, fp
 8004fca:	018b      	lsls	r3, r1, #6
 8004fcc:	4651      	mov	r1, sl
 8004fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	018a      	lsls	r2, r1, #6
 8004fd6:	4651      	mov	r1, sl
 8004fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8004fdc:	4659      	mov	r1, fp
 8004fde:	eb63 0901 	sbc.w	r9, r3, r1
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ff6:	4690      	mov	r8, r2
 8004ff8:	4699      	mov	r9, r3
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	eb18 0303 	adds.w	r3, r8, r3
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	462b      	mov	r3, r5
 8005004:	eb49 0303 	adc.w	r3, r9, r3
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005016:	4629      	mov	r1, r5
 8005018:	024b      	lsls	r3, r1, #9
 800501a:	4621      	mov	r1, r4
 800501c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005020:	4621      	mov	r1, r4
 8005022:	024a      	lsls	r2, r1, #9
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	2200      	movs	r2, #0
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
 800502e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005034:	f7fb fe18 	bl	8000c68 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4613      	mov	r3, r2
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005040:	e058      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005042:	4b38      	ldr	r3, [pc, #224]	; (8005124 <HAL_RCC_GetSysClockFreq+0x200>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	2200      	movs	r2, #0
 800504a:	4618      	mov	r0, r3
 800504c:	4611      	mov	r1, r2
 800504e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005052:	623b      	str	r3, [r7, #32]
 8005054:	2300      	movs	r3, #0
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
 8005058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	f04f 0000 	mov.w	r0, #0
 8005064:	f04f 0100 	mov.w	r1, #0
 8005068:	0159      	lsls	r1, r3, #5
 800506a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800506e:	0150      	lsls	r0, r2, #5
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4641      	mov	r1, r8
 8005076:	ebb2 0a01 	subs.w	sl, r2, r1
 800507a:	4649      	mov	r1, r9
 800507c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800508c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005094:	ebb2 040a 	subs.w	r4, r2, sl
 8005098:	eb63 050b 	sbc.w	r5, r3, fp
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	00eb      	lsls	r3, r5, #3
 80050a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050aa:	00e2      	lsls	r2, r4, #3
 80050ac:	4614      	mov	r4, r2
 80050ae:	461d      	mov	r5, r3
 80050b0:	4643      	mov	r3, r8
 80050b2:	18e3      	adds	r3, r4, r3
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	464b      	mov	r3, r9
 80050b8:	eb45 0303 	adc.w	r3, r5, r3
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ca:	4629      	mov	r1, r5
 80050cc:	028b      	lsls	r3, r1, #10
 80050ce:	4621      	mov	r1, r4
 80050d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050d4:	4621      	mov	r1, r4
 80050d6:	028a      	lsls	r2, r1, #10
 80050d8:	4610      	mov	r0, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050de:	2200      	movs	r2, #0
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	61fa      	str	r2, [r7, #28]
 80050e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050e8:	f7fb fdbe 	bl	8000c68 <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4613      	mov	r3, r2
 80050f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	3301      	adds	r3, #1
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800510e:	e002      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetSysClockFreq+0x204>)
 8005112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005118:	4618      	mov	r0, r3
 800511a:	3750      	adds	r7, #80	; 0x50
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	00f42400 	.word	0x00f42400
 800512c:	007a1200 	.word	0x007a1200

08005130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005134:	4b03      	ldr	r3, [pc, #12]	; (8005144 <HAL_RCC_GetHCLKFreq+0x14>)
 8005136:	681b      	ldr	r3, [r3, #0]
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000000 	.word	0x20000000

08005148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800514c:	f7ff fff0 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 8005150:	4602      	mov	r2, r0
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	0a9b      	lsrs	r3, r3, #10
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	4903      	ldr	r1, [pc, #12]	; (800516c <HAL_RCC_GetPCLK1Freq+0x24>)
 800515e:	5ccb      	ldrb	r3, [r1, r3]
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40023800 	.word	0x40023800
 800516c:	08008ab4 	.word	0x08008ab4

08005170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005174:	f7ff ffdc 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 8005178:	4602      	mov	r2, r0
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	0b5b      	lsrs	r3, r3, #13
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	4903      	ldr	r1, [pc, #12]	; (8005194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005186:	5ccb      	ldrb	r3, [r1, r3]
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800518c:	4618      	mov	r0, r3
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40023800 	.word	0x40023800
 8005194:	08008ab4 	.word	0x08008ab4

08005198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e03f      	b.n	800522a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc fd70 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	; 0x24
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f829 	bl	8005234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005238:	b0c0      	sub	sp, #256	; 0x100
 800523a:	af00      	add	r7, sp, #0
 800523c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	68d9      	ldr	r1, [r3, #12]
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	ea40 0301 	orr.w	r3, r0, r1
 800525c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	431a      	orrs	r2, r3
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800528c:	f021 010c 	bic.w	r1, r1, #12
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800529a:	430b      	orrs	r3, r1
 800529c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ae:	6999      	ldr	r1, [r3, #24]
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	ea40 0301 	orr.w	r3, r0, r1
 80052ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b8f      	ldr	r3, [pc, #572]	; (8005500 <UART_SetConfig+0x2cc>)
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d005      	beq.n	80052d4 <UART_SetConfig+0xa0>
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	4b8d      	ldr	r3, [pc, #564]	; (8005504 <UART_SetConfig+0x2d0>)
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d104      	bne.n	80052de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7ff ff4c 	bl	8005170 <HAL_RCC_GetPCLK2Freq>
 80052d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052dc:	e003      	b.n	80052e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052de:	f7ff ff33 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 80052e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f0:	f040 810c 	bne.w	800550c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005306:	4622      	mov	r2, r4
 8005308:	462b      	mov	r3, r5
 800530a:	1891      	adds	r1, r2, r2
 800530c:	65b9      	str	r1, [r7, #88]	; 0x58
 800530e:	415b      	adcs	r3, r3
 8005310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005316:	4621      	mov	r1, r4
 8005318:	eb12 0801 	adds.w	r8, r2, r1
 800531c:	4629      	mov	r1, r5
 800531e:	eb43 0901 	adc.w	r9, r3, r1
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800532e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005336:	4690      	mov	r8, r2
 8005338:	4699      	mov	r9, r3
 800533a:	4623      	mov	r3, r4
 800533c:	eb18 0303 	adds.w	r3, r8, r3
 8005340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005344:	462b      	mov	r3, r5
 8005346:	eb49 0303 	adc.w	r3, r9, r3
 800534a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800535a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800535e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005362:	460b      	mov	r3, r1
 8005364:	18db      	adds	r3, r3, r3
 8005366:	653b      	str	r3, [r7, #80]	; 0x50
 8005368:	4613      	mov	r3, r2
 800536a:	eb42 0303 	adc.w	r3, r2, r3
 800536e:	657b      	str	r3, [r7, #84]	; 0x54
 8005370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005378:	f7fb fc76 	bl	8000c68 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4b61      	ldr	r3, [pc, #388]	; (8005508 <UART_SetConfig+0x2d4>)
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	011c      	lsls	r4, r3, #4
 800538a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800539c:	4642      	mov	r2, r8
 800539e:	464b      	mov	r3, r9
 80053a0:	1891      	adds	r1, r2, r2
 80053a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80053a4:	415b      	adcs	r3, r3
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053ac:	4641      	mov	r1, r8
 80053ae:	eb12 0a01 	adds.w	sl, r2, r1
 80053b2:	4649      	mov	r1, r9
 80053b4:	eb43 0b01 	adc.w	fp, r3, r1
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053cc:	4692      	mov	sl, r2
 80053ce:	469b      	mov	fp, r3
 80053d0:	4643      	mov	r3, r8
 80053d2:	eb1a 0303 	adds.w	r3, sl, r3
 80053d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053da:	464b      	mov	r3, r9
 80053dc:	eb4b 0303 	adc.w	r3, fp, r3
 80053e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053f8:	460b      	mov	r3, r1
 80053fa:	18db      	adds	r3, r3, r3
 80053fc:	643b      	str	r3, [r7, #64]	; 0x40
 80053fe:	4613      	mov	r3, r2
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	647b      	str	r3, [r7, #68]	; 0x44
 8005406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800540a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800540e:	f7fb fc2b 	bl	8000c68 <__aeabi_uldivmod>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4611      	mov	r1, r2
 8005418:	4b3b      	ldr	r3, [pc, #236]	; (8005508 <UART_SetConfig+0x2d4>)
 800541a:	fba3 2301 	umull	r2, r3, r3, r1
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2264      	movs	r2, #100	; 0x64
 8005422:	fb02 f303 	mul.w	r3, r2, r3
 8005426:	1acb      	subs	r3, r1, r3
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800542e:	4b36      	ldr	r3, [pc, #216]	; (8005508 <UART_SetConfig+0x2d4>)
 8005430:	fba3 2302 	umull	r2, r3, r3, r2
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800543c:	441c      	add	r4, r3
 800543e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005442:	2200      	movs	r2, #0
 8005444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800544c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	1891      	adds	r1, r2, r2
 8005456:	63b9      	str	r1, [r7, #56]	; 0x38
 8005458:	415b      	adcs	r3, r3
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800545c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005460:	4641      	mov	r1, r8
 8005462:	1851      	adds	r1, r2, r1
 8005464:	6339      	str	r1, [r7, #48]	; 0x30
 8005466:	4649      	mov	r1, r9
 8005468:	414b      	adcs	r3, r1
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005478:	4659      	mov	r1, fp
 800547a:	00cb      	lsls	r3, r1, #3
 800547c:	4651      	mov	r1, sl
 800547e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005482:	4651      	mov	r1, sl
 8005484:	00ca      	lsls	r2, r1, #3
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	4603      	mov	r3, r0
 800548c:	4642      	mov	r2, r8
 800548e:	189b      	adds	r3, r3, r2
 8005490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005494:	464b      	mov	r3, r9
 8005496:	460a      	mov	r2, r1
 8005498:	eb42 0303 	adc.w	r3, r2, r3
 800549c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054b4:	460b      	mov	r3, r1
 80054b6:	18db      	adds	r3, r3, r3
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ba:	4613      	mov	r3, r2
 80054bc:	eb42 0303 	adc.w	r3, r2, r3
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054ca:	f7fb fbcd 	bl	8000c68 <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <UART_SetConfig+0x2d4>)
 80054d4:	fba3 1302 	umull	r1, r3, r3, r2
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	2164      	movs	r1, #100	; 0x64
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	3332      	adds	r3, #50	; 0x32
 80054e6:	4a08      	ldr	r2, [pc, #32]	; (8005508 <UART_SetConfig+0x2d4>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f003 0207 	and.w	r2, r3, #7
 80054f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4422      	add	r2, r4
 80054fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054fc:	e106      	b.n	800570c <UART_SetConfig+0x4d8>
 80054fe:	bf00      	nop
 8005500:	40011000 	.word	0x40011000
 8005504:	40011400 	.word	0x40011400
 8005508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800550c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005510:	2200      	movs	r2, #0
 8005512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800551a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800551e:	4642      	mov	r2, r8
 8005520:	464b      	mov	r3, r9
 8005522:	1891      	adds	r1, r2, r2
 8005524:	6239      	str	r1, [r7, #32]
 8005526:	415b      	adcs	r3, r3
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800552e:	4641      	mov	r1, r8
 8005530:	1854      	adds	r4, r2, r1
 8005532:	4649      	mov	r1, r9
 8005534:	eb43 0501 	adc.w	r5, r3, r1
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	00eb      	lsls	r3, r5, #3
 8005542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005546:	00e2      	lsls	r2, r4, #3
 8005548:	4614      	mov	r4, r2
 800554a:	461d      	mov	r5, r3
 800554c:	4643      	mov	r3, r8
 800554e:	18e3      	adds	r3, r4, r3
 8005550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005554:	464b      	mov	r3, r9
 8005556:	eb45 0303 	adc.w	r3, r5, r3
 800555a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800556a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800557a:	4629      	mov	r1, r5
 800557c:	008b      	lsls	r3, r1, #2
 800557e:	4621      	mov	r1, r4
 8005580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005584:	4621      	mov	r1, r4
 8005586:	008a      	lsls	r2, r1, #2
 8005588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800558c:	f7fb fb6c 	bl	8000c68 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4b60      	ldr	r3, [pc, #384]	; (8005718 <UART_SetConfig+0x4e4>)
 8005596:	fba3 2302 	umull	r2, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	011c      	lsls	r4, r3, #4
 800559e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055b0:	4642      	mov	r2, r8
 80055b2:	464b      	mov	r3, r9
 80055b4:	1891      	adds	r1, r2, r2
 80055b6:	61b9      	str	r1, [r7, #24]
 80055b8:	415b      	adcs	r3, r3
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c0:	4641      	mov	r1, r8
 80055c2:	1851      	adds	r1, r2, r1
 80055c4:	6139      	str	r1, [r7, #16]
 80055c6:	4649      	mov	r1, r9
 80055c8:	414b      	adcs	r3, r1
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055d8:	4659      	mov	r1, fp
 80055da:	00cb      	lsls	r3, r1, #3
 80055dc:	4651      	mov	r1, sl
 80055de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e2:	4651      	mov	r1, sl
 80055e4:	00ca      	lsls	r2, r1, #3
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	4642      	mov	r2, r8
 80055ee:	189b      	adds	r3, r3, r2
 80055f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055f4:	464b      	mov	r3, r9
 80055f6:	460a      	mov	r2, r1
 80055f8:	eb42 0303 	adc.w	r3, r2, r3
 80055fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	67bb      	str	r3, [r7, #120]	; 0x78
 800560a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005618:	4649      	mov	r1, r9
 800561a:	008b      	lsls	r3, r1, #2
 800561c:	4641      	mov	r1, r8
 800561e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005622:	4641      	mov	r1, r8
 8005624:	008a      	lsls	r2, r1, #2
 8005626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800562a:	f7fb fb1d 	bl	8000c68 <__aeabi_uldivmod>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4611      	mov	r1, r2
 8005634:	4b38      	ldr	r3, [pc, #224]	; (8005718 <UART_SetConfig+0x4e4>)
 8005636:	fba3 2301 	umull	r2, r3, r3, r1
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2264      	movs	r2, #100	; 0x64
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	1acb      	subs	r3, r1, r3
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	3332      	adds	r3, #50	; 0x32
 8005648:	4a33      	ldr	r2, [pc, #204]	; (8005718 <UART_SetConfig+0x4e4>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005654:	441c      	add	r4, r3
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800565a:	2200      	movs	r2, #0
 800565c:	673b      	str	r3, [r7, #112]	; 0x70
 800565e:	677a      	str	r2, [r7, #116]	; 0x74
 8005660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	1891      	adds	r1, r2, r2
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	415b      	adcs	r3, r3
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005674:	4641      	mov	r1, r8
 8005676:	1851      	adds	r1, r2, r1
 8005678:	6039      	str	r1, [r7, #0]
 800567a:	4649      	mov	r1, r9
 800567c:	414b      	adcs	r3, r1
 800567e:	607b      	str	r3, [r7, #4]
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800568c:	4659      	mov	r1, fp
 800568e:	00cb      	lsls	r3, r1, #3
 8005690:	4651      	mov	r1, sl
 8005692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005696:	4651      	mov	r1, sl
 8005698:	00ca      	lsls	r2, r1, #3
 800569a:	4610      	mov	r0, r2
 800569c:	4619      	mov	r1, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	4642      	mov	r2, r8
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a6:	464b      	mov	r3, r9
 80056a8:	460a      	mov	r2, r1
 80056aa:	eb42 0303 	adc.w	r3, r2, r3
 80056ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	663b      	str	r3, [r7, #96]	; 0x60
 80056ba:	667a      	str	r2, [r7, #100]	; 0x64
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056c8:	4649      	mov	r1, r9
 80056ca:	008b      	lsls	r3, r1, #2
 80056cc:	4641      	mov	r1, r8
 80056ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d2:	4641      	mov	r1, r8
 80056d4:	008a      	lsls	r2, r1, #2
 80056d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056da:	f7fb fac5 	bl	8000c68 <__aeabi_uldivmod>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <UART_SetConfig+0x4e4>)
 80056e4:	fba3 1302 	umull	r1, r3, r3, r2
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	2164      	movs	r1, #100	; 0x64
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	3332      	adds	r3, #50	; 0x32
 80056f6:	4a08      	ldr	r2, [pc, #32]	; (8005718 <UART_SetConfig+0x4e4>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4422      	add	r2, r4
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005712:	46bd      	mov	sp, r7
 8005714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005718:	51eb851f 	.word	0x51eb851f

0800571c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800571c:	b084      	sub	sp, #16
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	f107 001c 	add.w	r0, r7, #28
 800572a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b01      	cmp	r3, #1
 8005732:	d122      	bne.n	800577a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800575c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575e:	2b01      	cmp	r3, #1
 8005760:	d105      	bne.n	800576e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 faa2 	bl	8005cb8 <USB_CoreReset>
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]
 8005778:	e01a      	b.n	80057b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa96 	bl	8005cb8 <USB_CoreReset>
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38
 80057a2:	e005      	b.n	80057b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10b      	bne.n	80057ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f043 0206 	orr.w	r2, r3, #6
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057da:	b004      	add	sp, #16
 80057dc:	4770      	bx	lr

080057de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d115      	bne.n	800584e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800582e:	2001      	movs	r0, #1
 8005830:	f7fc fe72 	bl	8002518 <HAL_Delay>
      ms++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa2e 	bl	8005c9c <USB_GetMode>
 8005840:	4603      	mov	r3, r0
 8005842:	2b01      	cmp	r3, #1
 8005844:	d01e      	beq.n	8005884 <USB_SetCurrentMode+0x84>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b31      	cmp	r3, #49	; 0x31
 800584a:	d9f0      	bls.n	800582e <USB_SetCurrentMode+0x2e>
 800584c:	e01a      	b.n	8005884 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d115      	bne.n	8005880 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005860:	2001      	movs	r0, #1
 8005862:	f7fc fe59 	bl	8002518 <HAL_Delay>
      ms++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa15 	bl	8005c9c <USB_GetMode>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <USB_SetCurrentMode+0x84>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b31      	cmp	r3, #49	; 0x31
 800587c:	d9f0      	bls.n	8005860 <USB_SetCurrentMode+0x60>
 800587e:	e001      	b.n	8005884 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e005      	b.n	8005890 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b32      	cmp	r3, #50	; 0x32
 8005888:	d101      	bne.n	800588e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005898:	b084      	sub	sp, #16
 800589a:	b580      	push	{r7, lr}
 800589c:	b086      	sub	sp, #24
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e009      	b.n	80058cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	3340      	adds	r3, #64	; 0x40
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	2200      	movs	r2, #0
 80058c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3301      	adds	r3, #1
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b0e      	cmp	r3, #14
 80058d0:	d9f2      	bls.n	80058b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11c      	bne.n	8005912 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e6:	f043 0302 	orr.w	r3, r3, #2
 80058ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
 8005910:	e00b      	b.n	800592a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005930:	461a      	mov	r2, r3
 8005932:	2300      	movs	r3, #0
 8005934:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	4619      	mov	r1, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005944:	461a      	mov	r2, r3
 8005946:	680b      	ldr	r3, [r1, #0]
 8005948:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10c      	bne.n	800596a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005956:	2100      	movs	r1, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f965 	bl	8005c28 <USB_SetDevSpeed>
 800595e:	e008      	b.n	8005972 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005960:	2101      	movs	r1, #1
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f960 	bl	8005c28 <USB_SetDevSpeed>
 8005968:	e003      	b.n	8005972 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800596a:	2103      	movs	r1, #3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f95b 	bl	8005c28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005972:	2110      	movs	r1, #16
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f8f3 	bl	8005b60 <USB_FlushTxFifo>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f91f 	bl	8005bc8 <USB_FlushRxFifo>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	461a      	mov	r2, r3
 800599c:	2300      	movs	r3, #0
 800599e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	461a      	mov	r2, r3
 80059a8:	2300      	movs	r3, #0
 80059aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	461a      	mov	r2, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b8:	2300      	movs	r3, #0
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	e043      	b.n	8005a46 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d4:	d118      	bne.n	8005a08 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	461a      	mov	r2, r3
 80059ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e013      	b.n	8005a1a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	461a      	mov	r2, r3
 8005a00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	e008      	b.n	8005a1a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	461a      	mov	r2, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	461a      	mov	r2, r3
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3301      	adds	r3, #1
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d3b7      	bcc.n	80059be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e043      	b.n	8005adc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a6a:	d118      	bne.n	8005a9e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e013      	b.n	8005ab0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	461a      	mov	r2, r3
 8005a96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	e008      	b.n	8005ab0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	461a      	mov	r2, r3
 8005aac:	2300      	movs	r3, #0
 8005aae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	461a      	mov	r2, r3
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ad4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d3b7      	bcc.n	8005a54 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f043 0210 	orr.w	r2, r3, #16
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <USB_DevInit+0x2c4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f043 0208 	orr.w	r2, r3, #8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b44:	f043 0304 	orr.w	r3, r3, #4
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b58:	b004      	add	sp, #16
 8005b5a:	4770      	bx	lr
 8005b5c:	803c3800 	.word	0x803c3800

08005b60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3301      	adds	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <USB_FlushTxFifo+0x64>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e01b      	b.n	8005bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	daf2      	bge.n	8005b6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	019b      	lsls	r3, r3, #6
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <USB_FlushTxFifo+0x64>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e006      	b.n	8005bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d0f0      	beq.n	8005b98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	00030d40 	.word	0x00030d40

08005bc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a11      	ldr	r2, [pc, #68]	; (8005c24 <USB_FlushRxFifo+0x5c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e018      	b.n	8005c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	daf2      	bge.n	8005bd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a08      	ldr	r2, [pc, #32]	; (8005c24 <USB_FlushRxFifo+0x5c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e006      	b.n	8005c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d0f0      	beq.n	8005bf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	00030d40 	.word	0x00030d40

08005c28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c74:	f023 0303 	bic.w	r3, r3, #3
 8005c78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c88:	f043 0302 	orr.w	r3, r3, #2
 8005c8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <USB_CoreReset+0x64>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e01b      	b.n	8005d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	daf2      	bge.n	8005cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f043 0201 	orr.w	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <USB_CoreReset+0x64>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d901      	bls.n	8005d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e006      	b.n	8005d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d0f0      	beq.n	8005cee <USB_CoreReset+0x36>

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	00030d40 	.word	0x00030d40

08005d20 <__cvt>:
 8005d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d24:	ec55 4b10 	vmov	r4, r5, d0
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	460e      	mov	r6, r1
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	462b      	mov	r3, r5
 8005d30:	bfbb      	ittet	lt
 8005d32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d36:	461d      	movlt	r5, r3
 8005d38:	2300      	movge	r3, #0
 8005d3a:	232d      	movlt	r3, #45	; 0x2d
 8005d3c:	700b      	strb	r3, [r1, #0]
 8005d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d44:	4691      	mov	r9, r2
 8005d46:	f023 0820 	bic.w	r8, r3, #32
 8005d4a:	bfbc      	itt	lt
 8005d4c:	4622      	movlt	r2, r4
 8005d4e:	4614      	movlt	r4, r2
 8005d50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d54:	d005      	beq.n	8005d62 <__cvt+0x42>
 8005d56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d5a:	d100      	bne.n	8005d5e <__cvt+0x3e>
 8005d5c:	3601      	adds	r6, #1
 8005d5e:	2102      	movs	r1, #2
 8005d60:	e000      	b.n	8005d64 <__cvt+0x44>
 8005d62:	2103      	movs	r1, #3
 8005d64:	ab03      	add	r3, sp, #12
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	ab02      	add	r3, sp, #8
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	ec45 4b10 	vmov	d0, r4, r5
 8005d70:	4653      	mov	r3, sl
 8005d72:	4632      	mov	r2, r6
 8005d74:	f000 fe68 	bl	8006a48 <_dtoa_r>
 8005d78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	d102      	bne.n	8005d86 <__cvt+0x66>
 8005d80:	f019 0f01 	tst.w	r9, #1
 8005d84:	d022      	beq.n	8005dcc <__cvt+0xac>
 8005d86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d8a:	eb07 0906 	add.w	r9, r7, r6
 8005d8e:	d110      	bne.n	8005db2 <__cvt+0x92>
 8005d90:	783b      	ldrb	r3, [r7, #0]
 8005d92:	2b30      	cmp	r3, #48	; 0x30
 8005d94:	d10a      	bne.n	8005dac <__cvt+0x8c>
 8005d96:	2200      	movs	r2, #0
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	f7fa fea3 	bl	8000ae8 <__aeabi_dcmpeq>
 8005da2:	b918      	cbnz	r0, 8005dac <__cvt+0x8c>
 8005da4:	f1c6 0601 	rsb	r6, r6, #1
 8005da8:	f8ca 6000 	str.w	r6, [sl]
 8005dac:	f8da 3000 	ldr.w	r3, [sl]
 8005db0:	4499      	add	r9, r3
 8005db2:	2200      	movs	r2, #0
 8005db4:	2300      	movs	r3, #0
 8005db6:	4620      	mov	r0, r4
 8005db8:	4629      	mov	r1, r5
 8005dba:	f7fa fe95 	bl	8000ae8 <__aeabi_dcmpeq>
 8005dbe:	b108      	cbz	r0, 8005dc4 <__cvt+0xa4>
 8005dc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dc4:	2230      	movs	r2, #48	; 0x30
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	454b      	cmp	r3, r9
 8005dca:	d307      	bcc.n	8005ddc <__cvt+0xbc>
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dd0:	1bdb      	subs	r3, r3, r7
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	b004      	add	sp, #16
 8005dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ddc:	1c59      	adds	r1, r3, #1
 8005dde:	9103      	str	r1, [sp, #12]
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	e7f0      	b.n	8005dc6 <__cvt+0xa6>

08005de4 <__exponent>:
 8005de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de6:	4603      	mov	r3, r0
 8005de8:	2900      	cmp	r1, #0
 8005dea:	bfb8      	it	lt
 8005dec:	4249      	neglt	r1, r1
 8005dee:	f803 2b02 	strb.w	r2, [r3], #2
 8005df2:	bfb4      	ite	lt
 8005df4:	222d      	movlt	r2, #45	; 0x2d
 8005df6:	222b      	movge	r2, #43	; 0x2b
 8005df8:	2909      	cmp	r1, #9
 8005dfa:	7042      	strb	r2, [r0, #1]
 8005dfc:	dd2a      	ble.n	8005e54 <__exponent+0x70>
 8005dfe:	f10d 0207 	add.w	r2, sp, #7
 8005e02:	4617      	mov	r7, r2
 8005e04:	260a      	movs	r6, #10
 8005e06:	4694      	mov	ip, r2
 8005e08:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e0c:	fb06 1415 	mls	r4, r6, r5, r1
 8005e10:	3430      	adds	r4, #48	; 0x30
 8005e12:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005e16:	460c      	mov	r4, r1
 8005e18:	2c63      	cmp	r4, #99	; 0x63
 8005e1a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005e1e:	4629      	mov	r1, r5
 8005e20:	dcf1      	bgt.n	8005e06 <__exponent+0x22>
 8005e22:	3130      	adds	r1, #48	; 0x30
 8005e24:	f1ac 0402 	sub.w	r4, ip, #2
 8005e28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e2c:	1c41      	adds	r1, r0, #1
 8005e2e:	4622      	mov	r2, r4
 8005e30:	42ba      	cmp	r2, r7
 8005e32:	d30a      	bcc.n	8005e4a <__exponent+0x66>
 8005e34:	f10d 0209 	add.w	r2, sp, #9
 8005e38:	eba2 020c 	sub.w	r2, r2, ip
 8005e3c:	42bc      	cmp	r4, r7
 8005e3e:	bf88      	it	hi
 8005e40:	2200      	movhi	r2, #0
 8005e42:	4413      	add	r3, r2
 8005e44:	1a18      	subs	r0, r3, r0
 8005e46:	b003      	add	sp, #12
 8005e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e4e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e52:	e7ed      	b.n	8005e30 <__exponent+0x4c>
 8005e54:	2330      	movs	r3, #48	; 0x30
 8005e56:	3130      	adds	r1, #48	; 0x30
 8005e58:	7083      	strb	r3, [r0, #2]
 8005e5a:	70c1      	strb	r1, [r0, #3]
 8005e5c:	1d03      	adds	r3, r0, #4
 8005e5e:	e7f1      	b.n	8005e44 <__exponent+0x60>

08005e60 <_printf_float>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	ed2d 8b02 	vpush	{d8}
 8005e68:	b08d      	sub	sp, #52	; 0x34
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e70:	4616      	mov	r6, r2
 8005e72:	461f      	mov	r7, r3
 8005e74:	4605      	mov	r5, r0
 8005e76:	f000 fce7 	bl	8006848 <_localeconv_r>
 8005e7a:	f8d0 a000 	ldr.w	sl, [r0]
 8005e7e:	4650      	mov	r0, sl
 8005e80:	f7fa fa06 	bl	8000290 <strlen>
 8005e84:	2300      	movs	r3, #0
 8005e86:	930a      	str	r3, [sp, #40]	; 0x28
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	9305      	str	r3, [sp, #20]
 8005e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e94:	3307      	adds	r3, #7
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	f103 0208 	add.w	r2, r3, #8
 8005e9e:	f8c8 2000 	str.w	r2, [r8]
 8005ea2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005eaa:	9307      	str	r3, [sp, #28]
 8005eac:	f8cd 8018 	str.w	r8, [sp, #24]
 8005eb0:	ee08 0a10 	vmov	s16, r0
 8005eb4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ebc:	4b9e      	ldr	r3, [pc, #632]	; (8006138 <_printf_float+0x2d8>)
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ec2:	f7fa fe43 	bl	8000b4c <__aeabi_dcmpun>
 8005ec6:	bb88      	cbnz	r0, 8005f2c <_printf_float+0xcc>
 8005ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ecc:	4b9a      	ldr	r3, [pc, #616]	; (8006138 <_printf_float+0x2d8>)
 8005ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ed2:	f7fa fe1d 	bl	8000b10 <__aeabi_dcmple>
 8005ed6:	bb48      	cbnz	r0, 8005f2c <_printf_float+0xcc>
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2300      	movs	r3, #0
 8005edc:	4640      	mov	r0, r8
 8005ede:	4649      	mov	r1, r9
 8005ee0:	f7fa fe0c 	bl	8000afc <__aeabi_dcmplt>
 8005ee4:	b110      	cbz	r0, 8005eec <_printf_float+0x8c>
 8005ee6:	232d      	movs	r3, #45	; 0x2d
 8005ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eec:	4a93      	ldr	r2, [pc, #588]	; (800613c <_printf_float+0x2dc>)
 8005eee:	4b94      	ldr	r3, [pc, #592]	; (8006140 <_printf_float+0x2e0>)
 8005ef0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ef4:	bf94      	ite	ls
 8005ef6:	4690      	movls	r8, r2
 8005ef8:	4698      	movhi	r8, r3
 8005efa:	2303      	movs	r3, #3
 8005efc:	6123      	str	r3, [r4, #16]
 8005efe:	9b05      	ldr	r3, [sp, #20]
 8005f00:	f023 0304 	bic.w	r3, r3, #4
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	f04f 0900 	mov.w	r9, #0
 8005f0a:	9700      	str	r7, [sp, #0]
 8005f0c:	4633      	mov	r3, r6
 8005f0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f10:	4621      	mov	r1, r4
 8005f12:	4628      	mov	r0, r5
 8005f14:	f000 f9da 	bl	80062cc <_printf_common>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f040 8090 	bne.w	800603e <_printf_float+0x1de>
 8005f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f22:	b00d      	add	sp, #52	; 0x34
 8005f24:	ecbd 8b02 	vpop	{d8}
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	4649      	mov	r1, r9
 8005f34:	f7fa fe0a 	bl	8000b4c <__aeabi_dcmpun>
 8005f38:	b140      	cbz	r0, 8005f4c <_printf_float+0xec>
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfbc      	itt	lt
 8005f40:	232d      	movlt	r3, #45	; 0x2d
 8005f42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f46:	4a7f      	ldr	r2, [pc, #508]	; (8006144 <_printf_float+0x2e4>)
 8005f48:	4b7f      	ldr	r3, [pc, #508]	; (8006148 <_printf_float+0x2e8>)
 8005f4a:	e7d1      	b.n	8005ef0 <_printf_float+0x90>
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f52:	9206      	str	r2, [sp, #24]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	d13f      	bne.n	8005fd8 <_printf_float+0x178>
 8005f58:	2306      	movs	r3, #6
 8005f5a:	6063      	str	r3, [r4, #4]
 8005f5c:	9b05      	ldr	r3, [sp, #20]
 8005f5e:	6861      	ldr	r1, [r4, #4]
 8005f60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f64:	2300      	movs	r3, #0
 8005f66:	9303      	str	r3, [sp, #12]
 8005f68:	ab0a      	add	r3, sp, #40	; 0x28
 8005f6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f6e:	ab09      	add	r3, sp, #36	; 0x24
 8005f70:	ec49 8b10 	vmov	d0, r8, r9
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	6022      	str	r2, [r4, #0]
 8005f78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff fecf 	bl	8005d20 <__cvt>
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f86:	2b47      	cmp	r3, #71	; 0x47
 8005f88:	4680      	mov	r8, r0
 8005f8a:	d108      	bne.n	8005f9e <_printf_float+0x13e>
 8005f8c:	1cc8      	adds	r0, r1, #3
 8005f8e:	db02      	blt.n	8005f96 <_printf_float+0x136>
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	4299      	cmp	r1, r3
 8005f94:	dd41      	ble.n	800601a <_printf_float+0x1ba>
 8005f96:	f1ab 0302 	sub.w	r3, fp, #2
 8005f9a:	fa5f fb83 	uxtb.w	fp, r3
 8005f9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fa2:	d820      	bhi.n	8005fe6 <_printf_float+0x186>
 8005fa4:	3901      	subs	r1, #1
 8005fa6:	465a      	mov	r2, fp
 8005fa8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fac:	9109      	str	r1, [sp, #36]	; 0x24
 8005fae:	f7ff ff19 	bl	8005de4 <__exponent>
 8005fb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fb4:	1813      	adds	r3, r2, r0
 8005fb6:	2a01      	cmp	r2, #1
 8005fb8:	4681      	mov	r9, r0
 8005fba:	6123      	str	r3, [r4, #16]
 8005fbc:	dc02      	bgt.n	8005fc4 <_printf_float+0x164>
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	07d2      	lsls	r2, r2, #31
 8005fc2:	d501      	bpl.n	8005fc8 <_printf_float+0x168>
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d09c      	beq.n	8005f0a <_printf_float+0xaa>
 8005fd0:	232d      	movs	r3, #45	; 0x2d
 8005fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd6:	e798      	b.n	8005f0a <_printf_float+0xaa>
 8005fd8:	9a06      	ldr	r2, [sp, #24]
 8005fda:	2a47      	cmp	r2, #71	; 0x47
 8005fdc:	d1be      	bne.n	8005f5c <_printf_float+0xfc>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1bc      	bne.n	8005f5c <_printf_float+0xfc>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e7b9      	b.n	8005f5a <_printf_float+0xfa>
 8005fe6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fea:	d118      	bne.n	800601e <_printf_float+0x1be>
 8005fec:	2900      	cmp	r1, #0
 8005fee:	6863      	ldr	r3, [r4, #4]
 8005ff0:	dd0b      	ble.n	800600a <_printf_float+0x1aa>
 8005ff2:	6121      	str	r1, [r4, #16]
 8005ff4:	b913      	cbnz	r3, 8005ffc <_printf_float+0x19c>
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	07d0      	lsls	r0, r2, #31
 8005ffa:	d502      	bpl.n	8006002 <_printf_float+0x1a2>
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	440b      	add	r3, r1
 8006000:	6123      	str	r3, [r4, #16]
 8006002:	65a1      	str	r1, [r4, #88]	; 0x58
 8006004:	f04f 0900 	mov.w	r9, #0
 8006008:	e7de      	b.n	8005fc8 <_printf_float+0x168>
 800600a:	b913      	cbnz	r3, 8006012 <_printf_float+0x1b2>
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	07d2      	lsls	r2, r2, #31
 8006010:	d501      	bpl.n	8006016 <_printf_float+0x1b6>
 8006012:	3302      	adds	r3, #2
 8006014:	e7f4      	b.n	8006000 <_printf_float+0x1a0>
 8006016:	2301      	movs	r3, #1
 8006018:	e7f2      	b.n	8006000 <_printf_float+0x1a0>
 800601a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800601e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006020:	4299      	cmp	r1, r3
 8006022:	db05      	blt.n	8006030 <_printf_float+0x1d0>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	6121      	str	r1, [r4, #16]
 8006028:	07d8      	lsls	r0, r3, #31
 800602a:	d5ea      	bpl.n	8006002 <_printf_float+0x1a2>
 800602c:	1c4b      	adds	r3, r1, #1
 800602e:	e7e7      	b.n	8006000 <_printf_float+0x1a0>
 8006030:	2900      	cmp	r1, #0
 8006032:	bfd4      	ite	le
 8006034:	f1c1 0202 	rsble	r2, r1, #2
 8006038:	2201      	movgt	r2, #1
 800603a:	4413      	add	r3, r2
 800603c:	e7e0      	b.n	8006000 <_printf_float+0x1a0>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	055a      	lsls	r2, r3, #21
 8006042:	d407      	bmi.n	8006054 <_printf_float+0x1f4>
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	4642      	mov	r2, r8
 8006048:	4631      	mov	r1, r6
 800604a:	4628      	mov	r0, r5
 800604c:	47b8      	blx	r7
 800604e:	3001      	adds	r0, #1
 8006050:	d12c      	bne.n	80060ac <_printf_float+0x24c>
 8006052:	e764      	b.n	8005f1e <_printf_float+0xbe>
 8006054:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006058:	f240 80e0 	bls.w	800621c <_printf_float+0x3bc>
 800605c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	f7fa fd40 	bl	8000ae8 <__aeabi_dcmpeq>
 8006068:	2800      	cmp	r0, #0
 800606a:	d034      	beq.n	80060d6 <_printf_float+0x276>
 800606c:	4a37      	ldr	r2, [pc, #220]	; (800614c <_printf_float+0x2ec>)
 800606e:	2301      	movs	r3, #1
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f af51 	beq.w	8005f1e <_printf_float+0xbe>
 800607c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006080:	429a      	cmp	r2, r3
 8006082:	db02      	blt.n	800608a <_printf_float+0x22a>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07d8      	lsls	r0, r3, #31
 8006088:	d510      	bpl.n	80060ac <_printf_float+0x24c>
 800608a:	ee18 3a10 	vmov	r3, s16
 800608e:	4652      	mov	r2, sl
 8006090:	4631      	mov	r1, r6
 8006092:	4628      	mov	r0, r5
 8006094:	47b8      	blx	r7
 8006096:	3001      	adds	r0, #1
 8006098:	f43f af41 	beq.w	8005f1e <_printf_float+0xbe>
 800609c:	f04f 0800 	mov.w	r8, #0
 80060a0:	f104 091a 	add.w	r9, r4, #26
 80060a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a6:	3b01      	subs	r3, #1
 80060a8:	4543      	cmp	r3, r8
 80060aa:	dc09      	bgt.n	80060c0 <_printf_float+0x260>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	079b      	lsls	r3, r3, #30
 80060b0:	f100 8107 	bmi.w	80062c2 <_printf_float+0x462>
 80060b4:	68e0      	ldr	r0, [r4, #12]
 80060b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060b8:	4298      	cmp	r0, r3
 80060ba:	bfb8      	it	lt
 80060bc:	4618      	movlt	r0, r3
 80060be:	e730      	b.n	8005f22 <_printf_float+0xc2>
 80060c0:	2301      	movs	r3, #1
 80060c2:	464a      	mov	r2, r9
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f af27 	beq.w	8005f1e <_printf_float+0xbe>
 80060d0:	f108 0801 	add.w	r8, r8, #1
 80060d4:	e7e6      	b.n	80060a4 <_printf_float+0x244>
 80060d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	dc39      	bgt.n	8006150 <_printf_float+0x2f0>
 80060dc:	4a1b      	ldr	r2, [pc, #108]	; (800614c <_printf_float+0x2ec>)
 80060de:	2301      	movs	r3, #1
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f af19 	beq.w	8005f1e <_printf_float+0xbe>
 80060ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060f0:	4313      	orrs	r3, r2
 80060f2:	d102      	bne.n	80060fa <_printf_float+0x29a>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	07d9      	lsls	r1, r3, #31
 80060f8:	d5d8      	bpl.n	80060ac <_printf_float+0x24c>
 80060fa:	ee18 3a10 	vmov	r3, s16
 80060fe:	4652      	mov	r2, sl
 8006100:	4631      	mov	r1, r6
 8006102:	4628      	mov	r0, r5
 8006104:	47b8      	blx	r7
 8006106:	3001      	adds	r0, #1
 8006108:	f43f af09 	beq.w	8005f1e <_printf_float+0xbe>
 800610c:	f04f 0900 	mov.w	r9, #0
 8006110:	f104 0a1a 	add.w	sl, r4, #26
 8006114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006116:	425b      	negs	r3, r3
 8006118:	454b      	cmp	r3, r9
 800611a:	dc01      	bgt.n	8006120 <_printf_float+0x2c0>
 800611c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800611e:	e792      	b.n	8006046 <_printf_float+0x1e6>
 8006120:	2301      	movs	r3, #1
 8006122:	4652      	mov	r2, sl
 8006124:	4631      	mov	r1, r6
 8006126:	4628      	mov	r0, r5
 8006128:	47b8      	blx	r7
 800612a:	3001      	adds	r0, #1
 800612c:	f43f aef7 	beq.w	8005f1e <_printf_float+0xbe>
 8006130:	f109 0901 	add.w	r9, r9, #1
 8006134:	e7ee      	b.n	8006114 <_printf_float+0x2b4>
 8006136:	bf00      	nop
 8006138:	7fefffff 	.word	0x7fefffff
 800613c:	08008abc 	.word	0x08008abc
 8006140:	08008ac0 	.word	0x08008ac0
 8006144:	08008ac4 	.word	0x08008ac4
 8006148:	08008ac8 	.word	0x08008ac8
 800614c:	08008acc 	.word	0x08008acc
 8006150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006154:	429a      	cmp	r2, r3
 8006156:	bfa8      	it	ge
 8006158:	461a      	movge	r2, r3
 800615a:	2a00      	cmp	r2, #0
 800615c:	4691      	mov	r9, r2
 800615e:	dc37      	bgt.n	80061d0 <_printf_float+0x370>
 8006160:	f04f 0b00 	mov.w	fp, #0
 8006164:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006168:	f104 021a 	add.w	r2, r4, #26
 800616c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800616e:	9305      	str	r3, [sp, #20]
 8006170:	eba3 0309 	sub.w	r3, r3, r9
 8006174:	455b      	cmp	r3, fp
 8006176:	dc33      	bgt.n	80061e0 <_printf_float+0x380>
 8006178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800617c:	429a      	cmp	r2, r3
 800617e:	db3b      	blt.n	80061f8 <_printf_float+0x398>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	07da      	lsls	r2, r3, #31
 8006184:	d438      	bmi.n	80061f8 <_printf_float+0x398>
 8006186:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800618a:	eba2 0903 	sub.w	r9, r2, r3
 800618e:	9b05      	ldr	r3, [sp, #20]
 8006190:	1ad2      	subs	r2, r2, r3
 8006192:	4591      	cmp	r9, r2
 8006194:	bfa8      	it	ge
 8006196:	4691      	movge	r9, r2
 8006198:	f1b9 0f00 	cmp.w	r9, #0
 800619c:	dc35      	bgt.n	800620a <_printf_float+0x3aa>
 800619e:	f04f 0800 	mov.w	r8, #0
 80061a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061a6:	f104 0a1a 	add.w	sl, r4, #26
 80061aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	eba3 0309 	sub.w	r3, r3, r9
 80061b4:	4543      	cmp	r3, r8
 80061b6:	f77f af79 	ble.w	80060ac <_printf_float+0x24c>
 80061ba:	2301      	movs	r3, #1
 80061bc:	4652      	mov	r2, sl
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	f43f aeaa 	beq.w	8005f1e <_printf_float+0xbe>
 80061ca:	f108 0801 	add.w	r8, r8, #1
 80061ce:	e7ec      	b.n	80061aa <_printf_float+0x34a>
 80061d0:	4613      	mov	r3, r2
 80061d2:	4631      	mov	r1, r6
 80061d4:	4642      	mov	r2, r8
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	d1c0      	bne.n	8006160 <_printf_float+0x300>
 80061de:	e69e      	b.n	8005f1e <_printf_float+0xbe>
 80061e0:	2301      	movs	r3, #1
 80061e2:	4631      	mov	r1, r6
 80061e4:	4628      	mov	r0, r5
 80061e6:	9205      	str	r2, [sp, #20]
 80061e8:	47b8      	blx	r7
 80061ea:	3001      	adds	r0, #1
 80061ec:	f43f ae97 	beq.w	8005f1e <_printf_float+0xbe>
 80061f0:	9a05      	ldr	r2, [sp, #20]
 80061f2:	f10b 0b01 	add.w	fp, fp, #1
 80061f6:	e7b9      	b.n	800616c <_printf_float+0x30c>
 80061f8:	ee18 3a10 	vmov	r3, s16
 80061fc:	4652      	mov	r2, sl
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	d1be      	bne.n	8006186 <_printf_float+0x326>
 8006208:	e689      	b.n	8005f1e <_printf_float+0xbe>
 800620a:	9a05      	ldr	r2, [sp, #20]
 800620c:	464b      	mov	r3, r9
 800620e:	4442      	add	r2, r8
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	d1c1      	bne.n	800619e <_printf_float+0x33e>
 800621a:	e680      	b.n	8005f1e <_printf_float+0xbe>
 800621c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800621e:	2a01      	cmp	r2, #1
 8006220:	dc01      	bgt.n	8006226 <_printf_float+0x3c6>
 8006222:	07db      	lsls	r3, r3, #31
 8006224:	d53a      	bpl.n	800629c <_printf_float+0x43c>
 8006226:	2301      	movs	r3, #1
 8006228:	4642      	mov	r2, r8
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	f43f ae74 	beq.w	8005f1e <_printf_float+0xbe>
 8006236:	ee18 3a10 	vmov	r3, s16
 800623a:	4652      	mov	r2, sl
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	f43f ae6b 	beq.w	8005f1e <_printf_float+0xbe>
 8006248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800624c:	2200      	movs	r2, #0
 800624e:	2300      	movs	r3, #0
 8006250:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006254:	f7fa fc48 	bl	8000ae8 <__aeabi_dcmpeq>
 8006258:	b9d8      	cbnz	r0, 8006292 <_printf_float+0x432>
 800625a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800625e:	f108 0201 	add.w	r2, r8, #1
 8006262:	4631      	mov	r1, r6
 8006264:	4628      	mov	r0, r5
 8006266:	47b8      	blx	r7
 8006268:	3001      	adds	r0, #1
 800626a:	d10e      	bne.n	800628a <_printf_float+0x42a>
 800626c:	e657      	b.n	8005f1e <_printf_float+0xbe>
 800626e:	2301      	movs	r3, #1
 8006270:	4652      	mov	r2, sl
 8006272:	4631      	mov	r1, r6
 8006274:	4628      	mov	r0, r5
 8006276:	47b8      	blx	r7
 8006278:	3001      	adds	r0, #1
 800627a:	f43f ae50 	beq.w	8005f1e <_printf_float+0xbe>
 800627e:	f108 0801 	add.w	r8, r8, #1
 8006282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006284:	3b01      	subs	r3, #1
 8006286:	4543      	cmp	r3, r8
 8006288:	dcf1      	bgt.n	800626e <_printf_float+0x40e>
 800628a:	464b      	mov	r3, r9
 800628c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006290:	e6da      	b.n	8006048 <_printf_float+0x1e8>
 8006292:	f04f 0800 	mov.w	r8, #0
 8006296:	f104 0a1a 	add.w	sl, r4, #26
 800629a:	e7f2      	b.n	8006282 <_printf_float+0x422>
 800629c:	2301      	movs	r3, #1
 800629e:	4642      	mov	r2, r8
 80062a0:	e7df      	b.n	8006262 <_printf_float+0x402>
 80062a2:	2301      	movs	r3, #1
 80062a4:	464a      	mov	r2, r9
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	f43f ae36 	beq.w	8005f1e <_printf_float+0xbe>
 80062b2:	f108 0801 	add.w	r8, r8, #1
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	4543      	cmp	r3, r8
 80062be:	dcf0      	bgt.n	80062a2 <_printf_float+0x442>
 80062c0:	e6f8      	b.n	80060b4 <_printf_float+0x254>
 80062c2:	f04f 0800 	mov.w	r8, #0
 80062c6:	f104 0919 	add.w	r9, r4, #25
 80062ca:	e7f4      	b.n	80062b6 <_printf_float+0x456>

080062cc <_printf_common>:
 80062cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	4616      	mov	r6, r2
 80062d2:	4699      	mov	r9, r3
 80062d4:	688a      	ldr	r2, [r1, #8]
 80062d6:	690b      	ldr	r3, [r1, #16]
 80062d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062dc:	4293      	cmp	r3, r2
 80062de:	bfb8      	it	lt
 80062e0:	4613      	movlt	r3, r2
 80062e2:	6033      	str	r3, [r6, #0]
 80062e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062e8:	4607      	mov	r7, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	b10a      	cbz	r2, 80062f2 <_printf_common+0x26>
 80062ee:	3301      	adds	r3, #1
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	0699      	lsls	r1, r3, #26
 80062f6:	bf42      	ittt	mi
 80062f8:	6833      	ldrmi	r3, [r6, #0]
 80062fa:	3302      	addmi	r3, #2
 80062fc:	6033      	strmi	r3, [r6, #0]
 80062fe:	6825      	ldr	r5, [r4, #0]
 8006300:	f015 0506 	ands.w	r5, r5, #6
 8006304:	d106      	bne.n	8006314 <_printf_common+0x48>
 8006306:	f104 0a19 	add.w	sl, r4, #25
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	6832      	ldr	r2, [r6, #0]
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	42ab      	cmp	r3, r5
 8006312:	dc26      	bgt.n	8006362 <_printf_common+0x96>
 8006314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006318:	1e13      	subs	r3, r2, #0
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	bf18      	it	ne
 800631e:	2301      	movne	r3, #1
 8006320:	0692      	lsls	r2, r2, #26
 8006322:	d42b      	bmi.n	800637c <_printf_common+0xb0>
 8006324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006328:	4649      	mov	r1, r9
 800632a:	4638      	mov	r0, r7
 800632c:	47c0      	blx	r8
 800632e:	3001      	adds	r0, #1
 8006330:	d01e      	beq.n	8006370 <_printf_common+0xa4>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	6922      	ldr	r2, [r4, #16]
 8006336:	f003 0306 	and.w	r3, r3, #6
 800633a:	2b04      	cmp	r3, #4
 800633c:	bf02      	ittt	eq
 800633e:	68e5      	ldreq	r5, [r4, #12]
 8006340:	6833      	ldreq	r3, [r6, #0]
 8006342:	1aed      	subeq	r5, r5, r3
 8006344:	68a3      	ldr	r3, [r4, #8]
 8006346:	bf0c      	ite	eq
 8006348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800634c:	2500      	movne	r5, #0
 800634e:	4293      	cmp	r3, r2
 8006350:	bfc4      	itt	gt
 8006352:	1a9b      	subgt	r3, r3, r2
 8006354:	18ed      	addgt	r5, r5, r3
 8006356:	2600      	movs	r6, #0
 8006358:	341a      	adds	r4, #26
 800635a:	42b5      	cmp	r5, r6
 800635c:	d11a      	bne.n	8006394 <_printf_common+0xc8>
 800635e:	2000      	movs	r0, #0
 8006360:	e008      	b.n	8006374 <_printf_common+0xa8>
 8006362:	2301      	movs	r3, #1
 8006364:	4652      	mov	r2, sl
 8006366:	4649      	mov	r1, r9
 8006368:	4638      	mov	r0, r7
 800636a:	47c0      	blx	r8
 800636c:	3001      	adds	r0, #1
 800636e:	d103      	bne.n	8006378 <_printf_common+0xac>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006378:	3501      	adds	r5, #1
 800637a:	e7c6      	b.n	800630a <_printf_common+0x3e>
 800637c:	18e1      	adds	r1, r4, r3
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	2030      	movs	r0, #48	; 0x30
 8006382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006386:	4422      	add	r2, r4
 8006388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800638c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006390:	3302      	adds	r3, #2
 8006392:	e7c7      	b.n	8006324 <_printf_common+0x58>
 8006394:	2301      	movs	r3, #1
 8006396:	4622      	mov	r2, r4
 8006398:	4649      	mov	r1, r9
 800639a:	4638      	mov	r0, r7
 800639c:	47c0      	blx	r8
 800639e:	3001      	adds	r0, #1
 80063a0:	d0e6      	beq.n	8006370 <_printf_common+0xa4>
 80063a2:	3601      	adds	r6, #1
 80063a4:	e7d9      	b.n	800635a <_printf_common+0x8e>
	...

080063a8 <_printf_i>:
 80063a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	7e0f      	ldrb	r7, [r1, #24]
 80063ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063b0:	2f78      	cmp	r7, #120	; 0x78
 80063b2:	4691      	mov	r9, r2
 80063b4:	4680      	mov	r8, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	469a      	mov	sl, r3
 80063ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063be:	d807      	bhi.n	80063d0 <_printf_i+0x28>
 80063c0:	2f62      	cmp	r7, #98	; 0x62
 80063c2:	d80a      	bhi.n	80063da <_printf_i+0x32>
 80063c4:	2f00      	cmp	r7, #0
 80063c6:	f000 80d4 	beq.w	8006572 <_printf_i+0x1ca>
 80063ca:	2f58      	cmp	r7, #88	; 0x58
 80063cc:	f000 80c0 	beq.w	8006550 <_printf_i+0x1a8>
 80063d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063d8:	e03a      	b.n	8006450 <_printf_i+0xa8>
 80063da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063de:	2b15      	cmp	r3, #21
 80063e0:	d8f6      	bhi.n	80063d0 <_printf_i+0x28>
 80063e2:	a101      	add	r1, pc, #4	; (adr r1, 80063e8 <_printf_i+0x40>)
 80063e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063e8:	08006441 	.word	0x08006441
 80063ec:	08006455 	.word	0x08006455
 80063f0:	080063d1 	.word	0x080063d1
 80063f4:	080063d1 	.word	0x080063d1
 80063f8:	080063d1 	.word	0x080063d1
 80063fc:	080063d1 	.word	0x080063d1
 8006400:	08006455 	.word	0x08006455
 8006404:	080063d1 	.word	0x080063d1
 8006408:	080063d1 	.word	0x080063d1
 800640c:	080063d1 	.word	0x080063d1
 8006410:	080063d1 	.word	0x080063d1
 8006414:	08006559 	.word	0x08006559
 8006418:	08006481 	.word	0x08006481
 800641c:	08006513 	.word	0x08006513
 8006420:	080063d1 	.word	0x080063d1
 8006424:	080063d1 	.word	0x080063d1
 8006428:	0800657b 	.word	0x0800657b
 800642c:	080063d1 	.word	0x080063d1
 8006430:	08006481 	.word	0x08006481
 8006434:	080063d1 	.word	0x080063d1
 8006438:	080063d1 	.word	0x080063d1
 800643c:	0800651b 	.word	0x0800651b
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	1d1a      	adds	r2, r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	602a      	str	r2, [r5, #0]
 8006448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800644c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006450:	2301      	movs	r3, #1
 8006452:	e09f      	b.n	8006594 <_printf_i+0x1ec>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	0607      	lsls	r7, r0, #24
 800645a:	f103 0104 	add.w	r1, r3, #4
 800645e:	6029      	str	r1, [r5, #0]
 8006460:	d501      	bpl.n	8006466 <_printf_i+0xbe>
 8006462:	681e      	ldr	r6, [r3, #0]
 8006464:	e003      	b.n	800646e <_printf_i+0xc6>
 8006466:	0646      	lsls	r6, r0, #25
 8006468:	d5fb      	bpl.n	8006462 <_printf_i+0xba>
 800646a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800646e:	2e00      	cmp	r6, #0
 8006470:	da03      	bge.n	800647a <_printf_i+0xd2>
 8006472:	232d      	movs	r3, #45	; 0x2d
 8006474:	4276      	negs	r6, r6
 8006476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647a:	485a      	ldr	r0, [pc, #360]	; (80065e4 <_printf_i+0x23c>)
 800647c:	230a      	movs	r3, #10
 800647e:	e012      	b.n	80064a6 <_printf_i+0xfe>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	6820      	ldr	r0, [r4, #0]
 8006484:	1d19      	adds	r1, r3, #4
 8006486:	6029      	str	r1, [r5, #0]
 8006488:	0605      	lsls	r5, r0, #24
 800648a:	d501      	bpl.n	8006490 <_printf_i+0xe8>
 800648c:	681e      	ldr	r6, [r3, #0]
 800648e:	e002      	b.n	8006496 <_printf_i+0xee>
 8006490:	0641      	lsls	r1, r0, #25
 8006492:	d5fb      	bpl.n	800648c <_printf_i+0xe4>
 8006494:	881e      	ldrh	r6, [r3, #0]
 8006496:	4853      	ldr	r0, [pc, #332]	; (80065e4 <_printf_i+0x23c>)
 8006498:	2f6f      	cmp	r7, #111	; 0x6f
 800649a:	bf0c      	ite	eq
 800649c:	2308      	moveq	r3, #8
 800649e:	230a      	movne	r3, #10
 80064a0:	2100      	movs	r1, #0
 80064a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064a6:	6865      	ldr	r5, [r4, #4]
 80064a8:	60a5      	str	r5, [r4, #8]
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	bfa2      	ittt	ge
 80064ae:	6821      	ldrge	r1, [r4, #0]
 80064b0:	f021 0104 	bicge.w	r1, r1, #4
 80064b4:	6021      	strge	r1, [r4, #0]
 80064b6:	b90e      	cbnz	r6, 80064bc <_printf_i+0x114>
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	d04b      	beq.n	8006554 <_printf_i+0x1ac>
 80064bc:	4615      	mov	r5, r2
 80064be:	fbb6 f1f3 	udiv	r1, r6, r3
 80064c2:	fb03 6711 	mls	r7, r3, r1, r6
 80064c6:	5dc7      	ldrb	r7, [r0, r7]
 80064c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064cc:	4637      	mov	r7, r6
 80064ce:	42bb      	cmp	r3, r7
 80064d0:	460e      	mov	r6, r1
 80064d2:	d9f4      	bls.n	80064be <_printf_i+0x116>
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d10b      	bne.n	80064f0 <_printf_i+0x148>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	07de      	lsls	r6, r3, #31
 80064dc:	d508      	bpl.n	80064f0 <_printf_i+0x148>
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	6861      	ldr	r1, [r4, #4]
 80064e2:	4299      	cmp	r1, r3
 80064e4:	bfde      	ittt	le
 80064e6:	2330      	movle	r3, #48	; 0x30
 80064e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80064f0:	1b52      	subs	r2, r2, r5
 80064f2:	6122      	str	r2, [r4, #16]
 80064f4:	f8cd a000 	str.w	sl, [sp]
 80064f8:	464b      	mov	r3, r9
 80064fa:	aa03      	add	r2, sp, #12
 80064fc:	4621      	mov	r1, r4
 80064fe:	4640      	mov	r0, r8
 8006500:	f7ff fee4 	bl	80062cc <_printf_common>
 8006504:	3001      	adds	r0, #1
 8006506:	d14a      	bne.n	800659e <_printf_i+0x1f6>
 8006508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800650c:	b004      	add	sp, #16
 800650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	f043 0320 	orr.w	r3, r3, #32
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	4833      	ldr	r0, [pc, #204]	; (80065e8 <_printf_i+0x240>)
 800651c:	2778      	movs	r7, #120	; 0x78
 800651e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	6829      	ldr	r1, [r5, #0]
 8006526:	061f      	lsls	r7, r3, #24
 8006528:	f851 6b04 	ldr.w	r6, [r1], #4
 800652c:	d402      	bmi.n	8006534 <_printf_i+0x18c>
 800652e:	065f      	lsls	r7, r3, #25
 8006530:	bf48      	it	mi
 8006532:	b2b6      	uxthmi	r6, r6
 8006534:	07df      	lsls	r7, r3, #31
 8006536:	bf48      	it	mi
 8006538:	f043 0320 	orrmi.w	r3, r3, #32
 800653c:	6029      	str	r1, [r5, #0]
 800653e:	bf48      	it	mi
 8006540:	6023      	strmi	r3, [r4, #0]
 8006542:	b91e      	cbnz	r6, 800654c <_printf_i+0x1a4>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	f023 0320 	bic.w	r3, r3, #32
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	2310      	movs	r3, #16
 800654e:	e7a7      	b.n	80064a0 <_printf_i+0xf8>
 8006550:	4824      	ldr	r0, [pc, #144]	; (80065e4 <_printf_i+0x23c>)
 8006552:	e7e4      	b.n	800651e <_printf_i+0x176>
 8006554:	4615      	mov	r5, r2
 8006556:	e7bd      	b.n	80064d4 <_printf_i+0x12c>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	6826      	ldr	r6, [r4, #0]
 800655c:	6961      	ldr	r1, [r4, #20]
 800655e:	1d18      	adds	r0, r3, #4
 8006560:	6028      	str	r0, [r5, #0]
 8006562:	0635      	lsls	r5, r6, #24
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	d501      	bpl.n	800656c <_printf_i+0x1c4>
 8006568:	6019      	str	r1, [r3, #0]
 800656a:	e002      	b.n	8006572 <_printf_i+0x1ca>
 800656c:	0670      	lsls	r0, r6, #25
 800656e:	d5fb      	bpl.n	8006568 <_printf_i+0x1c0>
 8006570:	8019      	strh	r1, [r3, #0]
 8006572:	2300      	movs	r3, #0
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	4615      	mov	r5, r2
 8006578:	e7bc      	b.n	80064f4 <_printf_i+0x14c>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	681d      	ldr	r5, [r3, #0]
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	2100      	movs	r1, #0
 8006586:	4628      	mov	r0, r5
 8006588:	f7f9 fe32 	bl	80001f0 <memchr>
 800658c:	b108      	cbz	r0, 8006592 <_printf_i+0x1ea>
 800658e:	1b40      	subs	r0, r0, r5
 8006590:	6060      	str	r0, [r4, #4]
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	2300      	movs	r3, #0
 8006598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659c:	e7aa      	b.n	80064f4 <_printf_i+0x14c>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	462a      	mov	r2, r5
 80065a2:	4649      	mov	r1, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	47d0      	blx	sl
 80065a8:	3001      	adds	r0, #1
 80065aa:	d0ad      	beq.n	8006508 <_printf_i+0x160>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	079b      	lsls	r3, r3, #30
 80065b0:	d413      	bmi.n	80065da <_printf_i+0x232>
 80065b2:	68e0      	ldr	r0, [r4, #12]
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	4298      	cmp	r0, r3
 80065b8:	bfb8      	it	lt
 80065ba:	4618      	movlt	r0, r3
 80065bc:	e7a6      	b.n	800650c <_printf_i+0x164>
 80065be:	2301      	movs	r3, #1
 80065c0:	4632      	mov	r2, r6
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	47d0      	blx	sl
 80065c8:	3001      	adds	r0, #1
 80065ca:	d09d      	beq.n	8006508 <_printf_i+0x160>
 80065cc:	3501      	adds	r5, #1
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	9903      	ldr	r1, [sp, #12]
 80065d2:	1a5b      	subs	r3, r3, r1
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dcf2      	bgt.n	80065be <_printf_i+0x216>
 80065d8:	e7eb      	b.n	80065b2 <_printf_i+0x20a>
 80065da:	2500      	movs	r5, #0
 80065dc:	f104 0619 	add.w	r6, r4, #25
 80065e0:	e7f5      	b.n	80065ce <_printf_i+0x226>
 80065e2:	bf00      	nop
 80065e4:	08008ace 	.word	0x08008ace
 80065e8:	08008adf 	.word	0x08008adf

080065ec <std>:
 80065ec:	2300      	movs	r3, #0
 80065ee:	b510      	push	{r4, lr}
 80065f0:	4604      	mov	r4, r0
 80065f2:	e9c0 3300 	strd	r3, r3, [r0]
 80065f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065fa:	6083      	str	r3, [r0, #8]
 80065fc:	8181      	strh	r1, [r0, #12]
 80065fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006600:	81c2      	strh	r2, [r0, #14]
 8006602:	6183      	str	r3, [r0, #24]
 8006604:	4619      	mov	r1, r3
 8006606:	2208      	movs	r2, #8
 8006608:	305c      	adds	r0, #92	; 0x5c
 800660a:	f000 f914 	bl	8006836 <memset>
 800660e:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <std+0x58>)
 8006610:	6263      	str	r3, [r4, #36]	; 0x24
 8006612:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <std+0x5c>)
 8006614:	62a3      	str	r3, [r4, #40]	; 0x28
 8006616:	4b0d      	ldr	r3, [pc, #52]	; (800664c <std+0x60>)
 8006618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <std+0x64>)
 800661c:	6323      	str	r3, [r4, #48]	; 0x30
 800661e:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <std+0x68>)
 8006620:	6224      	str	r4, [r4, #32]
 8006622:	429c      	cmp	r4, r3
 8006624:	d006      	beq.n	8006634 <std+0x48>
 8006626:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800662a:	4294      	cmp	r4, r2
 800662c:	d002      	beq.n	8006634 <std+0x48>
 800662e:	33d0      	adds	r3, #208	; 0xd0
 8006630:	429c      	cmp	r4, r3
 8006632:	d105      	bne.n	8006640 <std+0x54>
 8006634:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	f000 b978 	b.w	8006930 <__retarget_lock_init_recursive>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	080067b1 	.word	0x080067b1
 8006648:	080067d3 	.word	0x080067d3
 800664c:	0800680b 	.word	0x0800680b
 8006650:	0800682f 	.word	0x0800682f
 8006654:	20000a18 	.word	0x20000a18

08006658 <stdio_exit_handler>:
 8006658:	4a02      	ldr	r2, [pc, #8]	; (8006664 <stdio_exit_handler+0xc>)
 800665a:	4903      	ldr	r1, [pc, #12]	; (8006668 <stdio_exit_handler+0x10>)
 800665c:	4803      	ldr	r0, [pc, #12]	; (800666c <stdio_exit_handler+0x14>)
 800665e:	f000 b869 	b.w	8006734 <_fwalk_sglue>
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c
 8006668:	080082e1 	.word	0x080082e1
 800666c:	20000018 	.word	0x20000018

08006670 <cleanup_stdio>:
 8006670:	6841      	ldr	r1, [r0, #4]
 8006672:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <cleanup_stdio+0x34>)
 8006674:	4299      	cmp	r1, r3
 8006676:	b510      	push	{r4, lr}
 8006678:	4604      	mov	r4, r0
 800667a:	d001      	beq.n	8006680 <cleanup_stdio+0x10>
 800667c:	f001 fe30 	bl	80082e0 <_fflush_r>
 8006680:	68a1      	ldr	r1, [r4, #8]
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <cleanup_stdio+0x38>)
 8006684:	4299      	cmp	r1, r3
 8006686:	d002      	beq.n	800668e <cleanup_stdio+0x1e>
 8006688:	4620      	mov	r0, r4
 800668a:	f001 fe29 	bl	80082e0 <_fflush_r>
 800668e:	68e1      	ldr	r1, [r4, #12]
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <cleanup_stdio+0x3c>)
 8006692:	4299      	cmp	r1, r3
 8006694:	d004      	beq.n	80066a0 <cleanup_stdio+0x30>
 8006696:	4620      	mov	r0, r4
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	f001 be20 	b.w	80082e0 <_fflush_r>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	20000a18 	.word	0x20000a18
 80066a8:	20000a80 	.word	0x20000a80
 80066ac:	20000ae8 	.word	0x20000ae8

080066b0 <global_stdio_init.part.0>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <global_stdio_init.part.0+0x30>)
 80066b4:	4c0b      	ldr	r4, [pc, #44]	; (80066e4 <global_stdio_init.part.0+0x34>)
 80066b6:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <global_stdio_init.part.0+0x38>)
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	4620      	mov	r0, r4
 80066bc:	2200      	movs	r2, #0
 80066be:	2104      	movs	r1, #4
 80066c0:	f7ff ff94 	bl	80065ec <std>
 80066c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80066c8:	2201      	movs	r2, #1
 80066ca:	2109      	movs	r1, #9
 80066cc:	f7ff ff8e 	bl	80065ec <std>
 80066d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80066d4:	2202      	movs	r2, #2
 80066d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066da:	2112      	movs	r1, #18
 80066dc:	f7ff bf86 	b.w	80065ec <std>
 80066e0:	20000b50 	.word	0x20000b50
 80066e4:	20000a18 	.word	0x20000a18
 80066e8:	08006659 	.word	0x08006659

080066ec <__sfp_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__sfp_lock_acquire+0x8>)
 80066ee:	f000 b920 	b.w	8006932 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	20000b59 	.word	0x20000b59

080066f8 <__sfp_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__sfp_lock_release+0x8>)
 80066fa:	f000 b91b 	b.w	8006934 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	20000b59 	.word	0x20000b59

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sfp_lock_acquire>
 800670c:	6a23      	ldr	r3, [r4, #32]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sfp_lock_release>
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <__sinit+0x28>)
 800671a:	6223      	str	r3, [r4, #32]
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <__sinit+0x2c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f5      	bne.n	8006710 <__sinit+0xc>
 8006724:	f7ff ffc4 	bl	80066b0 <global_stdio_init.part.0>
 8006728:	e7f2      	b.n	8006710 <__sinit+0xc>
 800672a:	bf00      	nop
 800672c:	08006671 	.word	0x08006671
 8006730:	20000b50 	.word	0x20000b50

08006734 <_fwalk_sglue>:
 8006734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006738:	4607      	mov	r7, r0
 800673a:	4688      	mov	r8, r1
 800673c:	4614      	mov	r4, r2
 800673e:	2600      	movs	r6, #0
 8006740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006744:	f1b9 0901 	subs.w	r9, r9, #1
 8006748:	d505      	bpl.n	8006756 <_fwalk_sglue+0x22>
 800674a:	6824      	ldr	r4, [r4, #0]
 800674c:	2c00      	cmp	r4, #0
 800674e:	d1f7      	bne.n	8006740 <_fwalk_sglue+0xc>
 8006750:	4630      	mov	r0, r6
 8006752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006756:	89ab      	ldrh	r3, [r5, #12]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d907      	bls.n	800676c <_fwalk_sglue+0x38>
 800675c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006760:	3301      	adds	r3, #1
 8006762:	d003      	beq.n	800676c <_fwalk_sglue+0x38>
 8006764:	4629      	mov	r1, r5
 8006766:	4638      	mov	r0, r7
 8006768:	47c0      	blx	r8
 800676a:	4306      	orrs	r6, r0
 800676c:	3568      	adds	r5, #104	; 0x68
 800676e:	e7e9      	b.n	8006744 <_fwalk_sglue+0x10>

08006770 <siprintf>:
 8006770:	b40e      	push	{r1, r2, r3}
 8006772:	b500      	push	{lr}
 8006774:	b09c      	sub	sp, #112	; 0x70
 8006776:	ab1d      	add	r3, sp, #116	; 0x74
 8006778:	9002      	str	r0, [sp, #8]
 800677a:	9006      	str	r0, [sp, #24]
 800677c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006780:	4809      	ldr	r0, [pc, #36]	; (80067a8 <siprintf+0x38>)
 8006782:	9107      	str	r1, [sp, #28]
 8006784:	9104      	str	r1, [sp, #16]
 8006786:	4909      	ldr	r1, [pc, #36]	; (80067ac <siprintf+0x3c>)
 8006788:	f853 2b04 	ldr.w	r2, [r3], #4
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	6800      	ldr	r0, [r0, #0]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	a902      	add	r1, sp, #8
 8006794:	f001 fc20 	bl	8007fd8 <_svfiprintf_r>
 8006798:	9b02      	ldr	r3, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	b01c      	add	sp, #112	; 0x70
 80067a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a4:	b003      	add	sp, #12
 80067a6:	4770      	bx	lr
 80067a8:	20000064 	.word	0x20000064
 80067ac:	ffff0208 	.word	0xffff0208

080067b0 <__sread>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	460c      	mov	r4, r1
 80067b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b8:	f000 f86c 	bl	8006894 <_read_r>
 80067bc:	2800      	cmp	r0, #0
 80067be:	bfab      	itete	ge
 80067c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067c2:	89a3      	ldrhlt	r3, [r4, #12]
 80067c4:	181b      	addge	r3, r3, r0
 80067c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067ca:	bfac      	ite	ge
 80067cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80067ce:	81a3      	strhlt	r3, [r4, #12]
 80067d0:	bd10      	pop	{r4, pc}

080067d2 <__swrite>:
 80067d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d6:	461f      	mov	r7, r3
 80067d8:	898b      	ldrh	r3, [r1, #12]
 80067da:	05db      	lsls	r3, r3, #23
 80067dc:	4605      	mov	r5, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	4616      	mov	r6, r2
 80067e2:	d505      	bpl.n	80067f0 <__swrite+0x1e>
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	2302      	movs	r3, #2
 80067ea:	2200      	movs	r2, #0
 80067ec:	f000 f840 	bl	8006870 <_lseek_r>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	4632      	mov	r2, r6
 80067fe:	463b      	mov	r3, r7
 8006800:	4628      	mov	r0, r5
 8006802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006806:	f000 b857 	b.w	80068b8 <_write_r>

0800680a <__sseek>:
 800680a:	b510      	push	{r4, lr}
 800680c:	460c      	mov	r4, r1
 800680e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006812:	f000 f82d 	bl	8006870 <_lseek_r>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	bf15      	itete	ne
 800681c:	6560      	strne	r0, [r4, #84]	; 0x54
 800681e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006826:	81a3      	strheq	r3, [r4, #12]
 8006828:	bf18      	it	ne
 800682a:	81a3      	strhne	r3, [r4, #12]
 800682c:	bd10      	pop	{r4, pc}

0800682e <__sclose>:
 800682e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006832:	f000 b80d 	b.w	8006850 <_close_r>

08006836 <memset>:
 8006836:	4402      	add	r2, r0
 8006838:	4603      	mov	r3, r0
 800683a:	4293      	cmp	r3, r2
 800683c:	d100      	bne.n	8006840 <memset+0xa>
 800683e:	4770      	bx	lr
 8006840:	f803 1b01 	strb.w	r1, [r3], #1
 8006844:	e7f9      	b.n	800683a <memset+0x4>
	...

08006848 <_localeconv_r>:
 8006848:	4800      	ldr	r0, [pc, #0]	; (800684c <_localeconv_r+0x4>)
 800684a:	4770      	bx	lr
 800684c:	20000158 	.word	0x20000158

08006850 <_close_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4d06      	ldr	r5, [pc, #24]	; (800686c <_close_r+0x1c>)
 8006854:	2300      	movs	r3, #0
 8006856:	4604      	mov	r4, r0
 8006858:	4608      	mov	r0, r1
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	f7fb f97b 	bl	8001b56 <_close>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_close_r+0x1a>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_close_r+0x1a>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	20000b54 	.word	0x20000b54

08006870 <_lseek_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d07      	ldr	r5, [pc, #28]	; (8006890 <_lseek_r+0x20>)
 8006874:	4604      	mov	r4, r0
 8006876:	4608      	mov	r0, r1
 8006878:	4611      	mov	r1, r2
 800687a:	2200      	movs	r2, #0
 800687c:	602a      	str	r2, [r5, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f7fb f990 	bl	8001ba4 <_lseek>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_lseek_r+0x1e>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_lseek_r+0x1e>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	20000b54 	.word	0x20000b54

08006894 <_read_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d07      	ldr	r5, [pc, #28]	; (80068b4 <_read_r+0x20>)
 8006898:	4604      	mov	r4, r0
 800689a:	4608      	mov	r0, r1
 800689c:	4611      	mov	r1, r2
 800689e:	2200      	movs	r2, #0
 80068a0:	602a      	str	r2, [r5, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f7fb f91e 	bl	8001ae4 <_read>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_read_r+0x1e>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_read_r+0x1e>
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	20000b54 	.word	0x20000b54

080068b8 <_write_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d07      	ldr	r5, [pc, #28]	; (80068d8 <_write_r+0x20>)
 80068bc:	4604      	mov	r4, r0
 80068be:	4608      	mov	r0, r1
 80068c0:	4611      	mov	r1, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7fb f929 	bl	8001b1e <_write>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_write_r+0x1e>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_write_r+0x1e>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	20000b54 	.word	0x20000b54

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	; (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000064 	.word	0x20000064

080068e8 <__libc_init_array>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4d0d      	ldr	r5, [pc, #52]	; (8006920 <__libc_init_array+0x38>)
 80068ec:	4c0d      	ldr	r4, [pc, #52]	; (8006924 <__libc_init_array+0x3c>)
 80068ee:	1b64      	subs	r4, r4, r5
 80068f0:	10a4      	asrs	r4, r4, #2
 80068f2:	2600      	movs	r6, #0
 80068f4:	42a6      	cmp	r6, r4
 80068f6:	d109      	bne.n	800690c <__libc_init_array+0x24>
 80068f8:	4d0b      	ldr	r5, [pc, #44]	; (8006928 <__libc_init_array+0x40>)
 80068fa:	4c0c      	ldr	r4, [pc, #48]	; (800692c <__libc_init_array+0x44>)
 80068fc:	f002 f894 	bl	8008a28 <_init>
 8006900:	1b64      	subs	r4, r4, r5
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	2600      	movs	r6, #0
 8006906:	42a6      	cmp	r6, r4
 8006908:	d105      	bne.n	8006916 <__libc_init_array+0x2e>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006910:	4798      	blx	r3
 8006912:	3601      	adds	r6, #1
 8006914:	e7ee      	b.n	80068f4 <__libc_init_array+0xc>
 8006916:	f855 3b04 	ldr.w	r3, [r5], #4
 800691a:	4798      	blx	r3
 800691c:	3601      	adds	r6, #1
 800691e:	e7f2      	b.n	8006906 <__libc_init_array+0x1e>
 8006920:	08008e34 	.word	0x08008e34
 8006924:	08008e34 	.word	0x08008e34
 8006928:	08008e34 	.word	0x08008e34
 800692c:	08008e38 	.word	0x08008e38

08006930 <__retarget_lock_init_recursive>:
 8006930:	4770      	bx	lr

08006932 <__retarget_lock_acquire_recursive>:
 8006932:	4770      	bx	lr

08006934 <__retarget_lock_release_recursive>:
 8006934:	4770      	bx	lr

08006936 <quorem>:
 8006936:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	6903      	ldr	r3, [r0, #16]
 800693c:	690c      	ldr	r4, [r1, #16]
 800693e:	42a3      	cmp	r3, r4
 8006940:	4607      	mov	r7, r0
 8006942:	db7e      	blt.n	8006a42 <quorem+0x10c>
 8006944:	3c01      	subs	r4, #1
 8006946:	f101 0814 	add.w	r8, r1, #20
 800694a:	f100 0514 	add.w	r5, r0, #20
 800694e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800695c:	3301      	adds	r3, #1
 800695e:	429a      	cmp	r2, r3
 8006960:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006964:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006968:	fbb2 f6f3 	udiv	r6, r2, r3
 800696c:	d331      	bcc.n	80069d2 <quorem+0x9c>
 800696e:	f04f 0e00 	mov.w	lr, #0
 8006972:	4640      	mov	r0, r8
 8006974:	46ac      	mov	ip, r5
 8006976:	46f2      	mov	sl, lr
 8006978:	f850 2b04 	ldr.w	r2, [r0], #4
 800697c:	b293      	uxth	r3, r2
 800697e:	fb06 e303 	mla	r3, r6, r3, lr
 8006982:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006986:	0c1a      	lsrs	r2, r3, #16
 8006988:	b29b      	uxth	r3, r3
 800698a:	ebaa 0303 	sub.w	r3, sl, r3
 800698e:	f8dc a000 	ldr.w	sl, [ip]
 8006992:	fa13 f38a 	uxtah	r3, r3, sl
 8006996:	fb06 220e 	mla	r2, r6, lr, r2
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	9b00      	ldr	r3, [sp, #0]
 800699e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069a2:	b292      	uxth	r2, r2
 80069a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80069a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80069b0:	4581      	cmp	r9, r0
 80069b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069b6:	f84c 3b04 	str.w	r3, [ip], #4
 80069ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069be:	d2db      	bcs.n	8006978 <quorem+0x42>
 80069c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80069c4:	b92b      	cbnz	r3, 80069d2 <quorem+0x9c>
 80069c6:	9b01      	ldr	r3, [sp, #4]
 80069c8:	3b04      	subs	r3, #4
 80069ca:	429d      	cmp	r5, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	d32c      	bcc.n	8006a2a <quorem+0xf4>
 80069d0:	613c      	str	r4, [r7, #16]
 80069d2:	4638      	mov	r0, r7
 80069d4:	f001 f9a6 	bl	8007d24 <__mcmp>
 80069d8:	2800      	cmp	r0, #0
 80069da:	db22      	blt.n	8006a22 <quorem+0xec>
 80069dc:	3601      	adds	r6, #1
 80069de:	4629      	mov	r1, r5
 80069e0:	2000      	movs	r0, #0
 80069e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80069e6:	f8d1 c000 	ldr.w	ip, [r1]
 80069ea:	b293      	uxth	r3, r2
 80069ec:	1ac3      	subs	r3, r0, r3
 80069ee:	0c12      	lsrs	r2, r2, #16
 80069f0:	fa13 f38c 	uxtah	r3, r3, ip
 80069f4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a02:	45c1      	cmp	r9, r8
 8006a04:	f841 3b04 	str.w	r3, [r1], #4
 8006a08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a0c:	d2e9      	bcs.n	80069e2 <quorem+0xac>
 8006a0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a16:	b922      	cbnz	r2, 8006a22 <quorem+0xec>
 8006a18:	3b04      	subs	r3, #4
 8006a1a:	429d      	cmp	r5, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	d30a      	bcc.n	8006a36 <quorem+0x100>
 8006a20:	613c      	str	r4, [r7, #16]
 8006a22:	4630      	mov	r0, r6
 8006a24:	b003      	add	sp, #12
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	3b04      	subs	r3, #4
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	d1ce      	bne.n	80069d0 <quorem+0x9a>
 8006a32:	3c01      	subs	r4, #1
 8006a34:	e7c9      	b.n	80069ca <quorem+0x94>
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	d1f0      	bne.n	8006a20 <quorem+0xea>
 8006a3e:	3c01      	subs	r4, #1
 8006a40:	e7eb      	b.n	8006a1a <quorem+0xe4>
 8006a42:	2000      	movs	r0, #0
 8006a44:	e7ee      	b.n	8006a24 <quorem+0xee>
	...

08006a48 <_dtoa_r>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	ed2d 8b04 	vpush	{d8-d9}
 8006a50:	69c5      	ldr	r5, [r0, #28]
 8006a52:	b093      	sub	sp, #76	; 0x4c
 8006a54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a58:	ec57 6b10 	vmov	r6, r7, d0
 8006a5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a60:	9107      	str	r1, [sp, #28]
 8006a62:	4604      	mov	r4, r0
 8006a64:	920a      	str	r2, [sp, #40]	; 0x28
 8006a66:	930d      	str	r3, [sp, #52]	; 0x34
 8006a68:	b975      	cbnz	r5, 8006a88 <_dtoa_r+0x40>
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f000 fe2a 	bl	80076c4 <malloc>
 8006a70:	4602      	mov	r2, r0
 8006a72:	61e0      	str	r0, [r4, #28]
 8006a74:	b920      	cbnz	r0, 8006a80 <_dtoa_r+0x38>
 8006a76:	4bae      	ldr	r3, [pc, #696]	; (8006d30 <_dtoa_r+0x2e8>)
 8006a78:	21ef      	movs	r1, #239	; 0xef
 8006a7a:	48ae      	ldr	r0, [pc, #696]	; (8006d34 <_dtoa_r+0x2ec>)
 8006a7c:	f001 fc90 	bl	80083a0 <__assert_func>
 8006a80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a84:	6005      	str	r5, [r0, #0]
 8006a86:	60c5      	str	r5, [r0, #12]
 8006a88:	69e3      	ldr	r3, [r4, #28]
 8006a8a:	6819      	ldr	r1, [r3, #0]
 8006a8c:	b151      	cbz	r1, 8006aa4 <_dtoa_r+0x5c>
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	604a      	str	r2, [r1, #4]
 8006a92:	2301      	movs	r3, #1
 8006a94:	4093      	lsls	r3, r2
 8006a96:	608b      	str	r3, [r1, #8]
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 ff07 	bl	80078ac <_Bfree>
 8006a9e:	69e3      	ldr	r3, [r4, #28]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	1e3b      	subs	r3, r7, #0
 8006aa6:	bfbb      	ittet	lt
 8006aa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	9303      	strlt	r3, [sp, #12]
 8006aae:	2300      	movge	r3, #0
 8006ab0:	2201      	movlt	r2, #1
 8006ab2:	bfac      	ite	ge
 8006ab4:	f8c8 3000 	strge.w	r3, [r8]
 8006ab8:	f8c8 2000 	strlt.w	r2, [r8]
 8006abc:	4b9e      	ldr	r3, [pc, #632]	; (8006d38 <_dtoa_r+0x2f0>)
 8006abe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ac2:	ea33 0308 	bics.w	r3, r3, r8
 8006ac6:	d11b      	bne.n	8006b00 <_dtoa_r+0xb8>
 8006ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aca:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ad4:	4333      	orrs	r3, r6
 8006ad6:	f000 8593 	beq.w	8007600 <_dtoa_r+0xbb8>
 8006ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006adc:	b963      	cbnz	r3, 8006af8 <_dtoa_r+0xb0>
 8006ade:	4b97      	ldr	r3, [pc, #604]	; (8006d3c <_dtoa_r+0x2f4>)
 8006ae0:	e027      	b.n	8006b32 <_dtoa_r+0xea>
 8006ae2:	4b97      	ldr	r3, [pc, #604]	; (8006d40 <_dtoa_r+0x2f8>)
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	9800      	ldr	r0, [sp, #0]
 8006aee:	b013      	add	sp, #76	; 0x4c
 8006af0:	ecbd 8b04 	vpop	{d8-d9}
 8006af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af8:	4b90      	ldr	r3, [pc, #576]	; (8006d3c <_dtoa_r+0x2f4>)
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	3303      	adds	r3, #3
 8006afe:	e7f3      	b.n	8006ae8 <_dtoa_r+0xa0>
 8006b00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b04:	2200      	movs	r2, #0
 8006b06:	ec51 0b17 	vmov	r0, r1, d7
 8006b0a:	eeb0 8a47 	vmov.f32	s16, s14
 8006b0e:	eef0 8a67 	vmov.f32	s17, s15
 8006b12:	2300      	movs	r3, #0
 8006b14:	f7f9 ffe8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b18:	4681      	mov	r9, r0
 8006b1a:	b160      	cbz	r0, 8006b36 <_dtoa_r+0xee>
 8006b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b1e:	2301      	movs	r3, #1
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8568 	beq.w	80075fa <_dtoa_r+0xbb2>
 8006b2a:	4b86      	ldr	r3, [pc, #536]	; (8006d44 <_dtoa_r+0x2fc>)
 8006b2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	e7da      	b.n	8006aec <_dtoa_r+0xa4>
 8006b36:	aa10      	add	r2, sp, #64	; 0x40
 8006b38:	a911      	add	r1, sp, #68	; 0x44
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	eeb0 0a48 	vmov.f32	s0, s16
 8006b40:	eef0 0a68 	vmov.f32	s1, s17
 8006b44:	f001 f994 	bl	8007e70 <__d2b>
 8006b48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	2d00      	cmp	r5, #0
 8006b50:	d07f      	beq.n	8006c52 <_dtoa_r+0x20a>
 8006b52:	ee18 3a90 	vmov	r3, s17
 8006b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b5e:	ec51 0b18 	vmov	r0, r1, d8
 8006b62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b6e:	4619      	mov	r1, r3
 8006b70:	2200      	movs	r2, #0
 8006b72:	4b75      	ldr	r3, [pc, #468]	; (8006d48 <_dtoa_r+0x300>)
 8006b74:	f7f9 fb98 	bl	80002a8 <__aeabi_dsub>
 8006b78:	a367      	add	r3, pc, #412	; (adr r3, 8006d18 <_dtoa_r+0x2d0>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fd4b 	bl	8000618 <__aeabi_dmul>
 8006b82:	a367      	add	r3, pc, #412	; (adr r3, 8006d20 <_dtoa_r+0x2d8>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 fb90 	bl	80002ac <__adddf3>
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	4628      	mov	r0, r5
 8006b90:	460f      	mov	r7, r1
 8006b92:	f7f9 fcd7 	bl	8000544 <__aeabi_i2d>
 8006b96:	a364      	add	r3, pc, #400	; (adr r3, 8006d28 <_dtoa_r+0x2e0>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f7f9 fd3c 	bl	8000618 <__aeabi_dmul>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	f7f9 fb80 	bl	80002ac <__adddf3>
 8006bac:	4606      	mov	r6, r0
 8006bae:	460f      	mov	r7, r1
 8006bb0:	f7f9 ffe2 	bl	8000b78 <__aeabi_d2iz>
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4683      	mov	fp, r0
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4630      	mov	r0, r6
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	f7f9 ff9d 	bl	8000afc <__aeabi_dcmplt>
 8006bc2:	b148      	cbz	r0, 8006bd8 <_dtoa_r+0x190>
 8006bc4:	4658      	mov	r0, fp
 8006bc6:	f7f9 fcbd 	bl	8000544 <__aeabi_i2d>
 8006bca:	4632      	mov	r2, r6
 8006bcc:	463b      	mov	r3, r7
 8006bce:	f7f9 ff8b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bd2:	b908      	cbnz	r0, 8006bd8 <_dtoa_r+0x190>
 8006bd4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006bd8:	f1bb 0f16 	cmp.w	fp, #22
 8006bdc:	d857      	bhi.n	8006c8e <_dtoa_r+0x246>
 8006bde:	4b5b      	ldr	r3, [pc, #364]	; (8006d4c <_dtoa_r+0x304>)
 8006be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	ec51 0b18 	vmov	r0, r1, d8
 8006bec:	f7f9 ff86 	bl	8000afc <__aeabi_dcmplt>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d04e      	beq.n	8006c92 <_dtoa_r+0x24a>
 8006bf4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8006bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bfe:	1b5b      	subs	r3, r3, r5
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	bf45      	ittet	mi
 8006c04:	f1c3 0301 	rsbmi	r3, r3, #1
 8006c08:	9305      	strmi	r3, [sp, #20]
 8006c0a:	2300      	movpl	r3, #0
 8006c0c:	2300      	movmi	r3, #0
 8006c0e:	9206      	str	r2, [sp, #24]
 8006c10:	bf54      	ite	pl
 8006c12:	9305      	strpl	r3, [sp, #20]
 8006c14:	9306      	strmi	r3, [sp, #24]
 8006c16:	f1bb 0f00 	cmp.w	fp, #0
 8006c1a:	db3c      	blt.n	8006c96 <_dtoa_r+0x24e>
 8006c1c:	9b06      	ldr	r3, [sp, #24]
 8006c1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006c22:	445b      	add	r3, fp
 8006c24:	9306      	str	r3, [sp, #24]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9308      	str	r3, [sp, #32]
 8006c2a:	9b07      	ldr	r3, [sp, #28]
 8006c2c:	2b09      	cmp	r3, #9
 8006c2e:	d868      	bhi.n	8006d02 <_dtoa_r+0x2ba>
 8006c30:	2b05      	cmp	r3, #5
 8006c32:	bfc4      	itt	gt
 8006c34:	3b04      	subgt	r3, #4
 8006c36:	9307      	strgt	r3, [sp, #28]
 8006c38:	9b07      	ldr	r3, [sp, #28]
 8006c3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c3e:	bfcc      	ite	gt
 8006c40:	2500      	movgt	r5, #0
 8006c42:	2501      	movle	r5, #1
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	f200 8085 	bhi.w	8006d54 <_dtoa_r+0x30c>
 8006c4a:	e8df f003 	tbb	[pc, r3]
 8006c4e:	3b2e      	.short	0x3b2e
 8006c50:	5839      	.short	0x5839
 8006c52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c56:	441d      	add	r5, r3
 8006c58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	bfc1      	itttt	gt
 8006c60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c64:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c70:	bfd6      	itet	le
 8006c72:	f1c3 0320 	rsble	r3, r3, #32
 8006c76:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c7a:	fa06 f003 	lslle.w	r0, r6, r3
 8006c7e:	f7f9 fc51 	bl	8000524 <__aeabi_ui2d>
 8006c82:	2201      	movs	r2, #1
 8006c84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c88:	3d01      	subs	r5, #1
 8006c8a:	920e      	str	r2, [sp, #56]	; 0x38
 8006c8c:	e76f      	b.n	8006b6e <_dtoa_r+0x126>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e7b3      	b.n	8006bfa <_dtoa_r+0x1b2>
 8006c92:	900c      	str	r0, [sp, #48]	; 0x30
 8006c94:	e7b2      	b.n	8006bfc <_dtoa_r+0x1b4>
 8006c96:	9b05      	ldr	r3, [sp, #20]
 8006c98:	eba3 030b 	sub.w	r3, r3, fp
 8006c9c:	9305      	str	r3, [sp, #20]
 8006c9e:	f1cb 0300 	rsb	r3, fp, #0
 8006ca2:	9308      	str	r3, [sp, #32]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ca8:	e7bf      	b.n	8006c2a <_dtoa_r+0x1e2>
 8006caa:	2300      	movs	r3, #0
 8006cac:	9309      	str	r3, [sp, #36]	; 0x24
 8006cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc52      	bgt.n	8006d5a <_dtoa_r+0x312>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	9304      	str	r3, [sp, #16]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	920a      	str	r2, [sp, #40]	; 0x28
 8006cbe:	e00b      	b.n	8006cd8 <_dtoa_r+0x290>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e7f3      	b.n	8006cac <_dtoa_r+0x264>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cca:	445b      	add	r3, fp
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	bfb8      	it	lt
 8006cd6:	2301      	movlt	r3, #1
 8006cd8:	69e0      	ldr	r0, [r4, #28]
 8006cda:	2100      	movs	r1, #0
 8006cdc:	2204      	movs	r2, #4
 8006cde:	f102 0614 	add.w	r6, r2, #20
 8006ce2:	429e      	cmp	r6, r3
 8006ce4:	d93d      	bls.n	8006d62 <_dtoa_r+0x31a>
 8006ce6:	6041      	str	r1, [r0, #4]
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 fd9f 	bl	800782c <_Balloc>
 8006cee:	9000      	str	r0, [sp, #0]
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d139      	bne.n	8006d68 <_dtoa_r+0x320>
 8006cf4:	4b16      	ldr	r3, [pc, #88]	; (8006d50 <_dtoa_r+0x308>)
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	f240 11af 	movw	r1, #431	; 0x1af
 8006cfc:	e6bd      	b.n	8006a7a <_dtoa_r+0x32>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e7e1      	b.n	8006cc6 <_dtoa_r+0x27e>
 8006d02:	2501      	movs	r5, #1
 8006d04:	2300      	movs	r3, #0
 8006d06:	9307      	str	r3, [sp, #28]
 8006d08:	9509      	str	r5, [sp, #36]	; 0x24
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	9304      	str	r3, [sp, #16]
 8006d12:	2200      	movs	r2, #0
 8006d14:	2312      	movs	r3, #18
 8006d16:	e7d1      	b.n	8006cbc <_dtoa_r+0x274>
 8006d18:	636f4361 	.word	0x636f4361
 8006d1c:	3fd287a7 	.word	0x3fd287a7
 8006d20:	8b60c8b3 	.word	0x8b60c8b3
 8006d24:	3fc68a28 	.word	0x3fc68a28
 8006d28:	509f79fb 	.word	0x509f79fb
 8006d2c:	3fd34413 	.word	0x3fd34413
 8006d30:	08008afd 	.word	0x08008afd
 8006d34:	08008b14 	.word	0x08008b14
 8006d38:	7ff00000 	.word	0x7ff00000
 8006d3c:	08008af9 	.word	0x08008af9
 8006d40:	08008af0 	.word	0x08008af0
 8006d44:	08008acd 	.word	0x08008acd
 8006d48:	3ff80000 	.word	0x3ff80000
 8006d4c:	08008c00 	.word	0x08008c00
 8006d50:	08008b6c 	.word	0x08008b6c
 8006d54:	2301      	movs	r3, #1
 8006d56:	9309      	str	r3, [sp, #36]	; 0x24
 8006d58:	e7d7      	b.n	8006d0a <_dtoa_r+0x2c2>
 8006d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	9304      	str	r3, [sp, #16]
 8006d60:	e7ba      	b.n	8006cd8 <_dtoa_r+0x290>
 8006d62:	3101      	adds	r1, #1
 8006d64:	0052      	lsls	r2, r2, #1
 8006d66:	e7ba      	b.n	8006cde <_dtoa_r+0x296>
 8006d68:	69e3      	ldr	r3, [r4, #28]
 8006d6a:	9a00      	ldr	r2, [sp, #0]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	2b0e      	cmp	r3, #14
 8006d72:	f200 80a8 	bhi.w	8006ec6 <_dtoa_r+0x47e>
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	f000 80a5 	beq.w	8006ec6 <_dtoa_r+0x47e>
 8006d7c:	f1bb 0f00 	cmp.w	fp, #0
 8006d80:	dd38      	ble.n	8006df4 <_dtoa_r+0x3ac>
 8006d82:	4bc0      	ldr	r3, [pc, #768]	; (8007084 <_dtoa_r+0x63c>)
 8006d84:	f00b 020f 	and.w	r2, fp, #15
 8006d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d98:	d019      	beq.n	8006dce <_dtoa_r+0x386>
 8006d9a:	4bbb      	ldr	r3, [pc, #748]	; (8007088 <_dtoa_r+0x640>)
 8006d9c:	ec51 0b18 	vmov	r0, r1, d8
 8006da0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006da4:	f7f9 fd62 	bl	800086c <__aeabi_ddiv>
 8006da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dac:	f008 080f 	and.w	r8, r8, #15
 8006db0:	2503      	movs	r5, #3
 8006db2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007088 <_dtoa_r+0x640>
 8006db6:	f1b8 0f00 	cmp.w	r8, #0
 8006dba:	d10a      	bne.n	8006dd2 <_dtoa_r+0x38a>
 8006dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	f7f9 fd52 	bl	800086c <__aeabi_ddiv>
 8006dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dcc:	e02b      	b.n	8006e26 <_dtoa_r+0x3de>
 8006dce:	2502      	movs	r5, #2
 8006dd0:	e7ef      	b.n	8006db2 <_dtoa_r+0x36a>
 8006dd2:	f018 0f01 	tst.w	r8, #1
 8006dd6:	d008      	beq.n	8006dea <_dtoa_r+0x3a2>
 8006dd8:	4630      	mov	r0, r6
 8006dda:	4639      	mov	r1, r7
 8006ddc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006de0:	f7f9 fc1a 	bl	8000618 <__aeabi_dmul>
 8006de4:	3501      	adds	r5, #1
 8006de6:	4606      	mov	r6, r0
 8006de8:	460f      	mov	r7, r1
 8006dea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dee:	f109 0908 	add.w	r9, r9, #8
 8006df2:	e7e0      	b.n	8006db6 <_dtoa_r+0x36e>
 8006df4:	f000 809f 	beq.w	8006f36 <_dtoa_r+0x4ee>
 8006df8:	f1cb 0600 	rsb	r6, fp, #0
 8006dfc:	4ba1      	ldr	r3, [pc, #644]	; (8007084 <_dtoa_r+0x63c>)
 8006dfe:	4fa2      	ldr	r7, [pc, #648]	; (8007088 <_dtoa_r+0x640>)
 8006e00:	f006 020f 	and.w	r2, r6, #15
 8006e04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	ec51 0b18 	vmov	r0, r1, d8
 8006e10:	f7f9 fc02 	bl	8000618 <__aeabi_dmul>
 8006e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e18:	1136      	asrs	r6, r6, #4
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2502      	movs	r5, #2
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	d17e      	bne.n	8006f20 <_dtoa_r+0x4d8>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1d0      	bne.n	8006dc8 <_dtoa_r+0x380>
 8006e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8084 	beq.w	8006f3a <_dtoa_r+0x4f2>
 8006e32:	4b96      	ldr	r3, [pc, #600]	; (800708c <_dtoa_r+0x644>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	4640      	mov	r0, r8
 8006e38:	4649      	mov	r1, r9
 8006e3a:	f7f9 fe5f 	bl	8000afc <__aeabi_dcmplt>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d07b      	beq.n	8006f3a <_dtoa_r+0x4f2>
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d078      	beq.n	8006f3a <_dtoa_r+0x4f2>
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dd39      	ble.n	8006ec2 <_dtoa_r+0x47a>
 8006e4e:	4b90      	ldr	r3, [pc, #576]	; (8007090 <_dtoa_r+0x648>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	f7f9 fbdf 	bl	8000618 <__aeabi_dmul>
 8006e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e5e:	9e01      	ldr	r6, [sp, #4]
 8006e60:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006e64:	3501      	adds	r5, #1
 8006e66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f7f9 fb6a 	bl	8000544 <__aeabi_i2d>
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	f7f9 fbd0 	bl	8000618 <__aeabi_dmul>
 8006e78:	4b86      	ldr	r3, [pc, #536]	; (8007094 <_dtoa_r+0x64c>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f7f9 fa16 	bl	80002ac <__adddf3>
 8006e80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e88:	9303      	str	r3, [sp, #12]
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d158      	bne.n	8006f40 <_dtoa_r+0x4f8>
 8006e8e:	4b82      	ldr	r3, [pc, #520]	; (8007098 <_dtoa_r+0x650>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	4640      	mov	r0, r8
 8006e94:	4649      	mov	r1, r9
 8006e96:	f7f9 fa07 	bl	80002a8 <__aeabi_dsub>
 8006e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	4689      	mov	r9, r1
 8006ea2:	f7f9 fe49 	bl	8000b38 <__aeabi_dcmpgt>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f040 8296 	bne.w	80073d8 <_dtoa_r+0x990>
 8006eac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 fe20 	bl	8000afc <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f040 8289 	bne.w	80073d4 <_dtoa_r+0x98c>
 8006ec2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006ec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f2c0 814e 	blt.w	800716a <_dtoa_r+0x722>
 8006ece:	f1bb 0f0e 	cmp.w	fp, #14
 8006ed2:	f300 814a 	bgt.w	800716a <_dtoa_r+0x722>
 8006ed6:	4b6b      	ldr	r3, [pc, #428]	; (8007084 <_dtoa_r+0x63c>)
 8006ed8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f280 80dc 	bge.w	80070a0 <_dtoa_r+0x658>
 8006ee8:	9b04      	ldr	r3, [sp, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f300 80d8 	bgt.w	80070a0 <_dtoa_r+0x658>
 8006ef0:	f040 826f 	bne.w	80073d2 <_dtoa_r+0x98a>
 8006ef4:	4b68      	ldr	r3, [pc, #416]	; (8007098 <_dtoa_r+0x650>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4649      	mov	r1, r9
 8006efc:	f7f9 fb8c 	bl	8000618 <__aeabi_dmul>
 8006f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f04:	f7f9 fe0e 	bl	8000b24 <__aeabi_dcmpge>
 8006f08:	9e04      	ldr	r6, [sp, #16]
 8006f0a:	4637      	mov	r7, r6
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f040 8245 	bne.w	800739c <_dtoa_r+0x954>
 8006f12:	9d00      	ldr	r5, [sp, #0]
 8006f14:	2331      	movs	r3, #49	; 0x31
 8006f16:	f805 3b01 	strb.w	r3, [r5], #1
 8006f1a:	f10b 0b01 	add.w	fp, fp, #1
 8006f1e:	e241      	b.n	80073a4 <_dtoa_r+0x95c>
 8006f20:	07f2      	lsls	r2, r6, #31
 8006f22:	d505      	bpl.n	8006f30 <_dtoa_r+0x4e8>
 8006f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f28:	f7f9 fb76 	bl	8000618 <__aeabi_dmul>
 8006f2c:	3501      	adds	r5, #1
 8006f2e:	2301      	movs	r3, #1
 8006f30:	1076      	asrs	r6, r6, #1
 8006f32:	3708      	adds	r7, #8
 8006f34:	e773      	b.n	8006e1e <_dtoa_r+0x3d6>
 8006f36:	2502      	movs	r5, #2
 8006f38:	e775      	b.n	8006e26 <_dtoa_r+0x3de>
 8006f3a:	9e04      	ldr	r6, [sp, #16]
 8006f3c:	465f      	mov	r7, fp
 8006f3e:	e792      	b.n	8006e66 <_dtoa_r+0x41e>
 8006f40:	9900      	ldr	r1, [sp, #0]
 8006f42:	4b50      	ldr	r3, [pc, #320]	; (8007084 <_dtoa_r+0x63c>)
 8006f44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f48:	4431      	add	r1, r6
 8006f4a:	9102      	str	r1, [sp, #8]
 8006f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f4e:	eeb0 9a47 	vmov.f32	s18, s14
 8006f52:	eef0 9a67 	vmov.f32	s19, s15
 8006f56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f5e:	2900      	cmp	r1, #0
 8006f60:	d044      	beq.n	8006fec <_dtoa_r+0x5a4>
 8006f62:	494e      	ldr	r1, [pc, #312]	; (800709c <_dtoa_r+0x654>)
 8006f64:	2000      	movs	r0, #0
 8006f66:	f7f9 fc81 	bl	800086c <__aeabi_ddiv>
 8006f6a:	ec53 2b19 	vmov	r2, r3, d9
 8006f6e:	f7f9 f99b 	bl	80002a8 <__aeabi_dsub>
 8006f72:	9d00      	ldr	r5, [sp, #0]
 8006f74:	ec41 0b19 	vmov	d9, r0, r1
 8006f78:	4649      	mov	r1, r9
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	f7f9 fdfc 	bl	8000b78 <__aeabi_d2iz>
 8006f80:	4606      	mov	r6, r0
 8006f82:	f7f9 fadf 	bl	8000544 <__aeabi_i2d>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	f7f9 f98b 	bl	80002a8 <__aeabi_dsub>
 8006f92:	3630      	adds	r6, #48	; 0x30
 8006f94:	f805 6b01 	strb.w	r6, [r5], #1
 8006f98:	ec53 2b19 	vmov	r2, r3, d9
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	4689      	mov	r9, r1
 8006fa0:	f7f9 fdac 	bl	8000afc <__aeabi_dcmplt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d164      	bne.n	8007072 <_dtoa_r+0x62a>
 8006fa8:	4642      	mov	r2, r8
 8006faa:	464b      	mov	r3, r9
 8006fac:	4937      	ldr	r1, [pc, #220]	; (800708c <_dtoa_r+0x644>)
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f7f9 f97a 	bl	80002a8 <__aeabi_dsub>
 8006fb4:	ec53 2b19 	vmov	r2, r3, d9
 8006fb8:	f7f9 fda0 	bl	8000afc <__aeabi_dcmplt>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f040 80b6 	bne.w	800712e <_dtoa_r+0x6e6>
 8006fc2:	9b02      	ldr	r3, [sp, #8]
 8006fc4:	429d      	cmp	r5, r3
 8006fc6:	f43f af7c 	beq.w	8006ec2 <_dtoa_r+0x47a>
 8006fca:	4b31      	ldr	r3, [pc, #196]	; (8007090 <_dtoa_r+0x648>)
 8006fcc:	ec51 0b19 	vmov	r0, r1, d9
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f7f9 fb21 	bl	8000618 <__aeabi_dmul>
 8006fd6:	4b2e      	ldr	r3, [pc, #184]	; (8007090 <_dtoa_r+0x648>)
 8006fd8:	ec41 0b19 	vmov	d9, r0, r1
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 fb19 	bl	8000618 <__aeabi_dmul>
 8006fe6:	4680      	mov	r8, r0
 8006fe8:	4689      	mov	r9, r1
 8006fea:	e7c5      	b.n	8006f78 <_dtoa_r+0x530>
 8006fec:	ec51 0b17 	vmov	r0, r1, d7
 8006ff0:	f7f9 fb12 	bl	8000618 <__aeabi_dmul>
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	9d00      	ldr	r5, [sp, #0]
 8006ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ffa:	ec41 0b19 	vmov	d9, r0, r1
 8006ffe:	4649      	mov	r1, r9
 8007000:	4640      	mov	r0, r8
 8007002:	f7f9 fdb9 	bl	8000b78 <__aeabi_d2iz>
 8007006:	4606      	mov	r6, r0
 8007008:	f7f9 fa9c 	bl	8000544 <__aeabi_i2d>
 800700c:	3630      	adds	r6, #48	; 0x30
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	f7f9 f947 	bl	80002a8 <__aeabi_dsub>
 800701a:	f805 6b01 	strb.w	r6, [r5], #1
 800701e:	9b02      	ldr	r3, [sp, #8]
 8007020:	429d      	cmp	r5, r3
 8007022:	4680      	mov	r8, r0
 8007024:	4689      	mov	r9, r1
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	d124      	bne.n	8007076 <_dtoa_r+0x62e>
 800702c:	4b1b      	ldr	r3, [pc, #108]	; (800709c <_dtoa_r+0x654>)
 800702e:	ec51 0b19 	vmov	r0, r1, d9
 8007032:	f7f9 f93b 	bl	80002ac <__adddf3>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	f7f9 fd7b 	bl	8000b38 <__aeabi_dcmpgt>
 8007042:	2800      	cmp	r0, #0
 8007044:	d173      	bne.n	800712e <_dtoa_r+0x6e6>
 8007046:	ec53 2b19 	vmov	r2, r3, d9
 800704a:	4914      	ldr	r1, [pc, #80]	; (800709c <_dtoa_r+0x654>)
 800704c:	2000      	movs	r0, #0
 800704e:	f7f9 f92b 	bl	80002a8 <__aeabi_dsub>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4640      	mov	r0, r8
 8007058:	4649      	mov	r1, r9
 800705a:	f7f9 fd4f 	bl	8000afc <__aeabi_dcmplt>
 800705e:	2800      	cmp	r0, #0
 8007060:	f43f af2f 	beq.w	8006ec2 <_dtoa_r+0x47a>
 8007064:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007066:	1e6b      	subs	r3, r5, #1
 8007068:	930f      	str	r3, [sp, #60]	; 0x3c
 800706a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800706e:	2b30      	cmp	r3, #48	; 0x30
 8007070:	d0f8      	beq.n	8007064 <_dtoa_r+0x61c>
 8007072:	46bb      	mov	fp, r7
 8007074:	e04a      	b.n	800710c <_dtoa_r+0x6c4>
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <_dtoa_r+0x648>)
 8007078:	f7f9 face 	bl	8000618 <__aeabi_dmul>
 800707c:	4680      	mov	r8, r0
 800707e:	4689      	mov	r9, r1
 8007080:	e7bd      	b.n	8006ffe <_dtoa_r+0x5b6>
 8007082:	bf00      	nop
 8007084:	08008c00 	.word	0x08008c00
 8007088:	08008bd8 	.word	0x08008bd8
 800708c:	3ff00000 	.word	0x3ff00000
 8007090:	40240000 	.word	0x40240000
 8007094:	401c0000 	.word	0x401c0000
 8007098:	40140000 	.word	0x40140000
 800709c:	3fe00000 	.word	0x3fe00000
 80070a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070a4:	9d00      	ldr	r5, [sp, #0]
 80070a6:	4642      	mov	r2, r8
 80070a8:	464b      	mov	r3, r9
 80070aa:	4630      	mov	r0, r6
 80070ac:	4639      	mov	r1, r7
 80070ae:	f7f9 fbdd 	bl	800086c <__aeabi_ddiv>
 80070b2:	f7f9 fd61 	bl	8000b78 <__aeabi_d2iz>
 80070b6:	9001      	str	r0, [sp, #4]
 80070b8:	f7f9 fa44 	bl	8000544 <__aeabi_i2d>
 80070bc:	4642      	mov	r2, r8
 80070be:	464b      	mov	r3, r9
 80070c0:	f7f9 faaa 	bl	8000618 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 f8ec 	bl	80002a8 <__aeabi_dsub>
 80070d0:	9e01      	ldr	r6, [sp, #4]
 80070d2:	9f04      	ldr	r7, [sp, #16]
 80070d4:	3630      	adds	r6, #48	; 0x30
 80070d6:	f805 6b01 	strb.w	r6, [r5], #1
 80070da:	9e00      	ldr	r6, [sp, #0]
 80070dc:	1bae      	subs	r6, r5, r6
 80070de:	42b7      	cmp	r7, r6
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	d134      	bne.n	8007150 <_dtoa_r+0x708>
 80070e6:	f7f9 f8e1 	bl	80002ac <__adddf3>
 80070ea:	4642      	mov	r2, r8
 80070ec:	464b      	mov	r3, r9
 80070ee:	4606      	mov	r6, r0
 80070f0:	460f      	mov	r7, r1
 80070f2:	f7f9 fd21 	bl	8000b38 <__aeabi_dcmpgt>
 80070f6:	b9c8      	cbnz	r0, 800712c <_dtoa_r+0x6e4>
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	4630      	mov	r0, r6
 80070fe:	4639      	mov	r1, r7
 8007100:	f7f9 fcf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8007104:	b110      	cbz	r0, 800710c <_dtoa_r+0x6c4>
 8007106:	9b01      	ldr	r3, [sp, #4]
 8007108:	07db      	lsls	r3, r3, #31
 800710a:	d40f      	bmi.n	800712c <_dtoa_r+0x6e4>
 800710c:	4651      	mov	r1, sl
 800710e:	4620      	mov	r0, r4
 8007110:	f000 fbcc 	bl	80078ac <_Bfree>
 8007114:	2300      	movs	r3, #0
 8007116:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007118:	702b      	strb	r3, [r5, #0]
 800711a:	f10b 0301 	add.w	r3, fp, #1
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007122:	2b00      	cmp	r3, #0
 8007124:	f43f ace2 	beq.w	8006aec <_dtoa_r+0xa4>
 8007128:	601d      	str	r5, [r3, #0]
 800712a:	e4df      	b.n	8006aec <_dtoa_r+0xa4>
 800712c:	465f      	mov	r7, fp
 800712e:	462b      	mov	r3, r5
 8007130:	461d      	mov	r5, r3
 8007132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007136:	2a39      	cmp	r2, #57	; 0x39
 8007138:	d106      	bne.n	8007148 <_dtoa_r+0x700>
 800713a:	9a00      	ldr	r2, [sp, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d1f7      	bne.n	8007130 <_dtoa_r+0x6e8>
 8007140:	9900      	ldr	r1, [sp, #0]
 8007142:	2230      	movs	r2, #48	; 0x30
 8007144:	3701      	adds	r7, #1
 8007146:	700a      	strb	r2, [r1, #0]
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	3201      	adds	r2, #1
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	e790      	b.n	8007072 <_dtoa_r+0x62a>
 8007150:	4ba3      	ldr	r3, [pc, #652]	; (80073e0 <_dtoa_r+0x998>)
 8007152:	2200      	movs	r2, #0
 8007154:	f7f9 fa60 	bl	8000618 <__aeabi_dmul>
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	4606      	mov	r6, r0
 800715e:	460f      	mov	r7, r1
 8007160:	f7f9 fcc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8007164:	2800      	cmp	r0, #0
 8007166:	d09e      	beq.n	80070a6 <_dtoa_r+0x65e>
 8007168:	e7d0      	b.n	800710c <_dtoa_r+0x6c4>
 800716a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800716c:	2a00      	cmp	r2, #0
 800716e:	f000 80ca 	beq.w	8007306 <_dtoa_r+0x8be>
 8007172:	9a07      	ldr	r2, [sp, #28]
 8007174:	2a01      	cmp	r2, #1
 8007176:	f300 80ad 	bgt.w	80072d4 <_dtoa_r+0x88c>
 800717a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800717c:	2a00      	cmp	r2, #0
 800717e:	f000 80a5 	beq.w	80072cc <_dtoa_r+0x884>
 8007182:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007186:	9e08      	ldr	r6, [sp, #32]
 8007188:	9d05      	ldr	r5, [sp, #20]
 800718a:	9a05      	ldr	r2, [sp, #20]
 800718c:	441a      	add	r2, r3
 800718e:	9205      	str	r2, [sp, #20]
 8007190:	9a06      	ldr	r2, [sp, #24]
 8007192:	2101      	movs	r1, #1
 8007194:	441a      	add	r2, r3
 8007196:	4620      	mov	r0, r4
 8007198:	9206      	str	r2, [sp, #24]
 800719a:	f000 fc3d 	bl	8007a18 <__i2b>
 800719e:	4607      	mov	r7, r0
 80071a0:	b165      	cbz	r5, 80071bc <_dtoa_r+0x774>
 80071a2:	9b06      	ldr	r3, [sp, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	dd09      	ble.n	80071bc <_dtoa_r+0x774>
 80071a8:	42ab      	cmp	r3, r5
 80071aa:	9a05      	ldr	r2, [sp, #20]
 80071ac:	bfa8      	it	ge
 80071ae:	462b      	movge	r3, r5
 80071b0:	1ad2      	subs	r2, r2, r3
 80071b2:	9205      	str	r2, [sp, #20]
 80071b4:	9a06      	ldr	r2, [sp, #24]
 80071b6:	1aed      	subs	r5, r5, r3
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	9306      	str	r3, [sp, #24]
 80071bc:	9b08      	ldr	r3, [sp, #32]
 80071be:	b1f3      	cbz	r3, 80071fe <_dtoa_r+0x7b6>
 80071c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80a3 	beq.w	800730e <_dtoa_r+0x8c6>
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	dd10      	ble.n	80071ee <_dtoa_r+0x7a6>
 80071cc:	4639      	mov	r1, r7
 80071ce:	4632      	mov	r2, r6
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 fce1 	bl	8007b98 <__pow5mult>
 80071d6:	4652      	mov	r2, sl
 80071d8:	4601      	mov	r1, r0
 80071da:	4607      	mov	r7, r0
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 fc31 	bl	8007a44 <__multiply>
 80071e2:	4651      	mov	r1, sl
 80071e4:	4680      	mov	r8, r0
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 fb60 	bl	80078ac <_Bfree>
 80071ec:	46c2      	mov	sl, r8
 80071ee:	9b08      	ldr	r3, [sp, #32]
 80071f0:	1b9a      	subs	r2, r3, r6
 80071f2:	d004      	beq.n	80071fe <_dtoa_r+0x7b6>
 80071f4:	4651      	mov	r1, sl
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fcce 	bl	8007b98 <__pow5mult>
 80071fc:	4682      	mov	sl, r0
 80071fe:	2101      	movs	r1, #1
 8007200:	4620      	mov	r0, r4
 8007202:	f000 fc09 	bl	8007a18 <__i2b>
 8007206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	4606      	mov	r6, r0
 800720c:	f340 8081 	ble.w	8007312 <_dtoa_r+0x8ca>
 8007210:	461a      	mov	r2, r3
 8007212:	4601      	mov	r1, r0
 8007214:	4620      	mov	r0, r4
 8007216:	f000 fcbf 	bl	8007b98 <__pow5mult>
 800721a:	9b07      	ldr	r3, [sp, #28]
 800721c:	2b01      	cmp	r3, #1
 800721e:	4606      	mov	r6, r0
 8007220:	dd7a      	ble.n	8007318 <_dtoa_r+0x8d0>
 8007222:	f04f 0800 	mov.w	r8, #0
 8007226:	6933      	ldr	r3, [r6, #16]
 8007228:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800722c:	6918      	ldr	r0, [r3, #16]
 800722e:	f000 fba5 	bl	800797c <__hi0bits>
 8007232:	f1c0 0020 	rsb	r0, r0, #32
 8007236:	9b06      	ldr	r3, [sp, #24]
 8007238:	4418      	add	r0, r3
 800723a:	f010 001f 	ands.w	r0, r0, #31
 800723e:	f000 8094 	beq.w	800736a <_dtoa_r+0x922>
 8007242:	f1c0 0320 	rsb	r3, r0, #32
 8007246:	2b04      	cmp	r3, #4
 8007248:	f340 8085 	ble.w	8007356 <_dtoa_r+0x90e>
 800724c:	9b05      	ldr	r3, [sp, #20]
 800724e:	f1c0 001c 	rsb	r0, r0, #28
 8007252:	4403      	add	r3, r0
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	9b06      	ldr	r3, [sp, #24]
 8007258:	4403      	add	r3, r0
 800725a:	4405      	add	r5, r0
 800725c:	9306      	str	r3, [sp, #24]
 800725e:	9b05      	ldr	r3, [sp, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	dd05      	ble.n	8007270 <_dtoa_r+0x828>
 8007264:	4651      	mov	r1, sl
 8007266:	461a      	mov	r2, r3
 8007268:	4620      	mov	r0, r4
 800726a:	f000 fcef 	bl	8007c4c <__lshift>
 800726e:	4682      	mov	sl, r0
 8007270:	9b06      	ldr	r3, [sp, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd05      	ble.n	8007282 <_dtoa_r+0x83a>
 8007276:	4631      	mov	r1, r6
 8007278:	461a      	mov	r2, r3
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fce6 	bl	8007c4c <__lshift>
 8007280:	4606      	mov	r6, r0
 8007282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007284:	2b00      	cmp	r3, #0
 8007286:	d072      	beq.n	800736e <_dtoa_r+0x926>
 8007288:	4631      	mov	r1, r6
 800728a:	4650      	mov	r0, sl
 800728c:	f000 fd4a 	bl	8007d24 <__mcmp>
 8007290:	2800      	cmp	r0, #0
 8007292:	da6c      	bge.n	800736e <_dtoa_r+0x926>
 8007294:	2300      	movs	r3, #0
 8007296:	4651      	mov	r1, sl
 8007298:	220a      	movs	r2, #10
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fb28 	bl	80078f0 <__multadd>
 80072a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80072a6:	4682      	mov	sl, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 81b0 	beq.w	800760e <_dtoa_r+0xbc6>
 80072ae:	2300      	movs	r3, #0
 80072b0:	4639      	mov	r1, r7
 80072b2:	220a      	movs	r2, #10
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fb1b 	bl	80078f0 <__multadd>
 80072ba:	9b01      	ldr	r3, [sp, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	4607      	mov	r7, r0
 80072c0:	f300 8096 	bgt.w	80073f0 <_dtoa_r+0x9a8>
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	dc59      	bgt.n	800737e <_dtoa_r+0x936>
 80072ca:	e091      	b.n	80073f0 <_dtoa_r+0x9a8>
 80072cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072d2:	e758      	b.n	8007186 <_dtoa_r+0x73e>
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	1e5e      	subs	r6, r3, #1
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	42b3      	cmp	r3, r6
 80072dc:	bfbf      	itttt	lt
 80072de:	9b08      	ldrlt	r3, [sp, #32]
 80072e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80072e2:	9608      	strlt	r6, [sp, #32]
 80072e4:	1af3      	sublt	r3, r6, r3
 80072e6:	bfb4      	ite	lt
 80072e8:	18d2      	addlt	r2, r2, r3
 80072ea:	1b9e      	subge	r6, r3, r6
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	bfbc      	itt	lt
 80072f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072f2:	2600      	movlt	r6, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfb7      	itett	lt
 80072f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007300:	1a9d      	sublt	r5, r3, r2
 8007302:	2300      	movlt	r3, #0
 8007304:	e741      	b.n	800718a <_dtoa_r+0x742>
 8007306:	9e08      	ldr	r6, [sp, #32]
 8007308:	9d05      	ldr	r5, [sp, #20]
 800730a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800730c:	e748      	b.n	80071a0 <_dtoa_r+0x758>
 800730e:	9a08      	ldr	r2, [sp, #32]
 8007310:	e770      	b.n	80071f4 <_dtoa_r+0x7ac>
 8007312:	9b07      	ldr	r3, [sp, #28]
 8007314:	2b01      	cmp	r3, #1
 8007316:	dc19      	bgt.n	800734c <_dtoa_r+0x904>
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	b9bb      	cbnz	r3, 800734c <_dtoa_r+0x904>
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007322:	b99b      	cbnz	r3, 800734c <_dtoa_r+0x904>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800732a:	0d1b      	lsrs	r3, r3, #20
 800732c:	051b      	lsls	r3, r3, #20
 800732e:	b183      	cbz	r3, 8007352 <_dtoa_r+0x90a>
 8007330:	9b05      	ldr	r3, [sp, #20]
 8007332:	3301      	adds	r3, #1
 8007334:	9305      	str	r3, [sp, #20]
 8007336:	9b06      	ldr	r3, [sp, #24]
 8007338:	3301      	adds	r3, #1
 800733a:	9306      	str	r3, [sp, #24]
 800733c:	f04f 0801 	mov.w	r8, #1
 8007340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f af6f 	bne.w	8007226 <_dtoa_r+0x7de>
 8007348:	2001      	movs	r0, #1
 800734a:	e774      	b.n	8007236 <_dtoa_r+0x7ee>
 800734c:	f04f 0800 	mov.w	r8, #0
 8007350:	e7f6      	b.n	8007340 <_dtoa_r+0x8f8>
 8007352:	4698      	mov	r8, r3
 8007354:	e7f4      	b.n	8007340 <_dtoa_r+0x8f8>
 8007356:	d082      	beq.n	800725e <_dtoa_r+0x816>
 8007358:	9a05      	ldr	r2, [sp, #20]
 800735a:	331c      	adds	r3, #28
 800735c:	441a      	add	r2, r3
 800735e:	9205      	str	r2, [sp, #20]
 8007360:	9a06      	ldr	r2, [sp, #24]
 8007362:	441a      	add	r2, r3
 8007364:	441d      	add	r5, r3
 8007366:	9206      	str	r2, [sp, #24]
 8007368:	e779      	b.n	800725e <_dtoa_r+0x816>
 800736a:	4603      	mov	r3, r0
 800736c:	e7f4      	b.n	8007358 <_dtoa_r+0x910>
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	dc37      	bgt.n	80073e4 <_dtoa_r+0x99c>
 8007374:	9b07      	ldr	r3, [sp, #28]
 8007376:	2b02      	cmp	r3, #2
 8007378:	dd34      	ble.n	80073e4 <_dtoa_r+0x99c>
 800737a:	9b04      	ldr	r3, [sp, #16]
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	b963      	cbnz	r3, 800739c <_dtoa_r+0x954>
 8007382:	4631      	mov	r1, r6
 8007384:	2205      	movs	r2, #5
 8007386:	4620      	mov	r0, r4
 8007388:	f000 fab2 	bl	80078f0 <__multadd>
 800738c:	4601      	mov	r1, r0
 800738e:	4606      	mov	r6, r0
 8007390:	4650      	mov	r0, sl
 8007392:	f000 fcc7 	bl	8007d24 <__mcmp>
 8007396:	2800      	cmp	r0, #0
 8007398:	f73f adbb 	bgt.w	8006f12 <_dtoa_r+0x4ca>
 800739c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800739e:	9d00      	ldr	r5, [sp, #0]
 80073a0:	ea6f 0b03 	mvn.w	fp, r3
 80073a4:	f04f 0800 	mov.w	r8, #0
 80073a8:	4631      	mov	r1, r6
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fa7e 	bl	80078ac <_Bfree>
 80073b0:	2f00      	cmp	r7, #0
 80073b2:	f43f aeab 	beq.w	800710c <_dtoa_r+0x6c4>
 80073b6:	f1b8 0f00 	cmp.w	r8, #0
 80073ba:	d005      	beq.n	80073c8 <_dtoa_r+0x980>
 80073bc:	45b8      	cmp	r8, r7
 80073be:	d003      	beq.n	80073c8 <_dtoa_r+0x980>
 80073c0:	4641      	mov	r1, r8
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 fa72 	bl	80078ac <_Bfree>
 80073c8:	4639      	mov	r1, r7
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fa6e 	bl	80078ac <_Bfree>
 80073d0:	e69c      	b.n	800710c <_dtoa_r+0x6c4>
 80073d2:	2600      	movs	r6, #0
 80073d4:	4637      	mov	r7, r6
 80073d6:	e7e1      	b.n	800739c <_dtoa_r+0x954>
 80073d8:	46bb      	mov	fp, r7
 80073da:	4637      	mov	r7, r6
 80073dc:	e599      	b.n	8006f12 <_dtoa_r+0x4ca>
 80073de:	bf00      	nop
 80073e0:	40240000 	.word	0x40240000
 80073e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80c8 	beq.w	800757c <_dtoa_r+0xb34>
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	dd05      	ble.n	8007400 <_dtoa_r+0x9b8>
 80073f4:	4639      	mov	r1, r7
 80073f6:	462a      	mov	r2, r5
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fc27 	bl	8007c4c <__lshift>
 80073fe:	4607      	mov	r7, r0
 8007400:	f1b8 0f00 	cmp.w	r8, #0
 8007404:	d05b      	beq.n	80074be <_dtoa_r+0xa76>
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4620      	mov	r0, r4
 800740a:	f000 fa0f 	bl	800782c <_Balloc>
 800740e:	4605      	mov	r5, r0
 8007410:	b928      	cbnz	r0, 800741e <_dtoa_r+0x9d6>
 8007412:	4b83      	ldr	r3, [pc, #524]	; (8007620 <_dtoa_r+0xbd8>)
 8007414:	4602      	mov	r2, r0
 8007416:	f240 21ef 	movw	r1, #751	; 0x2ef
 800741a:	f7ff bb2e 	b.w	8006a7a <_dtoa_r+0x32>
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	3202      	adds	r2, #2
 8007422:	0092      	lsls	r2, r2, #2
 8007424:	f107 010c 	add.w	r1, r7, #12
 8007428:	300c      	adds	r0, #12
 800742a:	f000 ffab 	bl	8008384 <memcpy>
 800742e:	2201      	movs	r2, #1
 8007430:	4629      	mov	r1, r5
 8007432:	4620      	mov	r0, r4
 8007434:	f000 fc0a 	bl	8007c4c <__lshift>
 8007438:	9b00      	ldr	r3, [sp, #0]
 800743a:	3301      	adds	r3, #1
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007442:	4413      	add	r3, r2
 8007444:	9308      	str	r3, [sp, #32]
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	46b8      	mov	r8, r7
 800744e:	9306      	str	r3, [sp, #24]
 8007450:	4607      	mov	r7, r0
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	4631      	mov	r1, r6
 8007456:	3b01      	subs	r3, #1
 8007458:	4650      	mov	r0, sl
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	f7ff fa6b 	bl	8006936 <quorem>
 8007460:	4641      	mov	r1, r8
 8007462:	9002      	str	r0, [sp, #8]
 8007464:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007468:	4650      	mov	r0, sl
 800746a:	f000 fc5b 	bl	8007d24 <__mcmp>
 800746e:	463a      	mov	r2, r7
 8007470:	9005      	str	r0, [sp, #20]
 8007472:	4631      	mov	r1, r6
 8007474:	4620      	mov	r0, r4
 8007476:	f000 fc71 	bl	8007d5c <__mdiff>
 800747a:	68c2      	ldr	r2, [r0, #12]
 800747c:	4605      	mov	r5, r0
 800747e:	bb02      	cbnz	r2, 80074c2 <_dtoa_r+0xa7a>
 8007480:	4601      	mov	r1, r0
 8007482:	4650      	mov	r0, sl
 8007484:	f000 fc4e 	bl	8007d24 <__mcmp>
 8007488:	4602      	mov	r2, r0
 800748a:	4629      	mov	r1, r5
 800748c:	4620      	mov	r0, r4
 800748e:	9209      	str	r2, [sp, #36]	; 0x24
 8007490:	f000 fa0c 	bl	80078ac <_Bfree>
 8007494:	9b07      	ldr	r3, [sp, #28]
 8007496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007498:	9d04      	ldr	r5, [sp, #16]
 800749a:	ea43 0102 	orr.w	r1, r3, r2
 800749e:	9b06      	ldr	r3, [sp, #24]
 80074a0:	4319      	orrs	r1, r3
 80074a2:	d110      	bne.n	80074c6 <_dtoa_r+0xa7e>
 80074a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074a8:	d029      	beq.n	80074fe <_dtoa_r+0xab6>
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dd02      	ble.n	80074b6 <_dtoa_r+0xa6e>
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	f883 9000 	strb.w	r9, [r3]
 80074bc:	e774      	b.n	80073a8 <_dtoa_r+0x960>
 80074be:	4638      	mov	r0, r7
 80074c0:	e7ba      	b.n	8007438 <_dtoa_r+0x9f0>
 80074c2:	2201      	movs	r2, #1
 80074c4:	e7e1      	b.n	800748a <_dtoa_r+0xa42>
 80074c6:	9b05      	ldr	r3, [sp, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db04      	blt.n	80074d6 <_dtoa_r+0xa8e>
 80074cc:	9907      	ldr	r1, [sp, #28]
 80074ce:	430b      	orrs	r3, r1
 80074d0:	9906      	ldr	r1, [sp, #24]
 80074d2:	430b      	orrs	r3, r1
 80074d4:	d120      	bne.n	8007518 <_dtoa_r+0xad0>
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	dded      	ble.n	80074b6 <_dtoa_r+0xa6e>
 80074da:	4651      	mov	r1, sl
 80074dc:	2201      	movs	r2, #1
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 fbb4 	bl	8007c4c <__lshift>
 80074e4:	4631      	mov	r1, r6
 80074e6:	4682      	mov	sl, r0
 80074e8:	f000 fc1c 	bl	8007d24 <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	dc03      	bgt.n	80074f8 <_dtoa_r+0xab0>
 80074f0:	d1e1      	bne.n	80074b6 <_dtoa_r+0xa6e>
 80074f2:	f019 0f01 	tst.w	r9, #1
 80074f6:	d0de      	beq.n	80074b6 <_dtoa_r+0xa6e>
 80074f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074fc:	d1d8      	bne.n	80074b0 <_dtoa_r+0xa68>
 80074fe:	9a01      	ldr	r2, [sp, #4]
 8007500:	2339      	movs	r3, #57	; 0x39
 8007502:	7013      	strb	r3, [r2, #0]
 8007504:	462b      	mov	r3, r5
 8007506:	461d      	mov	r5, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800750e:	2a39      	cmp	r2, #57	; 0x39
 8007510:	d06c      	beq.n	80075ec <_dtoa_r+0xba4>
 8007512:	3201      	adds	r2, #1
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	e747      	b.n	80073a8 <_dtoa_r+0x960>
 8007518:	2a00      	cmp	r2, #0
 800751a:	dd07      	ble.n	800752c <_dtoa_r+0xae4>
 800751c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007520:	d0ed      	beq.n	80074fe <_dtoa_r+0xab6>
 8007522:	9a01      	ldr	r2, [sp, #4]
 8007524:	f109 0301 	add.w	r3, r9, #1
 8007528:	7013      	strb	r3, [r2, #0]
 800752a:	e73d      	b.n	80073a8 <_dtoa_r+0x960>
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	9a08      	ldr	r2, [sp, #32]
 8007530:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007534:	4293      	cmp	r3, r2
 8007536:	d043      	beq.n	80075c0 <_dtoa_r+0xb78>
 8007538:	4651      	mov	r1, sl
 800753a:	2300      	movs	r3, #0
 800753c:	220a      	movs	r2, #10
 800753e:	4620      	mov	r0, r4
 8007540:	f000 f9d6 	bl	80078f0 <__multadd>
 8007544:	45b8      	cmp	r8, r7
 8007546:	4682      	mov	sl, r0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	f04f 020a 	mov.w	r2, #10
 8007550:	4641      	mov	r1, r8
 8007552:	4620      	mov	r0, r4
 8007554:	d107      	bne.n	8007566 <_dtoa_r+0xb1e>
 8007556:	f000 f9cb 	bl	80078f0 <__multadd>
 800755a:	4680      	mov	r8, r0
 800755c:	4607      	mov	r7, r0
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	3301      	adds	r3, #1
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	e775      	b.n	8007452 <_dtoa_r+0xa0a>
 8007566:	f000 f9c3 	bl	80078f0 <__multadd>
 800756a:	4639      	mov	r1, r7
 800756c:	4680      	mov	r8, r0
 800756e:	2300      	movs	r3, #0
 8007570:	220a      	movs	r2, #10
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f9bc 	bl	80078f0 <__multadd>
 8007578:	4607      	mov	r7, r0
 800757a:	e7f0      	b.n	800755e <_dtoa_r+0xb16>
 800757c:	9b04      	ldr	r3, [sp, #16]
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	9d00      	ldr	r5, [sp, #0]
 8007582:	4631      	mov	r1, r6
 8007584:	4650      	mov	r0, sl
 8007586:	f7ff f9d6 	bl	8006936 <quorem>
 800758a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800758e:	9b00      	ldr	r3, [sp, #0]
 8007590:	f805 9b01 	strb.w	r9, [r5], #1
 8007594:	1aea      	subs	r2, r5, r3
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	4293      	cmp	r3, r2
 800759a:	dd07      	ble.n	80075ac <_dtoa_r+0xb64>
 800759c:	4651      	mov	r1, sl
 800759e:	2300      	movs	r3, #0
 80075a0:	220a      	movs	r2, #10
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 f9a4 	bl	80078f0 <__multadd>
 80075a8:	4682      	mov	sl, r0
 80075aa:	e7ea      	b.n	8007582 <_dtoa_r+0xb3a>
 80075ac:	9b01      	ldr	r3, [sp, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bfc8      	it	gt
 80075b2:	461d      	movgt	r5, r3
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	bfd8      	it	le
 80075b8:	2501      	movle	r5, #1
 80075ba:	441d      	add	r5, r3
 80075bc:	f04f 0800 	mov.w	r8, #0
 80075c0:	4651      	mov	r1, sl
 80075c2:	2201      	movs	r2, #1
 80075c4:	4620      	mov	r0, r4
 80075c6:	f000 fb41 	bl	8007c4c <__lshift>
 80075ca:	4631      	mov	r1, r6
 80075cc:	4682      	mov	sl, r0
 80075ce:	f000 fba9 	bl	8007d24 <__mcmp>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	dc96      	bgt.n	8007504 <_dtoa_r+0xabc>
 80075d6:	d102      	bne.n	80075de <_dtoa_r+0xb96>
 80075d8:	f019 0f01 	tst.w	r9, #1
 80075dc:	d192      	bne.n	8007504 <_dtoa_r+0xabc>
 80075de:	462b      	mov	r3, r5
 80075e0:	461d      	mov	r5, r3
 80075e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075e6:	2a30      	cmp	r2, #48	; 0x30
 80075e8:	d0fa      	beq.n	80075e0 <_dtoa_r+0xb98>
 80075ea:	e6dd      	b.n	80073a8 <_dtoa_r+0x960>
 80075ec:	9a00      	ldr	r2, [sp, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d189      	bne.n	8007506 <_dtoa_r+0xabe>
 80075f2:	f10b 0b01 	add.w	fp, fp, #1
 80075f6:	2331      	movs	r3, #49	; 0x31
 80075f8:	e796      	b.n	8007528 <_dtoa_r+0xae0>
 80075fa:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <_dtoa_r+0xbdc>)
 80075fc:	f7ff ba99 	b.w	8006b32 <_dtoa_r+0xea>
 8007600:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007602:	2b00      	cmp	r3, #0
 8007604:	f47f aa6d 	bne.w	8006ae2 <_dtoa_r+0x9a>
 8007608:	4b07      	ldr	r3, [pc, #28]	; (8007628 <_dtoa_r+0xbe0>)
 800760a:	f7ff ba92 	b.w	8006b32 <_dtoa_r+0xea>
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	dcb5      	bgt.n	8007580 <_dtoa_r+0xb38>
 8007614:	9b07      	ldr	r3, [sp, #28]
 8007616:	2b02      	cmp	r3, #2
 8007618:	f73f aeb1 	bgt.w	800737e <_dtoa_r+0x936>
 800761c:	e7b0      	b.n	8007580 <_dtoa_r+0xb38>
 800761e:	bf00      	nop
 8007620:	08008b6c 	.word	0x08008b6c
 8007624:	08008acc 	.word	0x08008acc
 8007628:	08008af0 	.word	0x08008af0

0800762c <_free_r>:
 800762c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800762e:	2900      	cmp	r1, #0
 8007630:	d044      	beq.n	80076bc <_free_r+0x90>
 8007632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007636:	9001      	str	r0, [sp, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f1a1 0404 	sub.w	r4, r1, #4
 800763e:	bfb8      	it	lt
 8007640:	18e4      	addlt	r4, r4, r3
 8007642:	f000 f8e7 	bl	8007814 <__malloc_lock>
 8007646:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <_free_r+0x94>)
 8007648:	9801      	ldr	r0, [sp, #4]
 800764a:	6813      	ldr	r3, [r2, #0]
 800764c:	b933      	cbnz	r3, 800765c <_free_r+0x30>
 800764e:	6063      	str	r3, [r4, #4]
 8007650:	6014      	str	r4, [r2, #0]
 8007652:	b003      	add	sp, #12
 8007654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007658:	f000 b8e2 	b.w	8007820 <__malloc_unlock>
 800765c:	42a3      	cmp	r3, r4
 800765e:	d908      	bls.n	8007672 <_free_r+0x46>
 8007660:	6825      	ldr	r5, [r4, #0]
 8007662:	1961      	adds	r1, r4, r5
 8007664:	428b      	cmp	r3, r1
 8007666:	bf01      	itttt	eq
 8007668:	6819      	ldreq	r1, [r3, #0]
 800766a:	685b      	ldreq	r3, [r3, #4]
 800766c:	1949      	addeq	r1, r1, r5
 800766e:	6021      	streq	r1, [r4, #0]
 8007670:	e7ed      	b.n	800764e <_free_r+0x22>
 8007672:	461a      	mov	r2, r3
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	b10b      	cbz	r3, 800767c <_free_r+0x50>
 8007678:	42a3      	cmp	r3, r4
 800767a:	d9fa      	bls.n	8007672 <_free_r+0x46>
 800767c:	6811      	ldr	r1, [r2, #0]
 800767e:	1855      	adds	r5, r2, r1
 8007680:	42a5      	cmp	r5, r4
 8007682:	d10b      	bne.n	800769c <_free_r+0x70>
 8007684:	6824      	ldr	r4, [r4, #0]
 8007686:	4421      	add	r1, r4
 8007688:	1854      	adds	r4, r2, r1
 800768a:	42a3      	cmp	r3, r4
 800768c:	6011      	str	r1, [r2, #0]
 800768e:	d1e0      	bne.n	8007652 <_free_r+0x26>
 8007690:	681c      	ldr	r4, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	6053      	str	r3, [r2, #4]
 8007696:	440c      	add	r4, r1
 8007698:	6014      	str	r4, [r2, #0]
 800769a:	e7da      	b.n	8007652 <_free_r+0x26>
 800769c:	d902      	bls.n	80076a4 <_free_r+0x78>
 800769e:	230c      	movs	r3, #12
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	e7d6      	b.n	8007652 <_free_r+0x26>
 80076a4:	6825      	ldr	r5, [r4, #0]
 80076a6:	1961      	adds	r1, r4, r5
 80076a8:	428b      	cmp	r3, r1
 80076aa:	bf04      	itt	eq
 80076ac:	6819      	ldreq	r1, [r3, #0]
 80076ae:	685b      	ldreq	r3, [r3, #4]
 80076b0:	6063      	str	r3, [r4, #4]
 80076b2:	bf04      	itt	eq
 80076b4:	1949      	addeq	r1, r1, r5
 80076b6:	6021      	streq	r1, [r4, #0]
 80076b8:	6054      	str	r4, [r2, #4]
 80076ba:	e7ca      	b.n	8007652 <_free_r+0x26>
 80076bc:	b003      	add	sp, #12
 80076be:	bd30      	pop	{r4, r5, pc}
 80076c0:	20000b5c 	.word	0x20000b5c

080076c4 <malloc>:
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <malloc+0xc>)
 80076c6:	4601      	mov	r1, r0
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	f000 b823 	b.w	8007714 <_malloc_r>
 80076ce:	bf00      	nop
 80076d0:	20000064 	.word	0x20000064

080076d4 <sbrk_aligned>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	4e0e      	ldr	r6, [pc, #56]	; (8007710 <sbrk_aligned+0x3c>)
 80076d8:	460c      	mov	r4, r1
 80076da:	6831      	ldr	r1, [r6, #0]
 80076dc:	4605      	mov	r5, r0
 80076de:	b911      	cbnz	r1, 80076e6 <sbrk_aligned+0x12>
 80076e0:	f000 fe40 	bl	8008364 <_sbrk_r>
 80076e4:	6030      	str	r0, [r6, #0]
 80076e6:	4621      	mov	r1, r4
 80076e8:	4628      	mov	r0, r5
 80076ea:	f000 fe3b 	bl	8008364 <_sbrk_r>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d00a      	beq.n	8007708 <sbrk_aligned+0x34>
 80076f2:	1cc4      	adds	r4, r0, #3
 80076f4:	f024 0403 	bic.w	r4, r4, #3
 80076f8:	42a0      	cmp	r0, r4
 80076fa:	d007      	beq.n	800770c <sbrk_aligned+0x38>
 80076fc:	1a21      	subs	r1, r4, r0
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 fe30 	bl	8008364 <_sbrk_r>
 8007704:	3001      	adds	r0, #1
 8007706:	d101      	bne.n	800770c <sbrk_aligned+0x38>
 8007708:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800770c:	4620      	mov	r0, r4
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	20000b60 	.word	0x20000b60

08007714 <_malloc_r>:
 8007714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007718:	1ccd      	adds	r5, r1, #3
 800771a:	f025 0503 	bic.w	r5, r5, #3
 800771e:	3508      	adds	r5, #8
 8007720:	2d0c      	cmp	r5, #12
 8007722:	bf38      	it	cc
 8007724:	250c      	movcc	r5, #12
 8007726:	2d00      	cmp	r5, #0
 8007728:	4607      	mov	r7, r0
 800772a:	db01      	blt.n	8007730 <_malloc_r+0x1c>
 800772c:	42a9      	cmp	r1, r5
 800772e:	d905      	bls.n	800773c <_malloc_r+0x28>
 8007730:	230c      	movs	r3, #12
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	2600      	movs	r6, #0
 8007736:	4630      	mov	r0, r6
 8007738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007810 <_malloc_r+0xfc>
 8007740:	f000 f868 	bl	8007814 <__malloc_lock>
 8007744:	f8d8 3000 	ldr.w	r3, [r8]
 8007748:	461c      	mov	r4, r3
 800774a:	bb5c      	cbnz	r4, 80077a4 <_malloc_r+0x90>
 800774c:	4629      	mov	r1, r5
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ffc0 	bl	80076d4 <sbrk_aligned>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	4604      	mov	r4, r0
 8007758:	d155      	bne.n	8007806 <_malloc_r+0xf2>
 800775a:	f8d8 4000 	ldr.w	r4, [r8]
 800775e:	4626      	mov	r6, r4
 8007760:	2e00      	cmp	r6, #0
 8007762:	d145      	bne.n	80077f0 <_malloc_r+0xdc>
 8007764:	2c00      	cmp	r4, #0
 8007766:	d048      	beq.n	80077fa <_malloc_r+0xe6>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	4631      	mov	r1, r6
 800776c:	4638      	mov	r0, r7
 800776e:	eb04 0903 	add.w	r9, r4, r3
 8007772:	f000 fdf7 	bl	8008364 <_sbrk_r>
 8007776:	4581      	cmp	r9, r0
 8007778:	d13f      	bne.n	80077fa <_malloc_r+0xe6>
 800777a:	6821      	ldr	r1, [r4, #0]
 800777c:	1a6d      	subs	r5, r5, r1
 800777e:	4629      	mov	r1, r5
 8007780:	4638      	mov	r0, r7
 8007782:	f7ff ffa7 	bl	80076d4 <sbrk_aligned>
 8007786:	3001      	adds	r0, #1
 8007788:	d037      	beq.n	80077fa <_malloc_r+0xe6>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	442b      	add	r3, r5
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	f8d8 3000 	ldr.w	r3, [r8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d038      	beq.n	800780a <_malloc_r+0xf6>
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	42a2      	cmp	r2, r4
 800779c:	d12b      	bne.n	80077f6 <_malloc_r+0xe2>
 800779e:	2200      	movs	r2, #0
 80077a0:	605a      	str	r2, [r3, #4]
 80077a2:	e00f      	b.n	80077c4 <_malloc_r+0xb0>
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	1b52      	subs	r2, r2, r5
 80077a8:	d41f      	bmi.n	80077ea <_malloc_r+0xd6>
 80077aa:	2a0b      	cmp	r2, #11
 80077ac:	d917      	bls.n	80077de <_malloc_r+0xca>
 80077ae:	1961      	adds	r1, r4, r5
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	6025      	str	r5, [r4, #0]
 80077b4:	bf18      	it	ne
 80077b6:	6059      	strne	r1, [r3, #4]
 80077b8:	6863      	ldr	r3, [r4, #4]
 80077ba:	bf08      	it	eq
 80077bc:	f8c8 1000 	streq.w	r1, [r8]
 80077c0:	5162      	str	r2, [r4, r5]
 80077c2:	604b      	str	r3, [r1, #4]
 80077c4:	4638      	mov	r0, r7
 80077c6:	f104 060b 	add.w	r6, r4, #11
 80077ca:	f000 f829 	bl	8007820 <__malloc_unlock>
 80077ce:	f026 0607 	bic.w	r6, r6, #7
 80077d2:	1d23      	adds	r3, r4, #4
 80077d4:	1af2      	subs	r2, r6, r3
 80077d6:	d0ae      	beq.n	8007736 <_malloc_r+0x22>
 80077d8:	1b9b      	subs	r3, r3, r6
 80077da:	50a3      	str	r3, [r4, r2]
 80077dc:	e7ab      	b.n	8007736 <_malloc_r+0x22>
 80077de:	42a3      	cmp	r3, r4
 80077e0:	6862      	ldr	r2, [r4, #4]
 80077e2:	d1dd      	bne.n	80077a0 <_malloc_r+0x8c>
 80077e4:	f8c8 2000 	str.w	r2, [r8]
 80077e8:	e7ec      	b.n	80077c4 <_malloc_r+0xb0>
 80077ea:	4623      	mov	r3, r4
 80077ec:	6864      	ldr	r4, [r4, #4]
 80077ee:	e7ac      	b.n	800774a <_malloc_r+0x36>
 80077f0:	4634      	mov	r4, r6
 80077f2:	6876      	ldr	r6, [r6, #4]
 80077f4:	e7b4      	b.n	8007760 <_malloc_r+0x4c>
 80077f6:	4613      	mov	r3, r2
 80077f8:	e7cc      	b.n	8007794 <_malloc_r+0x80>
 80077fa:	230c      	movs	r3, #12
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4638      	mov	r0, r7
 8007800:	f000 f80e 	bl	8007820 <__malloc_unlock>
 8007804:	e797      	b.n	8007736 <_malloc_r+0x22>
 8007806:	6025      	str	r5, [r4, #0]
 8007808:	e7dc      	b.n	80077c4 <_malloc_r+0xb0>
 800780a:	605b      	str	r3, [r3, #4]
 800780c:	deff      	udf	#255	; 0xff
 800780e:	bf00      	nop
 8007810:	20000b5c 	.word	0x20000b5c

08007814 <__malloc_lock>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__malloc_lock+0x8>)
 8007816:	f7ff b88c 	b.w	8006932 <__retarget_lock_acquire_recursive>
 800781a:	bf00      	nop
 800781c:	20000b58 	.word	0x20000b58

08007820 <__malloc_unlock>:
 8007820:	4801      	ldr	r0, [pc, #4]	; (8007828 <__malloc_unlock+0x8>)
 8007822:	f7ff b887 	b.w	8006934 <__retarget_lock_release_recursive>
 8007826:	bf00      	nop
 8007828:	20000b58 	.word	0x20000b58

0800782c <_Balloc>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	69c6      	ldr	r6, [r0, #28]
 8007830:	4604      	mov	r4, r0
 8007832:	460d      	mov	r5, r1
 8007834:	b976      	cbnz	r6, 8007854 <_Balloc+0x28>
 8007836:	2010      	movs	r0, #16
 8007838:	f7ff ff44 	bl	80076c4 <malloc>
 800783c:	4602      	mov	r2, r0
 800783e:	61e0      	str	r0, [r4, #28]
 8007840:	b920      	cbnz	r0, 800784c <_Balloc+0x20>
 8007842:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <_Balloc+0x78>)
 8007844:	4818      	ldr	r0, [pc, #96]	; (80078a8 <_Balloc+0x7c>)
 8007846:	216b      	movs	r1, #107	; 0x6b
 8007848:	f000 fdaa 	bl	80083a0 <__assert_func>
 800784c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007850:	6006      	str	r6, [r0, #0]
 8007852:	60c6      	str	r6, [r0, #12]
 8007854:	69e6      	ldr	r6, [r4, #28]
 8007856:	68f3      	ldr	r3, [r6, #12]
 8007858:	b183      	cbz	r3, 800787c <_Balloc+0x50>
 800785a:	69e3      	ldr	r3, [r4, #28]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007862:	b9b8      	cbnz	r0, 8007894 <_Balloc+0x68>
 8007864:	2101      	movs	r1, #1
 8007866:	fa01 f605 	lsl.w	r6, r1, r5
 800786a:	1d72      	adds	r2, r6, #5
 800786c:	0092      	lsls	r2, r2, #2
 800786e:	4620      	mov	r0, r4
 8007870:	f000 fdb4 	bl	80083dc <_calloc_r>
 8007874:	b160      	cbz	r0, 8007890 <_Balloc+0x64>
 8007876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800787a:	e00e      	b.n	800789a <_Balloc+0x6e>
 800787c:	2221      	movs	r2, #33	; 0x21
 800787e:	2104      	movs	r1, #4
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fdab 	bl	80083dc <_calloc_r>
 8007886:	69e3      	ldr	r3, [r4, #28]
 8007888:	60f0      	str	r0, [r6, #12]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e4      	bne.n	800785a <_Balloc+0x2e>
 8007890:	2000      	movs	r0, #0
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	6802      	ldr	r2, [r0, #0]
 8007896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800789a:	2300      	movs	r3, #0
 800789c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078a0:	e7f7      	b.n	8007892 <_Balloc+0x66>
 80078a2:	bf00      	nop
 80078a4:	08008afd 	.word	0x08008afd
 80078a8:	08008b7d 	.word	0x08008b7d

080078ac <_Bfree>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	69c6      	ldr	r6, [r0, #28]
 80078b0:	4605      	mov	r5, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b976      	cbnz	r6, 80078d4 <_Bfree+0x28>
 80078b6:	2010      	movs	r0, #16
 80078b8:	f7ff ff04 	bl	80076c4 <malloc>
 80078bc:	4602      	mov	r2, r0
 80078be:	61e8      	str	r0, [r5, #28]
 80078c0:	b920      	cbnz	r0, 80078cc <_Bfree+0x20>
 80078c2:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <_Bfree+0x3c>)
 80078c4:	4809      	ldr	r0, [pc, #36]	; (80078ec <_Bfree+0x40>)
 80078c6:	218f      	movs	r1, #143	; 0x8f
 80078c8:	f000 fd6a 	bl	80083a0 <__assert_func>
 80078cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078d0:	6006      	str	r6, [r0, #0]
 80078d2:	60c6      	str	r6, [r0, #12]
 80078d4:	b13c      	cbz	r4, 80078e6 <_Bfree+0x3a>
 80078d6:	69eb      	ldr	r3, [r5, #28]
 80078d8:	6862      	ldr	r2, [r4, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078e0:	6021      	str	r1, [r4, #0]
 80078e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
 80078e8:	08008afd 	.word	0x08008afd
 80078ec:	08008b7d 	.word	0x08008b7d

080078f0 <__multadd>:
 80078f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	690d      	ldr	r5, [r1, #16]
 80078f6:	4607      	mov	r7, r0
 80078f8:	460c      	mov	r4, r1
 80078fa:	461e      	mov	r6, r3
 80078fc:	f101 0c14 	add.w	ip, r1, #20
 8007900:	2000      	movs	r0, #0
 8007902:	f8dc 3000 	ldr.w	r3, [ip]
 8007906:	b299      	uxth	r1, r3
 8007908:	fb02 6101 	mla	r1, r2, r1, r6
 800790c:	0c1e      	lsrs	r6, r3, #16
 800790e:	0c0b      	lsrs	r3, r1, #16
 8007910:	fb02 3306 	mla	r3, r2, r6, r3
 8007914:	b289      	uxth	r1, r1
 8007916:	3001      	adds	r0, #1
 8007918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800791c:	4285      	cmp	r5, r0
 800791e:	f84c 1b04 	str.w	r1, [ip], #4
 8007922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007926:	dcec      	bgt.n	8007902 <__multadd+0x12>
 8007928:	b30e      	cbz	r6, 800796e <__multadd+0x7e>
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	42ab      	cmp	r3, r5
 800792e:	dc19      	bgt.n	8007964 <__multadd+0x74>
 8007930:	6861      	ldr	r1, [r4, #4]
 8007932:	4638      	mov	r0, r7
 8007934:	3101      	adds	r1, #1
 8007936:	f7ff ff79 	bl	800782c <_Balloc>
 800793a:	4680      	mov	r8, r0
 800793c:	b928      	cbnz	r0, 800794a <__multadd+0x5a>
 800793e:	4602      	mov	r2, r0
 8007940:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <__multadd+0x84>)
 8007942:	480d      	ldr	r0, [pc, #52]	; (8007978 <__multadd+0x88>)
 8007944:	21ba      	movs	r1, #186	; 0xba
 8007946:	f000 fd2b 	bl	80083a0 <__assert_func>
 800794a:	6922      	ldr	r2, [r4, #16]
 800794c:	3202      	adds	r2, #2
 800794e:	f104 010c 	add.w	r1, r4, #12
 8007952:	0092      	lsls	r2, r2, #2
 8007954:	300c      	adds	r0, #12
 8007956:	f000 fd15 	bl	8008384 <memcpy>
 800795a:	4621      	mov	r1, r4
 800795c:	4638      	mov	r0, r7
 800795e:	f7ff ffa5 	bl	80078ac <_Bfree>
 8007962:	4644      	mov	r4, r8
 8007964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007968:	3501      	adds	r5, #1
 800796a:	615e      	str	r6, [r3, #20]
 800796c:	6125      	str	r5, [r4, #16]
 800796e:	4620      	mov	r0, r4
 8007970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007974:	08008b6c 	.word	0x08008b6c
 8007978:	08008b7d 	.word	0x08008b7d

0800797c <__hi0bits>:
 800797c:	0c03      	lsrs	r3, r0, #16
 800797e:	041b      	lsls	r3, r3, #16
 8007980:	b9d3      	cbnz	r3, 80079b8 <__hi0bits+0x3c>
 8007982:	0400      	lsls	r0, r0, #16
 8007984:	2310      	movs	r3, #16
 8007986:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800798a:	bf04      	itt	eq
 800798c:	0200      	lsleq	r0, r0, #8
 800798e:	3308      	addeq	r3, #8
 8007990:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007994:	bf04      	itt	eq
 8007996:	0100      	lsleq	r0, r0, #4
 8007998:	3304      	addeq	r3, #4
 800799a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800799e:	bf04      	itt	eq
 80079a0:	0080      	lsleq	r0, r0, #2
 80079a2:	3302      	addeq	r3, #2
 80079a4:	2800      	cmp	r0, #0
 80079a6:	db05      	blt.n	80079b4 <__hi0bits+0x38>
 80079a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079ac:	f103 0301 	add.w	r3, r3, #1
 80079b0:	bf08      	it	eq
 80079b2:	2320      	moveq	r3, #32
 80079b4:	4618      	mov	r0, r3
 80079b6:	4770      	bx	lr
 80079b8:	2300      	movs	r3, #0
 80079ba:	e7e4      	b.n	8007986 <__hi0bits+0xa>

080079bc <__lo0bits>:
 80079bc:	6803      	ldr	r3, [r0, #0]
 80079be:	f013 0207 	ands.w	r2, r3, #7
 80079c2:	d00c      	beq.n	80079de <__lo0bits+0x22>
 80079c4:	07d9      	lsls	r1, r3, #31
 80079c6:	d422      	bmi.n	8007a0e <__lo0bits+0x52>
 80079c8:	079a      	lsls	r2, r3, #30
 80079ca:	bf49      	itett	mi
 80079cc:	085b      	lsrmi	r3, r3, #1
 80079ce:	089b      	lsrpl	r3, r3, #2
 80079d0:	6003      	strmi	r3, [r0, #0]
 80079d2:	2201      	movmi	r2, #1
 80079d4:	bf5c      	itt	pl
 80079d6:	6003      	strpl	r3, [r0, #0]
 80079d8:	2202      	movpl	r2, #2
 80079da:	4610      	mov	r0, r2
 80079dc:	4770      	bx	lr
 80079de:	b299      	uxth	r1, r3
 80079e0:	b909      	cbnz	r1, 80079e6 <__lo0bits+0x2a>
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	2210      	movs	r2, #16
 80079e6:	b2d9      	uxtb	r1, r3
 80079e8:	b909      	cbnz	r1, 80079ee <__lo0bits+0x32>
 80079ea:	3208      	adds	r2, #8
 80079ec:	0a1b      	lsrs	r3, r3, #8
 80079ee:	0719      	lsls	r1, r3, #28
 80079f0:	bf04      	itt	eq
 80079f2:	091b      	lsreq	r3, r3, #4
 80079f4:	3204      	addeq	r2, #4
 80079f6:	0799      	lsls	r1, r3, #30
 80079f8:	bf04      	itt	eq
 80079fa:	089b      	lsreq	r3, r3, #2
 80079fc:	3202      	addeq	r2, #2
 80079fe:	07d9      	lsls	r1, r3, #31
 8007a00:	d403      	bmi.n	8007a0a <__lo0bits+0x4e>
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	f102 0201 	add.w	r2, r2, #1
 8007a08:	d003      	beq.n	8007a12 <__lo0bits+0x56>
 8007a0a:	6003      	str	r3, [r0, #0]
 8007a0c:	e7e5      	b.n	80079da <__lo0bits+0x1e>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	e7e3      	b.n	80079da <__lo0bits+0x1e>
 8007a12:	2220      	movs	r2, #32
 8007a14:	e7e1      	b.n	80079da <__lo0bits+0x1e>
	...

08007a18 <__i2b>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	f7ff ff05 	bl	800782c <_Balloc>
 8007a22:	4602      	mov	r2, r0
 8007a24:	b928      	cbnz	r0, 8007a32 <__i2b+0x1a>
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <__i2b+0x24>)
 8007a28:	4805      	ldr	r0, [pc, #20]	; (8007a40 <__i2b+0x28>)
 8007a2a:	f240 1145 	movw	r1, #325	; 0x145
 8007a2e:	f000 fcb7 	bl	80083a0 <__assert_func>
 8007a32:	2301      	movs	r3, #1
 8007a34:	6144      	str	r4, [r0, #20]
 8007a36:	6103      	str	r3, [r0, #16]
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08008b6c 	.word	0x08008b6c
 8007a40:	08008b7d 	.word	0x08008b7d

08007a44 <__multiply>:
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	4691      	mov	r9, r2
 8007a4a:	690a      	ldr	r2, [r1, #16]
 8007a4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	bfb8      	it	lt
 8007a54:	460b      	movlt	r3, r1
 8007a56:	460c      	mov	r4, r1
 8007a58:	bfbc      	itt	lt
 8007a5a:	464c      	movlt	r4, r9
 8007a5c:	4699      	movlt	r9, r3
 8007a5e:	6927      	ldr	r7, [r4, #16]
 8007a60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a64:	68a3      	ldr	r3, [r4, #8]
 8007a66:	6861      	ldr	r1, [r4, #4]
 8007a68:	eb07 060a 	add.w	r6, r7, sl
 8007a6c:	42b3      	cmp	r3, r6
 8007a6e:	b085      	sub	sp, #20
 8007a70:	bfb8      	it	lt
 8007a72:	3101      	addlt	r1, #1
 8007a74:	f7ff feda 	bl	800782c <_Balloc>
 8007a78:	b930      	cbnz	r0, 8007a88 <__multiply+0x44>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	4b44      	ldr	r3, [pc, #272]	; (8007b90 <__multiply+0x14c>)
 8007a7e:	4845      	ldr	r0, [pc, #276]	; (8007b94 <__multiply+0x150>)
 8007a80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a84:	f000 fc8c 	bl	80083a0 <__assert_func>
 8007a88:	f100 0514 	add.w	r5, r0, #20
 8007a8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a90:	462b      	mov	r3, r5
 8007a92:	2200      	movs	r2, #0
 8007a94:	4543      	cmp	r3, r8
 8007a96:	d321      	bcc.n	8007adc <__multiply+0x98>
 8007a98:	f104 0314 	add.w	r3, r4, #20
 8007a9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007aa0:	f109 0314 	add.w	r3, r9, #20
 8007aa4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007aa8:	9202      	str	r2, [sp, #8]
 8007aaa:	1b3a      	subs	r2, r7, r4
 8007aac:	3a15      	subs	r2, #21
 8007aae:	f022 0203 	bic.w	r2, r2, #3
 8007ab2:	3204      	adds	r2, #4
 8007ab4:	f104 0115 	add.w	r1, r4, #21
 8007ab8:	428f      	cmp	r7, r1
 8007aba:	bf38      	it	cc
 8007abc:	2204      	movcc	r2, #4
 8007abe:	9201      	str	r2, [sp, #4]
 8007ac0:	9a02      	ldr	r2, [sp, #8]
 8007ac2:	9303      	str	r3, [sp, #12]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d80c      	bhi.n	8007ae2 <__multiply+0x9e>
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	dd03      	ble.n	8007ad4 <__multiply+0x90>
 8007acc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d05b      	beq.n	8007b8c <__multiply+0x148>
 8007ad4:	6106      	str	r6, [r0, #16]
 8007ad6:	b005      	add	sp, #20
 8007ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007adc:	f843 2b04 	str.w	r2, [r3], #4
 8007ae0:	e7d8      	b.n	8007a94 <__multiply+0x50>
 8007ae2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ae6:	f1ba 0f00 	cmp.w	sl, #0
 8007aea:	d024      	beq.n	8007b36 <__multiply+0xf2>
 8007aec:	f104 0e14 	add.w	lr, r4, #20
 8007af0:	46a9      	mov	r9, r5
 8007af2:	f04f 0c00 	mov.w	ip, #0
 8007af6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007afa:	f8d9 1000 	ldr.w	r1, [r9]
 8007afe:	fa1f fb82 	uxth.w	fp, r2
 8007b02:	b289      	uxth	r1, r1
 8007b04:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b0c:	f8d9 2000 	ldr.w	r2, [r9]
 8007b10:	4461      	add	r1, ip
 8007b12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b16:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b1e:	b289      	uxth	r1, r1
 8007b20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b24:	4577      	cmp	r7, lr
 8007b26:	f849 1b04 	str.w	r1, [r9], #4
 8007b2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b2e:	d8e2      	bhi.n	8007af6 <__multiply+0xb2>
 8007b30:	9a01      	ldr	r2, [sp, #4]
 8007b32:	f845 c002 	str.w	ip, [r5, r2]
 8007b36:	9a03      	ldr	r2, [sp, #12]
 8007b38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	f1b9 0f00 	cmp.w	r9, #0
 8007b42:	d021      	beq.n	8007b88 <__multiply+0x144>
 8007b44:	6829      	ldr	r1, [r5, #0]
 8007b46:	f104 0c14 	add.w	ip, r4, #20
 8007b4a:	46ae      	mov	lr, r5
 8007b4c:	f04f 0a00 	mov.w	sl, #0
 8007b50:	f8bc b000 	ldrh.w	fp, [ip]
 8007b54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b58:	fb09 220b 	mla	r2, r9, fp, r2
 8007b5c:	4452      	add	r2, sl
 8007b5e:	b289      	uxth	r1, r1
 8007b60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b64:	f84e 1b04 	str.w	r1, [lr], #4
 8007b68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b70:	f8be 1000 	ldrh.w	r1, [lr]
 8007b74:	fb09 110a 	mla	r1, r9, sl, r1
 8007b78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b7c:	4567      	cmp	r7, ip
 8007b7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b82:	d8e5      	bhi.n	8007b50 <__multiply+0x10c>
 8007b84:	9a01      	ldr	r2, [sp, #4]
 8007b86:	50a9      	str	r1, [r5, r2]
 8007b88:	3504      	adds	r5, #4
 8007b8a:	e799      	b.n	8007ac0 <__multiply+0x7c>
 8007b8c:	3e01      	subs	r6, #1
 8007b8e:	e79b      	b.n	8007ac8 <__multiply+0x84>
 8007b90:	08008b6c 	.word	0x08008b6c
 8007b94:	08008b7d 	.word	0x08008b7d

08007b98 <__pow5mult>:
 8007b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b9c:	4615      	mov	r5, r2
 8007b9e:	f012 0203 	ands.w	r2, r2, #3
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	460f      	mov	r7, r1
 8007ba6:	d007      	beq.n	8007bb8 <__pow5mult+0x20>
 8007ba8:	4c25      	ldr	r4, [pc, #148]	; (8007c40 <__pow5mult+0xa8>)
 8007baa:	3a01      	subs	r2, #1
 8007bac:	2300      	movs	r3, #0
 8007bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bb2:	f7ff fe9d 	bl	80078f0 <__multadd>
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	10ad      	asrs	r5, r5, #2
 8007bba:	d03d      	beq.n	8007c38 <__pow5mult+0xa0>
 8007bbc:	69f4      	ldr	r4, [r6, #28]
 8007bbe:	b97c      	cbnz	r4, 8007be0 <__pow5mult+0x48>
 8007bc0:	2010      	movs	r0, #16
 8007bc2:	f7ff fd7f 	bl	80076c4 <malloc>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	61f0      	str	r0, [r6, #28]
 8007bca:	b928      	cbnz	r0, 8007bd8 <__pow5mult+0x40>
 8007bcc:	4b1d      	ldr	r3, [pc, #116]	; (8007c44 <__pow5mult+0xac>)
 8007bce:	481e      	ldr	r0, [pc, #120]	; (8007c48 <__pow5mult+0xb0>)
 8007bd0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007bd4:	f000 fbe4 	bl	80083a0 <__assert_func>
 8007bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bdc:	6004      	str	r4, [r0, #0]
 8007bde:	60c4      	str	r4, [r0, #12]
 8007be0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007be8:	b94c      	cbnz	r4, 8007bfe <__pow5mult+0x66>
 8007bea:	f240 2171 	movw	r1, #625	; 0x271
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7ff ff12 	bl	8007a18 <__i2b>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	6003      	str	r3, [r0, #0]
 8007bfe:	f04f 0900 	mov.w	r9, #0
 8007c02:	07eb      	lsls	r3, r5, #31
 8007c04:	d50a      	bpl.n	8007c1c <__pow5mult+0x84>
 8007c06:	4639      	mov	r1, r7
 8007c08:	4622      	mov	r2, r4
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7ff ff1a 	bl	8007a44 <__multiply>
 8007c10:	4639      	mov	r1, r7
 8007c12:	4680      	mov	r8, r0
 8007c14:	4630      	mov	r0, r6
 8007c16:	f7ff fe49 	bl	80078ac <_Bfree>
 8007c1a:	4647      	mov	r7, r8
 8007c1c:	106d      	asrs	r5, r5, #1
 8007c1e:	d00b      	beq.n	8007c38 <__pow5mult+0xa0>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	b938      	cbnz	r0, 8007c34 <__pow5mult+0x9c>
 8007c24:	4622      	mov	r2, r4
 8007c26:	4621      	mov	r1, r4
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7ff ff0b 	bl	8007a44 <__multiply>
 8007c2e:	6020      	str	r0, [r4, #0]
 8007c30:	f8c0 9000 	str.w	r9, [r0]
 8007c34:	4604      	mov	r4, r0
 8007c36:	e7e4      	b.n	8007c02 <__pow5mult+0x6a>
 8007c38:	4638      	mov	r0, r7
 8007c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3e:	bf00      	nop
 8007c40:	08008cc8 	.word	0x08008cc8
 8007c44:	08008afd 	.word	0x08008afd
 8007c48:	08008b7d 	.word	0x08008b7d

08007c4c <__lshift>:
 8007c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c50:	460c      	mov	r4, r1
 8007c52:	6849      	ldr	r1, [r1, #4]
 8007c54:	6923      	ldr	r3, [r4, #16]
 8007c56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c5a:	68a3      	ldr	r3, [r4, #8]
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	4691      	mov	r9, r2
 8007c60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c64:	f108 0601 	add.w	r6, r8, #1
 8007c68:	42b3      	cmp	r3, r6
 8007c6a:	db0b      	blt.n	8007c84 <__lshift+0x38>
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f7ff fddd 	bl	800782c <_Balloc>
 8007c72:	4605      	mov	r5, r0
 8007c74:	b948      	cbnz	r0, 8007c8a <__lshift+0x3e>
 8007c76:	4602      	mov	r2, r0
 8007c78:	4b28      	ldr	r3, [pc, #160]	; (8007d1c <__lshift+0xd0>)
 8007c7a:	4829      	ldr	r0, [pc, #164]	; (8007d20 <__lshift+0xd4>)
 8007c7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c80:	f000 fb8e 	bl	80083a0 <__assert_func>
 8007c84:	3101      	adds	r1, #1
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	e7ee      	b.n	8007c68 <__lshift+0x1c>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f100 0114 	add.w	r1, r0, #20
 8007c90:	f100 0210 	add.w	r2, r0, #16
 8007c94:	4618      	mov	r0, r3
 8007c96:	4553      	cmp	r3, sl
 8007c98:	db33      	blt.n	8007d02 <__lshift+0xb6>
 8007c9a:	6920      	ldr	r0, [r4, #16]
 8007c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ca0:	f104 0314 	add.w	r3, r4, #20
 8007ca4:	f019 091f 	ands.w	r9, r9, #31
 8007ca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cb0:	d02b      	beq.n	8007d0a <__lshift+0xbe>
 8007cb2:	f1c9 0e20 	rsb	lr, r9, #32
 8007cb6:	468a      	mov	sl, r1
 8007cb8:	2200      	movs	r2, #0
 8007cba:	6818      	ldr	r0, [r3, #0]
 8007cbc:	fa00 f009 	lsl.w	r0, r0, r9
 8007cc0:	4310      	orrs	r0, r2
 8007cc2:	f84a 0b04 	str.w	r0, [sl], #4
 8007cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cca:	459c      	cmp	ip, r3
 8007ccc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cd0:	d8f3      	bhi.n	8007cba <__lshift+0x6e>
 8007cd2:	ebac 0304 	sub.w	r3, ip, r4
 8007cd6:	3b15      	subs	r3, #21
 8007cd8:	f023 0303 	bic.w	r3, r3, #3
 8007cdc:	3304      	adds	r3, #4
 8007cde:	f104 0015 	add.w	r0, r4, #21
 8007ce2:	4584      	cmp	ip, r0
 8007ce4:	bf38      	it	cc
 8007ce6:	2304      	movcc	r3, #4
 8007ce8:	50ca      	str	r2, [r1, r3]
 8007cea:	b10a      	cbz	r2, 8007cf0 <__lshift+0xa4>
 8007cec:	f108 0602 	add.w	r6, r8, #2
 8007cf0:	3e01      	subs	r6, #1
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	612e      	str	r6, [r5, #16]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	f7ff fdd8 	bl	80078ac <_Bfree>
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d02:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d06:	3301      	adds	r3, #1
 8007d08:	e7c5      	b.n	8007c96 <__lshift+0x4a>
 8007d0a:	3904      	subs	r1, #4
 8007d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d10:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d14:	459c      	cmp	ip, r3
 8007d16:	d8f9      	bhi.n	8007d0c <__lshift+0xc0>
 8007d18:	e7ea      	b.n	8007cf0 <__lshift+0xa4>
 8007d1a:	bf00      	nop
 8007d1c:	08008b6c 	.word	0x08008b6c
 8007d20:	08008b7d 	.word	0x08008b7d

08007d24 <__mcmp>:
 8007d24:	b530      	push	{r4, r5, lr}
 8007d26:	6902      	ldr	r2, [r0, #16]
 8007d28:	690c      	ldr	r4, [r1, #16]
 8007d2a:	1b12      	subs	r2, r2, r4
 8007d2c:	d10e      	bne.n	8007d4c <__mcmp+0x28>
 8007d2e:	f100 0314 	add.w	r3, r0, #20
 8007d32:	3114      	adds	r1, #20
 8007d34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d44:	42a5      	cmp	r5, r4
 8007d46:	d003      	beq.n	8007d50 <__mcmp+0x2c>
 8007d48:	d305      	bcc.n	8007d56 <__mcmp+0x32>
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	bd30      	pop	{r4, r5, pc}
 8007d50:	4283      	cmp	r3, r0
 8007d52:	d3f3      	bcc.n	8007d3c <__mcmp+0x18>
 8007d54:	e7fa      	b.n	8007d4c <__mcmp+0x28>
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d5a:	e7f7      	b.n	8007d4c <__mcmp+0x28>

08007d5c <__mdiff>:
 8007d5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d60:	460c      	mov	r4, r1
 8007d62:	4606      	mov	r6, r0
 8007d64:	4611      	mov	r1, r2
 8007d66:	4620      	mov	r0, r4
 8007d68:	4690      	mov	r8, r2
 8007d6a:	f7ff ffdb 	bl	8007d24 <__mcmp>
 8007d6e:	1e05      	subs	r5, r0, #0
 8007d70:	d110      	bne.n	8007d94 <__mdiff+0x38>
 8007d72:	4629      	mov	r1, r5
 8007d74:	4630      	mov	r0, r6
 8007d76:	f7ff fd59 	bl	800782c <_Balloc>
 8007d7a:	b930      	cbnz	r0, 8007d8a <__mdiff+0x2e>
 8007d7c:	4b3a      	ldr	r3, [pc, #232]	; (8007e68 <__mdiff+0x10c>)
 8007d7e:	4602      	mov	r2, r0
 8007d80:	f240 2137 	movw	r1, #567	; 0x237
 8007d84:	4839      	ldr	r0, [pc, #228]	; (8007e6c <__mdiff+0x110>)
 8007d86:	f000 fb0b 	bl	80083a0 <__assert_func>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d94:	bfa4      	itt	ge
 8007d96:	4643      	movge	r3, r8
 8007d98:	46a0      	movge	r8, r4
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007da0:	bfa6      	itte	ge
 8007da2:	461c      	movge	r4, r3
 8007da4:	2500      	movge	r5, #0
 8007da6:	2501      	movlt	r5, #1
 8007da8:	f7ff fd40 	bl	800782c <_Balloc>
 8007dac:	b920      	cbnz	r0, 8007db8 <__mdiff+0x5c>
 8007dae:	4b2e      	ldr	r3, [pc, #184]	; (8007e68 <__mdiff+0x10c>)
 8007db0:	4602      	mov	r2, r0
 8007db2:	f240 2145 	movw	r1, #581	; 0x245
 8007db6:	e7e5      	b.n	8007d84 <__mdiff+0x28>
 8007db8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007dbc:	6926      	ldr	r6, [r4, #16]
 8007dbe:	60c5      	str	r5, [r0, #12]
 8007dc0:	f104 0914 	add.w	r9, r4, #20
 8007dc4:	f108 0514 	add.w	r5, r8, #20
 8007dc8:	f100 0e14 	add.w	lr, r0, #20
 8007dcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007dd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007dd4:	f108 0210 	add.w	r2, r8, #16
 8007dd8:	46f2      	mov	sl, lr
 8007dda:	2100      	movs	r1, #0
 8007ddc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007de0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007de4:	fa11 f88b 	uxtah	r8, r1, fp
 8007de8:	b299      	uxth	r1, r3
 8007dea:	0c1b      	lsrs	r3, r3, #16
 8007dec:	eba8 0801 	sub.w	r8, r8, r1
 8007df0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007df4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007df8:	fa1f f888 	uxth.w	r8, r8
 8007dfc:	1419      	asrs	r1, r3, #16
 8007dfe:	454e      	cmp	r6, r9
 8007e00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e04:	f84a 3b04 	str.w	r3, [sl], #4
 8007e08:	d8e8      	bhi.n	8007ddc <__mdiff+0x80>
 8007e0a:	1b33      	subs	r3, r6, r4
 8007e0c:	3b15      	subs	r3, #21
 8007e0e:	f023 0303 	bic.w	r3, r3, #3
 8007e12:	3304      	adds	r3, #4
 8007e14:	3415      	adds	r4, #21
 8007e16:	42a6      	cmp	r6, r4
 8007e18:	bf38      	it	cc
 8007e1a:	2304      	movcc	r3, #4
 8007e1c:	441d      	add	r5, r3
 8007e1e:	4473      	add	r3, lr
 8007e20:	469e      	mov	lr, r3
 8007e22:	462e      	mov	r6, r5
 8007e24:	4566      	cmp	r6, ip
 8007e26:	d30e      	bcc.n	8007e46 <__mdiff+0xea>
 8007e28:	f10c 0203 	add.w	r2, ip, #3
 8007e2c:	1b52      	subs	r2, r2, r5
 8007e2e:	f022 0203 	bic.w	r2, r2, #3
 8007e32:	3d03      	subs	r5, #3
 8007e34:	45ac      	cmp	ip, r5
 8007e36:	bf38      	it	cc
 8007e38:	2200      	movcc	r2, #0
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e40:	b17a      	cbz	r2, 8007e62 <__mdiff+0x106>
 8007e42:	6107      	str	r7, [r0, #16]
 8007e44:	e7a4      	b.n	8007d90 <__mdiff+0x34>
 8007e46:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e4a:	fa11 f288 	uxtah	r2, r1, r8
 8007e4e:	1414      	asrs	r4, r2, #16
 8007e50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e54:	b292      	uxth	r2, r2
 8007e56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e5a:	f84e 2b04 	str.w	r2, [lr], #4
 8007e5e:	1421      	asrs	r1, r4, #16
 8007e60:	e7e0      	b.n	8007e24 <__mdiff+0xc8>
 8007e62:	3f01      	subs	r7, #1
 8007e64:	e7ea      	b.n	8007e3c <__mdiff+0xe0>
 8007e66:	bf00      	nop
 8007e68:	08008b6c 	.word	0x08008b6c
 8007e6c:	08008b7d 	.word	0x08008b7d

08007e70 <__d2b>:
 8007e70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e74:	460f      	mov	r7, r1
 8007e76:	2101      	movs	r1, #1
 8007e78:	ec59 8b10 	vmov	r8, r9, d0
 8007e7c:	4616      	mov	r6, r2
 8007e7e:	f7ff fcd5 	bl	800782c <_Balloc>
 8007e82:	4604      	mov	r4, r0
 8007e84:	b930      	cbnz	r0, 8007e94 <__d2b+0x24>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <__d2b+0xac>)
 8007e8a:	4825      	ldr	r0, [pc, #148]	; (8007f20 <__d2b+0xb0>)
 8007e8c:	f240 310f 	movw	r1, #783	; 0x30f
 8007e90:	f000 fa86 	bl	80083a0 <__assert_func>
 8007e94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e9c:	bb2d      	cbnz	r5, 8007eea <__d2b+0x7a>
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ea4:	d026      	beq.n	8007ef4 <__d2b+0x84>
 8007ea6:	4668      	mov	r0, sp
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	f7ff fd87 	bl	80079bc <__lo0bits>
 8007eae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007eb2:	b1e8      	cbz	r0, 8007ef0 <__d2b+0x80>
 8007eb4:	f1c0 0320 	rsb	r3, r0, #32
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	40c2      	lsrs	r2, r0
 8007ec0:	6163      	str	r3, [r4, #20]
 8007ec2:	9201      	str	r2, [sp, #4]
 8007ec4:	9b01      	ldr	r3, [sp, #4]
 8007ec6:	61a3      	str	r3, [r4, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bf14      	ite	ne
 8007ecc:	2202      	movne	r2, #2
 8007ece:	2201      	moveq	r2, #1
 8007ed0:	6122      	str	r2, [r4, #16]
 8007ed2:	b1bd      	cbz	r5, 8007f04 <__d2b+0x94>
 8007ed4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ed8:	4405      	add	r5, r0
 8007eda:	603d      	str	r5, [r7, #0]
 8007edc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ee0:	6030      	str	r0, [r6, #0]
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	b003      	add	sp, #12
 8007ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eee:	e7d6      	b.n	8007e9e <__d2b+0x2e>
 8007ef0:	6161      	str	r1, [r4, #20]
 8007ef2:	e7e7      	b.n	8007ec4 <__d2b+0x54>
 8007ef4:	a801      	add	r0, sp, #4
 8007ef6:	f7ff fd61 	bl	80079bc <__lo0bits>
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	6163      	str	r3, [r4, #20]
 8007efe:	3020      	adds	r0, #32
 8007f00:	2201      	movs	r2, #1
 8007f02:	e7e5      	b.n	8007ed0 <__d2b+0x60>
 8007f04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f0c:	6038      	str	r0, [r7, #0]
 8007f0e:	6918      	ldr	r0, [r3, #16]
 8007f10:	f7ff fd34 	bl	800797c <__hi0bits>
 8007f14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f18:	e7e2      	b.n	8007ee0 <__d2b+0x70>
 8007f1a:	bf00      	nop
 8007f1c:	08008b6c 	.word	0x08008b6c
 8007f20:	08008b7d 	.word	0x08008b7d

08007f24 <__ssputs_r>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	688e      	ldr	r6, [r1, #8]
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	42be      	cmp	r6, r7
 8007f2e:	680b      	ldr	r3, [r1, #0]
 8007f30:	4682      	mov	sl, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	4690      	mov	r8, r2
 8007f36:	d82c      	bhi.n	8007f92 <__ssputs_r+0x6e>
 8007f38:	898a      	ldrh	r2, [r1, #12]
 8007f3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f3e:	d026      	beq.n	8007f8e <__ssputs_r+0x6a>
 8007f40:	6965      	ldr	r5, [r4, #20]
 8007f42:	6909      	ldr	r1, [r1, #16]
 8007f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f48:	eba3 0901 	sub.w	r9, r3, r1
 8007f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f50:	1c7b      	adds	r3, r7, #1
 8007f52:	444b      	add	r3, r9
 8007f54:	106d      	asrs	r5, r5, #1
 8007f56:	429d      	cmp	r5, r3
 8007f58:	bf38      	it	cc
 8007f5a:	461d      	movcc	r5, r3
 8007f5c:	0553      	lsls	r3, r2, #21
 8007f5e:	d527      	bpl.n	8007fb0 <__ssputs_r+0x8c>
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7ff fbd7 	bl	8007714 <_malloc_r>
 8007f66:	4606      	mov	r6, r0
 8007f68:	b360      	cbz	r0, 8007fc4 <__ssputs_r+0xa0>
 8007f6a:	6921      	ldr	r1, [r4, #16]
 8007f6c:	464a      	mov	r2, r9
 8007f6e:	f000 fa09 	bl	8008384 <memcpy>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	6126      	str	r6, [r4, #16]
 8007f80:	6165      	str	r5, [r4, #20]
 8007f82:	444e      	add	r6, r9
 8007f84:	eba5 0509 	sub.w	r5, r5, r9
 8007f88:	6026      	str	r6, [r4, #0]
 8007f8a:	60a5      	str	r5, [r4, #8]
 8007f8c:	463e      	mov	r6, r7
 8007f8e:	42be      	cmp	r6, r7
 8007f90:	d900      	bls.n	8007f94 <__ssputs_r+0x70>
 8007f92:	463e      	mov	r6, r7
 8007f94:	6820      	ldr	r0, [r4, #0]
 8007f96:	4632      	mov	r2, r6
 8007f98:	4641      	mov	r1, r8
 8007f9a:	f000 f9c9 	bl	8008330 <memmove>
 8007f9e:	68a3      	ldr	r3, [r4, #8]
 8007fa0:	1b9b      	subs	r3, r3, r6
 8007fa2:	60a3      	str	r3, [r4, #8]
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	4433      	add	r3, r6
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	2000      	movs	r0, #0
 8007fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	f000 fa3b 	bl	800842c <_realloc_r>
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d1e0      	bne.n	8007f7e <__ssputs_r+0x5a>
 8007fbc:	6921      	ldr	r1, [r4, #16]
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	f7ff fb34 	bl	800762c <_free_r>
 8007fc4:	230c      	movs	r3, #12
 8007fc6:	f8ca 3000 	str.w	r3, [sl]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fd6:	e7e9      	b.n	8007fac <__ssputs_r+0x88>

08007fd8 <_svfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	4698      	mov	r8, r3
 8007fde:	898b      	ldrh	r3, [r1, #12]
 8007fe0:	061b      	lsls	r3, r3, #24
 8007fe2:	b09d      	sub	sp, #116	; 0x74
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	460d      	mov	r5, r1
 8007fe8:	4614      	mov	r4, r2
 8007fea:	d50e      	bpl.n	800800a <_svfiprintf_r+0x32>
 8007fec:	690b      	ldr	r3, [r1, #16]
 8007fee:	b963      	cbnz	r3, 800800a <_svfiprintf_r+0x32>
 8007ff0:	2140      	movs	r1, #64	; 0x40
 8007ff2:	f7ff fb8f 	bl	8007714 <_malloc_r>
 8007ff6:	6028      	str	r0, [r5, #0]
 8007ff8:	6128      	str	r0, [r5, #16]
 8007ffa:	b920      	cbnz	r0, 8008006 <_svfiprintf_r+0x2e>
 8007ffc:	230c      	movs	r3, #12
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008004:	e0d0      	b.n	80081a8 <_svfiprintf_r+0x1d0>
 8008006:	2340      	movs	r3, #64	; 0x40
 8008008:	616b      	str	r3, [r5, #20]
 800800a:	2300      	movs	r3, #0
 800800c:	9309      	str	r3, [sp, #36]	; 0x24
 800800e:	2320      	movs	r3, #32
 8008010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008014:	f8cd 800c 	str.w	r8, [sp, #12]
 8008018:	2330      	movs	r3, #48	; 0x30
 800801a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80081c0 <_svfiprintf_r+0x1e8>
 800801e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008022:	f04f 0901 	mov.w	r9, #1
 8008026:	4623      	mov	r3, r4
 8008028:	469a      	mov	sl, r3
 800802a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802e:	b10a      	cbz	r2, 8008034 <_svfiprintf_r+0x5c>
 8008030:	2a25      	cmp	r2, #37	; 0x25
 8008032:	d1f9      	bne.n	8008028 <_svfiprintf_r+0x50>
 8008034:	ebba 0b04 	subs.w	fp, sl, r4
 8008038:	d00b      	beq.n	8008052 <_svfiprintf_r+0x7a>
 800803a:	465b      	mov	r3, fp
 800803c:	4622      	mov	r2, r4
 800803e:	4629      	mov	r1, r5
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ff6f 	bl	8007f24 <__ssputs_r>
 8008046:	3001      	adds	r0, #1
 8008048:	f000 80a9 	beq.w	800819e <_svfiprintf_r+0x1c6>
 800804c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800804e:	445a      	add	r2, fp
 8008050:	9209      	str	r2, [sp, #36]	; 0x24
 8008052:	f89a 3000 	ldrb.w	r3, [sl]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 80a1 	beq.w	800819e <_svfiprintf_r+0x1c6>
 800805c:	2300      	movs	r3, #0
 800805e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008066:	f10a 0a01 	add.w	sl, sl, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	9307      	str	r3, [sp, #28]
 800806e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008072:	931a      	str	r3, [sp, #104]	; 0x68
 8008074:	4654      	mov	r4, sl
 8008076:	2205      	movs	r2, #5
 8008078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807c:	4850      	ldr	r0, [pc, #320]	; (80081c0 <_svfiprintf_r+0x1e8>)
 800807e:	f7f8 f8b7 	bl	80001f0 <memchr>
 8008082:	9a04      	ldr	r2, [sp, #16]
 8008084:	b9d8      	cbnz	r0, 80080be <_svfiprintf_r+0xe6>
 8008086:	06d0      	lsls	r0, r2, #27
 8008088:	bf44      	itt	mi
 800808a:	2320      	movmi	r3, #32
 800808c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008090:	0711      	lsls	r1, r2, #28
 8008092:	bf44      	itt	mi
 8008094:	232b      	movmi	r3, #43	; 0x2b
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809a:	f89a 3000 	ldrb.w	r3, [sl]
 800809e:	2b2a      	cmp	r3, #42	; 0x2a
 80080a0:	d015      	beq.n	80080ce <_svfiprintf_r+0xf6>
 80080a2:	9a07      	ldr	r2, [sp, #28]
 80080a4:	4654      	mov	r4, sl
 80080a6:	2000      	movs	r0, #0
 80080a8:	f04f 0c0a 	mov.w	ip, #10
 80080ac:	4621      	mov	r1, r4
 80080ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b2:	3b30      	subs	r3, #48	; 0x30
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	d94d      	bls.n	8008154 <_svfiprintf_r+0x17c>
 80080b8:	b1b0      	cbz	r0, 80080e8 <_svfiprintf_r+0x110>
 80080ba:	9207      	str	r2, [sp, #28]
 80080bc:	e014      	b.n	80080e8 <_svfiprintf_r+0x110>
 80080be:	eba0 0308 	sub.w	r3, r0, r8
 80080c2:	fa09 f303 	lsl.w	r3, r9, r3
 80080c6:	4313      	orrs	r3, r2
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	46a2      	mov	sl, r4
 80080cc:	e7d2      	b.n	8008074 <_svfiprintf_r+0x9c>
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	1d19      	adds	r1, r3, #4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	9103      	str	r1, [sp, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfbb      	ittet	lt
 80080da:	425b      	neglt	r3, r3
 80080dc:	f042 0202 	orrlt.w	r2, r2, #2
 80080e0:	9307      	strge	r3, [sp, #28]
 80080e2:	9307      	strlt	r3, [sp, #28]
 80080e4:	bfb8      	it	lt
 80080e6:	9204      	strlt	r2, [sp, #16]
 80080e8:	7823      	ldrb	r3, [r4, #0]
 80080ea:	2b2e      	cmp	r3, #46	; 0x2e
 80080ec:	d10c      	bne.n	8008108 <_svfiprintf_r+0x130>
 80080ee:	7863      	ldrb	r3, [r4, #1]
 80080f0:	2b2a      	cmp	r3, #42	; 0x2a
 80080f2:	d134      	bne.n	800815e <_svfiprintf_r+0x186>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	1d1a      	adds	r2, r3, #4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	9203      	str	r2, [sp, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bfb8      	it	lt
 8008100:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008104:	3402      	adds	r4, #2
 8008106:	9305      	str	r3, [sp, #20]
 8008108:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80081d0 <_svfiprintf_r+0x1f8>
 800810c:	7821      	ldrb	r1, [r4, #0]
 800810e:	2203      	movs	r2, #3
 8008110:	4650      	mov	r0, sl
 8008112:	f7f8 f86d 	bl	80001f0 <memchr>
 8008116:	b138      	cbz	r0, 8008128 <_svfiprintf_r+0x150>
 8008118:	9b04      	ldr	r3, [sp, #16]
 800811a:	eba0 000a 	sub.w	r0, r0, sl
 800811e:	2240      	movs	r2, #64	; 0x40
 8008120:	4082      	lsls	r2, r0
 8008122:	4313      	orrs	r3, r2
 8008124:	3401      	adds	r4, #1
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812c:	4825      	ldr	r0, [pc, #148]	; (80081c4 <_svfiprintf_r+0x1ec>)
 800812e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008132:	2206      	movs	r2, #6
 8008134:	f7f8 f85c 	bl	80001f0 <memchr>
 8008138:	2800      	cmp	r0, #0
 800813a:	d038      	beq.n	80081ae <_svfiprintf_r+0x1d6>
 800813c:	4b22      	ldr	r3, [pc, #136]	; (80081c8 <_svfiprintf_r+0x1f0>)
 800813e:	bb1b      	cbnz	r3, 8008188 <_svfiprintf_r+0x1b0>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	3307      	adds	r3, #7
 8008144:	f023 0307 	bic.w	r3, r3, #7
 8008148:	3308      	adds	r3, #8
 800814a:	9303      	str	r3, [sp, #12]
 800814c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814e:	4433      	add	r3, r6
 8008150:	9309      	str	r3, [sp, #36]	; 0x24
 8008152:	e768      	b.n	8008026 <_svfiprintf_r+0x4e>
 8008154:	fb0c 3202 	mla	r2, ip, r2, r3
 8008158:	460c      	mov	r4, r1
 800815a:	2001      	movs	r0, #1
 800815c:	e7a6      	b.n	80080ac <_svfiprintf_r+0xd4>
 800815e:	2300      	movs	r3, #0
 8008160:	3401      	adds	r4, #1
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	4619      	mov	r1, r3
 8008166:	f04f 0c0a 	mov.w	ip, #10
 800816a:	4620      	mov	r0, r4
 800816c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008170:	3a30      	subs	r2, #48	; 0x30
 8008172:	2a09      	cmp	r2, #9
 8008174:	d903      	bls.n	800817e <_svfiprintf_r+0x1a6>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0c6      	beq.n	8008108 <_svfiprintf_r+0x130>
 800817a:	9105      	str	r1, [sp, #20]
 800817c:	e7c4      	b.n	8008108 <_svfiprintf_r+0x130>
 800817e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008182:	4604      	mov	r4, r0
 8008184:	2301      	movs	r3, #1
 8008186:	e7f0      	b.n	800816a <_svfiprintf_r+0x192>
 8008188:	ab03      	add	r3, sp, #12
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	462a      	mov	r2, r5
 800818e:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <_svfiprintf_r+0x1f4>)
 8008190:	a904      	add	r1, sp, #16
 8008192:	4638      	mov	r0, r7
 8008194:	f7fd fe64 	bl	8005e60 <_printf_float>
 8008198:	1c42      	adds	r2, r0, #1
 800819a:	4606      	mov	r6, r0
 800819c:	d1d6      	bne.n	800814c <_svfiprintf_r+0x174>
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	065b      	lsls	r3, r3, #25
 80081a2:	f53f af2d 	bmi.w	8008000 <_svfiprintf_r+0x28>
 80081a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081a8:	b01d      	add	sp, #116	; 0x74
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	ab03      	add	r3, sp, #12
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	462a      	mov	r2, r5
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <_svfiprintf_r+0x1f4>)
 80081b6:	a904      	add	r1, sp, #16
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7fe f8f5 	bl	80063a8 <_printf_i>
 80081be:	e7eb      	b.n	8008198 <_svfiprintf_r+0x1c0>
 80081c0:	08008cd4 	.word	0x08008cd4
 80081c4:	08008cde 	.word	0x08008cde
 80081c8:	08005e61 	.word	0x08005e61
 80081cc:	08007f25 	.word	0x08007f25
 80081d0:	08008cda 	.word	0x08008cda

080081d4 <__sflush_r>:
 80081d4:	898a      	ldrh	r2, [r1, #12]
 80081d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081da:	4605      	mov	r5, r0
 80081dc:	0710      	lsls	r0, r2, #28
 80081de:	460c      	mov	r4, r1
 80081e0:	d458      	bmi.n	8008294 <__sflush_r+0xc0>
 80081e2:	684b      	ldr	r3, [r1, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dc05      	bgt.n	80081f4 <__sflush_r+0x20>
 80081e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dc02      	bgt.n	80081f4 <__sflush_r+0x20>
 80081ee:	2000      	movs	r0, #0
 80081f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	d0f9      	beq.n	80081ee <__sflush_r+0x1a>
 80081fa:	2300      	movs	r3, #0
 80081fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008200:	682f      	ldr	r7, [r5, #0]
 8008202:	6a21      	ldr	r1, [r4, #32]
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	d032      	beq.n	800826e <__sflush_r+0x9a>
 8008208:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	075a      	lsls	r2, r3, #29
 800820e:	d505      	bpl.n	800821c <__sflush_r+0x48>
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	1ac0      	subs	r0, r0, r3
 8008214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008216:	b10b      	cbz	r3, 800821c <__sflush_r+0x48>
 8008218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800821a:	1ac0      	subs	r0, r0, r3
 800821c:	2300      	movs	r3, #0
 800821e:	4602      	mov	r2, r0
 8008220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008222:	6a21      	ldr	r1, [r4, #32]
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	d106      	bne.n	800823c <__sflush_r+0x68>
 800822e:	6829      	ldr	r1, [r5, #0]
 8008230:	291d      	cmp	r1, #29
 8008232:	d82b      	bhi.n	800828c <__sflush_r+0xb8>
 8008234:	4a29      	ldr	r2, [pc, #164]	; (80082dc <__sflush_r+0x108>)
 8008236:	410a      	asrs	r2, r1
 8008238:	07d6      	lsls	r6, r2, #31
 800823a:	d427      	bmi.n	800828c <__sflush_r+0xb8>
 800823c:	2200      	movs	r2, #0
 800823e:	6062      	str	r2, [r4, #4]
 8008240:	04d9      	lsls	r1, r3, #19
 8008242:	6922      	ldr	r2, [r4, #16]
 8008244:	6022      	str	r2, [r4, #0]
 8008246:	d504      	bpl.n	8008252 <__sflush_r+0x7e>
 8008248:	1c42      	adds	r2, r0, #1
 800824a:	d101      	bne.n	8008250 <__sflush_r+0x7c>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b903      	cbnz	r3, 8008252 <__sflush_r+0x7e>
 8008250:	6560      	str	r0, [r4, #84]	; 0x54
 8008252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008254:	602f      	str	r7, [r5, #0]
 8008256:	2900      	cmp	r1, #0
 8008258:	d0c9      	beq.n	80081ee <__sflush_r+0x1a>
 800825a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800825e:	4299      	cmp	r1, r3
 8008260:	d002      	beq.n	8008268 <__sflush_r+0x94>
 8008262:	4628      	mov	r0, r5
 8008264:	f7ff f9e2 	bl	800762c <_free_r>
 8008268:	2000      	movs	r0, #0
 800826a:	6360      	str	r0, [r4, #52]	; 0x34
 800826c:	e7c0      	b.n	80081f0 <__sflush_r+0x1c>
 800826e:	2301      	movs	r3, #1
 8008270:	4628      	mov	r0, r5
 8008272:	47b0      	blx	r6
 8008274:	1c41      	adds	r1, r0, #1
 8008276:	d1c8      	bne.n	800820a <__sflush_r+0x36>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0c5      	beq.n	800820a <__sflush_r+0x36>
 800827e:	2b1d      	cmp	r3, #29
 8008280:	d001      	beq.n	8008286 <__sflush_r+0xb2>
 8008282:	2b16      	cmp	r3, #22
 8008284:	d101      	bne.n	800828a <__sflush_r+0xb6>
 8008286:	602f      	str	r7, [r5, #0]
 8008288:	e7b1      	b.n	80081ee <__sflush_r+0x1a>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008290:	81a3      	strh	r3, [r4, #12]
 8008292:	e7ad      	b.n	80081f0 <__sflush_r+0x1c>
 8008294:	690f      	ldr	r7, [r1, #16]
 8008296:	2f00      	cmp	r7, #0
 8008298:	d0a9      	beq.n	80081ee <__sflush_r+0x1a>
 800829a:	0793      	lsls	r3, r2, #30
 800829c:	680e      	ldr	r6, [r1, #0]
 800829e:	bf08      	it	eq
 80082a0:	694b      	ldreq	r3, [r1, #20]
 80082a2:	600f      	str	r7, [r1, #0]
 80082a4:	bf18      	it	ne
 80082a6:	2300      	movne	r3, #0
 80082a8:	eba6 0807 	sub.w	r8, r6, r7
 80082ac:	608b      	str	r3, [r1, #8]
 80082ae:	f1b8 0f00 	cmp.w	r8, #0
 80082b2:	dd9c      	ble.n	80081ee <__sflush_r+0x1a>
 80082b4:	6a21      	ldr	r1, [r4, #32]
 80082b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082b8:	4643      	mov	r3, r8
 80082ba:	463a      	mov	r2, r7
 80082bc:	4628      	mov	r0, r5
 80082be:	47b0      	blx	r6
 80082c0:	2800      	cmp	r0, #0
 80082c2:	dc06      	bgt.n	80082d2 <__sflush_r+0xfe>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082d0:	e78e      	b.n	80081f0 <__sflush_r+0x1c>
 80082d2:	4407      	add	r7, r0
 80082d4:	eba8 0800 	sub.w	r8, r8, r0
 80082d8:	e7e9      	b.n	80082ae <__sflush_r+0xda>
 80082da:	bf00      	nop
 80082dc:	dfbffffe 	.word	0xdfbffffe

080082e0 <_fflush_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	690b      	ldr	r3, [r1, #16]
 80082e4:	4605      	mov	r5, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	b913      	cbnz	r3, 80082f0 <_fflush_r+0x10>
 80082ea:	2500      	movs	r5, #0
 80082ec:	4628      	mov	r0, r5
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	b118      	cbz	r0, 80082fa <_fflush_r+0x1a>
 80082f2:	6a03      	ldr	r3, [r0, #32]
 80082f4:	b90b      	cbnz	r3, 80082fa <_fflush_r+0x1a>
 80082f6:	f7fe fa05 	bl	8006704 <__sinit>
 80082fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0f3      	beq.n	80082ea <_fflush_r+0xa>
 8008302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008304:	07d0      	lsls	r0, r2, #31
 8008306:	d404      	bmi.n	8008312 <_fflush_r+0x32>
 8008308:	0599      	lsls	r1, r3, #22
 800830a:	d402      	bmi.n	8008312 <_fflush_r+0x32>
 800830c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830e:	f7fe fb10 	bl	8006932 <__retarget_lock_acquire_recursive>
 8008312:	4628      	mov	r0, r5
 8008314:	4621      	mov	r1, r4
 8008316:	f7ff ff5d 	bl	80081d4 <__sflush_r>
 800831a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800831c:	07da      	lsls	r2, r3, #31
 800831e:	4605      	mov	r5, r0
 8008320:	d4e4      	bmi.n	80082ec <_fflush_r+0xc>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	059b      	lsls	r3, r3, #22
 8008326:	d4e1      	bmi.n	80082ec <_fflush_r+0xc>
 8008328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800832a:	f7fe fb03 	bl	8006934 <__retarget_lock_release_recursive>
 800832e:	e7dd      	b.n	80082ec <_fflush_r+0xc>

08008330 <memmove>:
 8008330:	4288      	cmp	r0, r1
 8008332:	b510      	push	{r4, lr}
 8008334:	eb01 0402 	add.w	r4, r1, r2
 8008338:	d902      	bls.n	8008340 <memmove+0x10>
 800833a:	4284      	cmp	r4, r0
 800833c:	4623      	mov	r3, r4
 800833e:	d807      	bhi.n	8008350 <memmove+0x20>
 8008340:	1e43      	subs	r3, r0, #1
 8008342:	42a1      	cmp	r1, r4
 8008344:	d008      	beq.n	8008358 <memmove+0x28>
 8008346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800834a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800834e:	e7f8      	b.n	8008342 <memmove+0x12>
 8008350:	4402      	add	r2, r0
 8008352:	4601      	mov	r1, r0
 8008354:	428a      	cmp	r2, r1
 8008356:	d100      	bne.n	800835a <memmove+0x2a>
 8008358:	bd10      	pop	{r4, pc}
 800835a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800835e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008362:	e7f7      	b.n	8008354 <memmove+0x24>

08008364 <_sbrk_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d06      	ldr	r5, [pc, #24]	; (8008380 <_sbrk_r+0x1c>)
 8008368:	2300      	movs	r3, #0
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	f7f9 fc26 	bl	8001bc0 <_sbrk>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_sbrk_r+0x1a>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_sbrk_r+0x1a>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	20000b54 	.word	0x20000b54

08008384 <memcpy>:
 8008384:	440a      	add	r2, r1
 8008386:	4291      	cmp	r1, r2
 8008388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800838c:	d100      	bne.n	8008390 <memcpy+0xc>
 800838e:	4770      	bx	lr
 8008390:	b510      	push	{r4, lr}
 8008392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800839a:	4291      	cmp	r1, r2
 800839c:	d1f9      	bne.n	8008392 <memcpy+0xe>
 800839e:	bd10      	pop	{r4, pc}

080083a0 <__assert_func>:
 80083a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083a2:	4614      	mov	r4, r2
 80083a4:	461a      	mov	r2, r3
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <__assert_func+0x2c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4605      	mov	r5, r0
 80083ac:	68d8      	ldr	r0, [r3, #12]
 80083ae:	b14c      	cbz	r4, 80083c4 <__assert_func+0x24>
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <__assert_func+0x30>)
 80083b2:	9100      	str	r1, [sp, #0]
 80083b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083b8:	4906      	ldr	r1, [pc, #24]	; (80083d4 <__assert_func+0x34>)
 80083ba:	462b      	mov	r3, r5
 80083bc:	f000 f872 	bl	80084a4 <fiprintf>
 80083c0:	f000 f882 	bl	80084c8 <abort>
 80083c4:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <__assert_func+0x38>)
 80083c6:	461c      	mov	r4, r3
 80083c8:	e7f3      	b.n	80083b2 <__assert_func+0x12>
 80083ca:	bf00      	nop
 80083cc:	20000064 	.word	0x20000064
 80083d0:	08008cef 	.word	0x08008cef
 80083d4:	08008cfc 	.word	0x08008cfc
 80083d8:	08008d2a 	.word	0x08008d2a

080083dc <_calloc_r>:
 80083dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083de:	fba1 2402 	umull	r2, r4, r1, r2
 80083e2:	b94c      	cbnz	r4, 80083f8 <_calloc_r+0x1c>
 80083e4:	4611      	mov	r1, r2
 80083e6:	9201      	str	r2, [sp, #4]
 80083e8:	f7ff f994 	bl	8007714 <_malloc_r>
 80083ec:	9a01      	ldr	r2, [sp, #4]
 80083ee:	4605      	mov	r5, r0
 80083f0:	b930      	cbnz	r0, 8008400 <_calloc_r+0x24>
 80083f2:	4628      	mov	r0, r5
 80083f4:	b003      	add	sp, #12
 80083f6:	bd30      	pop	{r4, r5, pc}
 80083f8:	220c      	movs	r2, #12
 80083fa:	6002      	str	r2, [r0, #0]
 80083fc:	2500      	movs	r5, #0
 80083fe:	e7f8      	b.n	80083f2 <_calloc_r+0x16>
 8008400:	4621      	mov	r1, r4
 8008402:	f7fe fa18 	bl	8006836 <memset>
 8008406:	e7f4      	b.n	80083f2 <_calloc_r+0x16>

08008408 <__ascii_mbtowc>:
 8008408:	b082      	sub	sp, #8
 800840a:	b901      	cbnz	r1, 800840e <__ascii_mbtowc+0x6>
 800840c:	a901      	add	r1, sp, #4
 800840e:	b142      	cbz	r2, 8008422 <__ascii_mbtowc+0x1a>
 8008410:	b14b      	cbz	r3, 8008426 <__ascii_mbtowc+0x1e>
 8008412:	7813      	ldrb	r3, [r2, #0]
 8008414:	600b      	str	r3, [r1, #0]
 8008416:	7812      	ldrb	r2, [r2, #0]
 8008418:	1e10      	subs	r0, r2, #0
 800841a:	bf18      	it	ne
 800841c:	2001      	movne	r0, #1
 800841e:	b002      	add	sp, #8
 8008420:	4770      	bx	lr
 8008422:	4610      	mov	r0, r2
 8008424:	e7fb      	b.n	800841e <__ascii_mbtowc+0x16>
 8008426:	f06f 0001 	mvn.w	r0, #1
 800842a:	e7f8      	b.n	800841e <__ascii_mbtowc+0x16>

0800842c <_realloc_r>:
 800842c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008430:	4680      	mov	r8, r0
 8008432:	4614      	mov	r4, r2
 8008434:	460e      	mov	r6, r1
 8008436:	b921      	cbnz	r1, 8008442 <_realloc_r+0x16>
 8008438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800843c:	4611      	mov	r1, r2
 800843e:	f7ff b969 	b.w	8007714 <_malloc_r>
 8008442:	b92a      	cbnz	r2, 8008450 <_realloc_r+0x24>
 8008444:	f7ff f8f2 	bl	800762c <_free_r>
 8008448:	4625      	mov	r5, r4
 800844a:	4628      	mov	r0, r5
 800844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008450:	f000 f841 	bl	80084d6 <_malloc_usable_size_r>
 8008454:	4284      	cmp	r4, r0
 8008456:	4607      	mov	r7, r0
 8008458:	d802      	bhi.n	8008460 <_realloc_r+0x34>
 800845a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800845e:	d812      	bhi.n	8008486 <_realloc_r+0x5a>
 8008460:	4621      	mov	r1, r4
 8008462:	4640      	mov	r0, r8
 8008464:	f7ff f956 	bl	8007714 <_malloc_r>
 8008468:	4605      	mov	r5, r0
 800846a:	2800      	cmp	r0, #0
 800846c:	d0ed      	beq.n	800844a <_realloc_r+0x1e>
 800846e:	42bc      	cmp	r4, r7
 8008470:	4622      	mov	r2, r4
 8008472:	4631      	mov	r1, r6
 8008474:	bf28      	it	cs
 8008476:	463a      	movcs	r2, r7
 8008478:	f7ff ff84 	bl	8008384 <memcpy>
 800847c:	4631      	mov	r1, r6
 800847e:	4640      	mov	r0, r8
 8008480:	f7ff f8d4 	bl	800762c <_free_r>
 8008484:	e7e1      	b.n	800844a <_realloc_r+0x1e>
 8008486:	4635      	mov	r5, r6
 8008488:	e7df      	b.n	800844a <_realloc_r+0x1e>

0800848a <__ascii_wctomb>:
 800848a:	b149      	cbz	r1, 80084a0 <__ascii_wctomb+0x16>
 800848c:	2aff      	cmp	r2, #255	; 0xff
 800848e:	bf85      	ittet	hi
 8008490:	238a      	movhi	r3, #138	; 0x8a
 8008492:	6003      	strhi	r3, [r0, #0]
 8008494:	700a      	strbls	r2, [r1, #0]
 8008496:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800849a:	bf98      	it	ls
 800849c:	2001      	movls	r0, #1
 800849e:	4770      	bx	lr
 80084a0:	4608      	mov	r0, r1
 80084a2:	4770      	bx	lr

080084a4 <fiprintf>:
 80084a4:	b40e      	push	{r1, r2, r3}
 80084a6:	b503      	push	{r0, r1, lr}
 80084a8:	4601      	mov	r1, r0
 80084aa:	ab03      	add	r3, sp, #12
 80084ac:	4805      	ldr	r0, [pc, #20]	; (80084c4 <fiprintf+0x20>)
 80084ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b2:	6800      	ldr	r0, [r0, #0]
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	f000 f83f 	bl	8008538 <_vfiprintf_r>
 80084ba:	b002      	add	sp, #8
 80084bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c0:	b003      	add	sp, #12
 80084c2:	4770      	bx	lr
 80084c4:	20000064 	.word	0x20000064

080084c8 <abort>:
 80084c8:	b508      	push	{r3, lr}
 80084ca:	2006      	movs	r0, #6
 80084cc:	f000 fa0c 	bl	80088e8 <raise>
 80084d0:	2001      	movs	r0, #1
 80084d2:	f7f9 fafd 	bl	8001ad0 <_exit>

080084d6 <_malloc_usable_size_r>:
 80084d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084da:	1f18      	subs	r0, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	bfbc      	itt	lt
 80084e0:	580b      	ldrlt	r3, [r1, r0]
 80084e2:	18c0      	addlt	r0, r0, r3
 80084e4:	4770      	bx	lr

080084e6 <__sfputc_r>:
 80084e6:	6893      	ldr	r3, [r2, #8]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	b410      	push	{r4}
 80084ee:	6093      	str	r3, [r2, #8]
 80084f0:	da08      	bge.n	8008504 <__sfputc_r+0x1e>
 80084f2:	6994      	ldr	r4, [r2, #24]
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	db01      	blt.n	80084fc <__sfputc_r+0x16>
 80084f8:	290a      	cmp	r1, #10
 80084fa:	d103      	bne.n	8008504 <__sfputc_r+0x1e>
 80084fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008500:	f000 b934 	b.w	800876c <__swbuf_r>
 8008504:	6813      	ldr	r3, [r2, #0]
 8008506:	1c58      	adds	r0, r3, #1
 8008508:	6010      	str	r0, [r2, #0]
 800850a:	7019      	strb	r1, [r3, #0]
 800850c:	4608      	mov	r0, r1
 800850e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008512:	4770      	bx	lr

08008514 <__sfputs_r>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	4614      	mov	r4, r2
 800851c:	18d5      	adds	r5, r2, r3
 800851e:	42ac      	cmp	r4, r5
 8008520:	d101      	bne.n	8008526 <__sfputs_r+0x12>
 8008522:	2000      	movs	r0, #0
 8008524:	e007      	b.n	8008536 <__sfputs_r+0x22>
 8008526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852a:	463a      	mov	r2, r7
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff ffda 	bl	80084e6 <__sfputc_r>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d1f3      	bne.n	800851e <__sfputs_r+0xa>
 8008536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008538 <_vfiprintf_r>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	460d      	mov	r5, r1
 800853e:	b09d      	sub	sp, #116	; 0x74
 8008540:	4614      	mov	r4, r2
 8008542:	4698      	mov	r8, r3
 8008544:	4606      	mov	r6, r0
 8008546:	b118      	cbz	r0, 8008550 <_vfiprintf_r+0x18>
 8008548:	6a03      	ldr	r3, [r0, #32]
 800854a:	b90b      	cbnz	r3, 8008550 <_vfiprintf_r+0x18>
 800854c:	f7fe f8da 	bl	8006704 <__sinit>
 8008550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008552:	07d9      	lsls	r1, r3, #31
 8008554:	d405      	bmi.n	8008562 <_vfiprintf_r+0x2a>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	059a      	lsls	r2, r3, #22
 800855a:	d402      	bmi.n	8008562 <_vfiprintf_r+0x2a>
 800855c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800855e:	f7fe f9e8 	bl	8006932 <__retarget_lock_acquire_recursive>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	071b      	lsls	r3, r3, #28
 8008566:	d501      	bpl.n	800856c <_vfiprintf_r+0x34>
 8008568:	692b      	ldr	r3, [r5, #16]
 800856a:	b99b      	cbnz	r3, 8008594 <_vfiprintf_r+0x5c>
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f93a 	bl	80087e8 <__swsetup_r>
 8008574:	b170      	cbz	r0, 8008594 <_vfiprintf_r+0x5c>
 8008576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008578:	07dc      	lsls	r4, r3, #31
 800857a:	d504      	bpl.n	8008586 <_vfiprintf_r+0x4e>
 800857c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008580:	b01d      	add	sp, #116	; 0x74
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	0598      	lsls	r0, r3, #22
 800858a:	d4f7      	bmi.n	800857c <_vfiprintf_r+0x44>
 800858c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800858e:	f7fe f9d1 	bl	8006934 <__retarget_lock_release_recursive>
 8008592:	e7f3      	b.n	800857c <_vfiprintf_r+0x44>
 8008594:	2300      	movs	r3, #0
 8008596:	9309      	str	r3, [sp, #36]	; 0x24
 8008598:	2320      	movs	r3, #32
 800859a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800859e:	f8cd 800c 	str.w	r8, [sp, #12]
 80085a2:	2330      	movs	r3, #48	; 0x30
 80085a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008758 <_vfiprintf_r+0x220>
 80085a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085ac:	f04f 0901 	mov.w	r9, #1
 80085b0:	4623      	mov	r3, r4
 80085b2:	469a      	mov	sl, r3
 80085b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085b8:	b10a      	cbz	r2, 80085be <_vfiprintf_r+0x86>
 80085ba:	2a25      	cmp	r2, #37	; 0x25
 80085bc:	d1f9      	bne.n	80085b2 <_vfiprintf_r+0x7a>
 80085be:	ebba 0b04 	subs.w	fp, sl, r4
 80085c2:	d00b      	beq.n	80085dc <_vfiprintf_r+0xa4>
 80085c4:	465b      	mov	r3, fp
 80085c6:	4622      	mov	r2, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff ffa2 	bl	8008514 <__sfputs_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	f000 80a9 	beq.w	8008728 <_vfiprintf_r+0x1f0>
 80085d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085d8:	445a      	add	r2, fp
 80085da:	9209      	str	r2, [sp, #36]	; 0x24
 80085dc:	f89a 3000 	ldrb.w	r3, [sl]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 80a1 	beq.w	8008728 <_vfiprintf_r+0x1f0>
 80085e6:	2300      	movs	r3, #0
 80085e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f0:	f10a 0a01 	add.w	sl, sl, #1
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	9307      	str	r3, [sp, #28]
 80085f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085fc:	931a      	str	r3, [sp, #104]	; 0x68
 80085fe:	4654      	mov	r4, sl
 8008600:	2205      	movs	r2, #5
 8008602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008606:	4854      	ldr	r0, [pc, #336]	; (8008758 <_vfiprintf_r+0x220>)
 8008608:	f7f7 fdf2 	bl	80001f0 <memchr>
 800860c:	9a04      	ldr	r2, [sp, #16]
 800860e:	b9d8      	cbnz	r0, 8008648 <_vfiprintf_r+0x110>
 8008610:	06d1      	lsls	r1, r2, #27
 8008612:	bf44      	itt	mi
 8008614:	2320      	movmi	r3, #32
 8008616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800861a:	0713      	lsls	r3, r2, #28
 800861c:	bf44      	itt	mi
 800861e:	232b      	movmi	r3, #43	; 0x2b
 8008620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008624:	f89a 3000 	ldrb.w	r3, [sl]
 8008628:	2b2a      	cmp	r3, #42	; 0x2a
 800862a:	d015      	beq.n	8008658 <_vfiprintf_r+0x120>
 800862c:	9a07      	ldr	r2, [sp, #28]
 800862e:	4654      	mov	r4, sl
 8008630:	2000      	movs	r0, #0
 8008632:	f04f 0c0a 	mov.w	ip, #10
 8008636:	4621      	mov	r1, r4
 8008638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800863c:	3b30      	subs	r3, #48	; 0x30
 800863e:	2b09      	cmp	r3, #9
 8008640:	d94d      	bls.n	80086de <_vfiprintf_r+0x1a6>
 8008642:	b1b0      	cbz	r0, 8008672 <_vfiprintf_r+0x13a>
 8008644:	9207      	str	r2, [sp, #28]
 8008646:	e014      	b.n	8008672 <_vfiprintf_r+0x13a>
 8008648:	eba0 0308 	sub.w	r3, r0, r8
 800864c:	fa09 f303 	lsl.w	r3, r9, r3
 8008650:	4313      	orrs	r3, r2
 8008652:	9304      	str	r3, [sp, #16]
 8008654:	46a2      	mov	sl, r4
 8008656:	e7d2      	b.n	80085fe <_vfiprintf_r+0xc6>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	1d19      	adds	r1, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	9103      	str	r1, [sp, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfbb      	ittet	lt
 8008664:	425b      	neglt	r3, r3
 8008666:	f042 0202 	orrlt.w	r2, r2, #2
 800866a:	9307      	strge	r3, [sp, #28]
 800866c:	9307      	strlt	r3, [sp, #28]
 800866e:	bfb8      	it	lt
 8008670:	9204      	strlt	r2, [sp, #16]
 8008672:	7823      	ldrb	r3, [r4, #0]
 8008674:	2b2e      	cmp	r3, #46	; 0x2e
 8008676:	d10c      	bne.n	8008692 <_vfiprintf_r+0x15a>
 8008678:	7863      	ldrb	r3, [r4, #1]
 800867a:	2b2a      	cmp	r3, #42	; 0x2a
 800867c:	d134      	bne.n	80086e8 <_vfiprintf_r+0x1b0>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	1d1a      	adds	r2, r3, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	9203      	str	r2, [sp, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfb8      	it	lt
 800868a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800868e:	3402      	adds	r4, #2
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008768 <_vfiprintf_r+0x230>
 8008696:	7821      	ldrb	r1, [r4, #0]
 8008698:	2203      	movs	r2, #3
 800869a:	4650      	mov	r0, sl
 800869c:	f7f7 fda8 	bl	80001f0 <memchr>
 80086a0:	b138      	cbz	r0, 80086b2 <_vfiprintf_r+0x17a>
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	eba0 000a 	sub.w	r0, r0, sl
 80086a8:	2240      	movs	r2, #64	; 0x40
 80086aa:	4082      	lsls	r2, r0
 80086ac:	4313      	orrs	r3, r2
 80086ae:	3401      	adds	r4, #1
 80086b0:	9304      	str	r3, [sp, #16]
 80086b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b6:	4829      	ldr	r0, [pc, #164]	; (800875c <_vfiprintf_r+0x224>)
 80086b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086bc:	2206      	movs	r2, #6
 80086be:	f7f7 fd97 	bl	80001f0 <memchr>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d03f      	beq.n	8008746 <_vfiprintf_r+0x20e>
 80086c6:	4b26      	ldr	r3, [pc, #152]	; (8008760 <_vfiprintf_r+0x228>)
 80086c8:	bb1b      	cbnz	r3, 8008712 <_vfiprintf_r+0x1da>
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	3307      	adds	r3, #7
 80086ce:	f023 0307 	bic.w	r3, r3, #7
 80086d2:	3308      	adds	r3, #8
 80086d4:	9303      	str	r3, [sp, #12]
 80086d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d8:	443b      	add	r3, r7
 80086da:	9309      	str	r3, [sp, #36]	; 0x24
 80086dc:	e768      	b.n	80085b0 <_vfiprintf_r+0x78>
 80086de:	fb0c 3202 	mla	r2, ip, r2, r3
 80086e2:	460c      	mov	r4, r1
 80086e4:	2001      	movs	r0, #1
 80086e6:	e7a6      	b.n	8008636 <_vfiprintf_r+0xfe>
 80086e8:	2300      	movs	r3, #0
 80086ea:	3401      	adds	r4, #1
 80086ec:	9305      	str	r3, [sp, #20]
 80086ee:	4619      	mov	r1, r3
 80086f0:	f04f 0c0a 	mov.w	ip, #10
 80086f4:	4620      	mov	r0, r4
 80086f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086fa:	3a30      	subs	r2, #48	; 0x30
 80086fc:	2a09      	cmp	r2, #9
 80086fe:	d903      	bls.n	8008708 <_vfiprintf_r+0x1d0>
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0c6      	beq.n	8008692 <_vfiprintf_r+0x15a>
 8008704:	9105      	str	r1, [sp, #20]
 8008706:	e7c4      	b.n	8008692 <_vfiprintf_r+0x15a>
 8008708:	fb0c 2101 	mla	r1, ip, r1, r2
 800870c:	4604      	mov	r4, r0
 800870e:	2301      	movs	r3, #1
 8008710:	e7f0      	b.n	80086f4 <_vfiprintf_r+0x1bc>
 8008712:	ab03      	add	r3, sp, #12
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	462a      	mov	r2, r5
 8008718:	4b12      	ldr	r3, [pc, #72]	; (8008764 <_vfiprintf_r+0x22c>)
 800871a:	a904      	add	r1, sp, #16
 800871c:	4630      	mov	r0, r6
 800871e:	f7fd fb9f 	bl	8005e60 <_printf_float>
 8008722:	4607      	mov	r7, r0
 8008724:	1c78      	adds	r0, r7, #1
 8008726:	d1d6      	bne.n	80086d6 <_vfiprintf_r+0x19e>
 8008728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800872a:	07d9      	lsls	r1, r3, #31
 800872c:	d405      	bmi.n	800873a <_vfiprintf_r+0x202>
 800872e:	89ab      	ldrh	r3, [r5, #12]
 8008730:	059a      	lsls	r2, r3, #22
 8008732:	d402      	bmi.n	800873a <_vfiprintf_r+0x202>
 8008734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008736:	f7fe f8fd 	bl	8006934 <__retarget_lock_release_recursive>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	065b      	lsls	r3, r3, #25
 800873e:	f53f af1d 	bmi.w	800857c <_vfiprintf_r+0x44>
 8008742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008744:	e71c      	b.n	8008580 <_vfiprintf_r+0x48>
 8008746:	ab03      	add	r3, sp, #12
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	462a      	mov	r2, r5
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <_vfiprintf_r+0x22c>)
 800874e:	a904      	add	r1, sp, #16
 8008750:	4630      	mov	r0, r6
 8008752:	f7fd fe29 	bl	80063a8 <_printf_i>
 8008756:	e7e4      	b.n	8008722 <_vfiprintf_r+0x1ea>
 8008758:	08008cd4 	.word	0x08008cd4
 800875c:	08008cde 	.word	0x08008cde
 8008760:	08005e61 	.word	0x08005e61
 8008764:	08008515 	.word	0x08008515
 8008768:	08008cda 	.word	0x08008cda

0800876c <__swbuf_r>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	460e      	mov	r6, r1
 8008770:	4614      	mov	r4, r2
 8008772:	4605      	mov	r5, r0
 8008774:	b118      	cbz	r0, 800877e <__swbuf_r+0x12>
 8008776:	6a03      	ldr	r3, [r0, #32]
 8008778:	b90b      	cbnz	r3, 800877e <__swbuf_r+0x12>
 800877a:	f7fd ffc3 	bl	8006704 <__sinit>
 800877e:	69a3      	ldr	r3, [r4, #24]
 8008780:	60a3      	str	r3, [r4, #8]
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	071a      	lsls	r2, r3, #28
 8008786:	d525      	bpl.n	80087d4 <__swbuf_r+0x68>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	b31b      	cbz	r3, 80087d4 <__swbuf_r+0x68>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	6922      	ldr	r2, [r4, #16]
 8008790:	1a98      	subs	r0, r3, r2
 8008792:	6963      	ldr	r3, [r4, #20]
 8008794:	b2f6      	uxtb	r6, r6
 8008796:	4283      	cmp	r3, r0
 8008798:	4637      	mov	r7, r6
 800879a:	dc04      	bgt.n	80087a6 <__swbuf_r+0x3a>
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f7ff fd9e 	bl	80082e0 <_fflush_r>
 80087a4:	b9e0      	cbnz	r0, 80087e0 <__swbuf_r+0x74>
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	60a3      	str	r3, [r4, #8]
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	6022      	str	r2, [r4, #0]
 80087b2:	701e      	strb	r6, [r3, #0]
 80087b4:	6962      	ldr	r2, [r4, #20]
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d004      	beq.n	80087c6 <__swbuf_r+0x5a>
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	07db      	lsls	r3, r3, #31
 80087c0:	d506      	bpl.n	80087d0 <__swbuf_r+0x64>
 80087c2:	2e0a      	cmp	r6, #10
 80087c4:	d104      	bne.n	80087d0 <__swbuf_r+0x64>
 80087c6:	4621      	mov	r1, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff fd89 	bl	80082e0 <_fflush_r>
 80087ce:	b938      	cbnz	r0, 80087e0 <__swbuf_r+0x74>
 80087d0:	4638      	mov	r0, r7
 80087d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d4:	4621      	mov	r1, r4
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 f806 	bl	80087e8 <__swsetup_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d0d5      	beq.n	800878c <__swbuf_r+0x20>
 80087e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80087e4:	e7f4      	b.n	80087d0 <__swbuf_r+0x64>
	...

080087e8 <__swsetup_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4b2a      	ldr	r3, [pc, #168]	; (8008894 <__swsetup_r+0xac>)
 80087ec:	4605      	mov	r5, r0
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	460c      	mov	r4, r1
 80087f2:	b118      	cbz	r0, 80087fc <__swsetup_r+0x14>
 80087f4:	6a03      	ldr	r3, [r0, #32]
 80087f6:	b90b      	cbnz	r3, 80087fc <__swsetup_r+0x14>
 80087f8:	f7fd ff84 	bl	8006704 <__sinit>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008802:	0718      	lsls	r0, r3, #28
 8008804:	d422      	bmi.n	800884c <__swsetup_r+0x64>
 8008806:	06d9      	lsls	r1, r3, #27
 8008808:	d407      	bmi.n	800881a <__swsetup_r+0x32>
 800880a:	2309      	movs	r3, #9
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008812:	81a3      	strh	r3, [r4, #12]
 8008814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008818:	e034      	b.n	8008884 <__swsetup_r+0x9c>
 800881a:	0758      	lsls	r0, r3, #29
 800881c:	d512      	bpl.n	8008844 <__swsetup_r+0x5c>
 800881e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008820:	b141      	cbz	r1, 8008834 <__swsetup_r+0x4c>
 8008822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008826:	4299      	cmp	r1, r3
 8008828:	d002      	beq.n	8008830 <__swsetup_r+0x48>
 800882a:	4628      	mov	r0, r5
 800882c:	f7fe fefe 	bl	800762c <_free_r>
 8008830:	2300      	movs	r3, #0
 8008832:	6363      	str	r3, [r4, #52]	; 0x34
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	2300      	movs	r3, #0
 800883e:	6063      	str	r3, [r4, #4]
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f043 0308 	orr.w	r3, r3, #8
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	b94b      	cbnz	r3, 8008864 <__swsetup_r+0x7c>
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885a:	d003      	beq.n	8008864 <__swsetup_r+0x7c>
 800885c:	4621      	mov	r1, r4
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f884 	bl	800896c <__smakebuf_r>
 8008864:	89a0      	ldrh	r0, [r4, #12]
 8008866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800886a:	f010 0301 	ands.w	r3, r0, #1
 800886e:	d00a      	beq.n	8008886 <__swsetup_r+0x9e>
 8008870:	2300      	movs	r3, #0
 8008872:	60a3      	str	r3, [r4, #8]
 8008874:	6963      	ldr	r3, [r4, #20]
 8008876:	425b      	negs	r3, r3
 8008878:	61a3      	str	r3, [r4, #24]
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	b943      	cbnz	r3, 8008890 <__swsetup_r+0xa8>
 800887e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008882:	d1c4      	bne.n	800880e <__swsetup_r+0x26>
 8008884:	bd38      	pop	{r3, r4, r5, pc}
 8008886:	0781      	lsls	r1, r0, #30
 8008888:	bf58      	it	pl
 800888a:	6963      	ldrpl	r3, [r4, #20]
 800888c:	60a3      	str	r3, [r4, #8]
 800888e:	e7f4      	b.n	800887a <__swsetup_r+0x92>
 8008890:	2000      	movs	r0, #0
 8008892:	e7f7      	b.n	8008884 <__swsetup_r+0x9c>
 8008894:	20000064 	.word	0x20000064

08008898 <_raise_r>:
 8008898:	291f      	cmp	r1, #31
 800889a:	b538      	push	{r3, r4, r5, lr}
 800889c:	4604      	mov	r4, r0
 800889e:	460d      	mov	r5, r1
 80088a0:	d904      	bls.n	80088ac <_raise_r+0x14>
 80088a2:	2316      	movs	r3, #22
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80088ae:	b112      	cbz	r2, 80088b6 <_raise_r+0x1e>
 80088b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b4:	b94b      	cbnz	r3, 80088ca <_raise_r+0x32>
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f830 	bl	800891c <_getpid_r>
 80088bc:	462a      	mov	r2, r5
 80088be:	4601      	mov	r1, r0
 80088c0:	4620      	mov	r0, r4
 80088c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c6:	f000 b817 	b.w	80088f8 <_kill_r>
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d00a      	beq.n	80088e4 <_raise_r+0x4c>
 80088ce:	1c59      	adds	r1, r3, #1
 80088d0:	d103      	bne.n	80088da <_raise_r+0x42>
 80088d2:	2316      	movs	r3, #22
 80088d4:	6003      	str	r3, [r0, #0]
 80088d6:	2001      	movs	r0, #1
 80088d8:	e7e7      	b.n	80088aa <_raise_r+0x12>
 80088da:	2400      	movs	r4, #0
 80088dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088e0:	4628      	mov	r0, r5
 80088e2:	4798      	blx	r3
 80088e4:	2000      	movs	r0, #0
 80088e6:	e7e0      	b.n	80088aa <_raise_r+0x12>

080088e8 <raise>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <raise+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f7ff bfd3 	b.w	8008898 <_raise_r>
 80088f2:	bf00      	nop
 80088f4:	20000064 	.word	0x20000064

080088f8 <_kill_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	; (8008918 <_kill_r+0x20>)
 80088fc:	2300      	movs	r3, #0
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	f7f9 f8d3 	bl	8001ab0 <_kill>
 800890a:	1c43      	adds	r3, r0, #1
 800890c:	d102      	bne.n	8008914 <_kill_r+0x1c>
 800890e:	682b      	ldr	r3, [r5, #0]
 8008910:	b103      	cbz	r3, 8008914 <_kill_r+0x1c>
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	bd38      	pop	{r3, r4, r5, pc}
 8008916:	bf00      	nop
 8008918:	20000b54 	.word	0x20000b54

0800891c <_getpid_r>:
 800891c:	f7f9 b8c0 	b.w	8001aa0 <_getpid>

08008920 <__swhatbuf_r>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	460c      	mov	r4, r1
 8008924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008928:	2900      	cmp	r1, #0
 800892a:	b096      	sub	sp, #88	; 0x58
 800892c:	4615      	mov	r5, r2
 800892e:	461e      	mov	r6, r3
 8008930:	da0d      	bge.n	800894e <__swhatbuf_r+0x2e>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008938:	f04f 0100 	mov.w	r1, #0
 800893c:	bf0c      	ite	eq
 800893e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008942:	2340      	movne	r3, #64	; 0x40
 8008944:	2000      	movs	r0, #0
 8008946:	6031      	str	r1, [r6, #0]
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	b016      	add	sp, #88	; 0x58
 800894c:	bd70      	pop	{r4, r5, r6, pc}
 800894e:	466a      	mov	r2, sp
 8008950:	f000 f848 	bl	80089e4 <_fstat_r>
 8008954:	2800      	cmp	r0, #0
 8008956:	dbec      	blt.n	8008932 <__swhatbuf_r+0x12>
 8008958:	9901      	ldr	r1, [sp, #4]
 800895a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800895e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008962:	4259      	negs	r1, r3
 8008964:	4159      	adcs	r1, r3
 8008966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800896a:	e7eb      	b.n	8008944 <__swhatbuf_r+0x24>

0800896c <__smakebuf_r>:
 800896c:	898b      	ldrh	r3, [r1, #12]
 800896e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008970:	079d      	lsls	r5, r3, #30
 8008972:	4606      	mov	r6, r0
 8008974:	460c      	mov	r4, r1
 8008976:	d507      	bpl.n	8008988 <__smakebuf_r+0x1c>
 8008978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	2301      	movs	r3, #1
 8008982:	6163      	str	r3, [r4, #20]
 8008984:	b002      	add	sp, #8
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	ab01      	add	r3, sp, #4
 800898a:	466a      	mov	r2, sp
 800898c:	f7ff ffc8 	bl	8008920 <__swhatbuf_r>
 8008990:	9900      	ldr	r1, [sp, #0]
 8008992:	4605      	mov	r5, r0
 8008994:	4630      	mov	r0, r6
 8008996:	f7fe febd 	bl	8007714 <_malloc_r>
 800899a:	b948      	cbnz	r0, 80089b0 <__smakebuf_r+0x44>
 800899c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a0:	059a      	lsls	r2, r3, #22
 80089a2:	d4ef      	bmi.n	8008984 <__smakebuf_r+0x18>
 80089a4:	f023 0303 	bic.w	r3, r3, #3
 80089a8:	f043 0302 	orr.w	r3, r3, #2
 80089ac:	81a3      	strh	r3, [r4, #12]
 80089ae:	e7e3      	b.n	8008978 <__smakebuf_r+0xc>
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	6020      	str	r0, [r4, #0]
 80089b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	9b00      	ldr	r3, [sp, #0]
 80089bc:	6163      	str	r3, [r4, #20]
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	6120      	str	r0, [r4, #16]
 80089c2:	b15b      	cbz	r3, 80089dc <__smakebuf_r+0x70>
 80089c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 f81d 	bl	8008a08 <_isatty_r>
 80089ce:	b128      	cbz	r0, 80089dc <__smakebuf_r+0x70>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	f023 0303 	bic.w	r3, r3, #3
 80089d6:	f043 0301 	orr.w	r3, r3, #1
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	431d      	orrs	r5, r3
 80089e0:	81a5      	strh	r5, [r4, #12]
 80089e2:	e7cf      	b.n	8008984 <__smakebuf_r+0x18>

080089e4 <_fstat_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d07      	ldr	r5, [pc, #28]	; (8008a04 <_fstat_r+0x20>)
 80089e8:	2300      	movs	r3, #0
 80089ea:	4604      	mov	r4, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	4611      	mov	r1, r2
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	f7f9 f8bc 	bl	8001b6e <_fstat>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d102      	bne.n	8008a00 <_fstat_r+0x1c>
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	b103      	cbz	r3, 8008a00 <_fstat_r+0x1c>
 80089fe:	6023      	str	r3, [r4, #0]
 8008a00:	bd38      	pop	{r3, r4, r5, pc}
 8008a02:	bf00      	nop
 8008a04:	20000b54 	.word	0x20000b54

08008a08 <_isatty_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d06      	ldr	r5, [pc, #24]	; (8008a24 <_isatty_r+0x1c>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f9 f8bb 	bl	8001b8e <_isatty>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_isatty_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_isatty_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20000b54 	.word	0x20000b54

08008a28 <_init>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	bf00      	nop
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr

08008a34 <_fini>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr
